
Video.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002561c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003880  080258bc  080258bc  000358bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802913c  0802913c  0003913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000001c  08029154  08029154  00039154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  08029170  08029170  00039170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000118  24000000  0802917c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 CCMRAM        00002700  24000118  08029294  00040118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 TouchGFX_Framebuffer 00016c80  24002818  0802b994  00042818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028918  24019498  08042614  00059498  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24041db0  08042614  00061db0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00442498  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 003e22e0  90000000  90000000  00060000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 000001a8  903e22e0  903e22e0  004422e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000010  903e2488  903e2488  00442488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 Video_RGB_Buffer 00016c80  30000000  30000000  00060000  2**2
                  ALLOC
 16 .debug_info   0008e284  00000000  00000000  004424c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000103d3  00000000  00000000  004d074a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003570  00000000  00000000  004e0b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000030b8  00000000  00000000  004e4090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00044718  00000000  00000000  004e7148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00044ced  00000000  00000000  0052b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001895a4  00000000  00000000  0057054d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  006f9af1  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000e838  00000000  00000000  006f9bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24019498 	.word	0x24019498
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080258a4 	.word	0x080258a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2401949c 	.word	0x2401949c
 80002dc:	080258a4 	.word	0x080258a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_CRC_Init+0x3c>)
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <MX_CRC_Init+0x40>)
 8000388:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_CRC_Init+0x3c>)
 800038c:	2200      	movs	r2, #0
 800038e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_CRC_Init+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_CRC_Init+0x3c>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MX_CRC_Init+0x3c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_CRC_Init+0x3c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_CRC_Init+0x3c>)
 80003aa:	f001 fafd 	bl	80019a8 <HAL_CRC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003b4:	f000 fcb1 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	240194b4 	.word	0x240194b4
 80003c0:	58024c00 	.word	0x58024c00

080003c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <HAL_CRC_MspInit+0x3c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d10e      	bne.n	80003f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	58024c00 	.word	0x58024c00
 8000404:	58024400 	.word	0x58024400

08000408 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_DMA2D_Init+0x6c>)
 800040e:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <MX_DMA2D_Init+0x70>)
 8000410:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_DMA2D_Init+0x6c>)
 800041a:	2202      	movs	r2, #2
 800041c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000426:	2200      	movs	r2, #0
 8000428:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <MX_DMA2D_Init+0x6c>)
 800042c:	2202      	movs	r2, #2
 800042e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000430:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000432:	2200      	movs	r2, #0
 8000434:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000438:	2200      	movs	r2, #0
 800043a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <MX_DMA2D_Init+0x6c>)
 800043e:	2200      	movs	r2, #0
 8000440:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000444:	2200      	movs	r2, #0
 8000446:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <MX_DMA2D_Init+0x6c>)
 800044a:	2200      	movs	r2, #0
 800044c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000450:	f001 fb9c 	bl	8001b8c <HAL_DMA2D_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800045a:	f000 fc5e 	bl	8000d1a <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800045e:	2101      	movs	r1, #1
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_DMA2D_Init+0x6c>)
 8000462:	f001 fd07 	bl	8001e74 <HAL_DMA2D_ConfigLayer>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800046c:	f000 fc55 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	240194d8 	.word	0x240194d8
 8000478:	52001000 	.word	0x52001000

0800047c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <HAL_DMA2D_MspInit+0x48>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d116      	bne.n	80004bc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <HAL_DMA2D_MspInit+0x4c>)
 8000490:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000494:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <HAL_DMA2D_MspInit+0x4c>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_DMA2D_MspInit+0x4c>)
 80004a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80004a4:	f003 0310 	and.w	r3, r3, #16
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2105      	movs	r1, #5
 80004b0:	205a      	movs	r0, #90	; 0x5a
 80004b2:	f001 fa51 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80004b6:	205a      	movs	r0, #90	; 0x5a
 80004b8:	f001 fa68 	bl	800198c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	52001000 	.word	0x52001000
 80004c8:	58024400 	.word	0x58024400

080004cc <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <MX_FREERTOS_Init+0x38>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <MX_FREERTOS_Init+0x3c>)
 80004fa:	f008 f973 	bl	80087e4 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <MX_FREERTOS_Init+0x40>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <MX_FREERTOS_Init+0x44>)
 8000506:	2100      	movs	r1, #0
 8000508:	480b      	ldr	r0, [pc, #44]	; (8000538 <MX_FREERTOS_Init+0x48>)
 800050a:	f008 f96b 	bl	80087e4 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <MX_FREERTOS_Init+0x4c>)
 8000512:	6013      	str	r3, [r2, #0]

  /* creation of VideoTask */
  VideoTaskHandle = osThreadNew(videoTaskFunc, NULL, &VideoTask_attributes);
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <MX_FREERTOS_Init+0x50>)
 8000516:	2100      	movs	r1, #0
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <MX_FREERTOS_Init+0x54>)
 800051a:	f008 f963 	bl	80087e4 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <MX_FREERTOS_Init+0x58>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	08027858 	.word	0x08027858
 800052c:	0800054d 	.word	0x0800054d
 8000530:	24019540 	.word	0x24019540
 8000534:	0802787c 	.word	0x0802787c
 8000538:	0800c317 	.word	0x0800c317
 800053c:	24019544 	.word	0x24019544
 8000540:	080278a0 	.word	0x080278a0
 8000544:	08011671 	.word	0x08011671
 8000548:	24019548 	.word	0x24019548

0800054c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f008 f9d8 	bl	800890a <osDelay>
 800055a:	e7fb      	b.n	8000554 <StartDefaultTask+0x8>

0800055c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000572:	4b38      	ldr	r3, [pc, #224]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000578:	4a36      	ldr	r2, [pc, #216]	; (8000654 <MX_GPIO_Init+0xf8>)
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	f003 0310 	and.w	r3, r3, #16
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000590:	4b30      	ldr	r3, [pc, #192]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000596:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d2:	4a20      	ldr	r2, [pc, #128]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	4a18      	ldr	r2, [pc, #96]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_GPIO_Init+0xf8>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_GPIO_Init+0xf8>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <MX_GPIO_Init+0xf8>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0xf8>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0xfc>)
 800062c:	f001 fe80 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_GPIO_Init+0xfc>)
 8000648:	f001 fcc2 	bl	8001fd0 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	58024400 	.word	0x58024400
 8000658:	58020000 	.word	0x58020000

0800065c <MX_JPEG_Init>:
MDMA_HandleTypeDef hmdma_jpeg_infifo_th;
MDMA_HandleTypeDef hmdma_jpeg_outfifo_th;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_JPEG_Init+0x20>)
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <MX_JPEG_Init+0x24>)
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_JPEG_Init+0x20>)
 8000668:	f001 fea0 	bl	80023ac <HAL_JPEG_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000672:	f000 fb52 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2401954c 	.word	0x2401954c
 8000680:	52003000 	.word	0x52003000

08000684 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a56      	ldr	r2, [pc, #344]	; (80007ec <HAL_JPEG_MspInit+0x168>)
 8000692:	4293      	cmp	r3, r2
 8000694:	f040 80a6 	bne.w	80007e4 <HAL_JPEG_MspInit+0x160>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8000698:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <HAL_JPEG_MspInit+0x16c>)
 800069a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800069e:	4a54      	ldr	r2, [pc, #336]	; (80007f0 <HAL_JPEG_MspInit+0x16c>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80006a8:	4b51      	ldr	r3, [pc, #324]	; (80007f0 <HAL_JPEG_MspInit+0x16c>)
 80006aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80006b6:	4b4f      	ldr	r3, [pc, #316]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006b8:	4a4f      	ldr	r2, [pc, #316]	; (80007f8 <HAL_JPEG_MspInit+0x174>)
 80006ba:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80006bc:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006be:	2211      	movs	r2, #17
 80006c0:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80006c2:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80006c8:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80006ce:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80006e6:	4b43      	ldr	r3, [pc, #268]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80006ec:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80006f4:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006f6:	2220      	movs	r2, #32
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 80006fc:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8000702:	4b3c      	ldr	r3, [pc, #240]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 8000704:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800070a:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8000710:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8000716:	4837      	ldr	r0, [pc, #220]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 8000718:	f004 f96a 	bl	80049f0 <HAL_MDMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_JPEG_MspInit+0xa2>
    {
      Error_Handler();
 8000722:	f000 fafa 	bl	8000d1a <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	4832      	ldr	r0, [pc, #200]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 800072c:	f004 f9ac 	bl	8004a88 <HAL_MDMA_ConfigPostRequestMask>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_JPEG_MspInit+0xb6>
    {
      Error_Handler();
 8000736:	f000 faf0 	bl	8000d1a <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmain,hmdma_jpeg_infifo_th);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a2d      	ldr	r2, [pc, #180]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
 8000740:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <HAL_JPEG_MspInit+0x170>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000748:	4a2d      	ldr	r2, [pc, #180]	; (8000800 <HAL_JPEG_MspInit+0x17c>)
 800074a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800074e:	2213      	movs	r2, #19
 8000750:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800076c:	2208      	movs	r2, #8
 800076e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000772:	2220      	movs	r2, #32
 8000774:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800077e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000786:	2220      	movs	r2, #32
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 8000792:	f44f 3220 	mov.w	r2, #163840	; 0x28000
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 80007a6:	f004 f923 	bl	80049f0 <HAL_MDMA_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_JPEG_MspInit+0x130>
    {
      Error_Handler();
 80007b0:	f000 fab3 	bl	8000d1a <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 80007ba:	f004 f965 	bl	8004a88 <HAL_MDMA_ConfigPostRequestMask>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_JPEG_MspInit+0x144>
    {
      Error_Handler();
 80007c4:	f000 faa9 	bl	8000d1a <Error_Handler>
    }

    __HAL_LINKDMA(jpegHandle,hdmaout,hmdma_jpeg_outfifo_th);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <HAL_JPEG_MspInit+0x178>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 7, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2107      	movs	r1, #7
 80007d8:	2079      	movs	r0, #121	; 0x79
 80007da:	f001 f8bd 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80007de:	2079      	movs	r0, #121	; 0x79
 80007e0:	f001 f8d4 	bl	800198c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	52003000 	.word	0x52003000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	240195a4 	.word	0x240195a4
 80007f8:	52000200 	.word	0x52000200
 80007fc:	24019610 	.word	0x24019610
 8000800:	520001c0 	.word	0x520001c0

08000804 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2234      	movs	r2, #52	; 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f024 f89d 	bl	8024950 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000816:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000818:	4a38      	ldr	r2, [pc, #224]	; (80008fc <MX_LTDC_Init+0xf8>)
 800081a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800082e:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 95;
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000836:	225f      	movs	r2, #95	; 0x5f
 8000838:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800083c:	2201      	movs	r2, #1
 800083e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 143;
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000842:	228f      	movs	r2, #143	; 0x8f
 8000844:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 61;
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000848:	223d      	movs	r2, #61	; 0x3d
 800084a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 783;
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800084e:	f240 320f 	movw	r2, #783	; 0x30f
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 411;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000856:	f240 129b 	movw	r2, #411	; 0x19b
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 799;
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800085e:	f240 321f 	movw	r2, #799	; 0x31f
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 448;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000866:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_LTDC_Init+0xf4>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000884:	481c      	ldr	r0, [pc, #112]	; (80008f8 <MX_LTDC_Init+0xf4>)
 8000886:	f003 fd1b 	bl	80042c0 <HAL_LTDC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000890:	f000 fa43 	bl	8000d1a <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 216;
 8000898:	23d8      	movs	r3, #216	; 0xd8
 800089a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 216;
 80008a0:	23d8      	movs	r3, #216	; 0xd8
 80008a2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008a8:	23ff      	movs	r3, #255	; 0xff
 80008aa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008b6:	2305      	movs	r3, #5
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 216;
 80008be:	23d8      	movs	r3, #216	; 0xd8
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 216;
 80008c2:	23d8      	movs	r3, #216	; 0xd8
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <MX_LTDC_Init+0xf4>)
 80008e0:	f003 fe76 	bl	80045d0 <HAL_LTDC_ConfigLayer>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 80008ea:	f000 fa16 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3738      	adds	r7, #56	; 0x38
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2401967c 	.word	0x2401967c
 80008fc:	50001000 	.word	0x50001000

08000900 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b0be      	sub	sp, #248	; 0xf8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	22c0      	movs	r2, #192	; 0xc0
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f024 f815 	bl	8024950 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a86      	ldr	r2, [pc, #536]	; (8000b44 <HAL_LTDC_MspInit+0x244>)
 800092c:	4293      	cmp	r3, r2
 800092e:	f040 8105 	bne.w	8000b3c <HAL_LTDC_MspInit+0x23c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000932:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800093e:	2301      	movs	r3, #1
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 6;
 8000942:	2306      	movs	r3, #6
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 6;
 800094e:	2306      	movs	r3, #6
 8000950:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000952:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000956:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	4618      	mov	r0, r3
 8000968:	f006 f85e 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8000972:	f000 f9d2 	bl	8000d1a <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000976:	4b74      	ldr	r3, [pc, #464]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800097c:	4a72      	ldr	r2, [pc, #456]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000986:	4b70      	ldr	r3, [pc, #448]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
 8000992:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000994:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a6b      	ldr	r2, [pc, #428]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b65      	ldr	r3, [pc, #404]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a63      	ldr	r2, [pc, #396]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b61      	ldr	r3, [pc, #388]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b5d      	ldr	r3, [pc, #372]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a5c      	ldr	r2, [pc, #368]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b59      	ldr	r3, [pc, #356]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <HAL_LTDC_MspInit+0x248>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> LTDC_G6
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000a2a:	23c1      	movs	r3, #193	; 0xc1
 8000a2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a42:	230e      	movs	r3, #14
 8000a44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	483f      	ldr	r0, [pc, #252]	; (8000b4c <HAL_LTDC_MspInit+0x24c>)
 8000a50:	f001 fabe 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a54:	2378      	movs	r3, #120	; 0x78
 8000a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a6c:	230e      	movs	r3, #14
 8000a6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4835      	ldr	r0, [pc, #212]	; (8000b50 <HAL_LTDC_MspInit+0x250>)
 8000a7a:	f001 faa9 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a96:	2309      	movs	r3, #9
 8000a98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	482c      	ldr	r0, [pc, #176]	; (8000b54 <HAL_LTDC_MspInit+0x254>)
 8000aa4:	f001 fa94 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac2:	230e      	movs	r3, #14
 8000ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4822      	ldr	r0, [pc, #136]	; (8000b58 <HAL_LTDC_MspInit+0x258>)
 8000ad0:	f001 fa7e 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000ad4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aee:	230e      	movs	r3, #14
 8000af0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <HAL_LTDC_MspInit+0x254>)
 8000afc:	f001 fa68 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000b00:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000b04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b1a:	230e      	movs	r3, #14
 8000b1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <HAL_LTDC_MspInit+0x25c>)
 8000b28:	f001 fa52 	bl	8001fd0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2105      	movs	r1, #5
 8000b30:	2058      	movs	r0, #88	; 0x58
 8000b32:	f000 ff11 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b36:	2058      	movs	r0, #88	; 0x58
 8000b38:	f000 ff28 	bl	800198c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	37f8      	adds	r7, #248	; 0xf8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	50001000 	.word	0x50001000
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020800 	.word	0x58020800
 8000b50:	58020000 	.word	0x58020000
 8000b54:	58020400 	.word	0x58020400
 8000b58:	58021000 	.word	0x58021000
 8000b5c:	58020c00 	.word	0x58020c00

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fdd8 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f822 	bl	8000bb0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b6c:	f000 f8a8 	bl	8000cc0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f7ff fcf4 	bl	800055c <MX_GPIO_Init>
  MX_LTDC_Init();
 8000b74:	f7ff fe46 	bl	8000804 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000b78:	f000 f8f4 	bl	8000d64 <MX_QUADSPI_Init>
  MX_CRC_Init();
 8000b7c:	f7ff fc00 	bl	8000380 <MX_CRC_Init>
  MX_LIBJPEG_Init();
 8000b80:	f007 fd9a 	bl	80086b8 <MX_LIBJPEG_Init>
  MX_DMA2D_Init();
 8000b84:	f7ff fc40 	bl	8000408 <MX_DMA2D_Init>
  MX_MDMA_Init();
 8000b88:	f000 f8cc 	bl	8000d24 <MX_MDMA_Init>

  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000b8c:	f00b fbb6 	bl	800c2fc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  MX_JPEG_Init();
 8000b90:	f7ff fd64 	bl	800065c <MX_JPEG_Init>
  W25Q128JV_Init();
 8000b94:	f000 fc02 	bl	800139c <W25Q128JV_Init>
  W25Q128JV_MemoryMapped();
 8000b98:	f000 fd4e 	bl	8001638 <W25Q128JV_MemoryMapped>


  MX_TouchGFX_Init();
 8000b9c:	f00b fbb5 	bl	800c30a <MX_TouchGFX_Init>
//  W25Q128JV_Init();
//  W25Q128JV_MemoryMapped();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ba0:	f007 fdd6 	bl	8008750 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ba4:	f7ff fca4 	bl	80004f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ba8:	f007 fdf6 	bl	8008798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x4c>
	...

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09c      	sub	sp, #112	; 0x70
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	224c      	movs	r2, #76	; 0x4c
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f023 fec6 	bl	8024950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f023 fec0 	bl	8024950 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f004 faaf 	bl	8005134 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <SystemClock_Config+0x104>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	4a35      	ldr	r2, [pc, #212]	; (8000cb4 <SystemClock_Config+0x104>)
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <SystemClock_Config+0x104>)
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <SystemClock_Config+0x108>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a30      	ldr	r2, [pc, #192]	; (8000cb8 <SystemClock_Config+0x108>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <SystemClock_Config+0x108>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c08:	bf00      	nop
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <SystemClock_Config+0x108>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c16:	d1f8      	bne.n	8000c0a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c18:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <SystemClock_Config+0x10c>)
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1c:	f023 0303 	bic.w	r3, r3, #3
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <SystemClock_Config+0x10c>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c36:	2340      	movs	r3, #64	; 0x40
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c42:	2305      	movs	r3, #5
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c46:	23a0      	movs	r3, #160	; 0xa0
 8000c48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c4e:	2309      	movs	r3, #9
 8000c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 8000c52:	2310      	movs	r3, #16
 8000c54:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c56:	2308      	movs	r3, #8
 8000c58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fecc 	bl	8005a04 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c72:	f000 f852 	bl	8000d1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	233f      	movs	r3, #63	; 0x3f
 8000c78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c82:	2308      	movs	r3, #8
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c8a:	2340      	movs	r3, #64	; 0x40
 8000c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f005 fb0b 	bl	80062b8 <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000ca8:	f000 f837 	bl	8000d1a <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3770      	adds	r7, #112	; 0x70
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58000400 	.word	0x58000400
 8000cb8:	58024800 	.word	0x58024800
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0b0      	sub	sp, #192	; 0xc0
 8000cc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	22c0      	movs	r2, #192	; 0xc0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f023 fe3f 	bl	8024950 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000cd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f005 fe9f 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000cf0:	f000 f813 	bl	8000d1a <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	37c0      	adds	r7, #192	; 0xc0
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d0e:	f000 fd3f 	bl	8001790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1e:	b672      	cpsid	i
}
 8000d20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <Error_Handler+0x8>

08000d24 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
void MX_MDMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_MDMA_Init+0x3c>)
 8000d2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <MX_MDMA_Init+0x3c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_MDMA_Init+0x3c>)
 8000d3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 8, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	207a      	movs	r0, #122	; 0x7a
 8000d4e:	f000 fe03 	bl	8001958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d52:	207a      	movs	r0, #122	; 0x7a
 8000d54:	f000 fe1a 	bl	800198c <HAL_NVIC_EnableIRQ>

}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	58024400 	.word	0x58024400

08000d64 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d6a:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <MX_QUADSPI_Init+0x54>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d82:	2217      	movs	r2, #23
 8000d84:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_QUADSPI_Init+0x50>)
 8000da0:	f004 fa02 	bl	80051a8 <HAL_QSPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000daa:	f7ff ffb6 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24019724 	.word	0x24019724
 8000db8:	52005000 	.word	0x52005000

08000dbc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0bc      	sub	sp, #240	; 0xf0
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	22c0      	movs	r2, #192	; 0xc0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f023 fdb7 	bl	8024950 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a57      	ldr	r2, [pc, #348]	; (8000f44 <HAL_QSPI_MspInit+0x188>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f040 80a6 	bne.w	8000f3a <HAL_QSPI_MspInit+0x17e>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_CLKP;
 8000dfa:	2330      	movs	r3, #48	; 0x30
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fe10 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000e0e:	f7ff ff84 	bl	8000d1a <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e12:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a3c      	ldr	r2, [pc, #240]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <HAL_QSPI_MspInit+0x18c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ea2:	2309      	movs	r3, #9
 8000ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eac:	4619      	mov	r1, r3
 8000eae:	4827      	ldr	r0, [pc, #156]	; (8000f4c <HAL_QSPI_MspInit+0x190>)
 8000eb0:	f001 f88e 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ecc:	2309      	movs	r3, #9
 8000ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481d      	ldr	r0, [pc, #116]	; (8000f50 <HAL_QSPI_MspInit+0x194>)
 8000eda:	f001 f879 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000ede:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f02:	4619      	mov	r1, r3
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <HAL_QSPI_MspInit+0x198>)
 8000f06:	f001 f863 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f22:	230a      	movs	r3, #10
 8000f24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4808      	ldr	r0, [pc, #32]	; (8000f50 <HAL_QSPI_MspInit+0x194>)
 8000f30:	f001 f84e 	bl	8001fd0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 8000f34:	2010      	movs	r0, #16
 8000f36:	f001 fa15 	bl	8002364 <HAL_I2CEx_EnableFastModePlus>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	37f0      	adds	r7, #240	; 0xf0
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	52005000 	.word	0x52005000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58021000 	.word	0x58021000
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58020c00 	.word	0x58020c00

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x38>)
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_MspInit+0x38>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_MspInit+0x38>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f06f 0001 	mvn.w	r0, #1
 8000f84:	f000 fce8 	bl	8001958 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400

08000f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b090      	sub	sp, #64	; 0x40
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d827      	bhi.n	8000ff2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fcd6 	bl	8001958 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 fced 	bl	800198c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fb2:	4a29      	ldr	r2, [pc, #164]	; (8001058 <HAL_InitTick+0xc4>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <HAL_InitTick+0xc8>)
 8000fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_InitTick+0xc8>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_InitTick+0xc8>)
 8000fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd6:	f107 0210 	add.w	r2, r7, #16
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fcdf 	bl	80069a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <HAL_InitTick+0x6a>
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e02c      	b.n	8001050 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ff6:	f005 fcbf 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 8000ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000ffc:	e004      	b.n	8001008 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ffe:	f005 fcbb 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 8001002:	4603      	mov	r3, r0
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <HAL_InitTick+0xcc>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	0c9b      	lsrs	r3, r3, #18
 8001012:	3b01      	subs	r3, #1
 8001014:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_InitTick+0xd0>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_InitTick+0xd0>)
 8001020:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001024:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <HAL_InitTick+0xd0>)
 8001028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_InitTick+0xd0>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_InitTick+0xd0>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <HAL_InitTick+0xd0>)
 800103a:	f007 f863 	bl	8008104 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <HAL_InitTick+0xd0>)
 8001046:	f007 f8bf 	bl	80081c8 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3740      	adds	r7, #64	; 0x40
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2400000c 	.word	0x2400000c
 800105c:	58024400 	.word	0x58024400
 8001060:	431bde83 	.word	0x431bde83
 8001064:	24019770 	.word	0x24019770

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM2_IRQHandler+0x10>)
 800109a:	f007 f90d 	bl	80082b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24019770 	.word	0x24019770

080010a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <LTDC_IRQHandler+0x10>)
 80010ae:	f003 f9d7 	bl	8004460 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2401967c 	.word	0x2401967c

080010bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <DMA2D_IRQHandler+0x10>)
 80010c2:	f000 fdc7 	bl	8001c54 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	240194d8 	.word	0x240194d8

080010d0 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <JPEG_IRQHandler+0x10>)
 80010d6:	f001 fc54 	bl	8002982 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2401954c 	.word	0x2401954c

080010e4 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MDMA_IRQHandler+0x14>)
 80010ea:	f003 fdc7 	bl	8004c7c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MDMA_IRQHandler+0x18>)
 80010f0:	f003 fdc4 	bl	8004c7c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24019610 	.word	0x24019610
 80010fc:	240195a4 	.word	0x240195a4

08001100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_kill>:

int _kill(int pid, int sig)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800111a:	f023 fac5 	bl	80246a8 <__errno>
 800111e:	4603      	mov	r3, r0
 8001120:	2216      	movs	r2, #22
 8001122:	601a      	str	r2, [r3, #0]
	return -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_exit>:

void _exit (int status)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ffe7 	bl	8001110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001142:	e7fe      	b.n	8001142 <_exit+0x12>

08001144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e00a      	b.n	800116c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001156:	f3af 8000 	nop.w
 800115a:	4601      	mov	r1, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	60ba      	str	r2, [r7, #8]
 8001162:	b2ca      	uxtb	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf0      	blt.n	8001156 <_read+0x12>
	}

return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e009      	b.n	80011a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	3301      	adds	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dbf1      	blt.n	8001190 <_write+0x12>
	}
	return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_close>:

int _close(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	605a      	str	r2, [r3, #4]
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <_isatty>:

int _isatty(int file)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	return 1;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
	return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	; (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f023 fa2a 	bl	80246a8 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24080000 	.word	0x24080000
 8001280:	00000400 	.word	0x00000400
 8001284:	240197bc 	.word	0x240197bc
 8001288:	24041db0 	.word	0x24041db0

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <SystemInit+0xe4>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a36      	ldr	r2, [pc, #216]	; (8001370 <SystemInit+0xe4>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <SystemInit+0xe8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d807      	bhi.n	80012bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <SystemInit+0xe8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 030f 	bic.w	r3, r3, #15
 80012b4:	4a2f      	ldr	r2, [pc, #188]	; (8001374 <SystemInit+0xe8>)
 80012b6:	f043 0307 	orr.w	r3, r3, #7
 80012ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <SystemInit+0xec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <SystemInit+0xec>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <SystemInit+0xec>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SystemInit+0xec>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4929      	ldr	r1, [pc, #164]	; (8001378 <SystemInit+0xec>)
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <SystemInit+0xf0>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <SystemInit+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <SystemInit+0xe8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 030f 	bic.w	r3, r3, #15
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <SystemInit+0xe8>)
 80012f0:	f043 0307 	orr.w	r3, r3, #7
 80012f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SystemInit+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <SystemInit+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <SystemInit+0xec>)
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <SystemInit+0xf4>)
 800130c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SystemInit+0xec>)
 8001310:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <SystemInit+0xf8>)
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SystemInit+0xec>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <SystemInit+0xfc>)
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <SystemInit+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <SystemInit+0xec>)
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <SystemInit+0xfc>)
 8001324:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SystemInit+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <SystemInit+0xec>)
 800132e:	4a16      	ldr	r2, [pc, #88]	; (8001388 <SystemInit+0xfc>)
 8001330:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SystemInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <SystemInit+0xec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <SystemInit+0xec>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SystemInit+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <SystemInit+0x100>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <SystemInit+0x104>)
 8001350:	4013      	ands	r3, r2
 8001352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001356:	d202      	bcs.n	800135e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <SystemInit+0x108>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <SystemInit+0x10c>)
 8001360:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001364:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	5c001000 	.word	0x5c001000
 8001390:	ffff0000 	.word	0xffff0000
 8001394:	51008108 	.word	0x51008108
 8001398:	52004000 	.word	0x52004000

0800139c <W25Q128JV_Init>:
	return HAL_OK;
}

// Blocked function
HAL_StatusTypeDef W25Q128JV_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef     sCommand = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2238      	movs	r2, #56	; 0x38
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f023 fad1 	bl	8024950 <memset>
	//QSPI_AutoPollingTypeDef sConfig = {0};
	uint8_t reg;
	HAL_StatusTypeDef ret;

	if (State != W25Q128JV_INIT) {
 80013ae:	4ba0      	ldr	r3, [pc, #640]	; (8001630 <W25Q128JV_Init+0x294>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <W25Q128JV_Init+0x1e>
		return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e135      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}
	State = W25Q128JV_BUSY;
 80013ba:	4b9d      	ldr	r3, [pc, #628]	; (8001630 <W25Q128JV_Init+0x294>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c4:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction       = ENABLE_RESET;
 80013c6:	2366      	movs	r3, #102	; 0x66
 80013c8:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode          = QSPI_DATA_NONE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles       = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4619      	mov	r1, r3
 80013ee:	4891      	ldr	r0, [pc, #580]	; (8001634 <W25Q128JV_Init+0x298>)
 80013f0:	f003 ff4e 	bl	8005290 <HAL_QSPI_Command>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80013fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <W25Q128JV_Init+0x72>
	{
    	State = W25Q128JV_OK;
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <W25Q128JV_Init+0x294>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
		return ret;
 8001408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800140c:	e10b      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800140e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001412:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction       = RESET_DEVICE;
 8001414:	2399      	movs	r3, #153	; 0x99
 8001416:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode          = QSPI_DATA_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles       = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001430:	2300      	movs	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4619      	mov	r1, r3
 800143c:	487d      	ldr	r0, [pc, #500]	; (8001634 <W25Q128JV_Init+0x298>)
 800143e:	f003 ff27 	bl	8005290 <HAL_QSPI_Command>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001448:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <W25Q128JV_Init+0xc0>
	{
    	State = W25Q128JV_OK;
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <W25Q128JV_Init+0x294>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
		return ret;
 8001456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800145a:	e0e4      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	//HAL_Delay(100);

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800145c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001460:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction       = READ_STATUS_REG2_CMD;
 8001462:	2335      	movs	r3, #53	; 0x35
 8001464:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 800146e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles       = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001480:	2300      	movs	r3, #0
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData            = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4619      	mov	r1, r3
 8001490:	4868      	ldr	r0, [pc, #416]	; (8001634 <W25Q128JV_Init+0x298>)
 8001492:	f003 fefd 	bl	8005290 <HAL_QSPI_Command>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800149c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <W25Q128JV_Init+0x114>
	{
    	State = W25Q128JV_OK;
 80014a4:	4b62      	ldr	r3, [pc, #392]	; (8001630 <W25Q128JV_Init+0x294>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
		return ret;
 80014aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014ae:	e0ba      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4619      	mov	r1, r3
 80014b8:	485e      	ldr	r0, [pc, #376]	; (8001634 <W25Q128JV_Init+0x298>)
 80014ba:	f003 ffd9 	bl	8005470 <HAL_QSPI_Receive>
 80014be:	4603      	mov	r3, r0
 80014c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80014c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <W25Q128JV_Init+0x13c>
	{
    	State = W25Q128JV_OK;
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <W25Q128JV_Init+0x294>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
		return ret;
 80014d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014d6:	e0a6      	b.n	8001626 <W25Q128JV_Init+0x28a>
    	State = W25Q128JV_OK;
		return ret;
	}
#endif
	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode          = QSPI_DATA_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 80014dc:	2350      	movs	r3, #80	; 0x50
 80014de:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4619      	mov	r1, r3
 80014e8:	4852      	ldr	r0, [pc, #328]	; (8001634 <W25Q128JV_Init+0x298>)
 80014ea:	f003 fed1 	bl	8005290 <HAL_QSPI_Command>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <W25Q128JV_Init+0x164>
	{
    	State = W25Q128JV_OK;
 80014f4:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <W25Q128JV_Init+0x294>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
		return ret;
 80014fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014fe:	e092      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8001506:	2331      	movs	r3, #49	; 0x31
 8001508:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4619      	mov	r1, r3
 800151c:	4845      	ldr	r0, [pc, #276]	; (8001634 <W25Q128JV_Init+0x298>)
 800151e:	f003 feb7 	bl	8005290 <HAL_QSPI_Command>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <W25Q128JV_Init+0x198>
	{
    	State = W25Q128JV_OK;
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <W25Q128JV_Init+0x294>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
		return ret;
 800152e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001532:	e078      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001534:	1cfb      	adds	r3, r7, #3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4619      	mov	r1, r3
 800153c:	483d      	ldr	r0, [pc, #244]	; (8001634 <W25Q128JV_Init+0x298>)
 800153e:	f003 ff05 	bl	800534c <HAL_QSPI_Transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <W25Q128JV_Init+0x1b8>
	{
    	State = W25Q128JV_OK;
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <W25Q128JV_Init+0x294>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
		return ret;
 800154e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001552:	e068      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001558:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction       = READ_STATUS_REG3_CMD;
 800155a:	2315      	movs	r3, #21
 800155c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode          = QSPI_DATA_1_LINE;
 8001566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles       = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData            = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4619      	mov	r1, r3
 8001588:	482a      	ldr	r0, [pc, #168]	; (8001634 <W25Q128JV_Init+0x298>)
 800158a:	f003 fe81 	bl	8005290 <HAL_QSPI_Command>
 800158e:	4603      	mov	r3, r0
 8001590:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <W25Q128JV_Init+0x20c>
	{
    	State = W25Q128JV_OK;
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <W25Q128JV_Init+0x294>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
		return ret;
 80015a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015a6:	e03e      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
 80015a8:	1cfb      	adds	r3, r7, #3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4619      	mov	r1, r3
 80015b0:	4820      	ldr	r0, [pc, #128]	; (8001634 <W25Q128JV_Init+0x298>)
 80015b2:	f003 ff5d 	bl	8005470 <HAL_QSPI_Receive>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <W25Q128JV_Init+0x234>
	{
    	State = W25Q128JV_OK;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <W25Q128JV_Init+0x294>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
		return ret;
 80015ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015ce:	e02a      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 80015d0:	2311      	movs	r3, #17
 80015d2:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e4:	4619      	mov	r1, r3
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <W25Q128JV_Init+0x298>)
 80015e8:	f003 fe52 	bl	8005290 <HAL_QSPI_Command>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <W25Q128JV_Init+0x262>
	{
    	State = W25Q128JV_OK;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <W25Q128JV_Init+0x294>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
		return ret;
 80015f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015fc:	e013      	b.n	8001626 <W25Q128JV_Init+0x28a>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015fe:	1cfb      	adds	r3, r7, #3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4619      	mov	r1, r3
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <W25Q128JV_Init+0x298>)
 8001608:	f003 fea0 	bl	800534c <HAL_QSPI_Transmit>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <W25Q128JV_Init+0x282>
	{
    	State = W25Q128JV_OK;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <W25Q128JV_Init+0x294>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
		return ret;
 8001618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800161c:	e003      	b.n	8001626 <W25Q128JV_Init+0x28a>
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK)
	{
		return ret;
	}
#endif
	State = W25Q128JV_OK;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <W25Q128JV_Init+0x294>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3740      	adds	r7, #64	; 0x40
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	240197c0 	.word	0x240197c0
 8001634:	24019724 	.word	0x24019724

08001638 <W25Q128JV_MemoryMapped>:
	State = W25Q128JV_OK;
	return HAL_OK;
}

HAL_StatusTypeDef W25Q128JV_MemoryMapped(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b092      	sub	sp, #72	; 0x48
 800163c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef     sCommand = {0};
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	2238      	movs	r2, #56	; 0x38
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f023 f982 	bl	8024950 <memset>
	QSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
	HAL_StatusTypeDef ret;

	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 800165a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165e:	61bb      	str	r3, [r7, #24]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800166c:	2300      	movs	r3, #0
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.Instruction = FAST_READ_DUAL_OUTPUT;
 8001670:	233b      	movs	r3, #59	; 0x3b
 8001672:	60fb      	str	r3, [r7, #12]
    sCommand.DummyCycles = 8;
 8001674:	2308      	movs	r3, #8
 8001676:	623b      	str	r3, [r7, #32]
    sCommand.Address     = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800167c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode    = QSPI_DATA_2_LINES;
 8001682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.NbData      = 16*1024*1024;
 8001688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168c:	637b      	str	r3, [r7, #52]	; 0x34

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]

    if ((ret = HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg)) != HAL_OK)
 8001692:	1d3a      	adds	r2, r7, #4
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <W25Q128JV_MemoryMapped+0x88>)
 800169c:	f003 ff85 	bl	80055aa <HAL_QSPI_MemoryMapped>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80016a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <W25Q128JV_MemoryMapped+0x7c>
    {
		return ret;
 80016ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016b2:	e000      	b.n	80016b6 <W25Q128JV_MemoryMapped+0x7e>
    }
	return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3748      	adds	r7, #72	; 0x48
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	24019724 	.word	0x24019724

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c8:	f7ff fde0 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	; (8001710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f2:	f023 f8e7 	bl	80248c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fa33 	bl	8000b60 <main>
  bx  lr
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001700:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001704:	24000118 	.word	0x24000118
  ldr r2, =_sidata
 8001708:	0802917c 	.word	0x0802917c
  ldr r2, =_sbss
 800170c:	24019498 	.word	0x24019498
  ldr r4, =_ebss
 8001710:	24041db0 	.word	0x24041db0

08001714 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC3_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f000 f90f 	bl	8001942 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001724:	f004 ff7e 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_Init+0x68>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	4913      	ldr	r1, [pc, #76]	; (8001784 <HAL_Init+0x6c>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_Init+0x68>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_Init+0x6c>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_Init+0x70>)
 800175a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_Init+0x74>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fc16 	bl	8000f94 <HAL_InitTick>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e002      	b.n	8001778 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001772:	f7ff fbf1 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58024400 	.word	0x58024400
 8001784:	080278c4 	.word	0x080278c4
 8001788:	24000008 	.word	0x24000008
 800178c:	24000004 	.word	0x24000004

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	24000010 	.word	0x24000010
 80017b4:	240197c4 	.word	0x240197c4

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	240197c4 	.word	0x240197c4

080017d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetREVID+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0c1b      	lsrs	r3, r3, #16
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	5c001000 	.word	0x5c001000

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff4c 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001966:	f7ff ff63 	bl	8001830 <__NVIC_GetPriorityGrouping>
 800196a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7ff ffb3 	bl	80018dc <NVIC_EncodePriority>
 8001976:	4602      	mov	r2, r0
 8001978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff82 	bl	8001888 <__NVIC_SetPriority>
}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff56 	bl	800184c <__NVIC_EnableIRQ>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e054      	b.n	8001a64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f5b      	ldrb	r3, [r3, #29]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fcfa 	bl	80003c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_CRC_Init+0xc4>)
 80019e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0218 	bic.w	r2, r2, #24
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e00c      	b.n	8001a12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	461a      	mov	r2, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f834 	bl	8001a70 <HAL_CRCEx_Polynomial_Set>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e028      	b.n	8001a64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	795b      	ldrb	r3, [r3, #5]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	e004      	b.n	8001a30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6912      	ldr	r2, [r2, #16]
 8001a2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	04c11db7 	.word	0x04c11db7

08001a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a80:	231f      	movs	r3, #31
 8001a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
 8001a92:	e063      	b.n	8001b5c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a94:	bf00      	nop
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	613a      	str	r2, [r7, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <HAL_CRCEx_Polynomial_Set+0x44>
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b18      	cmp	r3, #24
 8001ab8:	d846      	bhi.n	8001b48 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b49 	.word	0x08001b49
 8001ac8:	08001b49 	.word	0x08001b49
 8001acc:	08001b49 	.word	0x08001b49
 8001ad0:	08001b49 	.word	0x08001b49
 8001ad4:	08001b49 	.word	0x08001b49
 8001ad8:	08001b49 	.word	0x08001b49
 8001adc:	08001b49 	.word	0x08001b49
 8001ae0:	08001b3d 	.word	0x08001b3d
 8001ae4:	08001b49 	.word	0x08001b49
 8001ae8:	08001b49 	.word	0x08001b49
 8001aec:	08001b49 	.word	0x08001b49
 8001af0:	08001b49 	.word	0x08001b49
 8001af4:	08001b49 	.word	0x08001b49
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b49 	.word	0x08001b49
 8001b00:	08001b31 	.word	0x08001b31
 8001b04:	08001b49 	.word	0x08001b49
 8001b08:	08001b49 	.word	0x08001b49
 8001b0c:	08001b49 	.word	0x08001b49
 8001b10:	08001b49 	.word	0x08001b49
 8001b14:	08001b49 	.word	0x08001b49
 8001b18:	08001b49 	.word	0x08001b49
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001b25 	.word	0x08001b25
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d913      	bls.n	8001b52 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b2e:	e010      	b.n	8001b52 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d90f      	bls.n	8001b56 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b3a:	e00c      	b.n	8001b56 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	d90b      	bls.n	8001b5a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b46:	e008      	b.n	8001b5a <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	75fb      	strb	r3, [r7, #23]
        break;
 8001b4c:	e006      	b.n	8001b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b4e:	bf00      	nop
 8001b50:	e004      	b.n	8001b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b5a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10d      	bne.n	8001b7e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0118 	bic.w	r1, r3, #24
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e04f      	b.n	8001c3e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fc62 	bl	800047c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_DMA2D_Init+0xbc>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6851      	ldr	r1, [r2, #4]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	69d2      	ldr	r2, [r2, #28]
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_DMA2D_Init+0xc0>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6891      	ldr	r1, [r2, #8]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6992      	ldr	r2, [r2, #24]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_DMA2D_Init+0xc4>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68d1      	ldr	r1, [r2, #12]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	051a      	lsls	r2, r3, #20
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	fff8ffbf 	.word	0xfff8ffbf
 8001c4c:	fffffef8 	.word	0xfffffef8
 8001c50:	ffff0000 	.word	0xffff0000

08001c54 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d026      	beq.n	8001cc4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d021      	beq.n	8001cc4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d026      	beq.n	8001d1c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2220      	movs	r2, #32
 8001cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d026      	beq.n	8001d74 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d021      	beq.n	8001d74 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2208      	movs	r2, #8
 8001d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2204      	movs	r2, #4
 8001d58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d013      	beq.n	8001da6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f853 	bl	8001e4c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01f      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01f      	beq.n	8001e44 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d01a      	beq.n	8001e44 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2210      	movs	r2, #16
 8001e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f80e 	bl	8001e60 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA2D_ConfigLayer+0x24>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e092      	b.n	8001fbe <HAL_DMA2D_ConfigLayer+0x14a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	3328      	adds	r3, #40	; 0x28
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001ecc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_DMA2D_ConfigLayer+0x158>)
 8001eda:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b0a      	cmp	r3, #10
 8001ee2:	d003      	beq.n	8001eec <HAL_DMA2D_ConfigLayer+0x78>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d107      	bne.n	8001efc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e005      	b.n	8001f08 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d120      	bne.n	8001f50 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	ea02 0103 	and.w	r1, r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b0a      	cmp	r3, #10
 8001f36:	d003      	beq.n	8001f40 <HAL_DMA2D_ConfigLayer+0xcc>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d135      	bne.n	8001fac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4e:	e02d      	b.n	8001fac <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b0b      	cmp	r3, #11
 8001f56:	d109      	bne.n	8001f6c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001f6a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	ea02 0103 	and.w	r1, r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b0a      	cmp	r3, #10
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA2D_ConfigLayer+0x12a>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	d106      	bne.n	8001fac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001faa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	ff33000f 	.word	0xff33000f

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_GPIO_Init+0x234>)
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fe2:	e194      	b.n	800230e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8186 	beq.w	8002308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b01      	cmp	r3, #1
 8002006:	d005      	beq.n	8002014 <HAL_GPIO_Init+0x44>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d130      	bne.n	8002076 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800204a:	2201      	movs	r2, #1
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 0201 	and.w	r2, r3, #1
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d123      	bne.n	8002106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	69b9      	ldr	r1, [r7, #24]
 8002102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0203 	and.w	r2, r3, #3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80e0 	beq.w	8002308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x238>)
 800214a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <HAL_GPIO_Init+0x238>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_GPIO_Init+0x238>)
 800215a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <HAL_GPIO_Init+0x23c>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_GPIO_Init+0x240>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d052      	beq.n	8002238 <HAL_GPIO_Init+0x268>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_GPIO_Init+0x244>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d031      	beq.n	80021fe <HAL_GPIO_Init+0x22e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_GPIO_Init+0x248>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <HAL_GPIO_Init+0x22a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_GPIO_Init+0x24c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x226>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_GPIO_Init+0x250>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <HAL_GPIO_Init+0x254>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1a      	ldr	r2, [pc, #104]	; (8002228 <HAL_GPIO_Init+0x258>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x21a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_GPIO_Init+0x25c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x216>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_GPIO_Init+0x260>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x212>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a17      	ldr	r2, [pc, #92]	; (8002234 <HAL_GPIO_Init+0x264>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x20e>
 80021da:	2309      	movs	r3, #9
 80021dc:	e02d      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021de:	230a      	movs	r3, #10
 80021e0:	e02b      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021e2:	2308      	movs	r3, #8
 80021e4:	e029      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e027      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e025      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e023      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e021      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e01f      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e01d      	b.n	800223a <HAL_GPIO_Init+0x26a>
 80021fe:	2301      	movs	r3, #1
 8002200:	e01b      	b.n	800223a <HAL_GPIO_Init+0x26a>
 8002202:	bf00      	nop
 8002204:	58000080 	.word	0x58000080
 8002208:	58024400 	.word	0x58024400
 800220c:	58000400 	.word	0x58000400
 8002210:	58020000 	.word	0x58020000
 8002214:	58020400 	.word	0x58020400
 8002218:	58020800 	.word	0x58020800
 800221c:	58020c00 	.word	0x58020c00
 8002220:	58021000 	.word	0x58021000
 8002224:	58021400 	.word	0x58021400
 8002228:	58021800 	.word	0x58021800
 800222c:	58021c00 	.word	0x58021c00
 8002230:	58022000 	.word	0x58022000
 8002234:	58022400 	.word	0x58022400
 8002238:	2300      	movs	r3, #0
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	f002 0203 	and.w	r2, r2, #3
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	4093      	lsls	r3, r2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224a:	4938      	ldr	r1, [pc, #224]	; (800232c <HAL_GPIO_Init+0x35c>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3301      	adds	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f ae63 	bne.w	8001fe4 <HAL_GPIO_Init+0x14>
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3724      	adds	r7, #36	; 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	58000400 	.word	0x58000400

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800236e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4906      	ldr	r1, [pc, #24]	; (80023a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58000400 	.word	0x58000400

080023ac <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e070      	b.n	80024a0 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe f956 	bl	8000684 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 800240e:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800243e:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_JPEG_Init+0xfc>)
 8002444:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_JPEG_Init+0x100>)
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fde1 	bl	8003020 <JPEG_Set_HuffEnc_Mem>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e018      	b.n	80024a0 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	08027ab4 	.word	0x08027ab4
 80024ac:	08027af4 	.word	0x08027af4

080024b0 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_JPEG_GetInfo+0x16>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e083      	b.n	80025d2 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d103      	bne.n	80024e0 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2210      	movs	r2, #16
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e017      	b.n	8002510 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e00c      	b.n	8002510 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d103      	bne.n	800250c <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2230      	movs	r2, #48	; 0x30
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e001      	b.n	8002510 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e060      	b.n	80025d2 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	b29a      	uxth	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	b29a      	uxth	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d003      	beq.n	800253c <HAL_JPEG_GetInfo+0x8c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d140      	bne.n	80025be <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d109      	bne.n	8002580 <HAL_JPEG_GetInfo+0xd0>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_JPEG_GetInfo+0xd0>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	e01d      	b.n	80025bc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_JPEG_GetInfo+0xea>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <HAL_JPEG_GetInfo+0xea>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	e010      	b.n	80025bc <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d109      	bne.n	80025b4 <HAL_JPEG_GetInfo+0x104>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_JPEG_GetInfo+0x104>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	e003      	b.n	80025bc <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80025ba:	e003      	b.n	80025c4 <HAL_JPEG_GetInfo+0x114>
 80025bc:	e002      	b.n	80025c4 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 fe1d 	bl	8004204 <JPEG_GetQuality>
 80025ca:	4602      	mov	r2, r0
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_JPEG_Decode_DMA+0x20>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_JPEG_Decode_DMA+0x20>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e04c      	b.n	8002698 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_JPEG_Decode_DMA+0x32>
 8002608:	2302      	movs	r3, #2
 800260a:	e045      	b.n	8002698 <HAL_JPEG_Decode_DMA+0xbe>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d134      	bne.n	800268a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2204      	movs	r2, #4
 8002624:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	f023 020f 	bic.w	r2, r3, #15
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 020e 	orr.w	r2, r3, #14
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 ff5d 	bl	8003524 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f001 fa7e 	bl	8003b6c <JPEG_DMA_StartProcess>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00f      	beq.n	8002696 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2206      	movs	r2, #6
 800267a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e006      	b.n	8002698 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	e000      	b.n	8002698 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d116      	bne.n	80026e8 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d033      	beq.n	8002742 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
 80026e6:	e02c      	b.n	8002742 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d126      	bne.n	8002742 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f043 0306 	orr.w	r3, r3, #6
 8002710:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800272e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43da      	mvns	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	400a      	ands	r2, r1
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b087      	sub	sp, #28
 8002754:	af02      	add	r7, sp, #8
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  uint32_t xfrSize;

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0d7      	b.n	800291e <HAL_JPEG_Resume+0x1ce>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b0c      	cmp	r3, #12
 8002778:	f040 80a4 	bne.w	80028c4 <HAL_JPEG_Resume+0x174>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d049      	beq.n	800281a <HAL_JPEG_Resume+0xca>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
        then MDMA In buffer size is 32 bytes

        else (MDMA In is triggred with JPEG In FIFO not full flag)
        then MDMA In buffer size is 4 bytes
        */
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	60bb      	str	r3, [r7, #8]

      if (xfrSize == 0UL)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_JPEG_Resume+0x68>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2206      	movs	r2, #6
 80027b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b2      	b.n	800291e <HAL_JPEG_Resume+0x1ce>
      }
      /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	fbb3 f1f1 	udiv	r1, r3, r1
 80027c6:	68b8      	ldr	r0, [r7, #8]
 80027c8:	fb00 f101 	mul.w	r1, r0, r1
 80027cc:	1a5b      	subs	r3, r3, r1
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28


      if (hjpeg->InDataLength > 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01e      	beq.n	800281a <HAL_JPEG_Resume+0xca>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4619      	mov	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3340      	adds	r3, #64	; 0x40
 80027ec:	461c      	mov	r4, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	2201      	movs	r2, #1
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	4622      	mov	r2, r4
 80027f8:	f002 f998 	bl	8004b2c <HAL_MDMA_Start_IT>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_JPEG_Resume+0xca>
                              hjpeg->InDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	f043 0204 	orr.w	r2, r3, #4
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2206      	movs	r2, #6
 8002812:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e081      	b.n	800291e <HAL_JPEG_Resume+0x1ce>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d07b      	beq.n	800291c <HAL_JPEG_Resume+0x1cc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_JPEG_Resume+0xf4>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f001 fb0d 	bl	8003e5c <JPEG_DMA_PollResidualData>
 8002842:	e06b      	b.n	800291c <HAL_JPEG_Resume+0x1cc>
        /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
          then MDMA out buffer size is 32 bytes
          else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
          then MDMA buffer size is 4 bytes
          */
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	60bb      	str	r3, [r7, #8]

        if (xfrSize == 0UL)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <HAL_JPEG_Resume+0x11a>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	f043 0204 	orr.w	r2, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2206      	movs	r2, #6
 8002862:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e059      	b.n	800291e <HAL_JPEG_Resume+0x1ce>
        }
        /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	fbb3 f1f1 	udiv	r1, r3, r1
 8002878:	68b8      	ldr	r0, [r7, #8]
 800287a:	fb00 f101 	mul.w	r1, r0, r1
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	1ad2      	subs	r2, r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Start DMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3344      	adds	r3, #68	; 0x44
 8002890:	4619      	mov	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	461c      	mov	r4, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2201      	movs	r2, #1
 800289e:	9200      	str	r2, [sp, #0]
 80028a0:	4622      	mov	r2, r4
 80028a2:	f002 f943 	bl	8004b2c <HAL_MDMA_Start_IT>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d037      	beq.n	800291c <HAL_JPEG_Resume+0x1cc>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b0:	f043 0204 	orr.w	r2, r3, #4
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2206      	movs	r2, #6
 80028bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02c      	b.n	800291e <HAL_JPEG_Resume+0x1ce>
      }

    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d125      	bne.n	800291c <HAL_JPEG_Resume+0x1cc>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_JPEG_Resume+0x19e>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f043 0306 	orr.w	r3, r3, #6
 80028ec:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_JPEG_Resume+0x1bc>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800290a:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	430a      	orrs	r2, r1
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bd90      	pop	{r4, r7, pc}

08002926 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3b03      	subs	r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d813      	bhi.n	80029c0 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d103      	bne.n	80029ac <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fe31 	bl	800360c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80029aa:	e00b      	b.n	80029c4 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d105      	bne.n	80029c4 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f001 f971 	bl	8003ca0 <JPEG_DMA_ContinueProcess>
      break;
 80029be:	e001      	b.n	80029c4 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80029c0:	bf00      	nop
 80029c2:	e000      	b.n	80029c6 <HAL_JPEG_IRQHandler+0x44>
      break;
 80029c4:	bf00      	nop
  }
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_JPEG_GetState>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG state
  */
HAL_JPEG_STATETypeDef HAL_JPEG_GetState(JPEG_HandleTypeDef *hjpeg)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return hjpeg->State;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80029dc:	b2db      	uxtb	r3, r3
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_JPEG_GetError>:
  * @param  hjpeg  pointer to a JPEG_HandleTypeDef structure that contains
  *              the configuration information for the specified JPEG.
  * @retval JPEG Error Code
  */
uint32_t HAL_JPEG_GetError(JPEG_HandleTypeDef *hjpeg)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return hjpeg->ErrorCode;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b08b      	sub	sp, #44	; 0x2c
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e020      	b.n	8002a5c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	4413      	add	r3, r2
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d90f      	bls.n	8002a50 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e055      	b.n	8002ae0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3201      	adds	r2, #1
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]
      p++;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	3301      	adds	r3, #1
 8002a48:	623b      	str	r3, [r7, #32]
      i--;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d9db      	bls.n	8002a1a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	4413      	add	r3, r2
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6a3a      	ldr	r2, [r7, #32]
 8002a70:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]
  p = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8002a80:	e027      	b.n	8002ad2 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	601a      	str	r2, [r3, #0]
      p++;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	3301      	adds	r3, #1
 8002a92:	623b      	str	r3, [r7, #32]
      code++;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d0eb      	beq.n	8002a82 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b1f      	cmp	r3, #31
 8002aae:	d901      	bls.n	8002ab4 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e015      	b.n	8002ae0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d301      	bcc.n	8002ac6 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00c      	b.n	8002ae0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
    si++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1dd      	bne.n	8002a9a <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	372c      	adds	r7, #44	; 0x2c
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002af8:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002afc:	6018      	str	r0, [r3, #0]
 8002afe:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b02:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8002b06:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002b08:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b0c:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	f107 020c 	add.w	r2, r7, #12
 8002b1a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002b1e:	f7ff ff70 	bl	8002a02 <JPEG_Bits_To_SizeCodes>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8002b28:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002b30:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8002b34:	e075      	b.n	8002c22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8002b3c:	e067      	b.n	8002c0e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002b3e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002b42:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3310      	adds	r3, #16
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8002b56:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002b5e:	23a0      	movs	r3, #160	; 0xa0
 8002b60:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002b64:	e021      	b.n	8002baa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002b66:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b6a:	2bf0      	cmp	r3, #240	; 0xf0
 8002b6c:	d103      	bne.n	8002b76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002b6e:	23a1      	movs	r3, #161	; 0xa1
 8002b70:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002b74:	e019      	b.n	8002baa <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002b76:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8002b84:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8002b90:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002baa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002bae:	2ba1      	cmp	r3, #161	; 0xa1
 8002bb0:	d901      	bls.n	8002bb6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e035      	b.n	8002c22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002bb6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bba:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002bbe:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bc6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bca:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002bd4:	3328      	adds	r3, #40	; 0x28
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002bdc:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002be0:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002be4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002be8:	4413      	add	r3, r2
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b2d9      	uxtb	r1, r3
 8002bf0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002bf4:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002bfe:	4413      	add	r3, r2
 8002c00:	460a      	mov	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
      k++;
 8002c04:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8002c0e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8002c12:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d38e      	bcc.n	8002b3e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002c38:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002c42:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8002c46:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002c48:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002c4c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002c56:	f107 0208 	add.w	r2, r7, #8
 8002c5a:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8002c5e:	f7ff fed0 	bl	8002a02 <JPEG_Bits_To_SizeCodes>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8002c68:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002c70:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8002c74:	e048      	b.n	8002d08 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8002c7c:	e03d      	b.n	8002cfa <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002c7e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002c82:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3310      	adds	r3, #16
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002c96:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002c9a:	2b0b      	cmp	r3, #11
 8002c9c:	d901      	bls.n	8002ca2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e032      	b.n	8002d08 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002ca2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002ca6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8002caa:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8002cae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cb2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002cb6:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8002cba:	6819      	ldr	r1, [r3, #0]
 8002cbc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002cc8:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002ccc:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8002cd0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b2d9      	uxtb	r1, r3
 8002cdc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002ce0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002cea:	4413      	add	r3, r2
 8002cec:	460a      	mov	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
      k++;
 8002cf0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8002cfa:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002cfe:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d3bb      	bcc.n	8002c7e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b09a      	sub	sp, #104	; 0x68
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d106      	bne.n	8002d3a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8002d34:	3318      	adds	r3, #24
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
 8002d38:	e00f      	b.n	8002d5a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8002d50:	3318      	adds	r3, #24
 8002d52:	663b      	str	r3, [r7, #96]	; 0x60
 8002d54:	e001      	b.n	8002d5a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e059      	b.n	8002e0e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d055      	beq.n	8002e0c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	f7ff ff60 	bl	8002c2c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8002d72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d7e:	e046      	b.n	8002e0e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8002d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d82:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002d8a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d8e:	3304      	adds	r3, #4
 8002d90:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8002d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d94:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002d98:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8002d9e:	e032      	b.n	8002e06 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8002da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002da2:	3b01      	subs	r3, #1
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8002da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da8:	3b04      	subs	r3, #4
 8002daa:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002dac:	f107 0214 	add.w	r2, r7, #20
 8002db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	3368      	adds	r3, #104	; 0x68
 8002dc4:	443b      	add	r3, r7
 8002dc6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002dd6:	f107 0214 	add.w	r2, r7, #20
 8002dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002de8:	3302      	adds	r3, #2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3368      	adds	r3, #104	; 0x68
 8002dee:	443b      	add	r3, r7
 8002df0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e04:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d8c9      	bhi.n	8002da0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3768      	adds	r7, #104	; 0x68
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e24:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002e28:	6018      	str	r0, [r3, #0]
 8002e2a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e2e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8002e32:	6019      	str	r1, [r3, #0]
 8002e34:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e38:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8002e3c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8002e3e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e42:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8002e52:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d10c      	bne.n	8002e76 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002e5c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e60:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e70:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002e74:	e01d      	b.n	8002eb2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002e76:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e7a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002e86:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8002e8a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10c      	bne.n	8002eae <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002e94:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002e98:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002ea4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ea8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8002eac:	e001      	b.n	8002eb2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0a8      	b.n	8003004 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8002eb2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002eb6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a0 	beq.w	8003002 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002ec2:	f107 0214 	add.w	r2, r7, #20
 8002ec6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002eca:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8002ece:	4611      	mov	r1, r2
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	f7ff fe0b 	bl	8002aec <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8002edc:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8002ee4:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8002ee8:	e08c      	b.n	8003004 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002eea:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002eee:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002ef8:	e00e      	b.n	8002f18 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8002efa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002efe:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8002f02:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002f04:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f08:	3304      	adds	r3, #4
 8002f0a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8002f0e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f12:	3301      	adds	r3, #1
 8002f14:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002f18:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d9ec      	bls.n	8002efa <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002f20:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f24:	4a3a      	ldr	r2, [pc, #232]	; (8003010 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002f26:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f28:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8002f32:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f36:	4a37      	ldr	r2, [pc, #220]	; (8003014 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002f38:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f3e:	3304      	adds	r3, #4
 8002f40:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8002f44:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f48:	4a33      	ldr	r2, [pc, #204]	; (8003018 <JPEG_Set_HuffAC_Mem+0x200>)
 8002f4a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002f4c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f50:	3304      	adds	r3, #4
 8002f52:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8002f56:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f5a:	4a30      	ldr	r2, [pc, #192]	; (800301c <JPEG_Set_HuffAC_Mem+0x204>)
 8002f5c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002f5e:	23a2      	movs	r3, #162	; 0xa2
 8002f60:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8002f64:	e049      	b.n	8002ffa <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002f66:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8002f70:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f74:	3b04      	subs	r3, #4
 8002f76:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002f7a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002f7e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8002f82:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f90:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002f94:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8002f98:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f9c:	3328      	adds	r3, #40	; 0x28
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8002fac:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002fb6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002fba:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8002fbe:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002fcc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002fd0:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8002fd4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002fe8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002ff8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002ffa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d8b1      	bhi.n	8002f66 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	0fd10fd0 	.word	0x0fd10fd0
 8003014:	0fd30fd2 	.word	0x0fd30fd2
 8003018:	0fd50fd4 	.word	0x0fd50fd4
 800301c:	0fd70fd6 	.word	0x0fd70fd6

08003020 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f84d 	bl	80030c8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8003036:	461a      	mov	r2, r3
 8003038:	491f      	ldr	r1, [pc, #124]	; (80030b8 <JPEG_Set_HuffEnc_Mem+0x98>)
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff feec 	bl	8002e18 <JPEG_Set_HuffAC_Mem>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	e030      	b.n	80030b0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8003056:	461a      	mov	r2, r3
 8003058:	4918      	ldr	r1, [pc, #96]	; (80030bc <JPEG_Set_HuffEnc_Mem+0x9c>)
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fedc 	bl	8002e18 <JPEG_Set_HuffAC_Mem>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	e020      	b.n	80030b0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8003076:	461a      	mov	r2, r3
 8003078:	4911      	ldr	r1, [pc, #68]	; (80030c0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fe49 	bl	8002d12 <JPEG_Set_HuffDC_Mem>
 8003080:	4603      	mov	r3, r0
 8003082:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	e010      	b.n	80030b0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8003096:	461a      	mov	r2, r3
 8003098:	490a      	ldr	r1, [pc, #40]	; (80030c4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fe39 	bl	8002d12 <JPEG_Set_HuffDC_Mem>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	e000      	b.n	80030b0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	0802790c 	.word	0x0802790c
 80030bc:	080279c0 	.word	0x080279c0
 80030c0:	080278d4 	.word	0x080278d4
 80030c4:	080278f0 	.word	0x080278f0

080030c8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08b      	sub	sp, #44	; 0x2c
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80030d0:	4b80      	ldr	r3, [pc, #512]	; (80032d4 <JPEG_Set_Huff_DHTMem+0x20c>)
 80030d2:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80030d4:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <JPEG_Set_Huff_DHTMem+0x210>)
 80030d6:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80030d8:	4b80      	ldr	r3, [pc, #512]	; (80032dc <JPEG_Set_Huff_DHTMem+0x214>)
 80030da:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80030dc:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <JPEG_Set_Huff_DHTMem+0x218>)
 80030de:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80030e8:	330c      	adds	r3, #12
 80030ea:	623b      	str	r3, [r7, #32]
  index = 16;
 80030ec:	2310      	movs	r3, #16
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80030f0:	e01d      	b.n	800312e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3b01      	subs	r3, #1
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	3b02      	subs	r3, #2
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8003106:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	3b03      	subs	r3, #3
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8003112:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	3a04      	subs	r2, #4
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800311c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	601a      	str	r2, [r3, #0]
    address--;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	3b04      	subs	r3, #4
 8003126:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	3b04      	subs	r3, #4
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	2b03      	cmp	r3, #3
 8003132:	d8de      	bhi.n	80030f2 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800313c:	3318      	adds	r3, #24
 800313e:	623b      	str	r3, [r7, #32]
  index = 12;
 8003140:	230c      	movs	r3, #12
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003144:	e021      	b.n	800318a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	3b01      	subs	r3, #1
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4413      	add	r3, r2
 800314e:	7c1b      	ldrb	r3, [r3, #16]
 8003150:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	3b02      	subs	r3, #2
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	440b      	add	r3, r1
 800315a:	7c1b      	ldrb	r3, [r3, #16]
 800315c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800315e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	3b03      	subs	r3, #3
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	440b      	add	r3, r1
 8003168:	7c1b      	ldrb	r3, [r3, #16]
 800316a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800316c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	3a04      	subs	r2, #4
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	440a      	add	r2, r1
 8003176:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003178:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	601a      	str	r2, [r3, #0]
    address--;
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	3b04      	subs	r3, #4
 8003182:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	3b04      	subs	r3, #4
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b03      	cmp	r3, #3
 800318e:	d8da      	bhi.n	8003146 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003198:	3328      	adds	r3, #40	; 0x28
 800319a:	623b      	str	r3, [r7, #32]
  index = 16;
 800319c:	2310      	movs	r3, #16
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80031a0:	e01d      	b.n	80031de <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	3b01      	subs	r3, #1
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	3b02      	subs	r3, #2
 80031b0:	69f9      	ldr	r1, [r7, #28]
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80031b6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	3b03      	subs	r3, #3
 80031bc:	69f9      	ldr	r1, [r7, #28]
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80031c2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	3a04      	subs	r2, #4
 80031c8:	69f9      	ldr	r1, [r7, #28]
 80031ca:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80031cc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	601a      	str	r2, [r3, #0]
    address--;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	3b04      	subs	r3, #4
 80031d6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	3b04      	subs	r3, #4
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d8de      	bhi.n	80031a2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80031ec:	33cc      	adds	r3, #204	; 0xcc
 80031ee:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <JPEG_Set_Huff_DHTMem+0x21c>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003200:	021a      	lsls	r2, r3, #8
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	3b04      	subs	r3, #4
 800321a:	623b      	str	r3, [r7, #32]
  index = 160;
 800321c:	23a0      	movs	r3, #160	; 0xa0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003220:	e021      	b.n	8003266 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	3b01      	subs	r3, #1
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	7c1b      	ldrb	r3, [r3, #16]
 800322c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	3b02      	subs	r3, #2
 8003232:	69f9      	ldr	r1, [r7, #28]
 8003234:	440b      	add	r3, r1
 8003236:	7c1b      	ldrb	r3, [r3, #16]
 8003238:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800323a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	3b03      	subs	r3, #3
 8003240:	69f9      	ldr	r1, [r7, #28]
 8003242:	440b      	add	r3, r1
 8003244:	7c1b      	ldrb	r3, [r3, #16]
 8003246:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8003248:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	3a04      	subs	r2, #4
 800324e:	69f9      	ldr	r1, [r7, #28]
 8003250:	440a      	add	r2, r1
 8003252:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8003254:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	601a      	str	r2, [r3, #0]
    address--;
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	3b04      	subs	r3, #4
 800325e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3b04      	subs	r3, #4
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	2b03      	cmp	r3, #3
 800326a:	d8da      	bhi.n	8003222 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003274:	33cc      	adds	r3, #204	; 0xcc
 8003276:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	061a      	lsls	r2, r3, #24
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	431a      	orrs	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80032a2:	33dc      	adds	r3, #220	; 0xdc
 80032a4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <JPEG_Set_Huff_DHTMem+0x21c>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	7bdb      	ldrb	r3, [r3, #15]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	7b92      	ldrb	r2, [r2, #14]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	3b04      	subs	r3, #4
 80032cc:	623b      	str	r3, [r7, #32]
  index = 12;
 80032ce:	230c      	movs	r3, #12
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80032d2:	e027      	b.n	8003324 <JPEG_Set_Huff_DHTMem+0x25c>
 80032d4:	0802790c 	.word	0x0802790c
 80032d8:	080279c0 	.word	0x080279c0
 80032dc:	080278d4 	.word	0x080278d4
 80032e0:	080278f0 	.word	0x080278f0
 80032e4:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3301      	adds	r3, #1
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80032f2:	6939      	ldr	r1, [r7, #16]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	440b      	add	r3, r1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80032fc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	3b01      	subs	r3, #1
 8003302:	6939      	ldr	r1, [r7, #16]
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8003308:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	3a02      	subs	r2, #2
 800330e:	6939      	ldr	r1, [r7, #16]
 8003310:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8003312:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	601a      	str	r2, [r3, #0]
    address--;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	3b04      	subs	r3, #4
 800331c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	3b04      	subs	r3, #4
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b03      	cmp	r3, #3
 8003328:	d8de      	bhi.n	80032e8 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003332:	33dc      	adds	r3, #220	; 0xdc
 8003334:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	7c5b      	ldrb	r3, [r3, #17]
 8003342:	061a      	lsls	r2, r3, #24
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	431a      	orrs	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	7c1b      	ldrb	r3, [r3, #16]
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003360:	33e8      	adds	r3, #232	; 0xe8
 8003362:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b6d      	ldr	r3, [pc, #436]	; (8003520 <JPEG_Set_Huff_DHTMem+0x458>)
 800336a:	4013      	ands	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	7edb      	ldrb	r3, [r3, #27]
 8003372:	021a      	lsls	r2, r3, #8
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	7e92      	ldrb	r2, [r2, #26]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	3b04      	subs	r3, #4
 800338a:	623b      	str	r3, [r7, #32]
  index = 8;
 800338c:	2308      	movs	r3, #8
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003390:	e021      	b.n	80033d6 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	3301      	adds	r3, #1
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	7c1b      	ldrb	r3, [r3, #16]
 800339c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800339e:	6939      	ldr	r1, [r7, #16]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	440b      	add	r3, r1
 80033a4:	3310      	adds	r3, #16
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80033aa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	3b01      	subs	r3, #1
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	440b      	add	r3, r1
 80033b4:	7c1b      	ldrb	r3, [r3, #16]
 80033b6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80033b8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	3a02      	subs	r2, #2
 80033be:	6939      	ldr	r1, [r7, #16]
 80033c0:	440a      	add	r2, r1
 80033c2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80033c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	601a      	str	r2, [r3, #0]
    address--;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	3b04      	subs	r3, #4
 80033ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	3b04      	subs	r3, #4
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d8da      	bhi.n	8003392 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80033e4:	33e8      	adds	r3, #232	; 0xe8
 80033e6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	061a      	lsls	r2, r3, #24
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8003412:	33f8      	adds	r3, #248	; 0xf8
 8003414:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <JPEG_Set_Huff_DHTMem+0x458>)
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	7bdb      	ldrb	r3, [r3, #15]
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	7b92      	ldrb	r2, [r2, #14]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  *address = value;
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	3b04      	subs	r3, #4
 800343c:	623b      	str	r3, [r7, #32]
  index = 12;
 800343e:	230c      	movs	r3, #12
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003442:	e01d      	b.n	8003480 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	3301      	adds	r3, #1
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	440b      	add	r3, r1
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003458:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	3b01      	subs	r3, #1
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8003464:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	3a02      	subs	r2, #2
 800346a:	69b9      	ldr	r1, [r7, #24]
 800346c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800346e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	601a      	str	r2, [r3, #0]
    address--;
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	3b04      	subs	r3, #4
 8003478:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	3b04      	subs	r3, #4
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	2b03      	cmp	r3, #3
 8003484:	d8de      	bhi.n	8003444 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800348e:	33f8      	adds	r3, #248	; 0xf8
 8003490:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	7c5b      	ldrb	r3, [r3, #17]
 800349e:	061a      	lsls	r2, r3, #24
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	7c1b      	ldrb	r3, [r3, #16]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80034bc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80034c0:	623b      	str	r3, [r7, #32]
  index = 160;
 80034c2:	23a0      	movs	r3, #160	; 0xa0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80034c6:	e021      	b.n	800350c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	7c1b      	ldrb	r3, [r3, #16]
 80034d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	440b      	add	r3, r1
 80034da:	3310      	adds	r3, #16
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034e0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3b01      	subs	r3, #1
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	440b      	add	r3, r1
 80034ea:	7c1b      	ldrb	r3, [r3, #16]
 80034ec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80034ee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	3a02      	subs	r2, #2
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	440a      	add	r2, r1
 80034f8:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80034fa:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	601a      	str	r2, [r3, #0]
    address--;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	3b04      	subs	r3, #4
 8003504:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	3b04      	subs	r3, #4
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	2b03      	cmp	r3, #3
 8003510:	d8da      	bhi.n	80034c8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	372c      	adds	r7, #44	; 0x2c
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	ffff0000 	.word	0xffff0000

08003524 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d108      	bne.n	8003556 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	e007      	b.n	8003566 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0208 	bic.w	r2, r2, #8
 8003564:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003584:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d108      	bne.n	80035e4 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 80035e2:	e00d      	b.n	8003600 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d107      	bne.n	8003600 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d125      	bne.n	800366c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01e      	beq.n	800366c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe ff3b 	bl	80024b0 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f00b fee2 	bl	800f410 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d116      	bne.n	80036a6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8003686:	2108      	movs	r1, #8
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f988 	bl	800399e <JPEG_ReadInputData>
 800368e:	e00a      	b.n	80036a6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800369e:	2101      	movs	r1, #1
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f97c 	bl	800399e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d116      	bne.n	80036e0 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80036c0:	2108      	movs	r1, #8
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f864 	bl	8003790 <JPEG_StoreOutputData>
 80036c8:	e00a      	b.n	80036e0 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80036d8:	2101      	movs	r1, #1
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f858 	bl	8003790 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d14b      	bne.n	8003786 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b08      	cmp	r3, #8
 8003708:	d107      	bne.n	800371a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003728:	639a      	str	r2, [r3, #56]	; 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69d9      	ldr	r1, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	461a      	mov	r2, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f00b ff37 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d103      	bne.n	800377c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f00b ff89 	bl	800f68c <HAL_JPEG_DecodeCpltCallback>
 800377a:	e002      	b.n	8003782 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff f8f6 	bl	800296e <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d34b      	bcc.n	8003844 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e031      	b.n	8003816 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	4413      	add	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0a19      	lsrs	r1, r3, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	3301      	adds	r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	b2ca      	uxtb	r2, r1
 80037dc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	0c19      	lsrs	r1, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	3302      	adds	r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	b2ca      	uxtb	r2, r1
 80037f0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0e19      	lsrs	r1, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	3303      	adds	r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	b2ca      	uxtb	r2, r1
 8003804:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1d1a      	adds	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nbOutputWords; index++)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d3c9      	bcc.n	80037b2 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	429a      	cmp	r2, r3
 8003828:	f040 80b5 	bne.w	8003996 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	461a      	mov	r2, r3
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f00b feba 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8003842:	e0a8      	b.n	8003996 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	429a      	cmp	r2, r3
 800384e:	f240 80a2 	bls.w	8003996 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e031      	b.n	80038ca <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	4413      	add	r3, r2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	0a19      	lsrs	r1, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	3301      	adds	r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	b2ca      	uxtb	r2, r1
 8003890:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	0c19      	lsrs	r1, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	3302      	adds	r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	b2ca      	uxtb	r2, r1
 80038a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	0e19      	lsrs	r1, r3, #24
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	3303      	adds	r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	b2ca      	uxtb	r2, r1
 80038b8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3301      	adds	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3c9      	bcc.n	8003866 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10b      	bne.n	80038f6 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69d9      	ldr	r1, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	461a      	mov	r2, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f00b fe61 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038f4:	e04f      	b.n	8003996 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e015      	b.n	800393c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	fa22 f103 	lsr.w	r1, r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4413      	add	r3, r2
 8003928:	b2ca      	uxtb	r2, r1
 800392a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3e5      	bcc.n	8003910 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	461a      	mov	r2, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f00b fe2e 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
      nb_bytes = 4UL - nb_bytes;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f1c3 0304 	rsb	r3, r3, #4
 8003960:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e013      	b.n	8003990 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	fa22 f103 	lsr.w	r1, r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	4413      	add	r3, r2
 800397c:	b2ca      	uxtb	r2, r1
 800397e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d9e8      	bls.n	8003968 <JPEG_StoreOutputData+0x1d8>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b088      	sub	sp, #32
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <JPEG_ReadInputData+0x1c>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80039ba:	2101      	movs	r1, #1
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fe fe6f 	bl	80026a0 <HAL_JPEG_Pause>
 80039c2:	e028      	b.n	8003a16 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d906      	bls.n	80039de <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e01b      	b.n	8003a16 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d115      	bne.n	8003a16 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f00b fda9 	bl	800f548 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d905      	bls.n	8003a0a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hjpeg->JpegInCount = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f040 809f 	bne.w	8003b62 <JPEG_ReadInputData+0x1c4>
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 809b 	beq.w	8003b62 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d335      	bcc.n	8003aa6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e02d      	b.n	8003a9c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a60:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6999      	ldr	r1, [r3, #24]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003a88:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

        hjpeg->JpegInCount += 4UL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3cd      	bcc.n	8003a40 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8003aa4:	e05d      	b.n	8003b62 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d035      	beq.n	8003b18 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e02d      	b.n	8003b0e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003ad2:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3302      	adds	r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003ae4:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3303      	adds	r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003afa:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d3cd      	bcc.n	8003ab2 <JPEG_ReadInputData+0x114>
}
 8003b16:	e024      	b.n	8003b62 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e017      	b.n	8003b52 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3e3      	bcc.n	8003b22 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b62:	bf00      	nop
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d804      	bhi.n	8003b98 <JPEG_DMA_StartProcess+0x2c>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d901      	bls.n	8003b9c <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e074      	b.n	8003c86 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <JPEG_DMA_StartProcess+0x124>)
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <JPEG_DMA_StartProcess+0x128>)
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <JPEG_DMA_StartProcess+0x12c>)
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	4a36      	ldr	r2, [pc, #216]	; (8003c94 <JPEG_DMA_StartProcess+0x128>)
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <JPEG_DMA_StartProcess+0x130>)
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <JPEG_DMA_StartProcess+0x64>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e052      	b.n	8003c86 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	fbb3 f1f1 	udiv	r1, r3, r1
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	fb00 f101 	mul.w	r1, r0, r1
 8003bf4:	1a5b      	subs	r3, r3, r1
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	fbb3 f1f1 	udiv	r1, r3, r1
 8003c0a:	68b8      	ldr	r0, [r7, #8]
 8003c0c:	fb00 f101 	mul.w	r1, r0, r1
 8003c10:	1a5b      	subs	r3, r3, r1
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3344      	adds	r3, #68	; 0x44
 8003c22:	4619      	mov	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	4622      	mov	r2, r4
 8003c34:	f000 ff7a 	bl	8004b2c <HAL_MDMA_Start_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	f043 0204 	orr.w	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e01b      	b.n	8003c86 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4619      	mov	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3340      	adds	r3, #64	; 0x40
 8003c5e:	461c      	mov	r4, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	2201      	movs	r2, #1
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	4622      	mov	r2, r4
 8003c6a:	f000 ff5f 	bl	8004b2c <HAL_MDMA_Start_IT>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08003f9f 	.word	0x08003f9f
 8003c94:	0800418d 	.word	0x0800418d
 8003c98:	080040cb 	.word	0x080040cb
 8003c9c:	080041dd 	.word	0x080041dd

08003ca0 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d125      	bne.n	8003d00 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01e      	beq.n	8003d00 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fe fbf1 	bl	80024b0 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f00b fb98 	bl	800f410 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d039      	beq.n	8003d82 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d104      	bne.n	8003d62 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff66 	bl	8004c2e <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d105      	bne.n	8003d7c <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 ff5a 	bl	8004c2e <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8003d7a:	e002      	b.n	8003d82 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f804 	bl	8003d8a <JPEG_DMA_EndProcess>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10a      	bne.n	8003dca <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f00b fbf6 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d134      	bne.n	8003e42 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	461a      	mov	r2, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f00b fbe0 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00b fc2a 	bl	800f68c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8003e38:	e00c      	b.n	8003e54 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fd97 	bl	800296e <HAL_JPEG_EncodeCpltCallback>
}
 8003e40:	e008      	b.n	8003e54 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f804 	bl	8003e5c <JPEG_DMA_PollResidualData>
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8003e64:	2310      	movs	r3, #16
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e04f      	b.n	8003f0a <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d146      	bne.n	8003f04 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03f      	beq.n	8003f04 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	4413      	add	r3, r2
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	0a19      	lsrs	r1, r3, #8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4413      	add	r3, r2
 8003eac:	b2ca      	uxtb	r2, r1
 8003eae:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0c19      	lsrs	r1, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b2ca      	uxtb	r2, r1
 8003ec2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	0e19      	lsrs	r1, r3, #24
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	3303      	adds	r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	b2ca      	uxtb	r2, r1
 8003ed6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d10a      	bne.n	8003f04 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69d9      	ldr	r1, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f00b fb59 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ac      	bne.n	8003e6a <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <JPEG_DMA_PollResidualData+0xd2>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d133      	bne.n	8003f96 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69d9      	ldr	r1, [r3, #28]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f00b fb2d 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d103      	bne.n	8003f90 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f00b fb7f 	bl	800f68c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	e002      	b.n	8003f96 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fe fcec 	bl	800296e <HAL_JPEG_EncodeCpltCallback>
}
 8003f96:	bf00      	nop
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003f9e:	b590      	push	{r4, r7, lr}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af02      	add	r7, sp, #8
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc0:	f248 030c 	movw	r3, #32780	; 0x800c
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b0c      	cmp	r3, #12
 8003fc8:	d17c      	bne.n	80040c4 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003fe0:	1ad2      	subs	r2, r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f00b faab 	bl	800f548 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d81f      	bhi.n	800403c <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2206      	movs	r2, #6
 8004012:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f00b fb2a 	bl	800f670 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800401c:	e052      	b.n	80040c4 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	fbb3 f1f1 	udiv	r1, r3, r1
 800402c:	68b8      	ldr	r0, [r7, #8]
 800402e:	fb00 f101 	mul.w	r1, r0, r1
 8004032:	1a5b      	subs	r3, r3, r1
 8004034:	1ad2      	subs	r2, r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
 800403a:	e010      	b.n	800405e <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d006      	beq.n	800405e <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3301      	adds	r3, #1
 8004058:	009a      	lsls	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d124      	bne.n	80040b4 <JPEG_MDMAInCpltCallback+0x116>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	4619      	mov	r1, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3340      	adds	r3, #64	; 0x40
 8004082:	461c      	mov	r4, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	2201      	movs	r2, #1
 800408a:	9200      	str	r2, [sp, #0]
 800408c:	4622      	mov	r2, r4
 800408e:	f000 fd4d 	bl	8004b2c <HAL_MDMA_Start_IT>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2206      	movs	r2, #6
 80040a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f00b fadf 	bl	800f670 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80040b2:	e007      	b.n	80040c4 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}

080040ca <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80040ca:	b590      	push	{r4, r7, lr}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af02      	add	r7, sp, #8
 80040d0:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ec:	f248 030c 	movw	r3, #32780	; 0x800c
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d147      	bne.n	8004186 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d138      	bne.n	8004176 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	69d9      	ldr	r1, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	461a      	mov	r2, r3
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f00b fa44 	bl	800f5b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d120      	bne.n	8004176 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3344      	adds	r3, #68	; 0x44
 800413e:	4619      	mov	r1, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	461c      	mov	r4, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	2201      	movs	r2, #1
 800414c:	9200      	str	r2, [sp, #0]
 800414e:	4622      	mov	r2, r4
 8004150:	f000 fcec 	bl	8004b2c <HAL_MDMA_Start_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2206      	movs	r2, #6
 800416a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f00b fa7e 	bl	800f670 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8004174:	e007      	b.n	8004186 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
  }

}
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}

0800418c <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f00b fa4e 	bl	800f670 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fdc7 	bl	8003d8a <JPEG_DMA_EndProcess>
  }
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8004204:	b480      	push	{r7}
 8004206:	b08b      	sub	sp, #44	; 0x2c
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3350      	adds	r3, #80	; 0x50
 8004216:	61bb      	str	r3, [r7, #24]

  i = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800421c:	e042      	b.n	80042a4 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e033      	b.n	8004292 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d103      	bne.n	8004246 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	3364      	adds	r3, #100	; 0x64
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
 8004244:	e022      	b.n	800428c <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2264      	movs	r2, #100	; 0x64
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004252:	6a38      	ldr	r0, [r7, #32]
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	4401      	add	r1, r0
 8004258:	4818      	ldr	r0, [pc, #96]	; (80042bc <JPEG_GetQuality+0xb8>)
 800425a:	5c41      	ldrb	r1, [r0, r1]
 800425c:	440a      	add	r2, r1
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	fbb3 f3f2 	udiv	r3, r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b64      	cmp	r3, #100	; 0x64
 800426a:	d807      	bhi.n	800427c <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	4413      	add	r3, r2
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e007      	b.n	800428c <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004288:	4413      	add	r3, r2
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
    for (j = 0; j < 4UL; j++)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d9c8      	bls.n	800422a <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	3304      	adds	r3, #4
 800429c:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	3304      	adds	r3, #4
 80042a2:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b3c      	cmp	r3, #60	; 0x3c
 80042a8:	d9b9      	bls.n	800421e <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	099b      	lsrs	r3, r3, #6
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	372c      	adds	r7, #44	; 0x2c
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	08027a74 	.word	0x08027a74

080042c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0bf      	b.n	8004452 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fb0a 	bl	8000900 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004302:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6999      	ldr	r1, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004318:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_LTDC_Init+0x19c>)
 8004334:	400b      	ands	r3, r1
 8004336:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68d9      	ldr	r1, [r3, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b3e      	ldr	r3, [pc, #248]	; (800445c <HAL_LTDC_Init+0x19c>)
 8004362:	400b      	ands	r3, r1
 8004364:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_LTDC_Init+0x19c>)
 8004390:	400b      	ands	r3, r1
 8004392:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6919      	ldr	r1, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6959      	ldr	r1, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_LTDC_Init+0x19c>)
 80043be:	400b      	ands	r3, r1
 80043c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6959      	ldr	r1, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0206 	orr.w	r2, r2, #6
 800442e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	f000f800 	.word	0xf000f800

08004460 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <HAL_LTDC_IRQHandler+0x6a>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01e      	beq.n	80044ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2204      	movs	r2, #4
 80044b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f86f 	bl	80045a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_LTDC_IRQHandler+0xbc>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01e      	beq.n	800451c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0202 	bic.w	r2, r2, #2
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2202      	movs	r2, #2
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044fc:	f043 0202 	orr.w	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2204      	movs	r2, #4
 800450a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f846 	bl	80045a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01b      	beq.n	800455e <HAL_LTDC_IRQHandler+0xfe>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f00d f897 	bl	801168c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <HAL_LTDC_IRQHandler+0x140>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0208 	bic.w	r2, r2, #8
 8004580:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2208      	movs	r2, #8
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f80e 	bl	80045bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_LTDC_ConfigLayer+0x1a>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e02c      	b.n	8004644 <HAL_LTDC_ConfigLayer+0x74>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2134      	movs	r1, #52	; 0x34
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4614      	mov	r4, r2
 800460e:	461d      	mov	r5, r3
 8004610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f849 	bl	80046bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2201      	movs	r2, #1
 8004630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bdb0      	pop	{r4, r5, r7, pc}

0800464c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_LTDC_ProgramLineEvent+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e023      	b.n	80046ac <HAL_LTDC_ProgramLineEvent+0x60>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004684:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	50001000 	.word	0x50001000

080046bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	4413      	add	r3, r2
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	01db      	lsls	r3, r3, #7
 80046e8:	4413      	add	r3, r2
 80046ea:	3384      	adds	r3, #132	; 0x84
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	4611      	mov	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	01d2      	lsls	r2, r2, #7
 80046f8:	440a      	add	r2, r1
 80046fa:	3284      	adds	r2, #132	; 0x84
 80046fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004700:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004712:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004714:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	440b      	add	r3, r1
 8004722:	3384      	adds	r3, #132	; 0x84
 8004724:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800472a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800473a:	4413      	add	r3, r2
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	01db      	lsls	r3, r3, #7
 800474a:	4413      	add	r3, r2
 800474c:	3384      	adds	r3, #132	; 0x84
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4611      	mov	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	01d2      	lsls	r2, r2, #7
 800475a:	440a      	add	r2, r1
 800475c:	3284      	adds	r2, #132	; 0x84
 800475e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004762:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004772:	4413      	add	r3, r2
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	01db      	lsls	r3, r3, #7
 8004780:	440b      	add	r3, r1
 8004782:	3384      	adds	r3, #132	; 0x84
 8004784:	4619      	mov	r1, r3
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	01db      	lsls	r3, r3, #7
 8004796:	4413      	add	r3, r2
 8004798:	3384      	adds	r3, #132	; 0x84
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4611      	mov	r1, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	01d2      	lsls	r2, r2, #7
 80047a6:	440a      	add	r2, r1
 80047a8:	3284      	adds	r2, #132	; 0x84
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	01db      	lsls	r3, r3, #7
 80047ba:	4413      	add	r3, r2
 80047bc:	3384      	adds	r3, #132	; 0x84
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	061b      	lsls	r3, r3, #24
 80047e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	4413      	add	r3, r2
 80047ee:	3384      	adds	r3, #132	; 0x84
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800480c:	461a      	mov	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	431a      	orrs	r2, r3
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	440b      	add	r3, r1
 8004822:	3384      	adds	r3, #132	; 0x84
 8004824:	4619      	mov	r1, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	01db      	lsls	r3, r3, #7
 8004836:	4413      	add	r3, r2
 8004838:	3384      	adds	r3, #132	; 0x84
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	4611      	mov	r1, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	01d2      	lsls	r2, r2, #7
 8004846:	440a      	add	r2, r1
 8004848:	3284      	adds	r2, #132	; 0x84
 800484a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800484e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4413      	add	r3, r2
 800485c:	3384      	adds	r3, #132	; 0x84
 800485e:	461a      	mov	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	3384      	adds	r3, #132	; 0x84
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4619      	mov	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	440b      	add	r3, r1
 8004882:	3384      	adds	r3, #132	; 0x84
 8004884:	4619      	mov	r1, r3
 8004886:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <LTDC_SetConfig+0x32c>)
 8004888:	4013      	ands	r3, r2
 800488a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	6809      	ldr	r1, [r1, #0]
 8004898:	4608      	mov	r0, r1
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	01c9      	lsls	r1, r1, #7
 800489e:	4401      	add	r1, r0
 80048a0:	3184      	adds	r1, #132	; 0x84
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	01db      	lsls	r3, r3, #7
 80048b0:	4413      	add	r3, r2
 80048b2:	3384      	adds	r3, #132	; 0x84
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	01db      	lsls	r3, r3, #7
 80048c0:	4413      	add	r3, r2
 80048c2:	3384      	adds	r3, #132	; 0x84
 80048c4:	461a      	mov	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	01db      	lsls	r3, r3, #7
 80048d4:	4413      	add	r3, r2
 80048d6:	3384      	adds	r3, #132	; 0x84
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80048e8:	2304      	movs	r3, #4
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e01b      	b.n	8004926 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80048f6:	2303      	movs	r3, #3
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e014      	b.n	8004926 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d00b      	beq.n	800491c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004908:	2b02      	cmp	r3, #2
 800490a:	d007      	beq.n	800491c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004910:	2b03      	cmp	r3, #3
 8004912:	d003      	beq.n	800491c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004918:	2b07      	cmp	r3, #7
 800491a:	d102      	bne.n	8004922 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800491c:	2302      	movs	r3, #2
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e001      	b.n	8004926 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4413      	add	r3, r2
 8004932:	3384      	adds	r3, #132	; 0x84
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	4611      	mov	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	01d2      	lsls	r2, r2, #7
 8004940:	440a      	add	r2, r1
 8004942:	3284      	adds	r2, #132	; 0x84
 8004944:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004948:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	041a      	lsls	r2, r3, #16
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6859      	ldr	r1, [r3, #4]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1acb      	subs	r3, r1, r3
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	3307      	adds	r3, #7
 8004968:	68f9      	ldr	r1, [r7, #12]
 800496a:	6809      	ldr	r1, [r1, #0]
 800496c:	4608      	mov	r0, r1
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	01c9      	lsls	r1, r1, #7
 8004972:	4401      	add	r1, r0
 8004974:	3184      	adds	r1, #132	; 0x84
 8004976:	4313      	orrs	r3, r2
 8004978:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	01db      	lsls	r3, r3, #7
 8004984:	4413      	add	r3, r2
 8004986:	3384      	adds	r3, #132	; 0x84
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	01db      	lsls	r3, r3, #7
 8004994:	440b      	add	r3, r1
 8004996:	3384      	adds	r3, #132	; 0x84
 8004998:	4619      	mov	r1, r3
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <LTDC_SetConfig+0x330>)
 800499c:	4013      	ands	r3, r2
 800499e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	01db      	lsls	r3, r3, #7
 80049aa:	4413      	add	r3, r2
 80049ac:	3384      	adds	r3, #132	; 0x84
 80049ae:	461a      	mov	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	01db      	lsls	r3, r3, #7
 80049c0:	4413      	add	r3, r2
 80049c2:	3384      	adds	r3, #132	; 0x84
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4611      	mov	r1, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	01d2      	lsls	r2, r2, #7
 80049d0:	440a      	add	r2, r1
 80049d2:	3284      	adds	r2, #132	; 0x84
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6013      	str	r3, [r2, #0]
}
 80049da:	bf00      	nop
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	fffff8f8 	.word	0xfffff8f8
 80049ec:	fffff800 	.word	0xfffff800

080049f0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7fc fede 	bl	80017b8 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e03b      	b.n	8004a80 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004a28:	e00f      	b.n	8004a4a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8004a2a:	f7fc fec5 	bl	80017b8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	d908      	bls.n	8004a4a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2203      	movs	r2, #3
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01a      	b.n	8004a80 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e8      	bne.n	8004a2a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fad3 	bl	8005004 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e03e      	b.n	8004b20 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e037      	b.n	8004b20 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d126      	bne.n	8004b12 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d11c      	bne.n	8004b0c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d108      	bne.n	8004afa <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004af6:	611a      	str	r2, [r3, #16]
 8004af8:	e00d      	b.n	8004b16 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b08:	611a      	str	r2, [r3, #16]
 8004b0a:	e004      	b.n	8004b16 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	75fb      	strb	r3, [r7, #23]
 8004b10:	e001      	b.n	8004b16 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e070      	b.n	8004c26 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_MDMA_Start_IT+0x26>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e069      	b.n	8004c26 <HAL_MDMA_Start_IT+0xfa>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d158      	bne.n	8004c18 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f9c8 	bl	8004f24 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0206 	orr.w	r2, r2, #6
 8004ba2:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0210 	orr.w	r2, r2, #16
 8004bba:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0220 	orr.w	r2, r2, #32
 8004bea:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c04:	d10e      	bne.n	8004c24 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e005      	b.n	8004c24 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
 8004c22:	e000      	b.n	8004c26 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e017      	b.n	8004c70 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d004      	beq.n	8004c56 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00c      	b.n	8004c70 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0201 	bic.w	r2, r2, #1
 8004c6c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c88:	4b91      	ldr	r3, [pc, #580]	; (8004ed0 <HAL_MDMA_IRQHandler+0x254>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a91      	ldr	r2, [pc, #580]	; (8004ed4 <HAL_MDMA_IRQHandler+0x258>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	; (8004ed8 <HAL_MDMA_IRQHandler+0x25c>)
 8004c9e:	4413      	add	r3, r2
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004cae:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 812d 	beq.w	8004f18 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d054      	beq.n	8004d76 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04d      	beq.n	8004d76 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0202 	bic.w	r2, r2, #2
 8004ce8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	669a      	str	r2, [r3, #104]	; 0x68
 8004d08:	e005      	b.n	8004d16 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0e:	f043 0202 	orr.w	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d50:	f043 0210 	orr.w	r2, r3, #16
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d66:	f043 0220 	orr.w	r2, r3, #32
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d012      	beq.n	8004daa <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2210      	movs	r2, #16
 8004d98:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2208      	movs	r2, #8
 8004dcc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d039      	beq.n	8004e94 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d032      	beq.n	8004e94 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8004e3c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d110      	bne.n	8004e6c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05c      	beq.n	8004f1c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
        }
        return;
 8004e6a:	e057      	b.n	8004f1c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2202      	movs	r2, #2
 8004e72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d040      	beq.n	8004f1e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d30d      	bcc.n	8004edc <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_MDMA_IRQHandler+0x238>
 8004ece:	e006      	b.n	8004ede <HAL_MDMA_IRQHandler+0x262>
 8004ed0:	24000004 	.word	0x24000004
 8004ed4:	1b4e81b5 	.word	0x1b4e81b5
 8004ed8:	adffffc0 	.word	0xadffffc0
        break;
 8004edc:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004efc:	e003      	b.n	8004f06 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
 8004f16:	e002      	b.n	8004f1e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8004f1c:	bf00      	nop
    }
  }
}
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <MDMA_SetConfig+0xdc>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	430b      	orrs	r3, r1
 8004f48:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	051a      	lsls	r2, r3, #20
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	221f      	movs	r2, #31
 8004f68:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f80:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f88:	d002      	beq.n	8004f90 <MDMA_SetConfig+0x6c>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa0:	e007      	b.n	8004fb2 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004fb8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc0:	d002      	beq.n	8004fc8 <MDMA_SetConfig+0xa4>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d108      	bne.n	8004fda <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fd8:	e007      	b.n	8004fea <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	fffe0000 	.word	0xfffe0000

08005004 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68d9      	ldr	r1, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800502a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8005036:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8005042:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800504c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8005058:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800505a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d107      	bne.n	8005076 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8005074:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	2b00      	cmp	r3, #0
 8005084:	da11      	bge.n	80050aa <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005094:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	425b      	negs	r3, r3
 800509c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	b292      	uxth	r2, r2
 80050a6:	621a      	str	r2, [r3, #32]
 80050a8:	e006      	b.n	80050b8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	461a      	mov	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b292      	uxth	r2, r2
 80050b6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da15      	bge.n	80050ec <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80050ce:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	425b      	negs	r3, r3
 80050d6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a19      	ldr	r1, [r3, #32]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	041a      	lsls	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	621a      	str	r2, [r3, #32]
 80050ea:	e009      	b.n	8005100 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a19      	ldr	r1, [r3, #32]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	041a      	lsls	r2, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d006      	beq.n	8005118 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	629a      	str	r2, [r3, #40]	; 0x28
 8005116:	e003      	b.n	8005120 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_PWREx_ConfigSupply+0x70>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d00a      	beq.n	800515e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_PWREx_ConfigSupply+0x70>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d001      	beq.n	800515a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e01f      	b.n	800519a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e01d      	b.n	800519a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f023 0207 	bic.w	r2, r3, #7
 8005166:	490f      	ldr	r1, [pc, #60]	; (80051a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4313      	orrs	r3, r2
 800516c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800516e:	f7fc fb23 	bl	80017b8 <HAL_GetTick>
 8005172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005174:	e009      	b.n	800518a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005176:	f7fc fb1f 	bl	80017b8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005184:	d901      	bls.n	800518a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_PWREx_ConfigSupply+0x70>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005196:	d1ee      	bne.n	8005176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	58024800 	.word	0x58024800

080051a8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80051b0:	f7fc fb02 	bl	80017b8 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e05f      	b.n	8005280 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fb fdf5 	bl	8000dbc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80051d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa49 	bl	800566e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	2120      	movs	r1, #32
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa41 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800520c:	7afb      	ldrb	r3, [r7, #11]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d135      	bne.n	800527e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_QSPI_Init+0xe0>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	0611      	lsls	r1, r2, #24
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	69d2      	ldr	r2, [r2, #28]
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6a12      	ldr	r2, [r2, #32]
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	430b      	orrs	r3, r1
 800523a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_QSPI_Init+0xe4>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0411      	lsls	r1, r2, #16
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6952      	ldr	r2, [r2, #20]
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6992      	ldr	r2, [r2, #24]
 8005256:	4311      	orrs	r1, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	430b      	orrs	r3, r1
 800525e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800527e:	7afb      	ldrb	r3, [r7, #11]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	00ffff2f 	.word	0x00ffff2f
 800528c:	ffe0f8fe 	.word	0xffe0f8fe

08005290 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800529c:	f7fc fa8c 	bl	80017b8 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_QSPI_Command+0x22>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e048      	b.n	8005344 <HAL_QSPI_Command+0xb4>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d137      	bne.n	8005336 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2200      	movs	r2, #0
 80052dc:	2120      	movs	r1, #32
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f9d3 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d125      	bne.n	800533a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80052ee:	2200      	movs	r2, #0
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fa00 	bl	80056f8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d115      	bne.n	800532c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2201      	movs	r2, #1
 8005308:	2102      	movs	r1, #2
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f9bd 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2202      	movs	r2, #2
 8005320:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800532a:	e006      	b.n	800533a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	e001      	b.n	800533a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800535c:	f7fc fa2c 	bl	80017b8 <HAL_GetTick>
 8005360:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3320      	adds	r3, #32
 8005368:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_QSPI_Transmit+0x2e>
 8005376:	2302      	movs	r3, #2
 8005378:	e076      	b.n	8005468 <HAL_QSPI_Transmit+0x11c>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d165      	bne.n	800545a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d056      	beq.n	8005448 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2212      	movs	r2, #18
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80053ce:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80053d0:	e01b      	b.n	800540a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2201      	movs	r2, #1
 80053da:	2104      	movs	r1, #4
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f954 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d113      	bne.n	8005414 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	1e5a      	subs	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1df      	bne.n	80053d2 <HAL_QSPI_Transmit+0x86>
 8005412:	e000      	b.n	8005416 <HAL_QSPI_Transmit+0xca>
          break;
 8005414:	bf00      	nop
      }

      if (status == HAL_OK)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d110      	bne.n	800543e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2201      	movs	r2, #1
 8005424:	2102      	movs	r1, #2
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f92f 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005430:	7ffb      	ldrb	r3, [r7, #31]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2202      	movs	r2, #2
 800543c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005446:	e00a      	b.n	800545e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f043 0208 	orr.w	r2, r3, #8
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e001      	b.n	800545e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005466:	7ffb      	ldrb	r3, [r7, #31]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7fc f99a 	bl	80017b8 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3320      	adds	r3, #32
 8005494:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_QSPI_Receive+0x36>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e07d      	b.n	80055a2 <HAL_QSPI_Receive+0x132>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d16c      	bne.n	8005594 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d05d      	beq.n	8005582 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2222      	movs	r2, #34	; 0x22
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80054fe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005508:	e01c      	b.n	8005544 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2201      	movs	r2, #1
 8005512:	2106      	movs	r1, #6
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f8b8 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800551e:	7ffb      	ldrb	r3, [r7, #31]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d114      	bne.n	800554e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	1e5a      	subs	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1de      	bne.n	800550a <HAL_QSPI_Receive+0x9a>
 800554c:	e000      	b.n	8005550 <HAL_QSPI_Receive+0xe0>
          break;
 800554e:	bf00      	nop
      }

      if (status == HAL_OK)
 8005550:	7ffb      	ldrb	r3, [r7, #31]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d110      	bne.n	8005578 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2201      	movs	r2, #1
 800555e:	2102      	movs	r1, #2
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f892 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800556a:	7ffb      	ldrb	r3, [r7, #31]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2202      	movs	r2, #2
 8005576:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005580:	e00a      	b.n	8005598 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f043 0208 	orr.w	r2, r3, #8
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e001      	b.n	8005598 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005594:	2302      	movs	r3, #2
 8005596:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80055a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b088      	sub	sp, #32
 80055ae:	af02      	add	r7, sp, #8
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80055b6:	f7fc f8ff 	bl	80017b8 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_QSPI_MemoryMapped+0x22>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e04c      	b.n	8005666 <HAL_QSPI_MemoryMapped+0xbc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d13b      	bne.n	8005658 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2282      	movs	r2, #130	; 0x82
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2200      	movs	r2, #0
 80055f8:	2120      	movs	r1, #32
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f845 	bl	800568a <QSPI_WaitFlagStateUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d128      	bne.n	800565c <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f023 0108 	bic.w	r1, r3, #8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d110      	bne.n	800564a <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2210      	movs	r2, #16
 8005638:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005648:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800564a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f851 	bl	80056f8 <QSPI_Config>
 8005656:	e001      	b.n	800565c <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005658:	2302      	movs	r3, #2
 800565a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	649a      	str	r2, [r3, #72]	; 0x48
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800569a:	e01a      	b.n	80056d2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d016      	beq.n	80056d2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7fc f888 	bl	80017b8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <QSPI_WaitFlagStateUntilTimeout+0x30>
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2204      	movs	r2, #4
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e00e      	b.n	80056f0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d1d6      	bne.n	800569c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <QSPI_Config+0x28>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005712:	d005      	beq.n	8005720 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3a01      	subs	r2, #1
 800571e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80b9 	beq.w	800589c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05f      	beq.n	80057f2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	6892      	ldr	r2, [r2, #8]
 800573a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d031      	beq.n	80057a8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	431a      	orrs	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	431a      	orrs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	431a      	orrs	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	049b      	lsls	r3, r3, #18
 8005760:	431a      	orrs	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	431a      	orrs	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	431a      	orrs	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	431a      	orrs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	ea42 0103 	orr.w	r1, r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	430a      	orrs	r2, r1
 8005790:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005798:	f000 812e 	beq.w	80059f8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80057a6:	e127      	b.n	80059f8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	431a      	orrs	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	049b      	lsls	r3, r3, #18
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	431a      	orrs	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	ea42 0103 	orr.w	r1, r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	615a      	str	r2, [r3, #20]
}
 80057f0:	e102      	b.n	80059f8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d02e      	beq.n	8005858 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	431a      	orrs	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	431a      	orrs	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	049b      	lsls	r3, r3, #18
 8005816:	431a      	orrs	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	431a      	orrs	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	431a      	orrs	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	431a      	orrs	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	431a      	orrs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	ea42 0103 	orr.w	r1, r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	430a      	orrs	r2, r1
 8005840:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005848:	f000 80d6 	beq.w	80059f8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	e0cf      	b.n	80059f8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	431a      	orrs	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	431a      	orrs	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	431a      	orrs	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	049b      	lsls	r3, r3, #18
 8005874:	431a      	orrs	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	431a      	orrs	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	431a      	orrs	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	ea42 0103 	orr.w	r1, r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	430a      	orrs	r2, r1
 8005898:	615a      	str	r2, [r3, #20]
}
 800589a:	e0ad      	b.n	80059f8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d058      	beq.n	8005956 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	6892      	ldr	r2, [r2, #8]
 80058ac:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d02d      	beq.n	8005912 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	431a      	orrs	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	049b      	lsls	r3, r3, #18
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	431a      	orrs	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	ea42 0103 	orr.w	r1, r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005904:	d078      	beq.n	80059f8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	6852      	ldr	r2, [r2, #4]
 800590e:	619a      	str	r2, [r3, #24]
}
 8005910:	e072      	b.n	80059f8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	431a      	orrs	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	431a      	orrs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	431a      	orrs	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	049b      	lsls	r3, r3, #18
 800592e:	431a      	orrs	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	431a      	orrs	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	431a      	orrs	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	ea42 0103 	orr.w	r1, r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	430a      	orrs	r2, r1
 8005952:	615a      	str	r2, [r3, #20]
}
 8005954:	e050      	b.n	80059f8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d02a      	beq.n	80059b4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	431a      	orrs	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	431a      	orrs	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	049b      	lsls	r3, r3, #18
 800597a:	431a      	orrs	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	431a      	orrs	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	431a      	orrs	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	431a      	orrs	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	ea42 0103 	orr.w	r1, r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	430a      	orrs	r2, r1
 800599e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059a6:	d027      	beq.n	80059f8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	6852      	ldr	r2, [r2, #4]
 80059b0:	619a      	str	r2, [r3, #24]
}
 80059b2:	e021      	b.n	80059f8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01d      	beq.n	80059f8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	431a      	orrs	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	049b      	lsls	r3, r3, #18
 80059d8:	431a      	orrs	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	ea42 0103 	orr.w	r1, r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	615a      	str	r2, [r3, #20]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	; 0x30
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f000 bc48 	b.w	80062a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8088 	beq.w	8005b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a26:	4b99      	ldr	r3, [pc, #612]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a30:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCC_OscConfig+0x48>
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b18      	cmp	r3, #24
 8005a40:	d111      	bne.n	8005a66 <HAL_RCC_OscConfig+0x62>
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	4b8f      	ldr	r3, [pc, #572]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d06d      	beq.n	8005b34 <HAL_RCC_OscConfig+0x130>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d169      	bne.n	8005b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f000 bc21 	b.w	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x7a>
 8005a70:	4b86      	ldr	r3, [pc, #536]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a85      	ldr	r2, [pc, #532]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	e02e      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x9c>
 8005a86:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a80      	ldr	r2, [pc, #512]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	4b7e      	ldr	r3, [pc, #504]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a7d      	ldr	r2, [pc, #500]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xc0>
 8005aaa:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a77      	ldr	r2, [pc, #476]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b75      	ldr	r3, [pc, #468]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a74      	ldr	r2, [pc, #464]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xd8>
 8005ac4:	4b71      	ldr	r3, [pc, #452]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a70      	ldr	r2, [pc, #448]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b6e      	ldr	r3, [pc, #440]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a6d      	ldr	r2, [pc, #436]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fb fe68 	bl	80017b8 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fb fe64 	bl	80017b8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e3d4      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afe:	4b63      	ldr	r3, [pc, #396]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xe8>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fb fe54 	bl	80017b8 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fb fe50 	bl	80017b8 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e3c0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b26:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x110>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80ca 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b44:	4b51      	ldr	r3, [pc, #324]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4e:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_RCC_OscConfig+0x166>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b18      	cmp	r3, #24
 8005b5e:	d156      	bne.n	8005c0e <HAL_RCC_OscConfig+0x20a>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d151      	bne.n	8005c0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b6a:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <HAL_RCC_OscConfig+0x17e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e392      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b82:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0219 	bic.w	r2, r3, #25
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	493f      	ldr	r1, [pc, #252]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fb fe10 	bl	80017b8 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fb fe0c 	bl	80017b8 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e37c      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bae:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	f7fb fe09 	bl	80017d0 <HAL_GetREVID>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d817      	bhi.n	8005bf8 <HAL_RCC_OscConfig+0x1f4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b40      	cmp	r3, #64	; 0x40
 8005bce:	d108      	bne.n	8005be2 <HAL_RCC_OscConfig+0x1de>
 8005bd0:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bd8:	4a2c      	ldr	r2, [pc, #176]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be0:	e07a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	031b      	lsls	r3, r3, #12
 8005bf0:	4926      	ldr	r1, [pc, #152]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf6:	e06f      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	061b      	lsls	r3, r3, #24
 8005c06:	4921      	ldr	r1, [pc, #132]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	e064      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d047      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 0219 	bic.w	r2, r3, #25
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	491a      	ldr	r1, [pc, #104]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fb fdc6 	bl	80017b8 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fb fdc2 	bl	80017b8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e332      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4e:	f7fb fdbf 	bl	80017d0 <HAL_GetREVID>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d819      	bhi.n	8005c90 <HAL_RCC_OscConfig+0x28c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d108      	bne.n	8005c76 <HAL_RCC_OscConfig+0x272>
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c6c:	4a07      	ldr	r2, [pc, #28]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c72:	6053      	str	r3, [r2, #4]
 8005c74:	e030      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	031b      	lsls	r3, r3, #12
 8005c84:	4901      	ldr	r1, [pc, #4]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
 8005c8a:	e025      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	4b9a      	ldr	r3, [pc, #616]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	4997      	ldr	r1, [pc, #604]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	e018      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca6:	4b95      	ldr	r3, [pc, #596]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a94      	ldr	r2, [pc, #592]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fb fd81 	bl	80017b8 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fb fd7d 	bl	80017b8 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e2ed      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b8b      	ldr	r3, [pc, #556]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a9 	beq.w	8005e38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf0:	4b82      	ldr	r3, [pc, #520]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCC_OscConfig+0x308>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d13a      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d135      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0c:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e2c1      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d24:	f7fb fd54 	bl	80017d0 <HAL_GetREVID>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d817      	bhi.n	8005d62 <HAL_RCC_OscConfig+0x35e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d108      	bne.n	8005d4c <HAL_RCC_OscConfig+0x348>
 8005d3a:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d42:	4a6e      	ldr	r2, [pc, #440]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d4a:	e075      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d4c:	4b6b      	ldr	r3, [pc, #428]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	069b      	lsls	r3, r3, #26
 8005d5a:	4968      	ldr	r1, [pc, #416]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d60:	e06a      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d62:	4b66      	ldr	r3, [pc, #408]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4962      	ldr	r1, [pc, #392]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d76:	e05f      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d042      	beq.n	8005e06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d80:	4b5e      	ldr	r3, [pc, #376]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5d      	ldr	r2, [pc, #372]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fb fd14 	bl	80017b8 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d94:	f7fb fd10 	bl	80017b8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e280      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005da6:	4b55      	ldr	r3, [pc, #340]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005db2:	f7fb fd0d 	bl	80017d0 <HAL_GetREVID>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d817      	bhi.n	8005df0 <HAL_RCC_OscConfig+0x3ec>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d108      	bne.n	8005dda <HAL_RCC_OscConfig+0x3d6>
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	e02e      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005dda:	4b48      	ldr	r3, [pc, #288]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	069b      	lsls	r3, r3, #26
 8005de8:	4944      	ldr	r1, [pc, #272]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
 8005dee:	e023      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	493f      	ldr	r1, [pc, #252]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
 8005e04:	e018      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e06:	4b3d      	ldr	r3, [pc, #244]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fb fcd1 	bl	80017b8 <HAL_GetTick>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e1a:	f7fb fccd 	bl	80017b8 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e23d      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e2c:	4b33      	ldr	r3, [pc, #204]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d036      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fb fcae 	bl	80017b8 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e60:	f7fb fcaa 	bl	80017b8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e21a      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x45c>
 8005e7e:	e018      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fb fc94 	bl	80017b8 <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fb fc90 	bl	80017b8 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e200      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d039      	beq.n	8005f32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01c      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ed2:	f7fb fc71 	bl	80017b8 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eda:	f7fb fc6d 	bl	80017b8 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1dd      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x4d6>
 8005ef8:	e01b      	b.n	8005f32 <HAL_RCC_OscConfig+0x52e>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f00:	4b9b      	ldr	r3, [pc, #620]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a9a      	ldr	r2, [pc, #616]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f0c:	f7fb fc54 	bl	80017b8 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f14:	f7fb fc50 	bl	80017b8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e1c0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8081 	beq.w	8006042 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f40:	4b8c      	ldr	r3, [pc, #560]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a8b      	ldr	r2, [pc, #556]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f4c:	f7fb fc34 	bl	80017b8 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f54:	f7fb fc30 	bl	80017b8 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e1a0      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f66:	4b83      	ldr	r3, [pc, #524]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x584>
 8005f7a:	4b7d      	ldr	r3, [pc, #500]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a7c      	ldr	r2, [pc, #496]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	e02d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x5a6>
 8005f90:	4b77      	ldr	r3, [pc, #476]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a76      	ldr	r2, [pc, #472]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	4b74      	ldr	r3, [pc, #464]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a73      	ldr	r2, [pc, #460]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fa2:	f023 0304 	bic.w	r3, r3, #4
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c8>
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a6e      	ldr	r2, [pc, #440]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a6b      	ldr	r2, [pc, #428]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a67      	ldr	r2, [pc, #412]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	4b65      	ldr	r3, [pc, #404]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a64      	ldr	r2, [pc, #400]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fb fbe4 	bl	80017b8 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fb fbe0 	bl	80017b8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e14e      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ee      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x5f0>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fb fbce 	bl	80017b8 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fb fbca 	bl	80017b8 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e138      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006036:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ee      	bne.n	8006020 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 812d 	beq.w	80062a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800604c:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006054:	2b18      	cmp	r3, #24
 8006056:	f000 80bd 	beq.w	80061d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b02      	cmp	r3, #2
 8006060:	f040 809e 	bne.w	80061a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a41      	ldr	r2, [pc, #260]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fb fba2 	bl	80017b8 <HAL_GetTick>
 8006074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006078:	f7fb fb9e 	bl	80017b8 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e10e      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800608a:	4b39      	ldr	r3, [pc, #228]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609a:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCC_OscConfig+0x774>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	430a      	orrs	r2, r1
 80060aa:	4931      	ldr	r1, [pc, #196]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	628b      	str	r3, [r1, #40]	; 0x28
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	3b01      	subs	r3, #1
 80060c0:	025b      	lsls	r3, r3, #9
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	3b01      	subs	r3, #1
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	3b01      	subs	r3, #1
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060e0:	4923      	ldr	r1, [pc, #140]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060f2:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_OscConfig+0x778>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060fe:	00d2      	lsls	r2, r2, #3
 8006100:	491b      	ldr	r1, [pc, #108]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	f023 020c 	bic.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4917      	ldr	r1, [pc, #92]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	f023 0202 	bic.w	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	4912      	ldr	r1, [pc, #72]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006126:	4313      	orrs	r3, r2
 8006128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a10      	ldr	r2, [pc, #64]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800613c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a04      	ldr	r2, [pc, #16]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fb fb27 	bl	80017b8 <HAL_GetTick>
 800616a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800616c:	e011      	b.n	8006192 <HAL_RCC_OscConfig+0x78e>
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	58024800 	.word	0x58024800
 8006178:	fffffc0c 	.word	0xfffffc0c
 800617c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fb fb1a 	bl	80017b8 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e08a      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006192:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x77c>
 800619e:	e082      	b.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b43      	ldr	r3, [pc, #268]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a42      	ldr	r2, [pc, #264]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fb fb04 	bl	80017b8 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fb fb00 	bl	80017b8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e070      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061c6:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x7b0>
 80061d2:	e068      	b.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061d4:	4b36      	ldr	r3, [pc, #216]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061da:	4b35      	ldr	r3, [pc, #212]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d031      	beq.n	800624c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f003 0203 	and.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d12a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d122      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d108      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e02b      	b.n	80062a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006250:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d01f      	beq.n	80062a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006272:	f7fb faa1 	bl	80017b8 <HAL_GetTick>
 8006276:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006278:	bf00      	nop
 800627a:	f7fb fa9d 	bl	80017b8 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	4293      	cmp	r3, r2
 8006284:	d0f9      	beq.n	800627a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <HAL_RCC_OscConfig+0x8b0>)
 800628c:	4013      	ands	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4906      	ldr	r1, [pc, #24]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 8006296:	4313      	orrs	r3, r2
 8006298:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800629a:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <HAL_RCC_OscConfig+0x8ac>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3730      	adds	r7, #48	; 0x30
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	58024400 	.word	0x58024400
 80062b4:	ffff0007 	.word	0xffff0007

080062b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e19c      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b8a      	ldr	r3, [pc, #552]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d910      	bls.n	80062fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b87      	ldr	r3, [pc, #540]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 020f 	bic.w	r2, r3, #15
 80062e2:	4985      	ldr	r1, [pc, #532]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b83      	ldr	r3, [pc, #524]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e184      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	4b7b      	ldr	r3, [pc, #492]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006318:	4b78      	ldr	r3, [pc, #480]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	4975      	ldr	r1, [pc, #468]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	4b70      	ldr	r3, [pc, #448]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006342:	429a      	cmp	r2, r3
 8006344:	d908      	bls.n	8006358 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006346:	4b6d      	ldr	r3, [pc, #436]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	496a      	ldr	r1, [pc, #424]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	4b64      	ldr	r3, [pc, #400]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006370:	429a      	cmp	r2, r3
 8006372:	d908      	bls.n	8006386 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006374:	4b61      	ldr	r3, [pc, #388]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	495e      	ldr	r1, [pc, #376]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006382:	4313      	orrs	r3, r2
 8006384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	4b59      	ldr	r3, [pc, #356]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800639e:	429a      	cmp	r2, r3
 80063a0:	d908      	bls.n	80063b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063a2:	4b56      	ldr	r3, [pc, #344]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	4953      	ldr	r1, [pc, #332]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	4b4d      	ldr	r3, [pc, #308]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d908      	bls.n	80063e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063d0:	4b4a      	ldr	r3, [pc, #296]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f023 020f 	bic.w	r2, r3, #15
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4947      	ldr	r1, [pc, #284]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d055      	beq.n	800649a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ee:	4b43      	ldr	r3, [pc, #268]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4940      	ldr	r1, [pc, #256]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b02      	cmp	r3, #2
 8006406:	d107      	bne.n	8006418 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006408:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d121      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0f6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d107      	bne.n	8006430 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d115      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0ea      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d107      	bne.n	8006448 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006438:	4b30      	ldr	r3, [pc, #192]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0de      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	4b2c      	ldr	r3, [pc, #176]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0d6      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006458:	4b28      	ldr	r3, [pc, #160]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f023 0207 	bic.w	r2, r3, #7
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4925      	ldr	r1, [pc, #148]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 8006466:	4313      	orrs	r3, r2
 8006468:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fb f9a5 	bl	80017b8 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006470:	e00a      	b.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006472:	f7fb f9a1 	bl	80017b8 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006480:	4293      	cmp	r3, r2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e0be      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006488:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	429a      	cmp	r2, r3
 8006498:	d1eb      	bne.n	8006472 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d208      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f023 020f 	bic.w	r2, r3, #15
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	490e      	ldr	r1, [pc, #56]	; (80064fc <HAL_RCC_ClockConfig+0x244>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d214      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 020f 	bic.w	r2, r3, #15
 80064de:	4906      	ldr	r1, [pc, #24]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <HAL_RCC_ClockConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e086      	b.n	8006606 <HAL_RCC_ClockConfig+0x34e>
 80064f8:	52002000 	.word	0x52002000
 80064fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d010      	beq.n	800652e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	4b3f      	ldr	r3, [pc, #252]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006518:	429a      	cmp	r2, r3
 800651a:	d208      	bcs.n	800652e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800651c:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	4939      	ldr	r1, [pc, #228]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800652a:	4313      	orrs	r3, r2
 800652c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d010      	beq.n	800655c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695a      	ldr	r2, [r3, #20]
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006546:	429a      	cmp	r2, r3
 8006548:	d208      	bcs.n	800655c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	492e      	ldr	r1, [pc, #184]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006558:	4313      	orrs	r3, r2
 800655a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	4b28      	ldr	r3, [pc, #160]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006574:	429a      	cmp	r2, r3
 8006576:	d208      	bcs.n	800658a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4922      	ldr	r1, [pc, #136]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 8006586:	4313      	orrs	r3, r2
 8006588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d208      	bcs.n	80065b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4917      	ldr	r1, [pc, #92]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80065b8:	f000 f834 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	4912      	ldr	r1, [pc, #72]	; (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
 80065d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065d6:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_RCC_ClockConfig+0x358>)
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	4a0d      	ldr	r2, [pc, #52]	; (8006614 <HAL_RCC_ClockConfig+0x35c>)
 80065e0:	5cd3      	ldrb	r3, [r2, r3]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <HAL_RCC_ClockConfig+0x360>)
 80065ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065f0:	4a0a      	ldr	r2, [pc, #40]	; (800661c <HAL_RCC_ClockConfig+0x364>)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <HAL_RCC_ClockConfig+0x368>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fa fcca 	bl	8000f94 <HAL_InitTick>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	58024400 	.word	0x58024400
 8006614:	080278c4 	.word	0x080278c4
 8006618:	24000008 	.word	0x24000008
 800661c:	24000004 	.word	0x24000004
 8006620:	2400000c 	.word	0x2400000c

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	; 0x24
 8006628:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800662a:	4bb3      	ldr	r3, [pc, #716]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	2b18      	cmp	r3, #24
 8006634:	f200 8155 	bhi.w	80068e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <HAL_RCC_GetSysClockFreq+0x1c>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080068e3 	.word	0x080068e3
 8006648:	080068e3 	.word	0x080068e3
 800664c:	080068e3 	.word	0x080068e3
 8006650:	080068e3 	.word	0x080068e3
 8006654:	080068e3 	.word	0x080068e3
 8006658:	080068e3 	.word	0x080068e3
 800665c:	080068e3 	.word	0x080068e3
 8006660:	080066cb 	.word	0x080066cb
 8006664:	080068e3 	.word	0x080068e3
 8006668:	080068e3 	.word	0x080068e3
 800666c:	080068e3 	.word	0x080068e3
 8006670:	080068e3 	.word	0x080068e3
 8006674:	080068e3 	.word	0x080068e3
 8006678:	080068e3 	.word	0x080068e3
 800667c:	080068e3 	.word	0x080068e3
 8006680:	080066d1 	.word	0x080066d1
 8006684:	080068e3 	.word	0x080068e3
 8006688:	080068e3 	.word	0x080068e3
 800668c:	080068e3 	.word	0x080068e3
 8006690:	080068e3 	.word	0x080068e3
 8006694:	080068e3 	.word	0x080068e3
 8006698:	080068e3 	.word	0x080068e3
 800669c:	080068e3 	.word	0x080068e3
 80066a0:	080066d7 	.word	0x080066d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b94      	ldr	r3, [pc, #592]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b91      	ldr	r3, [pc, #580]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a90      	ldr	r2, [pc, #576]	; (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80066c2:	e111      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066c4:	4b8d      	ldr	r3, [pc, #564]	; (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066c6:	61bb      	str	r3, [r7, #24]
      break;
 80066c8:	e10e      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80066ca:	4b8d      	ldr	r3, [pc, #564]	; (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066cc:	61bb      	str	r3, [r7, #24]
      break;
 80066ce:	e10b      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80066d0:	4b8c      	ldr	r3, [pc, #560]	; (8006904 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80066d2:	61bb      	str	r3, [r7, #24]
      break;
 80066d4:	e108      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066d6:	4b88      	ldr	r3, [pc, #544]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066e0:	4b85      	ldr	r3, [pc, #532]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066ec:	4b82      	ldr	r3, [pc, #520]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066f6:	4b80      	ldr	r3, [pc, #512]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	08db      	lsrs	r3, r3, #3
 80066fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80e1 	beq.w	80068dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b02      	cmp	r3, #2
 800671e:	f000 8083 	beq.w	8006828 <HAL_RCC_GetSysClockFreq+0x204>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b02      	cmp	r3, #2
 8006726:	f200 80a1 	bhi.w	800686c <HAL_RCC_GetSysClockFreq+0x248>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x114>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d056      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006736:	e099      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006738:	4b6f      	ldr	r3, [pc, #444]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02d      	beq.n	80067a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006744:	4b6c      	ldr	r3, [pc, #432]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a6b      	ldr	r2, [pc, #428]	; (80068fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b62      	ldr	r3, [pc, #392]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006782:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800679e:	e087      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800690c <HAL_RCC_GetSysClockFreq+0x2e8>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b51      	ldr	r3, [pc, #324]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067e2:	e065      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b40      	ldr	r3, [pc, #256]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a02 	vldr	s12, [r7, #8]
 800680a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006826:	e043      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006914 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a02 	vldr	s12, [r7, #8]
 800684e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800686a:	e021      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006910 <HAL_RCC_GetSysClockFreq+0x2ec>
 800687a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800687e:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800688e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006892:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800689a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	3301      	adds	r3, #1
 80068bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80068c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d4:	ee17 3a90 	vmov	r3, s15
 80068d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80068da:	e005      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	61bb      	str	r3, [r7, #24]
      break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068e4:	61bb      	str	r3, [r7, #24]
      break;
 80068e6:	bf00      	nop
  }

  return sysclockfreq;
 80068e8:	69bb      	ldr	r3, [r7, #24]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3724      	adds	r7, #36	; 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	58024400 	.word	0x58024400
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	003d0900 	.word	0x003d0900
 8006904:	017d7840 	.word	0x017d7840
 8006908:	46000000 	.word	0x46000000
 800690c:	4c742400 	.word	0x4c742400
 8006910:	4a742400 	.word	0x4a742400
 8006914:	4bbebc20 	.word	0x4bbebc20

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800691e:	f7ff fe81 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 8006922:	4602      	mov	r2, r0
 8006924:	4b10      	ldr	r3, [pc, #64]	; (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	490f      	ldr	r1, [pc, #60]	; (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006930:	5ccb      	ldrb	r3, [r1, r3]
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <HAL_RCC_GetHCLKFreq+0x50>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	4a09      	ldr	r2, [pc, #36]	; (800696c <HAL_RCC_GetHCLKFreq+0x54>)
 8006946:	5cd3      	ldrb	r3, [r2, r3]
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4a07      	ldr	r2, [pc, #28]	; (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 8006954:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006956:	4a07      	ldr	r2, [pc, #28]	; (8006974 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <HAL_RCC_GetHCLKFreq+0x58>)
 800695e:	681b      	ldr	r3, [r3, #0]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	080278c4 	.word	0x080278c4
 8006970:	24000008 	.word	0x24000008
 8006974:	24000004 	.word	0x24000004

08006978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800697c:	f7ff ffcc 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	091b      	lsrs	r3, r3, #4
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4904      	ldr	r1, [pc, #16]	; (80069a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}
 800699c:	58024400 	.word	0x58024400
 80069a0:	080278c4 	.word	0x080278c4

080069a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	223f      	movs	r2, #63	; 0x3f
 80069b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0207 	and.w	r2, r3, #7
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80069fc:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <HAL_RCC_GetClockConfig+0x7c>)
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCC_GetClockConfig+0x80>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	58024400 	.word	0x58024400
 8006a24:	52002000 	.word	0x52002000

08006a28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a2c:	b0ca      	sub	sp, #296	; 0x128
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a4c:	2500      	movs	r5, #0
 8006a4e:	ea54 0305 	orrs.w	r3, r4, r5
 8006a52:	d049      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a5e:	d02f      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a64:	d828      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a6a:	d01a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a70:	d822      	bhi.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a7c:	e01c      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a7e:	4bb8      	ldr	r3, [pc, #736]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	4ab7      	ldr	r2, [pc, #732]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a8a:	e01a      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a90:	3308      	adds	r3, #8
 8006a92:	2102      	movs	r1, #2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f9d1 	bl	8007e3c <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aa0:	e00f      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa6:	3328      	adds	r3, #40	; 0x28
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 fa78 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006aca:	4ba5      	ldr	r3, [pc, #660]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad8:	4aa1      	ldr	r2, [pc, #644]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ada:	430b      	orrs	r3, r1
 8006adc:	6513      	str	r3, [r2, #80]	; 0x50
 8006ade:	e003      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ae4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	ea58 0309 	orrs.w	r3, r8, r9
 8006afc:	d047      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d82a      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b67 	.word	0x08006b67
 8006b20:	08006b67 	.word	0x08006b67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b24:	4b8e      	ldr	r3, [pc, #568]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	4a8d      	ldr	r2, [pc, #564]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b30:	e01a      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b36:	3308      	adds	r3, #8
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 f97e 	bl	8007e3c <RCCEx_PLL2_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b46:	e00f      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4c:	3328      	adds	r3, #40	; 0x28
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fa25 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b70:	4b7b      	ldr	r3, [pc, #492]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	f023 0107 	bic.w	r1, r3, #7
 8006b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7e:	4a78      	ldr	r2, [pc, #480]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6513      	str	r3, [r2, #80]	; 0x50
 8006b84:	e003      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006b9a:	f04f 0b00 	mov.w	fp, #0
 8006b9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ba2:	d04c      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bae:	d030      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb4:	d829      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb8:	d02d      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006bba:	2bc0      	cmp	r3, #192	; 0xc0
 8006bbc:	d825      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d018      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d821      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d007      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006bce:	e01c      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd0:	4b63      	ldr	r3, [pc, #396]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4a62      	ldr	r2, [pc, #392]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e01c      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be2:	3308      	adds	r3, #8
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 f928 	bl	8007e3c <RCCEx_PLL2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e011      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf8:	3328      	adds	r3, #40	; 0x28
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f9cf 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006c08:	e006      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c20:	4b4f      	ldr	r3, [pc, #316]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2e:	4a4c      	ldr	r2, [pc, #304]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6513      	str	r3, [r2, #80]	; 0x50
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006c54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d053      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c6a:	d035      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006c6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c70:	d82e      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c76:	d031      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006c78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c7c:	d828      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c82:	d01a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c88:	d822      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c92:	d007      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006c94:	e01c      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c96:	4b32      	ldr	r3, [pc, #200]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	4a31      	ldr	r2, [pc, #196]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca2:	e01c      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f8c5 	bl	8007e3c <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e011      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cbe:	3328      	adds	r3, #40	; 0x28
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 f96c 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cce:	e006      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cd6:	e002      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ce6:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cf6:	4a1a      	ldr	r2, [pc, #104]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfc:	e003      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d16:	2300      	movs	r3, #0
 8006d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006d20:	460b      	mov	r3, r1
 8006d22:	4313      	orrs	r3, r2
 8006d24:	d056      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d32:	d038      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d38:	d831      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d3e:	d034      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006d40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d44:	d82b      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d4a:	d01d      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d50:	d825      	bhi.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d5a:	d00a      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006d5c:	e01f      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d64:	4ba2      	ldr	r3, [pc, #648]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	4aa1      	ldr	r2, [pc, #644]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d70:	e01c      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d76:	3308      	adds	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f85e 	bl	8007e3c <RCCEx_PLL2_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006d86:	e011      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8c:	3328      	adds	r3, #40	; 0x28
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f905 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e006      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006da4:	e002      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006da6:	bf00      	nop
 8006da8:	e000      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006db4:	4b8e      	ldr	r3, [pc, #568]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dc4:	4a8a      	ldr	r2, [pc, #552]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8006dca:	e003      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006dea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006dee:	460b      	mov	r3, r1
 8006df0:	4313      	orrs	r3, r2
 8006df2:	d03a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dfa:	2b30      	cmp	r3, #48	; 0x30
 8006dfc:	d01f      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006dfe:	2b30      	cmp	r3, #48	; 0x30
 8006e00:	d819      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d00c      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d815      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d019      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006e0e:	2b10      	cmp	r3, #16
 8006e10:	d111      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e12:	4b77      	ldr	r3, [pc, #476]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a76      	ldr	r2, [pc, #472]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e1e:	e011      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e24:	3308      	adds	r3, #8
 8006e26:	2102      	movs	r1, #2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f807 	bl	8007e3c <RCCEx_PLL2_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006e34:	e006      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e3c:	e002      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e3e:	bf00      	nop
 8006e40:	e000      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e4c:	4b68      	ldr	r3, [pc, #416]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	4a65      	ldr	r2, [pc, #404]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e60:	e003      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4313      	orrs	r3, r2
 8006e88:	d051      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e94:	d035      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e9a:	d82e      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea0:	d031      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea6:	d828      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d01a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb2:	d822      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebc:	d007      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006ebe:	e01c      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b4b      	ldr	r3, [pc, #300]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a4a      	ldr	r2, [pc, #296]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e01c      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 ffb0 	bl	8007e3c <RCCEx_PLL2_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e011      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee8:	3328      	adds	r3, #40	; 0x28
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 f857 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f10:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6513      	str	r3, [r2, #80]	; 0x50
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	d056      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f58:	d033      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f5e:	d82c      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f64:	d02f      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006f66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f6a:	d826      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f70:	d02b      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006f72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f76:	d820      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f7c:	d012      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f82:	d81a      	bhi.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d022      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8c:	d115      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f92:	3308      	adds	r3, #8
 8006f94:	2101      	movs	r1, #1
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 ff50 	bl	8007e3c <RCCEx_PLL2_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fa2:	e015      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa8:	3328      	adds	r3, #40	; 0x28
 8006faa:	2101      	movs	r1, #1
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fff7 	bl	8007fa0 <RCCEx_PLL3_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fb8:	e00a      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fc0:	e006      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fc2:	bf00      	nop
 8006fc4:	e004      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe6:	4a02      	ldr	r2, [pc, #8]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6513      	str	r3, [r2, #80]	; 0x50
 8006fec:	e006      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fee:	bf00      	nop
 8006ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800700c:	2300      	movs	r3, #0
 800700e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007012:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007016:	460b      	mov	r3, r1
 8007018:	4313      	orrs	r3, r2
 800701a:	d055      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007028:	d033      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800702a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800702e:	d82c      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007034:	d02f      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703a:	d826      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800703c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007040:	d02b      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007042:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007046:	d820      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704c:	d012      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007052:	d81a      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d022      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800705c:	d115      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	3308      	adds	r3, #8
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fee8 	bl	8007e3c <RCCEx_PLL2_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007072:	e015      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007078:	3328      	adds	r3, #40	; 0x28
 800707a:	2101      	movs	r1, #1
 800707c:	4618      	mov	r0, r3
 800707e:	f000 ff8f 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007088:	e00a      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007090:	e006      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007092:	bf00      	nop
 8007094:	e004      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800709e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070a8:	4ba3      	ldr	r3, [pc, #652]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070b8:	4a9f      	ldr	r2, [pc, #636]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6593      	str	r3, [r2, #88]	; 0x58
 80070be:	e003      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80070d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d037      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f2:	d00e      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80070f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f8:	d816      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d018      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80070fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007102:	d111      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007104:	4b8c      	ldr	r3, [pc, #560]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a8b      	ldr	r2, [pc, #556]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800710a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007110:	e00f      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007116:	3308      	adds	r3, #8
 8007118:	2101      	movs	r1, #1
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fe8e 	bl	8007e3c <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007126:	e004      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800712e:	e000      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800713a:	4b7f      	ldr	r3, [pc, #508]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800713c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	4a7b      	ldr	r2, [pc, #492]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800714a:	430b      	orrs	r3, r1
 800714c:	6513      	str	r3, [r2, #80]	; 0x50
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007168:	2300      	movs	r3, #0
 800716a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800716e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007172:	460b      	mov	r3, r1
 8007174:	4313      	orrs	r3, r2
 8007176:	d039      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717e:	2b03      	cmp	r3, #3
 8007180:	d81c      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071c5 	.word	0x080071c5
 800718c:	08007199 	.word	0x08007199
 8007190:	080071a7 	.word	0x080071a7
 8007194:	080071c5 	.word	0x080071c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4b67      	ldr	r3, [pc, #412]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a66      	ldr	r2, [pc, #408]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071a4:	e00f      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071aa:	3308      	adds	r3, #8
 80071ac:	2102      	movs	r1, #2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fe44 	bl	8007e3c <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80071c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071ce:	4b5a      	ldr	r3, [pc, #360]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	f023 0103 	bic.w	r1, r3, #3
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071dc:	4a56      	ldr	r2, [pc, #344]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071de:	430b      	orrs	r3, r1
 80071e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80071f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007202:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	f000 809f 	beq.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800720e:	4b4b      	ldr	r3, [pc, #300]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4a      	ldr	r2, [pc, #296]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800721a:	f7fa facd 	bl	80017b8 <HAL_GetTick>
 800721e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007222:	e00b      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007224:	f7fa fac8 	bl	80017b8 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b64      	cmp	r3, #100	; 0x64
 8007232:	d903      	bls.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800723a:	e005      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800723c:	4b3f      	ldr	r3, [pc, #252]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0ed      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800724c:	2b00      	cmp	r3, #0
 800724e:	d179      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007250:	4b39      	ldr	r3, [pc, #228]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800725c:	4053      	eors	r3, r2
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d015      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007266:	4b34      	ldr	r3, [pc, #208]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007272:	4b31      	ldr	r3, [pc, #196]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007276:	4a30      	ldr	r2, [pc, #192]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800727c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800727e:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007288:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800728a:	4a2b      	ldr	r2, [pc, #172]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800728c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007290:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800729a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729e:	d118      	bne.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fa fa8a 	bl	80017b8 <HAL_GetTick>
 80072a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a8:	e00d      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072aa:	f7fa fa85 	bl	80017b8 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80072b4:	1ad2      	subs	r2, r2, r3
 80072b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d903      	bls.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80072c4:	e005      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072c6:	4b1c      	ldr	r3, [pc, #112]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0eb      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80072d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d129      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ea:	d10e      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80072ec:	4b12      	ldr	r3, [pc, #72]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80072fc:	091a      	lsrs	r2, r3, #4
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007300:	4013      	ands	r3, r2
 8007302:	4a0d      	ldr	r2, [pc, #52]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6113      	str	r3, [r2, #16]
 8007308:	e005      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800730a:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007310:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007314:	6113      	str	r3, [r2, #16]
 8007316:	4b08      	ldr	r3, [pc, #32]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007318:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800731a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007326:	4a04      	ldr	r2, [pc, #16]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007328:	430b      	orrs	r3, r1
 800732a:	6713      	str	r3, [r2, #112]	; 0x70
 800732c:	e00e      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800732e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007336:	e009      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007338:	58024400 	.word	0x58024400
 800733c:	58024800 	.word	0x58024800
 8007340:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f002 0301 	and.w	r3, r2, #1
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007362:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	f000 8089 	beq.w	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800736e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007374:	2b28      	cmp	r3, #40	; 0x28
 8007376:	d86b      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007459 	.word	0x08007459
 8007384:	08007451 	.word	0x08007451
 8007388:	08007451 	.word	0x08007451
 800738c:	08007451 	.word	0x08007451
 8007390:	08007451 	.word	0x08007451
 8007394:	08007451 	.word	0x08007451
 8007398:	08007451 	.word	0x08007451
 800739c:	08007451 	.word	0x08007451
 80073a0:	08007425 	.word	0x08007425
 80073a4:	08007451 	.word	0x08007451
 80073a8:	08007451 	.word	0x08007451
 80073ac:	08007451 	.word	0x08007451
 80073b0:	08007451 	.word	0x08007451
 80073b4:	08007451 	.word	0x08007451
 80073b8:	08007451 	.word	0x08007451
 80073bc:	08007451 	.word	0x08007451
 80073c0:	0800743b 	.word	0x0800743b
 80073c4:	08007451 	.word	0x08007451
 80073c8:	08007451 	.word	0x08007451
 80073cc:	08007451 	.word	0x08007451
 80073d0:	08007451 	.word	0x08007451
 80073d4:	08007451 	.word	0x08007451
 80073d8:	08007451 	.word	0x08007451
 80073dc:	08007451 	.word	0x08007451
 80073e0:	08007459 	.word	0x08007459
 80073e4:	08007451 	.word	0x08007451
 80073e8:	08007451 	.word	0x08007451
 80073ec:	08007451 	.word	0x08007451
 80073f0:	08007451 	.word	0x08007451
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007451 	.word	0x08007451
 8007400:	08007459 	.word	0x08007459
 8007404:	08007451 	.word	0x08007451
 8007408:	08007451 	.word	0x08007451
 800740c:	08007451 	.word	0x08007451
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
 8007418:	08007451 	.word	0x08007451
 800741c:	08007451 	.word	0x08007451
 8007420:	08007459 	.word	0x08007459
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007428:	3308      	adds	r3, #8
 800742a:	2101      	movs	r1, #1
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fd05 	bl	8007e3c <RCCEx_PLL2_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007438:	e00f      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743e:	3328      	adds	r3, #40	; 0x28
 8007440:	2101      	movs	r1, #1
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fdac 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800744e:	e004      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007456:	e000      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007462:	4bbf      	ldr	r3, [pc, #764]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007470:	4abb      	ldr	r2, [pc, #748]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007472:	430b      	orrs	r3, r1
 8007474:	6553      	str	r3, [r2, #84]	; 0x54
 8007476:	e003      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	f002 0302 	and.w	r3, r2, #2
 800748c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007490:	2300      	movs	r3, #0
 8007492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007496:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800749a:	460b      	mov	r3, r1
 800749c:	4313      	orrs	r3, r2
 800749e:	d041      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d824      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074fd 	.word	0x080074fd
 80074b4:	080074c9 	.word	0x080074c9
 80074b8:	080074df 	.word	0x080074df
 80074bc:	080074fd 	.word	0x080074fd
 80074c0:	080074fd 	.word	0x080074fd
 80074c4:	080074fd 	.word	0x080074fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074cc:	3308      	adds	r3, #8
 80074ce:	2101      	movs	r1, #1
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fcb3 	bl	8007e3c <RCCEx_PLL2_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074dc:	e00f      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	3328      	adds	r3, #40	; 0x28
 80074e4:	2101      	movs	r1, #1
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fd5a 	bl	8007fa0 <RCCEx_PLL3_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80074f2:	e004      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074fa:	e000      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80074fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007506:	4b96      	ldr	r3, [pc, #600]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f023 0107 	bic.w	r1, r3, #7
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007514:	4a92      	ldr	r2, [pc, #584]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007516:	430b      	orrs	r3, r1
 8007518:	6553      	str	r3, [r2, #84]	; 0x54
 800751a:	e003      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f002 0304 	and.w	r3, r2, #4
 8007530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007534:	2300      	movs	r3, #0
 8007536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800753a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800753e:	460b      	mov	r3, r1
 8007540:	4313      	orrs	r3, r2
 8007542:	d044      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800754c:	2b05      	cmp	r3, #5
 800754e:	d825      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007550:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	080075a5 	.word	0x080075a5
 800755c:	08007571 	.word	0x08007571
 8007560:	08007587 	.word	0x08007587
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007574:	3308      	adds	r3, #8
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fc5f 	bl	8007e3c <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007584:	e00f      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758a:	3328      	adds	r3, #40	; 0x28
 800758c:	2101      	movs	r1, #1
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fd06 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800759a:	e004      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075a2:	e000      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80075a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ae:	4b6c      	ldr	r3, [pc, #432]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	f023 0107 	bic.w	r1, r3, #7
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075be:	4a68      	ldr	r2, [pc, #416]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6593      	str	r3, [r2, #88]	; 0x58
 80075c4:	e003      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f002 0320 	and.w	r3, r2, #32
 80075da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075de:	2300      	movs	r3, #0
 80075e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075e8:	460b      	mov	r3, r1
 80075ea:	4313      	orrs	r3, r2
 80075ec:	d055      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075fa:	d033      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80075fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007600:	d82c      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007606:	d02f      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d826      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800760e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007612:	d02b      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007618:	d820      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761e:	d012      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007624:	d81a      	bhi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d022      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800762a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800762e:	d115      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007634:	3308      	adds	r3, #8
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fbff 	bl	8007e3c <RCCEx_PLL2_Config>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007644:	e015      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764a:	3328      	adds	r3, #40	; 0x28
 800764c:	2102      	movs	r1, #2
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fca6 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800765a:	e00a      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007662:	e006      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007664:	bf00      	nop
 8007666:	e004      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007668:	bf00      	nop
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800766c:	bf00      	nop
 800766e:	e000      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800767a:	4b39      	ldr	r3, [pc, #228]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768a:	4a35      	ldr	r2, [pc, #212]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6553      	str	r3, [r2, #84]	; 0x54
 8007690:	e003      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80076a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076aa:	2300      	movs	r3, #0
 80076ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4313      	orrs	r3, r2
 80076b8:	d058      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076c6:	d033      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80076c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076cc:	d82c      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d02f      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d8:	d826      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076de:	d02b      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80076e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076e4:	d820      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ea:	d012      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80076ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076f0:	d81a      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d022      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80076f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fa:	d115      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007700:	3308      	adds	r3, #8
 8007702:	2100      	movs	r1, #0
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fb99 	bl	8007e3c <RCCEx_PLL2_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007710:	e015      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	3328      	adds	r3, #40	; 0x28
 8007718:	2102      	movs	r1, #2
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fc40 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007726:	e00a      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800772e:	e006      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007730:	bf00      	nop
 8007732:	e004      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800773c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10e      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007746:	4b06      	ldr	r3, [pc, #24]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800774e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007756:	4a02      	ldr	r2, [pc, #8]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007758:	430b      	orrs	r3, r1
 800775a:	6593      	str	r3, [r2, #88]	; 0x58
 800775c:	e006      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800777c:	2300      	movs	r3, #0
 800777e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007782:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d055      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800778c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007794:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007798:	d033      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800779a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800779e:	d82c      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a4:	d02f      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077aa:	d826      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077b0:	d02b      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80077b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077b6:	d820      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077bc:	d012      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80077be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c2:	d81a      	bhi.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d022      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80077c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077cc:	d115      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d2:	3308      	adds	r3, #8
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fb30 	bl	8007e3c <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077e2:	e015      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e8:	3328      	adds	r3, #40	; 0x28
 80077ea:	2102      	movs	r1, #2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fbd7 	bl	8007fa0 <RCCEx_PLL3_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00a      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007800:	e006      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007802:	bf00      	nop
 8007804:	e004      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800780e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007818:	4ba1      	ldr	r3, [pc, #644]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007828:	4a9d      	ldr	r2, [pc, #628]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800782a:	430b      	orrs	r3, r1
 800782c:	6593      	str	r3, [r2, #88]	; 0x58
 800782e:	e003      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007834:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f002 0308 	and.w	r3, r2, #8
 8007844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007848:	2300      	movs	r3, #0
 800784a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800784e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007852:	460b      	mov	r3, r1
 8007854:	4313      	orrs	r3, r2
 8007856:	d01e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007864:	d10c      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786a:	3328      	adds	r3, #40	; 0x28
 800786c:	2102      	movs	r1, #2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fb96 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007880:	4b87      	ldr	r3, [pc, #540]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007890:	4a83      	ldr	r2, [pc, #524]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007892:	430b      	orrs	r3, r1
 8007894:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f002 0310 	and.w	r3, r2, #16
 80078a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078a6:	2300      	movs	r3, #0
 80078a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80078b0:	460b      	mov	r3, r1
 80078b2:	4313      	orrs	r3, r2
 80078b4:	d01e      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c2:	d10c      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c8:	3328      	adds	r3, #40	; 0x28
 80078ca:	2102      	movs	r1, #2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fb67 	bl	8007fa0 <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078de:	4b70      	ldr	r3, [pc, #448]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ee:	4a6c      	ldr	r2, [pc, #432]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007904:	2300      	movs	r3, #0
 8007906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800790a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d03e      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800791c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007920:	d022      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007926:	d81b      	bhi.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d00b      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007932:	e015      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007938:	3308      	adds	r3, #8
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fa7d 	bl	8007e3c <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007948:	e00f      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794e:	3328      	adds	r3, #40	; 0x28
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fb24 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007972:	4b4b      	ldr	r3, [pc, #300]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007976:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007982:	4a47      	ldr	r2, [pc, #284]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6593      	str	r3, [r2, #88]	; 0x58
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800799e:	67bb      	str	r3, [r7, #120]	; 0x78
 80079a0:	2300      	movs	r3, #0
 80079a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80079a8:	460b      	mov	r3, r1
 80079aa:	4313      	orrs	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ba:	d01f      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80079bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c0:	d818      	bhi.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80079c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c6:	d003      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80079c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079cc:	d007      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80079ce:	e011      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d0:	4b33      	ldr	r3, [pc, #204]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a32      	ldr	r2, [pc, #200]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80079dc:	e00f      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e2:	3328      	adds	r3, #40	; 0x28
 80079e4:	2101      	movs	r1, #1
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fada 	bl	8007fa0 <RCCEx_PLL3_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80079f2:	e004      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079fa:	e000      	b.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80079fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a06:	4b26      	ldr	r3, [pc, #152]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a16:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6553      	str	r3, [r2, #84]	; 0x54
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007a32:	673b      	str	r3, [r7, #112]	; 0x70
 8007a34:	2300      	movs	r3, #0
 8007a36:	677b      	str	r3, [r7, #116]	; 0x74
 8007a38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	d034      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a50:	d007      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007a52:	e011      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a60:	e00e      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	3308      	adds	r3, #8
 8007a68:	2102      	movs	r1, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f9e6 	bl	8007e3c <RCCEx_PLL2_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a76:	e003      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10d      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a96:	4a02      	ldr	r2, [pc, #8]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a9c:	e006      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007a9e:	bf00      	nop
 8007aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aba:	2300      	movs	r3, #0
 8007abc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007abe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	d00c      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007acc:	3328      	adds	r3, #40	; 0x28
 8007ace:	2102      	movs	r1, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fa65 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007aee:	663b      	str	r3, [r7, #96]	; 0x60
 8007af0:	2300      	movs	r3, #0
 8007af2:	667b      	str	r3, [r7, #100]	; 0x64
 8007af4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d038      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b0a:	d018      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b10:	d811      	bhi.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b16:	d014      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1c:	d80b      	bhi.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b26:	d106      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4bc3      	ldr	r3, [pc, #780]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4ac2      	ldr	r2, [pc, #776]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b34:	e008      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b3c:	e004      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b50:	4bb9      	ldr	r3, [pc, #740]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b60:	4ab5      	ldr	r2, [pc, #724]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b62:	430b      	orrs	r3, r1
 8007b64:	6553      	str	r3, [r2, #84]	; 0x54
 8007b66:	e003      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b7e:	2300      	movs	r3, #0
 8007b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007b86:	460b      	mov	r3, r1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007b8c:	4baa      	ldr	r3, [pc, #680]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	4aa7      	ldr	r2, [pc, #668]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007bac:	653b      	str	r3, [r7, #80]	; 0x50
 8007bae:	2300      	movs	r3, #0
 8007bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007bbc:	4b9e      	ldr	r3, [pc, #632]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007bcc:	4a9a      	ldr	r2, [pc, #616]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007be0:	2300      	movs	r3, #0
 8007be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007be8:	460b      	mov	r3, r1
 8007bea:	4313      	orrs	r3, r2
 8007bec:	d009      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bee:	4b92      	ldr	r3, [pc, #584]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfc:	4a8e      	ldr	r2, [pc, #568]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c10:	2300      	movs	r3, #0
 8007c12:	647b      	str	r3, [r7, #68]	; 0x44
 8007c14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c1e:	4b86      	ldr	r3, [pc, #536]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	4a85      	ldr	r2, [pc, #532]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c28:	6113      	str	r3, [r2, #16]
 8007c2a:	4b83      	ldr	r3, [pc, #524]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c2c:	6919      	ldr	r1, [r3, #16]
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c36:	4a80      	ldr	r2, [pc, #512]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007c52:	460b      	mov	r3, r1
 8007c54:	4313      	orrs	r3, r2
 8007c56:	d009      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c58:	4b77      	ldr	r3, [pc, #476]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	4a74      	ldr	r2, [pc, #464]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c82:	460b      	mov	r3, r1
 8007c84:	4313      	orrs	r3, r2
 8007c86:	d00a      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c88:	4b6b      	ldr	r3, [pc, #428]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	4a67      	ldr	r2, [pc, #412]	; (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	d011      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f8ba 	bl	8007e3c <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6239      	str	r1, [r7, #32]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	d011      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfe:	3308      	adds	r3, #8
 8007d00:	2101      	movs	r1, #1
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f89a 	bl	8007e3c <RCCEx_PLL2_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	2100      	movs	r1, #0
 8007d28:	61b9      	str	r1, [r7, #24]
 8007d2a:	f003 0304 	and.w	r3, r3, #4
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d011      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	3308      	adds	r3, #8
 8007d40:	2102      	movs	r1, #2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f87a 	bl	8007e3c <RCCEx_PLL2_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	2100      	movs	r1, #0
 8007d68:	6139      	str	r1, [r7, #16]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d74:	460b      	mov	r3, r1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	d011      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7e:	3328      	adds	r3, #40	; 0x28
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f90c 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	2100      	movs	r1, #0
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	f003 0310 	and.w	r3, r3, #16
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007db4:	460b      	mov	r3, r1
 8007db6:	4313      	orrs	r3, r2
 8007db8:	d011      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dbe:	3328      	adds	r3, #40	; 0x28
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f8ec 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	2100      	movs	r1, #0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	607b      	str	r3, [r7, #4]
 8007df0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007df4:	460b      	mov	r3, r1
 8007df6:	4313      	orrs	r3, r2
 8007df8:	d011      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfe:	3328      	adds	r3, #40	; 0x28
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8cc 	bl	8007fa0 <RCCEx_PLL3_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007e1e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e000      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007e32:	46bd      	mov	sp, r7
 8007e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e38:	58024400 	.word	0x58024400

08007e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e4a:	4b53      	ldr	r3, [pc, #332]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d101      	bne.n	8007e5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e099      	b.n	8007f8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4e      	ldr	r2, [pc, #312]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e66:	f7f9 fca7 	bl	80017b8 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e6c:	e008      	b.n	8007e80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e6e:	f7f9 fca3 	bl	80017b8 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e086      	b.n	8007f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e80:	4b45      	ldr	r3, [pc, #276]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e8c:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	031b      	lsls	r3, r3, #12
 8007e9a:	493f      	ldr	r1, [pc, #252]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	628b      	str	r3, [r1, #40]	; 0x28
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	025b      	lsls	r3, r3, #9
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	061b      	lsls	r3, r3, #24
 8007ecc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ed0:	4931      	ldr	r1, [pc, #196]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ed6:	4b30      	ldr	r3, [pc, #192]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	492d      	ldr	r1, [pc, #180]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ee8:	4b2b      	ldr	r3, [pc, #172]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	f023 0220 	bic.w	r2, r3, #32
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	4928      	ldr	r1, [pc, #160]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007efa:	4b27      	ldr	r3, [pc, #156]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	4a26      	ldr	r2, [pc, #152]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f00:	f023 0310 	bic.w	r3, r3, #16
 8007f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <RCCEx_PLL2_Config+0x160>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	69d2      	ldr	r2, [r2, #28]
 8007f12:	00d2      	lsls	r2, r2, #3
 8007f14:	4920      	ldr	r1, [pc, #128]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f1a:	4b1f      	ldr	r3, [pc, #124]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	4a1e      	ldr	r2, [pc, #120]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f20:	f043 0310 	orr.w	r3, r3, #16
 8007f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4a19      	ldr	r2, [pc, #100]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f38:	e00f      	b.n	8007f5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d106      	bne.n	8007f4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f4c:	e005      	b.n	8007f5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a0e      	ldr	r2, [pc, #56]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f66:	f7f9 fc27 	bl	80017b8 <HAL_GetTick>
 8007f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f6c:	e008      	b.n	8007f80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f6e:	f7f9 fc23 	bl	80017b8 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f80:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <RCCEx_PLL2_Config+0x15c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
 8007f9c:	ffff0007 	.word	0xffff0007

08007fa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fae:	4b53      	ldr	r3, [pc, #332]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d101      	bne.n	8007fbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e099      	b.n	80080f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007fbe:	4b4f      	ldr	r3, [pc, #316]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a4e      	ldr	r2, [pc, #312]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8007fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fca:	f7f9 fbf5 	bl	80017b8 <HAL_GetTick>
 8007fce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fd0:	e008      	b.n	8007fe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fd2:	f7f9 fbf1 	bl	80017b8 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d901      	bls.n	8007fe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e086      	b.n	80080f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fe4:	4b45      	ldr	r3, [pc, #276]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1f0      	bne.n	8007fd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ff0:	4b42      	ldr	r3, [pc, #264]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	051b      	lsls	r3, r3, #20
 8007ffe:	493f      	ldr	r1, [pc, #252]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008000:	4313      	orrs	r3, r2
 8008002:	628b      	str	r3, [r1, #40]	; 0x28
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	3b01      	subs	r3, #1
 800800a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	3b01      	subs	r3, #1
 8008014:	025b      	lsls	r3, r3, #9
 8008016:	b29b      	uxth	r3, r3
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008034:	4931      	ldr	r1, [pc, #196]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800803a:	4b30      	ldr	r3, [pc, #192]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	492d      	ldr	r1, [pc, #180]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800804c:	4b2b      	ldr	r3, [pc, #172]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	4928      	ldr	r1, [pc, #160]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	4a26      	ldr	r2, [pc, #152]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 800806c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <RCCEx_PLL3_Config+0x160>)
 8008070:	4013      	ands	r3, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	69d2      	ldr	r2, [r2, #28]
 8008076:	00d2      	lsls	r2, r2, #3
 8008078:	4920      	ldr	r1, [pc, #128]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800807e:	4b1f      	ldr	r3, [pc, #124]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	4a1e      	ldr	r2, [pc, #120]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d106      	bne.n	800809e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008090:	4b1a      	ldr	r3, [pc, #104]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	4a19      	ldr	r2, [pc, #100]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 8008096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800809a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800809c:	e00f      	b.n	80080be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d106      	bne.n	80080b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a14      	ldr	r2, [pc, #80]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080b0:	e005      	b.n	80080be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a0e      	ldr	r2, [pc, #56]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ca:	f7f9 fb75 	bl	80017b8 <HAL_GetTick>
 80080ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080d0:	e008      	b.n	80080e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080d2:	f7f9 fb71 	bl	80017b8 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d901      	bls.n	80080e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e006      	b.n	80080f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <RCCEx_PLL3_Config+0x15c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0f0      	beq.n	80080d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
 8008100:	ffff0007 	.word	0xffff0007

08008104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e049      	b.n	80081aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f841 	bl	80081b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f000 fa00 	bl	8008548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d001      	beq.n	80081e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e054      	b.n	800828a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a26      	ldr	r2, [pc, #152]	; (8008298 <HAL_TIM_Base_Start_IT+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d022      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820a:	d01d      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a22      	ldr	r2, [pc, #136]	; (800829c <HAL_TIM_Base_Start_IT+0xd4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d018      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00e      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d009      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <HAL_TIM_Base_Start_IT+0xe4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d004      	beq.n	8008248 <HAL_TIM_Base_Start_IT+0x80>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d115      	bne.n	8008274 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <HAL_TIM_Base_Start_IT+0xec>)
 8008250:	4013      	ands	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b06      	cmp	r3, #6
 8008258:	d015      	beq.n	8008286 <HAL_TIM_Base_Start_IT+0xbe>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d011      	beq.n	8008286 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008272:	e008      	b.n	8008286 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0201 	orr.w	r2, r2, #1
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e000      	b.n	8008288 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40010000 	.word	0x40010000
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40010400 	.word	0x40010400
 80082ac:	40001800 	.word	0x40001800
 80082b0:	40014000 	.word	0x40014000
 80082b4:	00010007 	.word	0x00010007

080082b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d122      	bne.n	8008314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d11b      	bne.n	8008314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0202 	mvn.w	r2, #2
 80082e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f905 	bl	800850a <HAL_TIM_IC_CaptureCallback>
 8008300:	e005      	b.n	800830e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8f7 	bl	80084f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f908 	bl	800851e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b04      	cmp	r3, #4
 8008320:	d122      	bne.n	8008368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b04      	cmp	r3, #4
 800832e:	d11b      	bne.n	8008368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f06f 0204 	mvn.w	r2, #4
 8008338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2202      	movs	r2, #2
 800833e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f8db 	bl	800850a <HAL_TIM_IC_CaptureCallback>
 8008354:	e005      	b.n	8008362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8cd 	bl	80084f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f8de 	bl	800851e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 0308 	and.w	r3, r3, #8
 8008372:	2b08      	cmp	r3, #8
 8008374:	d122      	bne.n	80083bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b08      	cmp	r3, #8
 8008382:	d11b      	bne.n	80083bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f06f 0208 	mvn.w	r2, #8
 800838c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8b1 	bl	800850a <HAL_TIM_IC_CaptureCallback>
 80083a8:	e005      	b.n	80083b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8a3 	bl	80084f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f8b4 	bl	800851e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	f003 0310 	and.w	r3, r3, #16
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d122      	bne.n	8008410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b10      	cmp	r3, #16
 80083d6:	d11b      	bne.n	8008410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f06f 0210 	mvn.w	r2, #16
 80083e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2208      	movs	r2, #8
 80083e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f887 	bl	800850a <HAL_TIM_IC_CaptureCallback>
 80083fc:	e005      	b.n	800840a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f879 	bl	80084f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f88a 	bl	800851e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10e      	bne.n	800843c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	d107      	bne.n	800843c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f06f 0201 	mvn.w	r2, #1
 8008434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7f8 fc60 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008446:	2b80      	cmp	r3, #128	; 0x80
 8008448:	d10e      	bne.n	8008468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008454:	2b80      	cmp	r3, #128	; 0x80
 8008456:	d107      	bne.n	8008468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f914 	bl	8008690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008476:	d10e      	bne.n	8008496 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d107      	bne.n	8008496 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800848e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f907 	bl	80086a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	d10e      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	d107      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f838 	bl	8008532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d10e      	bne.n	80084ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d107      	bne.n	80084ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f06f 0220 	mvn.w	r2, #32
 80084e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f8c7 	bl	800867c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800850a:	b480      	push	{r7}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008512:	bf00      	nop
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a40      	ldr	r2, [pc, #256]	; (800865c <TIM_Base_SetConfig+0x114>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d013      	beq.n	8008588 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008566:	d00f      	beq.n	8008588 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3d      	ldr	r2, [pc, #244]	; (8008660 <TIM_Base_SetConfig+0x118>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00b      	beq.n	8008588 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3c      	ldr	r2, [pc, #240]	; (8008664 <TIM_Base_SetConfig+0x11c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3b      	ldr	r2, [pc, #236]	; (8008668 <TIM_Base_SetConfig+0x120>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3a      	ldr	r2, [pc, #232]	; (800866c <TIM_Base_SetConfig+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d108      	bne.n	800859a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2f      	ldr	r2, [pc, #188]	; (800865c <TIM_Base_SetConfig+0x114>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01f      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a8:	d01b      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2c      	ldr	r2, [pc, #176]	; (8008660 <TIM_Base_SetConfig+0x118>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d017      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a2b      	ldr	r2, [pc, #172]	; (8008664 <TIM_Base_SetConfig+0x11c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2a      	ldr	r2, [pc, #168]	; (8008668 <TIM_Base_SetConfig+0x120>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00f      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a29      	ldr	r2, [pc, #164]	; (800866c <TIM_Base_SetConfig+0x124>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00b      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a28      	ldr	r2, [pc, #160]	; (8008670 <TIM_Base_SetConfig+0x128>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d007      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a27      	ldr	r2, [pc, #156]	; (8008674 <TIM_Base_SetConfig+0x12c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d003      	beq.n	80085e2 <TIM_Base_SetConfig+0x9a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a26      	ldr	r2, [pc, #152]	; (8008678 <TIM_Base_SetConfig+0x130>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d108      	bne.n	80085f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a10      	ldr	r2, [pc, #64]	; (800865c <TIM_Base_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0xf8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a12      	ldr	r2, [pc, #72]	; (800866c <TIM_Base_SetConfig+0x124>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0xf8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a11      	ldr	r2, [pc, #68]	; (8008670 <TIM_Base_SetConfig+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0xf8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a10      	ldr	r2, [pc, #64]	; (8008674 <TIM_Base_SetConfig+0x12c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0xf8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a0f      	ldr	r2, [pc, #60]	; (8008678 <TIM_Base_SetConfig+0x130>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d103      	bne.n	8008648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691a      	ldr	r2, [r3, #16]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	615a      	str	r2, [r3, #20]
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40010000 	.word	0x40010000
 8008660:	40000400 	.word	0x40000400
 8008664:	40000800 	.word	0x40000800
 8008668:	40000c00 	.word	0x40000c00
 800866c:	40010400 	.word	0x40010400
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800

0800867c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80086bc:	bf00      	nop
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <__NVIC_SetPriority>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80086d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db0a      	blt.n	80086f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	490c      	ldr	r1, [pc, #48]	; (8008714 <__NVIC_SetPriority+0x4c>)
 80086e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086e6:	0112      	lsls	r2, r2, #4
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	440b      	add	r3, r1
 80086ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086f0:	e00a      	b.n	8008708 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4908      	ldr	r1, [pc, #32]	; (8008718 <__NVIC_SetPriority+0x50>)
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	3b04      	subs	r3, #4
 8008700:	0112      	lsls	r2, r2, #4
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	440b      	add	r3, r1
 8008706:	761a      	strb	r2, [r3, #24]
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	e000e100 	.word	0xe000e100
 8008718:	e000ed00 	.word	0xe000ed00

0800871c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <SysTick_Handler+0x1c>)
 8008722:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008724:	f002 fc82 	bl	800b02c <xTaskGetSchedulerState>
 8008728:	4603      	mov	r3, r0
 800872a:	2b01      	cmp	r3, #1
 800872c:	d001      	beq.n	8008732 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800872e:	f003 fb6b 	bl	800be08 <xPortSysTickHandler>
  }
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	e000e010 	.word	0xe000e010

0800873c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008740:	2100      	movs	r1, #0
 8008742:	f06f 0004 	mvn.w	r0, #4
 8008746:	f7ff ffbf 	bl	80086c8 <__NVIC_SetPriority>
#endif
}
 800874a:	bf00      	nop
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008756:	f3ef 8305 	mrs	r3, IPSR
 800875a:	603b      	str	r3, [r7, #0]
  return(result);
 800875c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008762:	f06f 0305 	mvn.w	r3, #5
 8008766:	607b      	str	r3, [r7, #4]
 8008768:	e00c      	b.n	8008784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <osKernelInitialize+0x44>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d105      	bne.n	800877e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <osKernelInitialize+0x44>)
 8008774:	2201      	movs	r2, #1
 8008776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008778:	2300      	movs	r3, #0
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e002      	b.n	8008784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800877e:	f04f 33ff 	mov.w	r3, #4294967295
 8008782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008784:	687b      	ldr	r3, [r7, #4]
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	240197c8 	.word	0x240197c8

08008798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879e:	f3ef 8305 	mrs	r3, IPSR
 80087a2:	603b      	str	r3, [r7, #0]
  return(result);
 80087a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087aa:	f06f 0305 	mvn.w	r3, #5
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	e010      	b.n	80087d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087b2:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <osKernelStart+0x48>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d109      	bne.n	80087ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087ba:	f7ff ffbf 	bl	800873c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087be:	4b08      	ldr	r3, [pc, #32]	; (80087e0 <osKernelStart+0x48>)
 80087c0:	2202      	movs	r2, #2
 80087c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087c4:	f001 ffb4 	bl	800a730 <vTaskStartScheduler>
      stat = osOK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	e002      	b.n	80087d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087d4:	687b      	ldr	r3, [r7, #4]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	240197c8 	.word	0x240197c8

080087e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08e      	sub	sp, #56	; 0x38
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087f4:	f3ef 8305 	mrs	r3, IPSR
 80087f8:	617b      	str	r3, [r7, #20]
  return(result);
 80087fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d17f      	bne.n	8008900 <osThreadNew+0x11c>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d07c      	beq.n	8008900 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800880c:	2318      	movs	r3, #24
 800880e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d045      	beq.n	80088ac <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <osThreadNew+0x4a>
        name = attr->name;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <osThreadNew+0x70>
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	2b38      	cmp	r3, #56	; 0x38
 8008846:	d805      	bhi.n	8008854 <osThreadNew+0x70>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <osThreadNew+0x74>
        return (NULL);
 8008854:	2300      	movs	r3, #0
 8008856:	e054      	b.n	8008902 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	089b      	lsrs	r3, r3, #2
 8008866:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00e      	beq.n	800888e <osThreadNew+0xaa>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	2bbb      	cmp	r3, #187	; 0xbb
 8008876:	d90a      	bls.n	800888e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800887c:	2b00      	cmp	r3, #0
 800887e:	d006      	beq.n	800888e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <osThreadNew+0xaa>
        mem = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	61bb      	str	r3, [r7, #24]
 800888c:	e010      	b.n	80088b0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10c      	bne.n	80088b0 <osThreadNew+0xcc>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d108      	bne.n	80088b0 <osThreadNew+0xcc>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <osThreadNew+0xcc>
          mem = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	e001      	b.n	80088b0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d110      	bne.n	80088d8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088be:	9202      	str	r2, [sp, #8]
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6a3a      	ldr	r2, [r7, #32]
 80088ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fd43 	bl	800a358 <xTaskCreateStatic>
 80088d2:	4603      	mov	r3, r0
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e013      	b.n	8008900 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d110      	bne.n	8008900 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	f107 0310 	add.w	r3, r7, #16
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f001 fd8e 	bl	800a412 <xTaskCreate>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d001      	beq.n	8008900 <osThreadNew+0x11c>
            hTask = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008900:	693b      	ldr	r3, [r7, #16]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3728      	adds	r7, #40	; 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008912:	f3ef 8305 	mrs	r3, IPSR
 8008916:	60bb      	str	r3, [r7, #8]
  return(result);
 8008918:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <osDelay+0x1c>
    stat = osErrorISR;
 800891e:	f06f 0305 	mvn.w	r3, #5
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e007      	b.n	8008936 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fec9 	bl	800a6c8 <vTaskDelay>
    }
  }

  return (stat);
 8008936:	68fb      	ldr	r3, [r7, #12]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800894c:	f3ef 8305 	mrs	r3, IPSR
 8008950:	60bb      	str	r3, [r7, #8]
  return(result);
 8008952:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008954:	2b00      	cmp	r3, #0
 8008956:	d174      	bne.n	8008a42 <osMutexNew+0x102>
    if (attr != NULL) {
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <osMutexNew+0x26>
      type = attr->attr_bits;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e001      	b.n	800896a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <osMutexNew+0x3a>
      rmtx = 1U;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e001      	b.n	800897e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d15c      	bne.n	8008a42 <osMutexNew+0x102>
      mem = -1;
 8008988:	f04f 33ff 	mov.w	r3, #4294967295
 800898c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d015      	beq.n	80089c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <osMutexNew+0x6a>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b4f      	cmp	r3, #79	; 0x4f
 80089a2:	d902      	bls.n	80089aa <osMutexNew+0x6a>
          mem = 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e00c      	b.n	80089c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d108      	bne.n	80089c4 <osMutexNew+0x84>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d104      	bne.n	80089c4 <osMutexNew+0x84>
            mem = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	e001      	b.n	80089c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d112      	bne.n	80089f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	4619      	mov	r1, r3
 80089d6:	2004      	movs	r0, #4
 80089d8:	f000 fd69 	bl	80094ae <xQueueCreateMutexStatic>
 80089dc:	61f8      	str	r0, [r7, #28]
 80089de:	e016      	b.n	8008a0e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	4619      	mov	r1, r3
 80089e6:	2001      	movs	r0, #1
 80089e8:	f000 fd61 	bl	80094ae <xQueueCreateMutexStatic>
 80089ec:	61f8      	str	r0, [r7, #28]
 80089ee:	e00e      	b.n	8008a0e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10b      	bne.n	8008a0e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80089fc:	2004      	movs	r0, #4
 80089fe:	f000 fd3e 	bl	800947e <xQueueCreateMutex>
 8008a02:	61f8      	str	r0, [r7, #28]
 8008a04:	e003      	b.n	8008a0e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008a06:	2001      	movs	r0, #1
 8008a08:	f000 fd39 	bl	800947e <xQueueCreateMutex>
 8008a0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <osMutexNew+0xee>
        if (attr != NULL) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <osMutexNew+0xe2>
          name = attr->name;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e001      	b.n	8008a26 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008a26:	68f9      	ldr	r1, [r7, #12]
 8008a28:	69f8      	ldr	r0, [r7, #28]
 8008a2a:	f001 fc0d 	bl	800a248 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d006      	beq.n	8008a42 <osMutexNew+0x102>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008a42:	69fb      	ldr	r3, [r7, #28]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3720      	adds	r7, #32
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6a:	f3ef 8305 	mrs	r3, IPSR
 8008a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a70:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008a76:	f06f 0305 	mvn.w	r3, #5
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e02c      	b.n	8008ad8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008a84:	f06f 0303 	mvn.w	r3, #3
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	e025      	b.n	8008ad8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d011      	beq.n	8008ab6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6938      	ldr	r0, [r7, #16]
 8008a96:	f000 fd59 	bl	800954c <xQueueTakeMutexRecursive>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d01b      	beq.n	8008ad8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008aa6:	f06f 0301 	mvn.w	r3, #1
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e014      	b.n	8008ad8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008aae:	f06f 0302 	mvn.w	r3, #2
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	e010      	b.n	8008ad8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6938      	ldr	r0, [r7, #16]
 8008aba:	f001 f8ed 	bl	8009c98 <xQueueSemaphoreTake>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d009      	beq.n	8008ad8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008aca:	f06f 0301 	mvn.w	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e002      	b.n	8008ad8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008ad2:	f06f 0302 	mvn.w	r3, #2
 8008ad6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008ad8:	697b      	ldr	r3, [r7, #20]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b086      	sub	sp, #24
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f023 0301 	bic.w	r3, r3, #1
 8008af0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008afe:	f3ef 8305 	mrs	r3, IPSR
 8008b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b04:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008b0a:	f06f 0305 	mvn.w	r3, #5
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e01f      	b.n	8008b52 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008b18:	f06f 0303 	mvn.w	r3, #3
 8008b1c:	617b      	str	r3, [r7, #20]
 8008b1e:	e018      	b.n	8008b52 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b26:	6938      	ldr	r0, [r7, #16]
 8008b28:	f000 fcdc 	bl	80094e4 <xQueueGiveMutexRecursive>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d00f      	beq.n	8008b52 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008b32:	f06f 0302 	mvn.w	r3, #2
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e00b      	b.n	8008b52 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	6938      	ldr	r0, [r7, #16]
 8008b42:	f000 fda3 	bl	800968c <xQueueGenericSend>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d002      	beq.n	8008b52 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008b4c:	f06f 0302 	mvn.w	r3, #2
 8008b50:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008b52:	697b      	ldr	r3, [r7, #20]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6c:	f3ef 8305 	mrs	r3, IPSR
 8008b70:	613b      	str	r3, [r7, #16]
  return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d175      	bne.n	8008c64 <osSemaphoreNew+0x108>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d072      	beq.n	8008c64 <osSemaphoreNew+0x108>
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d86e      	bhi.n	8008c64 <osSemaphoreNew+0x108>
    mem = -1;
 8008b86:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d015      	beq.n	8008bbe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d006      	beq.n	8008ba8 <osSemaphoreNew+0x4c>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	2b4f      	cmp	r3, #79	; 0x4f
 8008ba0:	d902      	bls.n	8008ba8 <osSemaphoreNew+0x4c>
        mem = 1;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	e00c      	b.n	8008bc2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d108      	bne.n	8008bc2 <osSemaphoreNew+0x66>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <osSemaphoreNew+0x66>
          mem = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	e001      	b.n	8008bc2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d04c      	beq.n	8008c64 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d128      	bne.n	8008c22 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10a      	bne.n	8008bec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	2001      	movs	r0, #1
 8008be4:	f000 fb5c 	bl	80092a0 <xQueueGenericCreateStatic>
 8008be8:	61f8      	str	r0, [r7, #28]
 8008bea:	e005      	b.n	8008bf8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008bec:	2203      	movs	r2, #3
 8008bee:	2100      	movs	r1, #0
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	f000 fbcd 	bl	8009390 <xQueueGenericCreate>
 8008bf6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d022      	beq.n	8008c44 <osSemaphoreNew+0xe8>
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01f      	beq.n	8008c44 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c04:	2300      	movs	r3, #0
 8008c06:	2200      	movs	r2, #0
 8008c08:	2100      	movs	r1, #0
 8008c0a:	69f8      	ldr	r0, [r7, #28]
 8008c0c:	f000 fd3e 	bl	800968c <xQueueGenericSend>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d016      	beq.n	8008c44 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008c16:	69f8      	ldr	r0, [r7, #28]
 8008c18:	f001 f9ca 	bl	8009fb0 <vQueueDelete>
            hSemaphore = NULL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e010      	b.n	8008c44 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d108      	bne.n	8008c3a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fcc1 	bl	80095b8 <xQueueCreateCountingSemaphoreStatic>
 8008c36:	61f8      	str	r0, [r7, #28]
 8008c38:	e004      	b.n	8008c44 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c3a:	68b9      	ldr	r1, [r7, #8]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fcf2 	bl	8009626 <xQueueCreateCountingSemaphore>
 8008c42:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00c      	beq.n	8008c64 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e001      	b.n	8008c5c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008c5c:	6979      	ldr	r1, [r7, #20]
 8008c5e:	69f8      	ldr	r0, [r7, #28]
 8008c60:	f001 faf2 	bl	800a248 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008c64:	69fb      	ldr	r3, [r7, #28]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3720      	adds	r7, #32
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d103      	bne.n	8008c90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008c88:	f06f 0303 	mvn.w	r3, #3
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	e039      	b.n	8008d04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c90:	f3ef 8305 	mrs	r3, IPSR
 8008c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d022      	beq.n	8008ce2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008ca2:	f06f 0303 	mvn.w	r3, #3
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	e02c      	b.n	8008d04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f001 f8fa 	bl	8009eb0 <xQueueReceiveFromISR>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d003      	beq.n	8008cca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008cc2:	f06f 0302 	mvn.w	r3, #2
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e01c      	b.n	8008d04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d019      	beq.n	8008d04 <osSemaphoreAcquire+0x94>
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <osSemaphoreAcquire+0xa0>)
 8008cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	e010      	b.n	8008d04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6938      	ldr	r0, [r7, #16]
 8008ce6:	f000 ffd7 	bl	8009c98 <xQueueSemaphoreTake>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d009      	beq.n	8008d04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008cf6:	f06f 0301 	mvn.w	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	e002      	b.n	8008d04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008cfe:	f06f 0302 	mvn.w	r3, #2
 8008d02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008d04:	697b      	ldr	r3, [r7, #20]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008d2a:	f06f 0303 	mvn.w	r3, #3
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	e02c      	b.n	8008d8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d32:	f3ef 8305 	mrs	r3, IPSR
 8008d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01a      	beq.n	8008d74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d42:	f107 0308 	add.w	r3, r7, #8
 8008d46:	4619      	mov	r1, r3
 8008d48:	6938      	ldr	r0, [r7, #16]
 8008d4a:	f000 fe38 	bl	80099be <xQueueGiveFromISR>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d003      	beq.n	8008d5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008d54:	f06f 0302 	mvn.w	r3, #2
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	e017      	b.n	8008d8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d014      	beq.n	8008d8c <osSemaphoreRelease+0x78>
 8008d62:	4b0d      	ldr	r3, [pc, #52]	; (8008d98 <osSemaphoreRelease+0x84>)
 8008d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	e00b      	b.n	8008d8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d74:	2300      	movs	r3, #0
 8008d76:	2200      	movs	r2, #0
 8008d78:	2100      	movs	r1, #0
 8008d7a:	6938      	ldr	r0, [r7, #16]
 8008d7c:	f000 fc86 	bl	800968c <xQueueGenericSend>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d002      	beq.n	8008d8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008d86:	f06f 0302 	mvn.w	r3, #2
 8008d8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008d8c:	697b      	ldr	r3, [r7, #20]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008da8:	2300      	movs	r3, #0
 8008daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dac:	f3ef 8305 	mrs	r3, IPSR
 8008db0:	613b      	str	r3, [r7, #16]
  return(result);
 8008db2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d15f      	bne.n	8008e78 <osMessageQueueNew+0xdc>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d05c      	beq.n	8008e78 <osMessageQueueNew+0xdc>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d059      	beq.n	8008e78 <osMessageQueueNew+0xdc>
    mem = -1;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d029      	beq.n	8008e24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d012      	beq.n	8008dfe <osMessageQueueNew+0x62>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b4f      	cmp	r3, #79	; 0x4f
 8008dde:	d90e      	bls.n	8008dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d302      	bcc.n	8008dfe <osMessageQueueNew+0x62>
        mem = 1;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	61bb      	str	r3, [r7, #24]
 8008dfc:	e014      	b.n	8008e28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <osMessageQueueNew+0x8c>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10c      	bne.n	8008e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d108      	bne.n	8008e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <osMessageQueueNew+0x8c>
          mem = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	e001      	b.n	8008e28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d10b      	bne.n	8008e46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691a      	ldr	r2, [r3, #16]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2100      	movs	r1, #0
 8008e38:	9100      	str	r1, [sp, #0]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fa2f 	bl	80092a0 <xQueueGenericCreateStatic>
 8008e42:	61f8      	str	r0, [r7, #28]
 8008e44:	e008      	b.n	8008e58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fa9d 	bl	8009390 <xQueueGenericCreate>
 8008e56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	e001      	b.n	8008e70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	69f8      	ldr	r0, [r7, #28]
 8008e74:	f001 f9e8 	bl	800a248 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e78:	69fb      	ldr	r3, [r7, #28]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	4613      	mov	r3, r2
 8008e92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9c:	f3ef 8305 	mrs	r3, IPSR
 8008ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d028      	beq.n	8008efa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d005      	beq.n	8008eba <osMessageQueuePut+0x36>
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <osMessageQueuePut+0x36>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008eba:	f06f 0303 	mvn.w	r3, #3
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e038      	b.n	8008f34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ec6:	f107 0210 	add.w	r2, r7, #16
 8008eca:	2300      	movs	r3, #0
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	69b8      	ldr	r0, [r7, #24]
 8008ed0:	f000 fcda 	bl	8009888 <xQueueGenericSendFromISR>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d003      	beq.n	8008ee2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008eda:	f06f 0302 	mvn.w	r3, #2
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e028      	b.n	8008f34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d025      	beq.n	8008f34 <osMessageQueuePut+0xb0>
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <osMessageQueuePut+0xbc>)
 8008eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	e01c      	b.n	8008f34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <osMessageQueuePut+0x82>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d103      	bne.n	8008f0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008f06:	f06f 0303 	mvn.w	r3, #3
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	e012      	b.n	8008f34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f0e:	2300      	movs	r3, #0
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	69b8      	ldr	r0, [r7, #24]
 8008f16:	f000 fbb9 	bl	800968c <xQueueGenericSend>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d009      	beq.n	8008f34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008f26:	f06f 0301 	mvn.w	r3, #1
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	e002      	b.n	8008f34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008f2e:	f06f 0302 	mvn.w	r3, #2
 8008f32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f34:	69fb      	ldr	r3, [r7, #28]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3720      	adds	r7, #32
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f5a:	f3ef 8305 	mrs	r3, IPSR
 8008f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d028      	beq.n	8008fb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <osMessageQueueGet+0x34>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <osMessageQueueGet+0x34>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008f78:	f06f 0303 	mvn.w	r3, #3
 8008f7c:	61fb      	str	r3, [r7, #28]
 8008f7e:	e037      	b.n	8008ff0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	69b8      	ldr	r0, [r7, #24]
 8008f8e:	f000 ff8f 	bl	8009eb0 <xQueueReceiveFromISR>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d003      	beq.n	8008fa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008f98:	f06f 0302 	mvn.w	r3, #2
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e027      	b.n	8008ff0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d024      	beq.n	8008ff0 <osMessageQueueGet+0xac>
 8008fa6:	4b15      	ldr	r3, [pc, #84]	; (8008ffc <osMessageQueueGet+0xb8>)
 8008fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	e01b      	b.n	8008ff0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <osMessageQueueGet+0x80>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008fc4:	f06f 0303 	mvn.w	r3, #3
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e011      	b.n	8008ff0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	69b8      	ldr	r0, [r7, #24]
 8008fd2:	f000 fd81 	bl	8009ad8 <xQueueReceive>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d009      	beq.n	8008ff0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008fe2:	f06f 0301 	mvn.w	r3, #1
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	e002      	b.n	8008ff0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008fea:	f06f 0302 	mvn.w	r3, #2
 8008fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ff0:	69fb      	ldr	r3, [r7, #28]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4a07      	ldr	r2, [pc, #28]	; (800902c <vApplicationGetIdleTaskMemory+0x2c>)
 8009010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4a06      	ldr	r2, [pc, #24]	; (8009030 <vApplicationGetIdleTaskMemory+0x30>)
 8009016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	240197cc 	.word	0x240197cc
 8009030:	24019888 	.word	0x24019888

08009034 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4a07      	ldr	r2, [pc, #28]	; (8009060 <vApplicationGetTimerTaskMemory+0x2c>)
 8009044:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4a06      	ldr	r2, [pc, #24]	; (8009064 <vApplicationGetTimerTaskMemory+0x30>)
 800904a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009052:	601a      	str	r2, [r3, #0]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	2401a088 	.word	0x2401a088
 8009064:	2401a144 	.word	0x2401a144

08009068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f103 0208 	add.w	r2, r3, #8
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f103 0208 	add.w	r2, r3, #8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f103 0208 	add.w	r2, r3, #8
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
}
 80090fe:	bf00      	nop
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800910a:	b480      	push	{r7}
 800910c:	b085      	sub	sp, #20
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009120:	d103      	bne.n	800912a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e00c      	b.n	8009144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3308      	adds	r3, #8
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e002      	b.n	8009138 <vListInsert+0x2e>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	429a      	cmp	r2, r3
 8009142:	d2f6      	bcs.n	8009132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6892      	ldr	r2, [r2, #8]
 8009192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6852      	ldr	r2, [r2, #4]
 800919c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d103      	bne.n	80091b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	1e5a      	subs	r2, r3, #1
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091fa:	f002 fd73 	bl	800bce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800920a:	fb01 f303 	mul.w	r3, r1, r3
 800920e:	441a      	add	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	3b01      	subs	r3, #1
 800922c:	68f9      	ldr	r1, [r7, #12]
 800922e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	441a      	add	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22ff      	movs	r2, #255	; 0xff
 800923e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	22ff      	movs	r2, #255	; 0xff
 8009246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d114      	bne.n	800927a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d01a      	beq.n	800928e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3310      	adds	r3, #16
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fd11 	bl	800ac84 <xTaskRemoveFromEventList>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d012      	beq.n	800928e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <xQueueGenericReset+0xcc>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	e009      	b.n	800928e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3310      	adds	r3, #16
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff fef2 	bl	8009068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff feed 	bl	8009068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800928e:	f002 fd59 	bl	800bd44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009292:	2301      	movs	r3, #1
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	e000ed04 	.word	0xe000ed04

080092a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	; 0x38
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092c6:	bf00      	nop
 80092c8:	e7fe      	b.n	80092c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <xQueueGenericCreateStatic+0x52>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <xQueueGenericCreateStatic+0x56>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e000      	b.n	80092f8 <xQueueGenericCreateStatic+0x58>
 80092f6:	2300      	movs	r3, #0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10a      	bne.n	8009312 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	623b      	str	r3, [r7, #32]
}
 800930e:	bf00      	nop
 8009310:	e7fe      	b.n	8009310 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <xQueueGenericCreateStatic+0x7e>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <xQueueGenericCreateStatic+0x82>
 800931e:	2301      	movs	r3, #1
 8009320:	e000      	b.n	8009324 <xQueueGenericCreateStatic+0x84>
 8009322:	2300      	movs	r3, #0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	61fb      	str	r3, [r7, #28]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800933e:	2350      	movs	r3, #80	; 0x50
 8009340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b50      	cmp	r3, #80	; 0x50
 8009346:	d00a      	beq.n	800935e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	61bb      	str	r3, [r7, #24]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800935e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009372:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	4613      	mov	r3, r2
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f83f 	bl	8009404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009388:	4618      	mov	r0, r3
 800938a:	3730      	adds	r7, #48	; 0x30
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08a      	sub	sp, #40	; 0x28
 8009394:	af02      	add	r7, sp, #8
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	613b      	str	r3, [r7, #16]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	3350      	adds	r3, #80	; 0x50
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 fdad 	bl	800bf28 <pvPortMalloc>
 80093ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d011      	beq.n	80093fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	3350      	adds	r3, #80	; 0x50
 80093de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093e8:	79fa      	ldrb	r2, [r7, #7]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	4613      	mov	r3, r2
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f805 	bl	8009404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093fa:	69bb      	ldr	r3, [r7, #24]
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3720      	adds	r7, #32
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	e002      	b.n	8009426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009432:	2101      	movs	r1, #1
 8009434:	69b8      	ldr	r0, [r7, #24]
 8009436:	f7ff fecb 	bl	80091d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00e      	beq.n	8009476 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800946a:	2300      	movs	r3, #0
 800946c:	2200      	movs	r2, #0
 800946e:	2100      	movs	r1, #0
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f90b 	bl	800968c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800947e:	b580      	push	{r7, lr}
 8009480:	b086      	sub	sp, #24
 8009482:	af00      	add	r7, sp, #0
 8009484:	4603      	mov	r3, r0
 8009486:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009488:	2301      	movs	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	2300      	movs	r3, #0
 800948e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	461a      	mov	r2, r3
 8009494:	6939      	ldr	r1, [r7, #16]
 8009496:	6978      	ldr	r0, [r7, #20]
 8009498:	f7ff ff7a 	bl	8009390 <xQueueGenericCreate>
 800949c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff ffd3 	bl	800944a <prvInitialiseMutex>

		return xNewQueue;
 80094a4:	68fb      	ldr	r3, [r7, #12]
	}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b088      	sub	sp, #32
 80094b2:	af02      	add	r7, sp, #8
 80094b4:	4603      	mov	r3, r0
 80094b6:	6039      	str	r1, [r7, #0]
 80094b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	6939      	ldr	r1, [r7, #16]
 80094cc:	6978      	ldr	r0, [r7, #20]
 80094ce:	f7ff fee7 	bl	80092a0 <xQueueGenericCreateStatic>
 80094d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f7ff ffb8 	bl	800944a <prvInitialiseMutex>

		return xNewQueue;
 80094da:	68fb      	ldr	r3, [r7, #12]
	}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	60fb      	str	r3, [r7, #12]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	689c      	ldr	r4, [r3, #8]
 8009510:	f001 fd7c 	bl	800b00c <xTaskGetCurrentTaskHandle>
 8009514:	4603      	mov	r3, r0
 8009516:	429c      	cmp	r4, r3
 8009518:	d111      	bne.n	800953e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d105      	bne.n	8009538 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800952c:	2300      	movs	r3, #0
 800952e:	2200      	movs	r2, #0
 8009530:	2100      	movs	r1, #0
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f000 f8aa 	bl	800968c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009538:	2301      	movs	r3, #1
 800953a:	617b      	str	r3, [r7, #20]
 800953c:	e001      	b.n	8009542 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009542:	697b      	ldr	r3, [r7, #20]
	}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	bd90      	pop	{r4, r7, pc}

0800954c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800954c:	b590      	push	{r4, r7, lr}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	689c      	ldr	r4, [r3, #8]
 800957a:	f001 fd47 	bl	800b00c <xTaskGetCurrentTaskHandle>
 800957e:	4603      	mov	r3, r0
 8009580:	429c      	cmp	r4, r3
 8009582:	d107      	bne.n	8009594 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e00c      	b.n	80095ae <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6938      	ldr	r0, [r7, #16]
 8009598:	f000 fb7e 	bl	8009c98 <xQueueSemaphoreTake>
 800959c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80095ae:	697b      	ldr	r3, [r7, #20]
	}
 80095b0:	4618      	mov	r0, r3
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd90      	pop	{r4, r7, pc}

080095b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af02      	add	r7, sp, #8
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	61bb      	str	r3, [r7, #24]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d90a      	bls.n	80095fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	617b      	str	r3, [r7, #20]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095fe:	2302      	movs	r3, #2
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	2100      	movs	r1, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fe49 	bl	80092a0 <xQueueGenericCreateStatic>
 800960e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800961c:	69fb      	ldr	r3, [r7, #28]
	}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	613b      	str	r3, [r7, #16]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d90a      	bls.n	800966a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800966a:	2202      	movs	r2, #2
 800966c:	2100      	movs	r1, #0
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fe8e 	bl	8009390 <xQueueGenericCreate>
 8009674:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009682:	697b      	ldr	r3, [r7, #20]
	}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08e      	sub	sp, #56	; 0x38
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <xQueueGenericSend+0x32>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d103      	bne.n	80096cc <xQueueGenericSend+0x40>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <xQueueGenericSend+0x44>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <xQueueGenericSend+0x46>
 80096d0:	2300      	movs	r3, #0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <xQueueGenericSend+0x60>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096e8:	bf00      	nop
 80096ea:	e7fe      	b.n	80096ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d103      	bne.n	80096fa <xQueueGenericSend+0x6e>
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <xQueueGenericSend+0x72>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e000      	b.n	8009700 <xQueueGenericSend+0x74>
 80096fe:	2300      	movs	r3, #0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xQueueGenericSend+0x8e>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	623b      	str	r3, [r7, #32]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800971a:	f001 fc87 	bl	800b02c <xTaskGetSchedulerState>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d102      	bne.n	800972a <xQueueGenericSend+0x9e>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <xQueueGenericSend+0xa2>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <xQueueGenericSend+0xa4>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <xQueueGenericSend+0xbe>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	61fb      	str	r3, [r7, #28]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f002 facb 	bl	800bce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <xQueueGenericSend+0xd4>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d129      	bne.n	80097b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009766:	f000 fc5e 	bl	800a026 <prvCopyDataToQueue>
 800976a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	3324      	adds	r3, #36	; 0x24
 8009778:	4618      	mov	r0, r3
 800977a:	f001 fa83 	bl	800ac84 <xTaskRemoveFromEventList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d013      	beq.n	80097ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009784:	4b3f      	ldr	r3, [pc, #252]	; (8009884 <xQueueGenericSend+0x1f8>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	e00a      	b.n	80097ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800979c:	4b39      	ldr	r3, [pc, #228]	; (8009884 <xQueueGenericSend+0x1f8>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097ac:	f002 faca 	bl	800bd44 <vPortExitCritical>
				return pdPASS;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e063      	b.n	800987c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ba:	f002 fac3 	bl	800bd44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	e05c      	b.n	800987c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 fabd 	bl	800ad4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097d6:	f002 fab5 	bl	800bd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097da:	f001 f819 	bl	800a810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097de:	f002 fa81 	bl	800bce4 <vPortEnterCritical>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d103      	bne.n	80097f8 <xQueueGenericSend+0x16c>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d103      	bne.n	800980e <xQueueGenericSend+0x182>
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800980e:	f002 fa99 	bl	800bd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009812:	1d3a      	adds	r2, r7, #4
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f001 faac 	bl	800ad78 <xTaskCheckForTimeOut>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d124      	bne.n	8009870 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009828:	f000 fcf5 	bl	800a216 <prvIsQueueFull>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d018      	beq.n	8009864 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	3310      	adds	r3, #16
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f001 f9d2 	bl	800abe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009842:	f000 fc80 	bl	800a146 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009846:	f000 fff1 	bl	800a82c <xTaskResumeAll>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	f47f af7c 	bne.w	800974a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009852:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <xQueueGenericSend+0x1f8>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	e772      	b.n	800974a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009866:	f000 fc6e 	bl	800a146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986a:	f000 ffdf 	bl	800a82c <xTaskResumeAll>
 800986e:	e76c      	b.n	800974a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009872:	f000 fc68 	bl	800a146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009876:	f000 ffd9 	bl	800a82c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800987a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800987c:	4618      	mov	r0, r3
 800987e:	3738      	adds	r7, #56	; 0x38
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b090      	sub	sp, #64	; 0x40
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <xQueueGenericSendFromISR+0x3c>
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <xQueueGenericSendFromISR+0x40>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <xQueueGenericSendFromISR+0x42>
 80098c8:	2300      	movs	r3, #0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d103      	bne.n	80098f2 <xQueueGenericSendFromISR+0x6a>
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <xQueueGenericSendFromISR+0x6e>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <xQueueGenericSendFromISR+0x70>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	623b      	str	r3, [r7, #32]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009912:	f002 fac9 	bl	800bea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009916:	f3ef 8211 	mrs	r2, BASEPRI
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61fa      	str	r2, [r7, #28]
 800992c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800992e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993a:	429a      	cmp	r2, r3
 800993c:	d302      	bcc.n	8009944 <xQueueGenericSendFromISR+0xbc>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b02      	cmp	r3, #2
 8009942:	d12f      	bne.n	80099a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800995a:	f000 fb64 	bl	800a026 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800995e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d112      	bne.n	800998e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d016      	beq.n	800999e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	3324      	adds	r3, #36	; 0x24
 8009974:	4618      	mov	r0, r3
 8009976:	f001 f985 	bl	800ac84 <xTaskRemoveFromEventList>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00e      	beq.n	800999e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00b      	beq.n	800999e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	e007      	b.n	800999e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800998e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009992:	3301      	adds	r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	b25a      	sxtb	r2, r3
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800999e:	2301      	movs	r3, #1
 80099a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099a2:	e001      	b.n	80099a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3740      	adds	r7, #64	; 0x40
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b08e      	sub	sp, #56	; 0x38
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	623b      	str	r3, [r7, #32]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <xQueueGiveFromISR+0x48>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	61fb      	str	r3, [r7, #28]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d103      	bne.n	8009a16 <xQueueGiveFromISR+0x58>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <xQueueGiveFromISR+0x5c>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <xQueueGiveFromISR+0x5e>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	61bb      	str	r3, [r7, #24]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a36:	f002 fa37 	bl	800bea8 <vPortValidateInterruptPriority>
	__asm volatile
 8009a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	617a      	str	r2, [r7, #20]
 8009a50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d22b      	bcs.n	8009abe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a80:	d112      	bne.n	8009aa8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d016      	beq.n	8009ab8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	3324      	adds	r3, #36	; 0x24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 f8f8 	bl	800ac84 <xTaskRemoveFromEventList>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00e      	beq.n	8009ab8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00b      	beq.n	8009ab8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	e007      	b.n	8009ab8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aac:	3301      	adds	r3, #1
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	b25a      	sxtb	r2, r3
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	637b      	str	r3, [r7, #52]	; 0x34
 8009abc:	e001      	b.n	8009ac2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f383 8811 	msr	BASEPRI, r3
}
 8009acc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3738      	adds	r7, #56	; 0x38
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08c      	sub	sp, #48	; 0x30
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <xQueueReceive+0x30>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	623b      	str	r3, [r7, #32]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <xQueueReceive+0x3e>
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <xQueueReceive+0x42>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <xQueueReceive+0x44>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <xQueueReceive+0x5e>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	61fb      	str	r3, [r7, #28]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b36:	f001 fa79 	bl	800b02c <xTaskGetSchedulerState>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <xQueueReceive+0x6e>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <xQueueReceive+0x72>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <xQueueReceive+0x74>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <xQueueReceive+0x8e>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	61bb      	str	r3, [r7, #24]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b66:	f002 f8bd 	bl	800bce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01f      	beq.n	8009bb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7a:	f000 fabe 	bl	800a0fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	1e5a      	subs	r2, r3, #1
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00f      	beq.n	8009bae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	3310      	adds	r3, #16
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 f876 	bl	800ac84 <xTaskRemoveFromEventList>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b9e:	4b3d      	ldr	r3, [pc, #244]	; (8009c94 <xQueueReceive+0x1bc>)
 8009ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bae:	f002 f8c9 	bl	800bd44 <vPortExitCritical>
				return pdPASS;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e069      	b.n	8009c8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d103      	bne.n	8009bc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bbc:	f002 f8c2 	bl	800bd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e062      	b.n	8009c8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bca:	f107 0310 	add.w	r3, r7, #16
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 f8bc 	bl	800ad4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bd8:	f002 f8b4 	bl	800bd44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bdc:	f000 fe18 	bl	800a810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009be0:	f002 f880 	bl	800bce4 <vPortEnterCritical>
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bea:	b25b      	sxtb	r3, r3
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf0:	d103      	bne.n	8009bfa <xQueueReceive+0x122>
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c00:	b25b      	sxtb	r3, r3
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d103      	bne.n	8009c10 <xQueueReceive+0x138>
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c10:	f002 f898 	bl	800bd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c14:	1d3a      	adds	r2, r7, #4
 8009c16:	f107 0310 	add.w	r3, r7, #16
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 f8ab 	bl	800ad78 <xTaskCheckForTimeOut>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d123      	bne.n	8009c70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c2a:	f000 fade 	bl	800a1ea <prvIsQueueEmpty>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d017      	beq.n	8009c64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	3324      	adds	r3, #36	; 0x24
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 ffd1 	bl	800abe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c44:	f000 fa7f 	bl	800a146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c48:	f000 fdf0 	bl	800a82c <xTaskResumeAll>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d189      	bne.n	8009b66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c52:	4b10      	ldr	r3, [pc, #64]	; (8009c94 <xQueueReceive+0x1bc>)
 8009c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	e780      	b.n	8009b66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c66:	f000 fa6e 	bl	800a146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c6a:	f000 fddf 	bl	800a82c <xTaskResumeAll>
 8009c6e:	e77a      	b.n	8009b66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f000 fa68 	bl	800a146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c76:	f000 fdd9 	bl	800a82c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7c:	f000 fab5 	bl	800a1ea <prvIsQueueEmpty>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f43f af6f 	beq.w	8009b66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3730      	adds	r7, #48	; 0x30
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08e      	sub	sp, #56	; 0x38
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	61fb      	str	r3, [r7, #28]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce8:	f001 f9a0 	bl	800b02c <xTaskGetSchedulerState>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <xQueueSemaphoreTake+0x60>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <xQueueSemaphoreTake+0x64>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <xQueueSemaphoreTake+0x66>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	61bb      	str	r3, [r7, #24]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d18:	f001 ffe4 	bl	800bce4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d024      	beq.n	8009d72 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	1e5a      	subs	r2, r3, #1
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d38:	f001 faee 	bl	800b318 <pvTaskIncrementMutexHeldCount>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00f      	beq.n	8009d6a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	3310      	adds	r3, #16
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 ff98 	bl	800ac84 <xTaskRemoveFromEventList>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d007      	beq.n	8009d6a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d5a:	4b54      	ldr	r3, [pc, #336]	; (8009eac <xQueueSemaphoreTake+0x214>)
 8009d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d6a:	f001 ffeb 	bl	800bd44 <vPortExitCritical>
				return pdPASS;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e097      	b.n	8009ea2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d111      	bne.n	8009d9c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	617b      	str	r3, [r7, #20]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d94:	f001 ffd6 	bl	800bd44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	e082      	b.n	8009ea2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d106      	bne.n	8009db0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da2:	f107 030c 	add.w	r3, r7, #12
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 ffd0 	bl	800ad4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dac:	2301      	movs	r3, #1
 8009dae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009db0:	f001 ffc8 	bl	800bd44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009db4:	f000 fd2c 	bl	800a810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009db8:	f001 ff94 	bl	800bce4 <vPortEnterCritical>
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d103      	bne.n	8009dd2 <xQueueSemaphoreTake+0x13a>
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d103      	bne.n	8009de8 <xQueueSemaphoreTake+0x150>
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009de8:	f001 ffac 	bl	800bd44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dec:	463a      	mov	r2, r7
 8009dee:	f107 030c 	add.w	r3, r7, #12
 8009df2:	4611      	mov	r1, r2
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 ffbf 	bl	800ad78 <xTaskCheckForTimeOut>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d132      	bne.n	8009e66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e02:	f000 f9f2 	bl	800a1ea <prvIsQueueEmpty>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d026      	beq.n	8009e5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e14:	f001 ff66 	bl	800bce4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 f923 	bl	800b068 <xTaskPriorityInherit>
 8009e22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e24:	f001 ff8e 	bl	800bd44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	3324      	adds	r3, #36	; 0x24
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fed7 	bl	800abe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e38:	f000 f985 	bl	800a146 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e3c:	f000 fcf6 	bl	800a82c <xTaskResumeAll>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f47f af68 	bne.w	8009d18 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009e48:	4b18      	ldr	r3, [pc, #96]	; (8009eac <xQueueSemaphoreTake+0x214>)
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	e75e      	b.n	8009d18 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e5c:	f000 f973 	bl	800a146 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e60:	f000 fce4 	bl	800a82c <xTaskResumeAll>
 8009e64:	e758      	b.n	8009d18 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e68:	f000 f96d 	bl	800a146 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e6c:	f000 fcde 	bl	800a82c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e72:	f000 f9ba 	bl	800a1ea <prvIsQueueEmpty>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f43f af4d 	beq.w	8009d18 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00d      	beq.n	8009ea0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009e84:	f001 ff2e 	bl	800bce4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e8a:	f000 f8b4 	bl	8009ff6 <prvGetDisinheritPriorityAfterTimeout>
 8009e8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 f9bc 	bl	800b214 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e9c:	f001 ff52 	bl	800bd44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3738      	adds	r7, #56	; 0x38
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	623b      	str	r3, [r7, #32]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d103      	bne.n	8009eea <xQueueReceiveFromISR+0x3a>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <xQueueReceiveFromISR+0x3e>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <xQueueReceiveFromISR+0x40>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	61fb      	str	r3, [r7, #28]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f0a:	f001 ffcd 	bl	800bea8 <vPortValidateInterruptPriority>
	__asm volatile
 8009f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	61ba      	str	r2, [r7, #24]
 8009f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d02f      	beq.n	8009f96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f44:	f000 f8d9 	bl	800a0fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	1e5a      	subs	r2, r3, #1
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f58:	d112      	bne.n	8009f80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	3310      	adds	r3, #16
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fe8c 	bl	800ac84 <xTaskRemoveFromEventList>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e007      	b.n	8009f90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f84:	3301      	adds	r3, #1
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	b25a      	sxtb	r2, r3
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f90:	2301      	movs	r3, #1
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	e001      	b.n	8009f9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f383 8811 	msr	BASEPRI, r3
}
 8009fa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3738      	adds	r7, #56	; 0x38
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <vQueueDelete+0x28>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	60bb      	str	r3, [r7, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 f95f 	bl	800a29c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f002 f869 	bl	800c0c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b00      	cmp	r3, #0
 800a004:	d006      	beq.n	800a014 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	e001      	b.n	800a018 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a018:	68fb      	ldr	r3, [r7, #12]
	}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10d      	bne.n	800a060 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d14d      	bne.n	800a0e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	4618      	mov	r0, r3
 800a052:	f001 f871 	bl	800b138 <xTaskPriorityDisinherit>
 800a056:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	609a      	str	r2, [r3, #8]
 800a05e:	e043      	b.n	800a0e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d119      	bne.n	800a09a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6858      	ldr	r0, [r3, #4]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	461a      	mov	r2, r3
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	f01a fc5f 	bl	8024934 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	441a      	add	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685a      	ldr	r2, [r3, #4]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d32b      	bcc.n	800a0e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	605a      	str	r2, [r3, #4]
 800a098:	e026      	b.n	800a0e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68d8      	ldr	r0, [r3, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	f01a fc45 	bl	8024934 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	425b      	negs	r3, r3
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d207      	bcs.n	800a0d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	425b      	negs	r3, r3
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d105      	bne.n	800a0e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0f0:	697b      	ldr	r3, [r7, #20]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d018      	beq.n	800a13e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	441a      	add	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	429a      	cmp	r2, r3
 800a124:	d303      	bcc.n	800a12e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68d9      	ldr	r1, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	461a      	mov	r2, r3
 800a138:	6838      	ldr	r0, [r7, #0]
 800a13a:	f01a fbfb 	bl	8024934 <memcpy>
	}
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a14e:	f001 fdc9 	bl	800bce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a158:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a15a:	e011      	b.n	800a180 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d012      	beq.n	800a18a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3324      	adds	r3, #36	; 0x24
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fd8b 	bl	800ac84 <xTaskRemoveFromEventList>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a174:	f000 fe62 	bl	800ae3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dce9      	bgt.n	800a15c <prvUnlockQueue+0x16>
 800a188:	e000      	b.n	800a18c <prvUnlockQueue+0x46>
					break;
 800a18a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	22ff      	movs	r2, #255	; 0xff
 800a190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a194:	f001 fdd6 	bl	800bd44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a198:	f001 fda4 	bl	800bce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1a4:	e011      	b.n	800a1ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d012      	beq.n	800a1d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3310      	adds	r3, #16
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fd66 	bl	800ac84 <xTaskRemoveFromEventList>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1be:	f000 fe3d 	bl	800ae3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dce9      	bgt.n	800a1a6 <prvUnlockQueue+0x60>
 800a1d2:	e000      	b.n	800a1d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	22ff      	movs	r2, #255	; 0xff
 800a1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1de:	f001 fdb1 	bl	800bd44 <vPortExitCritical>
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1f2:	f001 fd77 	bl	800bce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1fe:	2301      	movs	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	e001      	b.n	800a208 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a208:	f001 fd9c 	bl	800bd44 <vPortExitCritical>

	return xReturn;
 800a20c:	68fb      	ldr	r3, [r7, #12]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a21e:	f001 fd61 	bl	800bce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d102      	bne.n	800a234 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e001      	b.n	800a238 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a238:	f001 fd84 	bl	800bd44 <vPortExitCritical>

	return xReturn;
 800a23c:	68fb      	ldr	r3, [r7, #12]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a252:	2300      	movs	r3, #0
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	e014      	b.n	800a282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a258:	4a0f      	ldr	r2, [pc, #60]	; (800a298 <vQueueAddToRegistry+0x50>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a264:	490c      	ldr	r1, [pc, #48]	; (800a298 <vQueueAddToRegistry+0x50>)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a26e:	4a0a      	ldr	r2, [pc, #40]	; (800a298 <vQueueAddToRegistry+0x50>)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	00db      	lsls	r3, r3, #3
 800a274:	4413      	add	r3, r2
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a27a:	e006      	b.n	800a28a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	3301      	adds	r3, #1
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b07      	cmp	r3, #7
 800a286:	d9e7      	bls.n	800a258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	2401b144 	.word	0x2401b144

0800a29c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e016      	b.n	800a2d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2aa:	4a10      	ldr	r2, [pc, #64]	; (800a2ec <vQueueUnregisterQueue+0x50>)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d10b      	bne.n	800a2d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a2ba:	4a0c      	ldr	r2, [pc, #48]	; (800a2ec <vQueueUnregisterQueue+0x50>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a2c4:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <vQueueUnregisterQueue+0x50>)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	605a      	str	r2, [r3, #4]
				break;
 800a2d0:	e006      	b.n	800a2e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b07      	cmp	r3, #7
 800a2dc:	d9e5      	bls.n	800a2aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a2de:	bf00      	nop
 800a2e0:	bf00      	nop
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	2401b144 	.word	0x2401b144

0800a2f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a300:	f001 fcf0 	bl	800bce4 <vPortEnterCritical>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a30a:	b25b      	sxtb	r3, r3
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a310:	d103      	bne.n	800a31a <vQueueWaitForMessageRestricted+0x2a>
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a320:	b25b      	sxtb	r3, r3
 800a322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a326:	d103      	bne.n	800a330 <vQueueWaitForMessageRestricted+0x40>
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a330:	f001 fd08 	bl	800bd44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d106      	bne.n	800a34a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	3324      	adds	r3, #36	; 0x24
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fc71 	bl	800ac2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a34a:	6978      	ldr	r0, [r7, #20]
 800a34c:	f7ff fefb 	bl	800a146 <prvUnlockQueue>
	}
 800a350:	bf00      	nop
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af04      	add	r7, sp, #16
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	623b      	str	r3, [r7, #32]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xTaskCreateStatic+0x46>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	61fb      	str	r3, [r7, #28]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a39e:	23bc      	movs	r3, #188	; 0xbc
 800a3a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2bbc      	cmp	r3, #188	; 0xbc
 800a3a6:	d00a      	beq.n	800a3be <xTaskCreateStatic+0x66>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	61bb      	str	r3, [r7, #24]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01e      	beq.n	800a404 <xTaskCreateStatic+0xac>
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d8:	2202      	movs	r2, #2
 800a3da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	9302      	str	r3, [sp, #8]
 800a3e6:	f107 0314 	add.w	r3, r7, #20
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f850 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3fe:	f000 f8f3 	bl	800a5e8 <prvAddNewTaskToReadyList>
 800a402:	e001      	b.n	800a408 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a408:	697b      	ldr	r3, [r7, #20]
	}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3728      	adds	r7, #40	; 0x28
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a412:	b580      	push	{r7, lr}
 800a414:	b08c      	sub	sp, #48	; 0x30
 800a416:	af04      	add	r7, sp, #16
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	603b      	str	r3, [r7, #0]
 800a41e:	4613      	mov	r3, r2
 800a420:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4618      	mov	r0, r3
 800a428:	f001 fd7e 	bl	800bf28 <pvPortMalloc>
 800a42c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00e      	beq.n	800a452 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a434:	20bc      	movs	r0, #188	; 0xbc
 800a436:	f001 fd77 	bl	800bf28 <pvPortMalloc>
 800a43a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
 800a448:	e005      	b.n	800a456 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a44a:	6978      	ldr	r0, [r7, #20]
 800a44c:	f001 fe38 	bl	800c0c0 <vPortFree>
 800a450:	e001      	b.n	800a456 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d017      	beq.n	800a48c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	2300      	movs	r3, #0
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f80e 	bl	800a49c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a480:	69f8      	ldr	r0, [r7, #28]
 800a482:	f000 f8b1 	bl	800a5e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a486:	2301      	movs	r3, #1
 800a488:	61bb      	str	r3, [r7, #24]
 800a48a:	e002      	b.n	800a492 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a48c:	f04f 33ff 	mov.w	r3, #4294967295
 800a490:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a492:	69bb      	ldr	r3, [r7, #24]
	}
 800a494:	4618      	mov	r0, r3
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	21a5      	movs	r1, #165	; 0xa5
 800a4b6:	f01a fa4b 	bl	8024950 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a4c4:	440b      	add	r3, r1
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	617b      	str	r3, [r7, #20]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d01f      	beq.n	800a53a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	e012      	b.n	800a526 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	4413      	add	r3, r2
 800a506:	7819      	ldrb	r1, [r3, #0]
 800a508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	4413      	add	r3, r2
 800a50e:	3334      	adds	r3, #52	; 0x34
 800a510:	460a      	mov	r2, r1
 800a512:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	3301      	adds	r3, #1
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d9e9      	bls.n	800a500 <prvInitialiseNewTask+0x64>
 800a52c:	e000      	b.n	800a530 <prvInitialiseNewTask+0x94>
			{
				break;
 800a52e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a538:	e003      	b.n	800a542 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	2b37      	cmp	r3, #55	; 0x37
 800a546:	d901      	bls.n	800a54c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a548:	2337      	movs	r3, #55	; 0x37
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a550:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a556:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	2200      	movs	r2, #0
 800a55c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	3304      	adds	r3, #4
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe fda0 	bl	80090a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56a:	3318      	adds	r3, #24
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fd9b 	bl	80090a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a586:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	2200      	movs	r2, #0
 800a594:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	3354      	adds	r3, #84	; 0x54
 800a59c:	2260      	movs	r2, #96	; 0x60
 800a59e:	2100      	movs	r1, #0
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f01a f9d5 	bl	8024950 <memset>
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	4a0c      	ldr	r2, [pc, #48]	; (800a5dc <prvInitialiseNewTask+0x140>)
 800a5aa:	659a      	str	r2, [r3, #88]	; 0x58
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	4a0c      	ldr	r2, [pc, #48]	; (800a5e0 <prvInitialiseNewTask+0x144>)
 800a5b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	4a0b      	ldr	r2, [pc, #44]	; (800a5e4 <prvInitialiseNewTask+0x148>)
 800a5b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	68f9      	ldr	r1, [r7, #12]
 800a5bc:	69b8      	ldr	r0, [r7, #24]
 800a5be:	f001 fa61 	bl	800ba84 <pxPortInitialiseStack>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d4:	bf00      	nop
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	080290c0 	.word	0x080290c0
 800a5e0:	080290e0 	.word	0x080290e0
 800a5e4:	080290a0 	.word	0x080290a0

0800a5e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5f0:	f001 fb78 	bl	800bce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5f4:	4b2d      	ldr	r3, [pc, #180]	; (800a6ac <prvAddNewTaskToReadyList+0xc4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	4a2c      	ldr	r2, [pc, #176]	; (800a6ac <prvAddNewTaskToReadyList+0xc4>)
 800a5fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5fe:	4b2c      	ldr	r3, [pc, #176]	; (800a6b0 <prvAddNewTaskToReadyList+0xc8>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a606:	4a2a      	ldr	r2, [pc, #168]	; (800a6b0 <prvAddNewTaskToReadyList+0xc8>)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a60c:	4b27      	ldr	r3, [pc, #156]	; (800a6ac <prvAddNewTaskToReadyList+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d110      	bne.n	800a636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a614:	f000 fc38 	bl	800ae88 <prvInitialiseTaskLists>
 800a618:	e00d      	b.n	800a636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a61a:	4b26      	ldr	r3, [pc, #152]	; (800a6b4 <prvAddNewTaskToReadyList+0xcc>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d109      	bne.n	800a636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a622:	4b23      	ldr	r3, [pc, #140]	; (800a6b0 <prvAddNewTaskToReadyList+0xc8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d802      	bhi.n	800a636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a630:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <prvAddNewTaskToReadyList+0xc8>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a636:	4b20      	ldr	r3, [pc, #128]	; (800a6b8 <prvAddNewTaskToReadyList+0xd0>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <prvAddNewTaskToReadyList+0xd0>)
 800a63e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a640:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <prvAddNewTaskToReadyList+0xd0>)
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64c:	4b1b      	ldr	r3, [pc, #108]	; (800a6bc <prvAddNewTaskToReadyList+0xd4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	429a      	cmp	r2, r3
 800a652:	d903      	bls.n	800a65c <prvAddNewTaskToReadyList+0x74>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	4a18      	ldr	r2, [pc, #96]	; (800a6bc <prvAddNewTaskToReadyList+0xd4>)
 800a65a:	6013      	str	r3, [r2, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a660:	4613      	mov	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4a15      	ldr	r2, [pc, #84]	; (800a6c0 <prvAddNewTaskToReadyList+0xd8>)
 800a66a:	441a      	add	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3304      	adds	r3, #4
 800a670:	4619      	mov	r1, r3
 800a672:	4610      	mov	r0, r2
 800a674:	f7fe fd25 	bl	80090c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a678:	f001 fb64 	bl	800bd44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a67c:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <prvAddNewTaskToReadyList+0xcc>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00e      	beq.n	800a6a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <prvAddNewTaskToReadyList+0xc8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	429a      	cmp	r2, r3
 800a690:	d207      	bcs.n	800a6a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <prvAddNewTaskToReadyList+0xdc>)
 800a694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	2401b658 	.word	0x2401b658
 800a6b0:	2401b184 	.word	0x2401b184
 800a6b4:	2401b664 	.word	0x2401b664
 800a6b8:	2401b674 	.word	0x2401b674
 800a6bc:	2401b660 	.word	0x2401b660
 800a6c0:	2401b188 	.word	0x2401b188
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d017      	beq.n	800a70a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6da:	4b13      	ldr	r3, [pc, #76]	; (800a728 <vTaskDelay+0x60>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <vTaskDelay+0x30>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	60bb      	str	r3, [r7, #8]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6f8:	f000 f88a 	bl	800a810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fe1e 	bl	800b340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a704:	f000 f892 	bl	800a82c <xTaskResumeAll>
 800a708:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d107      	bne.n	800a720 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a710:	4b06      	ldr	r3, [pc, #24]	; (800a72c <vTaskDelay+0x64>)
 800a712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a720:	bf00      	nop
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2401b680 	.word	0x2401b680
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	; 0x28
 800a734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a73e:	463a      	mov	r2, r7
 800a740:	1d39      	adds	r1, r7, #4
 800a742:	f107 0308 	add.w	r3, r7, #8
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fc5a 	bl	8009000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68ba      	ldr	r2, [r7, #8]
 800a752:	9202      	str	r2, [sp, #8]
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	2300      	movs	r3, #0
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	460a      	mov	r2, r1
 800a75e:	4924      	ldr	r1, [pc, #144]	; (800a7f0 <vTaskStartScheduler+0xc0>)
 800a760:	4824      	ldr	r0, [pc, #144]	; (800a7f4 <vTaskStartScheduler+0xc4>)
 800a762:	f7ff fdf9 	bl	800a358 <xTaskCreateStatic>
 800a766:	4603      	mov	r3, r0
 800a768:	4a23      	ldr	r2, [pc, #140]	; (800a7f8 <vTaskStartScheduler+0xc8>)
 800a76a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a76c:	4b22      	ldr	r3, [pc, #136]	; (800a7f8 <vTaskStartScheduler+0xc8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d002      	beq.n	800a77a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a774:	2301      	movs	r3, #1
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	e001      	b.n	800a77e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d102      	bne.n	800a78a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a784:	f000 fe30 	bl	800b3e8 <xTimerCreateTimerTask>
 800a788:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d11b      	bne.n	800a7c8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	613b      	str	r3, [r7, #16]
}
 800a7a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7a4:	4b15      	ldr	r3, [pc, #84]	; (800a7fc <vTaskStartScheduler+0xcc>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3354      	adds	r3, #84	; 0x54
 800a7aa:	4a15      	ldr	r2, [pc, #84]	; (800a800 <vTaskStartScheduler+0xd0>)
 800a7ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7ae:	4b15      	ldr	r3, [pc, #84]	; (800a804 <vTaskStartScheduler+0xd4>)
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <vTaskStartScheduler+0xd8>)
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7bc:	4b13      	ldr	r3, [pc, #76]	; (800a80c <vTaskStartScheduler+0xdc>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7c2:	f001 f9ed 	bl	800bba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7c6:	e00e      	b.n	800a7e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d10a      	bne.n	800a7e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <vTaskStartScheduler+0xb4>
}
 800a7e6:	bf00      	nop
 800a7e8:	3718      	adds	r7, #24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	080258e4 	.word	0x080258e4
 800a7f4:	0800ae55 	.word	0x0800ae55
 800a7f8:	2401b67c 	.word	0x2401b67c
 800a7fc:	2401b184 	.word	0x2401b184
 800a800:	240000b0 	.word	0x240000b0
 800a804:	2401b678 	.word	0x2401b678
 800a808:	2401b664 	.word	0x2401b664
 800a80c:	2401b65c 	.word	0x2401b65c

0800a810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a810:	b480      	push	{r7}
 800a812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a814:	4b04      	ldr	r3, [pc, #16]	; (800a828 <vTaskSuspendAll+0x18>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	4a03      	ldr	r2, [pc, #12]	; (800a828 <vTaskSuspendAll+0x18>)
 800a81c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a81e:	bf00      	nop
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	2401b680 	.word	0x2401b680

0800a82c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a836:	2300      	movs	r3, #0
 800a838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a83a:	4b42      	ldr	r3, [pc, #264]	; (800a944 <xTaskResumeAll+0x118>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <xTaskResumeAll+0x2c>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	603b      	str	r3, [r7, #0]
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a858:	f001 fa44 	bl	800bce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a85c:	4b39      	ldr	r3, [pc, #228]	; (800a944 <xTaskResumeAll+0x118>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3b01      	subs	r3, #1
 800a862:	4a38      	ldr	r2, [pc, #224]	; (800a944 <xTaskResumeAll+0x118>)
 800a864:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a866:	4b37      	ldr	r3, [pc, #220]	; (800a944 <xTaskResumeAll+0x118>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d162      	bne.n	800a934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a86e:	4b36      	ldr	r3, [pc, #216]	; (800a948 <xTaskResumeAll+0x11c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d05e      	beq.n	800a934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a876:	e02f      	b.n	800a8d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a878:	4b34      	ldr	r3, [pc, #208]	; (800a94c <xTaskResumeAll+0x120>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3318      	adds	r3, #24
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fc79 	bl	800917c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fc74 	bl	800917c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4b2d      	ldr	r3, [pc, #180]	; (800a950 <xTaskResumeAll+0x124>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d903      	bls.n	800a8a8 <xTaskResumeAll+0x7c>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	4a2a      	ldr	r2, [pc, #168]	; (800a950 <xTaskResumeAll+0x124>)
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4a27      	ldr	r2, [pc, #156]	; (800a954 <xTaskResumeAll+0x128>)
 800a8b6:	441a      	add	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7fe fbff 	bl	80090c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	4b23      	ldr	r3, [pc, #140]	; (800a958 <xTaskResumeAll+0x12c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d302      	bcc.n	800a8d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a8d2:	4b22      	ldr	r3, [pc, #136]	; (800a95c <xTaskResumeAll+0x130>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8d8:	4b1c      	ldr	r3, [pc, #112]	; (800a94c <xTaskResumeAll+0x120>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1cb      	bne.n	800a878 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8e6:	f000 fb71 	bl	800afcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8ea:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <xTaskResumeAll+0x134>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d010      	beq.n	800a918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8f6:	f000 f847 	bl	800a988 <xTaskIncrementTick>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a900:	4b16      	ldr	r3, [pc, #88]	; (800a95c <xTaskResumeAll+0x130>)
 800a902:	2201      	movs	r2, #1
 800a904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3b01      	subs	r3, #1
 800a90a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1f1      	bne.n	800a8f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a912:	4b13      	ldr	r3, [pc, #76]	; (800a960 <xTaskResumeAll+0x134>)
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a918:	4b10      	ldr	r3, [pc, #64]	; (800a95c <xTaskResumeAll+0x130>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a920:	2301      	movs	r3, #1
 800a922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a924:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <xTaskResumeAll+0x138>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a934:	f001 fa06 	bl	800bd44 <vPortExitCritical>

	return xAlreadyYielded;
 800a938:	68bb      	ldr	r3, [r7, #8]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2401b680 	.word	0x2401b680
 800a948:	2401b658 	.word	0x2401b658
 800a94c:	2401b618 	.word	0x2401b618
 800a950:	2401b660 	.word	0x2401b660
 800a954:	2401b188 	.word	0x2401b188
 800a958:	2401b184 	.word	0x2401b184
 800a95c:	2401b66c 	.word	0x2401b66c
 800a960:	2401b668 	.word	0x2401b668
 800a964:	e000ed04 	.word	0xe000ed04

0800a968 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <xTaskGetTickCount+0x1c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a974:	687b      	ldr	r3, [r7, #4]
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	2401b65c 	.word	0x2401b65c

0800a988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a992:	4b4f      	ldr	r3, [pc, #316]	; (800aad0 <xTaskIncrementTick+0x148>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	f040 808f 	bne.w	800aaba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a99c:	4b4d      	ldr	r3, [pc, #308]	; (800aad4 <xTaskIncrementTick+0x14c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9a4:	4a4b      	ldr	r2, [pc, #300]	; (800aad4 <xTaskIncrementTick+0x14c>)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d120      	bne.n	800a9f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9b0:	4b49      	ldr	r3, [pc, #292]	; (800aad8 <xTaskIncrementTick+0x150>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	603b      	str	r3, [r7, #0]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <xTaskIncrementTick+0x46>
 800a9d0:	4b41      	ldr	r3, [pc, #260]	; (800aad8 <xTaskIncrementTick+0x150>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	4b41      	ldr	r3, [pc, #260]	; (800aadc <xTaskIncrementTick+0x154>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a3f      	ldr	r2, [pc, #252]	; (800aad8 <xTaskIncrementTick+0x150>)
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	4a3f      	ldr	r2, [pc, #252]	; (800aadc <xTaskIncrementTick+0x154>)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <xTaskIncrementTick+0x158>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	4a3d      	ldr	r2, [pc, #244]	; (800aae0 <xTaskIncrementTick+0x158>)
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	f000 faed 	bl	800afcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9f2:	4b3c      	ldr	r3, [pc, #240]	; (800aae4 <xTaskIncrementTick+0x15c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d349      	bcc.n	800aa90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9fc:	4b36      	ldr	r3, [pc, #216]	; (800aad8 <xTaskIncrementTick+0x150>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d104      	bne.n	800aa10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa06:	4b37      	ldr	r3, [pc, #220]	; (800aae4 <xTaskIncrementTick+0x15c>)
 800aa08:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0c:	601a      	str	r2, [r3, #0]
					break;
 800aa0e:	e03f      	b.n	800aa90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa10:	4b31      	ldr	r3, [pc, #196]	; (800aad8 <xTaskIncrementTick+0x150>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d203      	bcs.n	800aa30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa28:	4a2e      	ldr	r2, [pc, #184]	; (800aae4 <xTaskIncrementTick+0x15c>)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa2e:	e02f      	b.n	800aa90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fba1 	bl	800917c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	3318      	adds	r3, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fb98 	bl	800917c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa50:	4b25      	ldr	r3, [pc, #148]	; (800aae8 <xTaskIncrementTick+0x160>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d903      	bls.n	800aa60 <xTaskIncrementTick+0xd8>
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	4a22      	ldr	r2, [pc, #136]	; (800aae8 <xTaskIncrementTick+0x160>)
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	4613      	mov	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4a1f      	ldr	r2, [pc, #124]	; (800aaec <xTaskIncrementTick+0x164>)
 800aa6e:	441a      	add	r2, r3
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4610      	mov	r0, r2
 800aa78:	f7fe fb23 	bl	80090c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa80:	4b1b      	ldr	r3, [pc, #108]	; (800aaf0 <xTaskIncrementTick+0x168>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3b8      	bcc.n	800a9fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa8e:	e7b5      	b.n	800a9fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa90:	4b17      	ldr	r3, [pc, #92]	; (800aaf0 <xTaskIncrementTick+0x168>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa96:	4915      	ldr	r1, [pc, #84]	; (800aaec <xTaskIncrementTick+0x164>)
 800aa98:	4613      	mov	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d901      	bls.n	800aaac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aaac:	4b11      	ldr	r3, [pc, #68]	; (800aaf4 <xTaskIncrementTick+0x16c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d007      	beq.n	800aac4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e004      	b.n	800aac4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aaba:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <xTaskIncrementTick+0x170>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3301      	adds	r3, #1
 800aac0:	4a0d      	ldr	r2, [pc, #52]	; (800aaf8 <xTaskIncrementTick+0x170>)
 800aac2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aac4:	697b      	ldr	r3, [r7, #20]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	2401b680 	.word	0x2401b680
 800aad4:	2401b65c 	.word	0x2401b65c
 800aad8:	2401b610 	.word	0x2401b610
 800aadc:	2401b614 	.word	0x2401b614
 800aae0:	2401b670 	.word	0x2401b670
 800aae4:	2401b678 	.word	0x2401b678
 800aae8:	2401b660 	.word	0x2401b660
 800aaec:	2401b188 	.word	0x2401b188
 800aaf0:	2401b184 	.word	0x2401b184
 800aaf4:	2401b66c 	.word	0x2401b66c
 800aaf8:	2401b668 	.word	0x2401b668

0800aafc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab02:	4b32      	ldr	r3, [pc, #200]	; (800abcc <vTaskSwitchContext+0xd0>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab0a:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <vTaskSwitchContext+0xd4>)
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab10:	e057      	b.n	800abc2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800ab12:	4b2f      	ldr	r3, [pc, #188]	; (800abd0 <vTaskSwitchContext+0xd4>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ab18:	4b2e      	ldr	r3, [pc, #184]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4b2d      	ldr	r3, [pc, #180]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d808      	bhi.n	800ab3a <vTaskSwitchContext+0x3e>
 800ab28:	4b2a      	ldr	r3, [pc, #168]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3334      	adds	r3, #52	; 0x34
 800ab32:	4619      	mov	r1, r3
 800ab34:	4610      	mov	r0, r2
 800ab36:	f7f5 fcd0 	bl	80004da <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab3a:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <vTaskSwitchContext+0xdc>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	e010      	b.n	800ab64 <vTaskSwitchContext+0x68>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <vTaskSwitchContext+0x62>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	607b      	str	r3, [r7, #4]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <vTaskSwitchContext+0x60>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	491d      	ldr	r1, [pc, #116]	; (800abdc <vTaskSwitchContext+0xe0>)
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0e4      	beq.n	800ab42 <vTaskSwitchContext+0x46>
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4a16      	ldr	r2, [pc, #88]	; (800abdc <vTaskSwitchContext+0xe0>)
 800ab84:	4413      	add	r3, r2
 800ab86:	60bb      	str	r3, [r7, #8]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	605a      	str	r2, [r3, #4]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d104      	bne.n	800aba8 <vTaskSwitchContext+0xac>
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	605a      	str	r2, [r3, #4]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	4a09      	ldr	r2, [pc, #36]	; (800abd8 <vTaskSwitchContext+0xdc>)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abb8:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <vTaskSwitchContext+0xd8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3354      	adds	r3, #84	; 0x54
 800abbe:	4a08      	ldr	r2, [pc, #32]	; (800abe0 <vTaskSwitchContext+0xe4>)
 800abc0:	6013      	str	r3, [r2, #0]
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2401b680 	.word	0x2401b680
 800abd0:	2401b66c 	.word	0x2401b66c
 800abd4:	2401b184 	.word	0x2401b184
 800abd8:	2401b660 	.word	0x2401b660
 800abdc:	2401b188 	.word	0x2401b188
 800abe0:	240000b0 	.word	0x240000b0

0800abe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60fb      	str	r3, [r7, #12]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac0a:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <vTaskPlaceOnEventList+0x44>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3318      	adds	r3, #24
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7fe fa79 	bl	800910a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac18:	2101      	movs	r1, #1
 800ac1a:	6838      	ldr	r0, [r7, #0]
 800ac1c:	f000 fb90 	bl	800b340 <prvAddCurrentTaskToDelayedList>
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	2401b184 	.word	0x2401b184

0800ac2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10a      	bne.n	800ac54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	617b      	str	r3, [r7, #20]
}
 800ac50:	bf00      	nop
 800ac52:	e7fe      	b.n	800ac52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac54:	4b0a      	ldr	r3, [pc, #40]	; (800ac80 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3318      	adds	r3, #24
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f7fe fa30 	bl	80090c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68b8      	ldr	r0, [r7, #8]
 800ac72:	f000 fb65 	bl	800b340 <prvAddCurrentTaskToDelayedList>
	}
 800ac76:	bf00      	nop
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2401b184 	.word	0x2401b184

0800ac84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10a      	bne.n	800acb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	60fb      	str	r3, [r7, #12]
}
 800acac:	bf00      	nop
 800acae:	e7fe      	b.n	800acae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3318      	adds	r3, #24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fa61 	bl	800917c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acba:	4b1e      	ldr	r3, [pc, #120]	; (800ad34 <xTaskRemoveFromEventList+0xb0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d11d      	bne.n	800acfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fa58 	bl	800917c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd0:	4b19      	ldr	r3, [pc, #100]	; (800ad38 <xTaskRemoveFromEventList+0xb4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d903      	bls.n	800ace0 <xTaskRemoveFromEventList+0x5c>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	4a16      	ldr	r2, [pc, #88]	; (800ad38 <xTaskRemoveFromEventList+0xb4>)
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <xTaskRemoveFromEventList+0xb8>)
 800acee:	441a      	add	r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fe f9e3 	bl	80090c2 <vListInsertEnd>
 800acfc:	e005      	b.n	800ad0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	3318      	adds	r3, #24
 800ad02:	4619      	mov	r1, r3
 800ad04:	480e      	ldr	r0, [pc, #56]	; (800ad40 <xTaskRemoveFromEventList+0xbc>)
 800ad06:	f7fe f9dc 	bl	80090c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <xTaskRemoveFromEventList+0xc0>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d905      	bls.n	800ad24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <xTaskRemoveFromEventList+0xc4>)
 800ad1e:	2201      	movs	r2, #1
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e001      	b.n	800ad28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ad24:	2300      	movs	r3, #0
 800ad26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad28:	697b      	ldr	r3, [r7, #20]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	2401b680 	.word	0x2401b680
 800ad38:	2401b660 	.word	0x2401b660
 800ad3c:	2401b188 	.word	0x2401b188
 800ad40:	2401b618 	.word	0x2401b618
 800ad44:	2401b184 	.word	0x2401b184
 800ad48:	2401b66c 	.word	0x2401b66c

0800ad4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <vTaskInternalSetTimeOutState+0x24>)
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <vTaskInternalSetTimeOutState+0x28>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	605a      	str	r2, [r3, #4]
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	2401b670 	.word	0x2401b670
 800ad74:	2401b65c 	.word	0x2401b65c

0800ad78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	613b      	str	r3, [r7, #16]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10a      	bne.n	800adba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	60fb      	str	r3, [r7, #12]
}
 800adb6:	bf00      	nop
 800adb8:	e7fe      	b.n	800adb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800adba:	f000 ff93 	bl	800bce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800adbe:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <xTaskCheckForTimeOut+0xbc>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add6:	d102      	bne.n	800adde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e023      	b.n	800ae26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <xTaskCheckForTimeOut+0xc0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d007      	beq.n	800adfa <xTaskCheckForTimeOut+0x82>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	69ba      	ldr	r2, [r7, #24]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d302      	bcc.n	800adfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800adf4:	2301      	movs	r3, #1
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e015      	b.n	800ae26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d20b      	bcs.n	800ae1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	1ad2      	subs	r2, r2, r3
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ff9b 	bl	800ad4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae16:	2300      	movs	r3, #0
 800ae18:	61fb      	str	r3, [r7, #28]
 800ae1a:	e004      	b.n	800ae26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae22:	2301      	movs	r3, #1
 800ae24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae26:	f000 ff8d 	bl	800bd44 <vPortExitCritical>

	return xReturn;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	2401b65c 	.word	0x2401b65c
 800ae38:	2401b670 	.word	0x2401b670

0800ae3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae40:	4b03      	ldr	r3, [pc, #12]	; (800ae50 <vTaskMissedYield+0x14>)
 800ae42:	2201      	movs	r2, #1
 800ae44:	601a      	str	r2, [r3, #0]
}
 800ae46:	bf00      	nop
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	2401b66c 	.word	0x2401b66c

0800ae54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae5c:	f000 f854 	bl	800af08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae60:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <prvIdleTask+0x2c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d907      	bls.n	800ae78 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ae68:	4b06      	ldr	r3, [pc, #24]	; (800ae84 <prvIdleTask+0x30>)
 800ae6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ae78:	f7f5 fb28 	bl	80004cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ae7c:	e7ee      	b.n	800ae5c <prvIdleTask+0x8>
 800ae7e:	bf00      	nop
 800ae80:	2401b188 	.word	0x2401b188
 800ae84:	e000ed04 	.word	0xe000ed04

0800ae88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae8e:	2300      	movs	r3, #0
 800ae90:	607b      	str	r3, [r7, #4]
 800ae92:	e00c      	b.n	800aeae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4a12      	ldr	r2, [pc, #72]	; (800aee8 <prvInitialiseTaskLists+0x60>)
 800aea0:	4413      	add	r3, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe f8e0 	bl	8009068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	607b      	str	r3, [r7, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b37      	cmp	r3, #55	; 0x37
 800aeb2:	d9ef      	bls.n	800ae94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aeb4:	480d      	ldr	r0, [pc, #52]	; (800aeec <prvInitialiseTaskLists+0x64>)
 800aeb6:	f7fe f8d7 	bl	8009068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aeba:	480d      	ldr	r0, [pc, #52]	; (800aef0 <prvInitialiseTaskLists+0x68>)
 800aebc:	f7fe f8d4 	bl	8009068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aec0:	480c      	ldr	r0, [pc, #48]	; (800aef4 <prvInitialiseTaskLists+0x6c>)
 800aec2:	f7fe f8d1 	bl	8009068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aec6:	480c      	ldr	r0, [pc, #48]	; (800aef8 <prvInitialiseTaskLists+0x70>)
 800aec8:	f7fe f8ce 	bl	8009068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aecc:	480b      	ldr	r0, [pc, #44]	; (800aefc <prvInitialiseTaskLists+0x74>)
 800aece:	f7fe f8cb 	bl	8009068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aed2:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <prvInitialiseTaskLists+0x78>)
 800aed4:	4a05      	ldr	r2, [pc, #20]	; (800aeec <prvInitialiseTaskLists+0x64>)
 800aed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aed8:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <prvInitialiseTaskLists+0x7c>)
 800aeda:	4a05      	ldr	r2, [pc, #20]	; (800aef0 <prvInitialiseTaskLists+0x68>)
 800aedc:	601a      	str	r2, [r3, #0]
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	2401b188 	.word	0x2401b188
 800aeec:	2401b5e8 	.word	0x2401b5e8
 800aef0:	2401b5fc 	.word	0x2401b5fc
 800aef4:	2401b618 	.word	0x2401b618
 800aef8:	2401b62c 	.word	0x2401b62c
 800aefc:	2401b644 	.word	0x2401b644
 800af00:	2401b610 	.word	0x2401b610
 800af04:	2401b614 	.word	0x2401b614

0800af08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af0e:	e019      	b.n	800af44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af10:	f000 fee8 	bl	800bce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af14:	4b10      	ldr	r3, [pc, #64]	; (800af58 <prvCheckTasksWaitingTermination+0x50>)
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3304      	adds	r3, #4
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe f92b 	bl	800917c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af26:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <prvCheckTasksWaitingTermination+0x54>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	4a0b      	ldr	r2, [pc, #44]	; (800af5c <prvCheckTasksWaitingTermination+0x54>)
 800af2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <prvCheckTasksWaitingTermination+0x58>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3b01      	subs	r3, #1
 800af36:	4a0a      	ldr	r2, [pc, #40]	; (800af60 <prvCheckTasksWaitingTermination+0x58>)
 800af38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af3a:	f000 ff03 	bl	800bd44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f810 	bl	800af64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af44:	4b06      	ldr	r3, [pc, #24]	; (800af60 <prvCheckTasksWaitingTermination+0x58>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e1      	bne.n	800af10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2401b62c 	.word	0x2401b62c
 800af5c:	2401b658 	.word	0x2401b658
 800af60:	2401b640 	.word	0x2401b640

0800af64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3354      	adds	r3, #84	; 0x54
 800af70:	4618      	mov	r0, r3
 800af72:	f01a f8d1 	bl	8025118 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d108      	bne.n	800af92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	4618      	mov	r0, r3
 800af86:	f001 f89b 	bl	800c0c0 <vPortFree>
				vPortFree( pxTCB );
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 f898 	bl	800c0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af90:	e018      	b.n	800afc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d103      	bne.n	800afa4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 f88f 	bl	800c0c0 <vPortFree>
	}
 800afa2:	e00f      	b.n	800afc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d00a      	beq.n	800afc4 <prvDeleteTCB+0x60>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	60fb      	str	r3, [r7, #12]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <prvDeleteTCB+0x5e>
	}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afd2:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <prvResetNextTaskUnblockTime+0x38>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800afdc:	4b0a      	ldr	r3, [pc, #40]	; (800b008 <prvResetNextTaskUnblockTime+0x3c>)
 800afde:	f04f 32ff 	mov.w	r2, #4294967295
 800afe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800afe4:	e008      	b.n	800aff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe6:	4b07      	ldr	r3, [pc, #28]	; (800b004 <prvResetNextTaskUnblockTime+0x38>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4a04      	ldr	r2, [pc, #16]	; (800b008 <prvResetNextTaskUnblockTime+0x3c>)
 800aff6:	6013      	str	r3, [r2, #0]
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	2401b610 	.word	0x2401b610
 800b008:	2401b678 	.word	0x2401b678

0800b00c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <xTaskGetCurrentTaskHandle+0x1c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b018:	687b      	ldr	r3, [r7, #4]
	}
 800b01a:	4618      	mov	r0, r3
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	2401b184 	.word	0x2401b184

0800b02c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <xTaskGetSchedulerState+0x34>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b03a:	2301      	movs	r3, #1
 800b03c:	607b      	str	r3, [r7, #4]
 800b03e:	e008      	b.n	800b052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b040:	4b08      	ldr	r3, [pc, #32]	; (800b064 <xTaskGetSchedulerState+0x38>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b048:	2302      	movs	r3, #2
 800b04a:	607b      	str	r3, [r7, #4]
 800b04c:	e001      	b.n	800b052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b052:	687b      	ldr	r3, [r7, #4]
	}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	2401b664 	.word	0x2401b664
 800b064:	2401b680 	.word	0x2401b680

0800b068 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d051      	beq.n	800b122 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <xTaskPriorityInherit+0xc4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	429a      	cmp	r2, r3
 800b08a:	d241      	bcs.n	800b110 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	db06      	blt.n	800b0a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b094:	4b25      	ldr	r3, [pc, #148]	; (800b12c <xTaskPriorityInherit+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6959      	ldr	r1, [r3, #20]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <xTaskPriorityInherit+0xc8>)
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	d122      	bne.n	800b100 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe f85c 	bl	800917c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <xTaskPriorityInherit+0xc4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d2:	4b18      	ldr	r3, [pc, #96]	; (800b134 <xTaskPriorityInherit+0xcc>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d903      	bls.n	800b0e2 <xTaskPriorityInherit+0x7a>
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0de:	4a15      	ldr	r2, [pc, #84]	; (800b134 <xTaskPriorityInherit+0xcc>)
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4a10      	ldr	r2, [pc, #64]	; (800b130 <xTaskPriorityInherit+0xc8>)
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7fd ffe2 	bl	80090c2 <vListInsertEnd>
 800b0fe:	e004      	b.n	800b10a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <xTaskPriorityInherit+0xc4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	e008      	b.n	800b122 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <xTaskPriorityInherit+0xc4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d201      	bcs.n	800b122 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b11e:	2301      	movs	r3, #1
 800b120:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b122:	68fb      	ldr	r3, [r7, #12]
	}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	2401b184 	.word	0x2401b184
 800b130:	2401b188 	.word	0x2401b188
 800b134:	2401b660 	.word	0x2401b660

0800b138 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d056      	beq.n	800b1fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b14e:	4b2e      	ldr	r3, [pc, #184]	; (800b208 <xTaskPriorityDisinherit+0xd0>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	429a      	cmp	r2, r3
 800b156:	d00a      	beq.n	800b16e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60bb      	str	r3, [r7, #8]
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b190:	1e5a      	subs	r2, r3, #1
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d02c      	beq.n	800b1fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d128      	bne.n	800b1fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fd ffe4 	bl	800917c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <xTaskPriorityDisinherit+0xd4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <xTaskPriorityDisinherit+0xa4>
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	4a0c      	ldr	r2, [pc, #48]	; (800b20c <xTaskPriorityDisinherit+0xd4>)
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4a09      	ldr	r2, [pc, #36]	; (800b210 <xTaskPriorityDisinherit+0xd8>)
 800b1ea:	441a      	add	r2, r3
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fd ff65 	bl	80090c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1fc:	697b      	ldr	r3, [r7, #20]
	}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	2401b184 	.word	0x2401b184
 800b20c:	2401b660 	.word	0x2401b660
 800b210:	2401b188 	.word	0x2401b188

0800b214 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b222:	2301      	movs	r3, #1
 800b224:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d06a      	beq.n	800b302 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60fb      	str	r3, [r7, #12]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d902      	bls.n	800b25a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	61fb      	str	r3, [r7, #28]
 800b258:	e002      	b.n	800b260 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	429a      	cmp	r2, r3
 800b268:	d04b      	beq.n	800b302 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	429a      	cmp	r2, r3
 800b272:	d146      	bne.n	800b302 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b274:	4b25      	ldr	r3, [pc, #148]	; (800b30c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d10a      	bne.n	800b294 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60bb      	str	r3, [r7, #8]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b298:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	699b      	ldr	r3, [r3, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	db04      	blt.n	800b2b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	6959      	ldr	r1, [r3, #20]
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4a13      	ldr	r2, [pc, #76]	; (800b310 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b2c2:	4413      	add	r3, r2
 800b2c4:	4299      	cmp	r1, r3
 800b2c6:	d11c      	bne.n	800b302 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fd ff55 	bl	800917c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d903      	bls.n	800b2e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e2:	4a0c      	ldr	r2, [pc, #48]	; (800b314 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b2f4:	441a      	add	r2, r3
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4610      	mov	r0, r2
 800b2fe:	f7fd fee0 	bl	80090c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b302:	bf00      	nop
 800b304:	3720      	adds	r7, #32
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	2401b184 	.word	0x2401b184
 800b310:	2401b188 	.word	0x2401b188
 800b314:	2401b660 	.word	0x2401b660

0800b318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b31c:	4b07      	ldr	r3, [pc, #28]	; (800b33c <pvTaskIncrementMutexHeldCount+0x24>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d004      	beq.n	800b32e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b324:	4b05      	ldr	r3, [pc, #20]	; (800b33c <pvTaskIncrementMutexHeldCount+0x24>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b32a:	3201      	adds	r2, #1
 800b32c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b32e:	4b03      	ldr	r3, [pc, #12]	; (800b33c <pvTaskIncrementMutexHeldCount+0x24>)
 800b330:	681b      	ldr	r3, [r3, #0]
	}
 800b332:	4618      	mov	r0, r3
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	2401b184 	.word	0x2401b184

0800b340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b34a:	4b21      	ldr	r3, [pc, #132]	; (800b3d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b350:	4b20      	ldr	r3, [pc, #128]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3304      	adds	r3, #4
 800b356:	4618      	mov	r0, r3
 800b358:	f7fd ff10 	bl	800917c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d10a      	bne.n	800b37a <prvAddCurrentTaskToDelayedList+0x3a>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d007      	beq.n	800b37a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36a:	4b1a      	ldr	r3, [pc, #104]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3304      	adds	r3, #4
 800b370:	4619      	mov	r1, r3
 800b372:	4819      	ldr	r0, [pc, #100]	; (800b3d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b374:	f7fd fea5 	bl	80090c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b378:	e026      	b.n	800b3c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4413      	add	r3, r2
 800b380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b382:	4b14      	ldr	r3, [pc, #80]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d209      	bcs.n	800b3a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b392:	4b12      	ldr	r3, [pc, #72]	; (800b3dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	4b0f      	ldr	r3, [pc, #60]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f7fd feb3 	bl	800910a <vListInsert>
}
 800b3a4:	e010      	b.n	800b3c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	f7fd fea9 	bl	800910a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d202      	bcs.n	800b3c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3c2:	4a08      	ldr	r2, [pc, #32]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6013      	str	r3, [r2, #0]
}
 800b3c8:	bf00      	nop
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	2401b65c 	.word	0x2401b65c
 800b3d4:	2401b184 	.word	0x2401b184
 800b3d8:	2401b644 	.word	0x2401b644
 800b3dc:	2401b614 	.word	0x2401b614
 800b3e0:	2401b610 	.word	0x2401b610
 800b3e4:	2401b678 	.word	0x2401b678

0800b3e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3f2:	f000 fb07 	bl	800ba04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3f6:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <xTimerCreateTimerTask+0x80>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d021      	beq.n	800b442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b406:	1d3a      	adds	r2, r7, #4
 800b408:	f107 0108 	add.w	r1, r7, #8
 800b40c:	f107 030c 	add.w	r3, r7, #12
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd fe0f 	bl	8009034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	2302      	movs	r3, #2
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	460a      	mov	r2, r1
 800b428:	4910      	ldr	r1, [pc, #64]	; (800b46c <xTimerCreateTimerTask+0x84>)
 800b42a:	4811      	ldr	r0, [pc, #68]	; (800b470 <xTimerCreateTimerTask+0x88>)
 800b42c:	f7fe ff94 	bl	800a358 <xTaskCreateStatic>
 800b430:	4603      	mov	r3, r0
 800b432:	4a10      	ldr	r2, [pc, #64]	; (800b474 <xTimerCreateTimerTask+0x8c>)
 800b434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b436:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <xTimerCreateTimerTask+0x8c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b43e:	2301      	movs	r3, #1
 800b440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10a      	bne.n	800b45e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	613b      	str	r3, [r7, #16]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b45e:	697b      	ldr	r3, [r7, #20]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	2401b6b4 	.word	0x2401b6b4
 800b46c:	080258ec 	.word	0x080258ec
 800b470:	0800b5ad 	.word	0x0800b5ad
 800b474:	2401b6b8 	.word	0x2401b6b8

0800b478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b486:	2300      	movs	r3, #0
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b494:	f383 8811 	msr	BASEPRI, r3
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	f3bf 8f4f 	dsb	sy
 800b4a0:	623b      	str	r3, [r7, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	e7fe      	b.n	800b4a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <xTimerGenericCommand+0x98>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d02a      	beq.n	800b504 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b05      	cmp	r3, #5
 800b4be:	dc18      	bgt.n	800b4f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4c0:	f7ff fdb4 	bl	800b02c <xTaskGetSchedulerState>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d109      	bne.n	800b4de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4ca:	4b11      	ldr	r3, [pc, #68]	; (800b510 <xTimerGenericCommand+0x98>)
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	f107 0110 	add.w	r1, r7, #16
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d6:	f7fe f8d9 	bl	800968c <xQueueGenericSend>
 800b4da:	6278      	str	r0, [r7, #36]	; 0x24
 800b4dc:	e012      	b.n	800b504 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4de:	4b0c      	ldr	r3, [pc, #48]	; (800b510 <xTimerGenericCommand+0x98>)
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f107 0110 	add.w	r1, r7, #16
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f7fe f8cf 	bl	800968c <xQueueGenericSend>
 800b4ee:	6278      	str	r0, [r7, #36]	; 0x24
 800b4f0:	e008      	b.n	800b504 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <xTimerGenericCommand+0x98>)
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	f107 0110 	add.w	r1, r7, #16
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	f7fe f9c3 	bl	8009888 <xQueueGenericSendFromISR>
 800b502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b506:	4618      	mov	r0, r3
 800b508:	3728      	adds	r7, #40	; 0x28
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	2401b6b4 	.word	0x2401b6b4

0800b514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51e:	4b22      	ldr	r3, [pc, #136]	; (800b5a8 <prvProcessExpiredTimer+0x94>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	3304      	adds	r3, #4
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fd fe25 	bl	800917c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d022      	beq.n	800b586 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	699a      	ldr	r2, [r3, #24]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	18d1      	adds	r1, r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	6978      	ldr	r0, [r7, #20]
 800b54e:	f000 f8d1 	bl	800b6f4 <prvInsertTimerInActiveList>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01f      	beq.n	800b598 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b558:	2300      	movs	r3, #0
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2300      	movs	r3, #0
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	2100      	movs	r1, #0
 800b562:	6978      	ldr	r0, [r7, #20]
 800b564:	f7ff ff88 	bl	800b478 <xTimerGenericCommand>
 800b568:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d113      	bne.n	800b598 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b58c:	f023 0301 	bic.w	r3, r3, #1
 800b590:	b2da      	uxtb	r2, r3
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	6978      	ldr	r0, [r7, #20]
 800b59e:	4798      	blx	r3
}
 800b5a0:	bf00      	nop
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2401b6ac 	.word	0x2401b6ac

0800b5ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f857 	bl	800b66c <prvGetNextExpireTime>
 800b5be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 f803 	bl	800b5d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5ca:	f000 f8d5 	bl	800b778 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5ce:	e7f1      	b.n	800b5b4 <prvTimerTask+0x8>

0800b5d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5da:	f7ff f919 	bl	800a810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5de:	f107 0308 	add.w	r3, r7, #8
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 f866 	bl	800b6b4 <prvSampleTimeNow>
 800b5e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d130      	bne.n	800b652 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10a      	bne.n	800b60c <prvProcessTimerOrBlockTask+0x3c>
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d806      	bhi.n	800b60c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5fe:	f7ff f915 	bl	800a82c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff ff85 	bl	800b514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b60a:	e024      	b.n	800b656 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d008      	beq.n	800b624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <prvProcessTimerOrBlockTask+0x90>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <prvProcessTimerOrBlockTask+0x50>
 800b61c:	2301      	movs	r3, #1
 800b61e:	e000      	b.n	800b622 <prvProcessTimerOrBlockTask+0x52>
 800b620:	2300      	movs	r3, #0
 800b622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b624:	4b0f      	ldr	r3, [pc, #60]	; (800b664 <prvProcessTimerOrBlockTask+0x94>)
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	4619      	mov	r1, r3
 800b632:	f7fe fe5d 	bl	800a2f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b636:	f7ff f8f9 	bl	800a82c <xTaskResumeAll>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <prvProcessTimerOrBlockTask+0x98>)
 800b642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
}
 800b650:	e001      	b.n	800b656 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b652:	f7ff f8eb 	bl	800a82c <xTaskResumeAll>
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	2401b6b0 	.word	0x2401b6b0
 800b664:	2401b6b4 	.word	0x2401b6b4
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <prvGetNextExpireTime+0x44>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <prvGetNextExpireTime+0x16>
 800b67e:	2201      	movs	r2, #1
 800b680:	e000      	b.n	800b684 <prvGetNextExpireTime+0x18>
 800b682:	2200      	movs	r2, #0
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d105      	bne.n	800b69c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b690:	4b07      	ldr	r3, [pc, #28]	; (800b6b0 <prvGetNextExpireTime+0x44>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	e001      	b.n	800b6a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	2401b6ac 	.word	0x2401b6ac

0800b6b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6bc:	f7ff f954 	bl	800a968 <xTaskGetTickCount>
 800b6c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6c2:	4b0b      	ldr	r3, [pc, #44]	; (800b6f0 <prvSampleTimeNow+0x3c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d205      	bcs.n	800b6d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6cc:	f000 f936 	bl	800b93c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	e002      	b.n	800b6de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6de:	4a04      	ldr	r2, [pc, #16]	; (800b6f0 <prvSampleTimeNow+0x3c>)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	2401b6bc 	.word	0x2401b6bc

0800b6f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b702:	2300      	movs	r3, #0
 800b704:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	429a      	cmp	r2, r3
 800b718:	d812      	bhi.n	800b740 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	429a      	cmp	r2, r3
 800b726:	d302      	bcc.n	800b72e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e01b      	b.n	800b766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b72e:	4b10      	ldr	r3, [pc, #64]	; (800b770 <prvInsertTimerInActiveList+0x7c>)
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3304      	adds	r3, #4
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f7fd fce6 	bl	800910a <vListInsert>
 800b73e:	e012      	b.n	800b766 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d206      	bcs.n	800b756 <prvInsertTimerInActiveList+0x62>
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d302      	bcc.n	800b756 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b750:	2301      	movs	r3, #1
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	e007      	b.n	800b766 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b756:	4b07      	ldr	r3, [pc, #28]	; (800b774 <prvInsertTimerInActiveList+0x80>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fd fcd2 	bl	800910a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b766:	697b      	ldr	r3, [r7, #20]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	2401b6b0 	.word	0x2401b6b0
 800b774:	2401b6ac 	.word	0x2401b6ac

0800b778 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08e      	sub	sp, #56	; 0x38
 800b77c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b77e:	e0ca      	b.n	800b916 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	da18      	bge.n	800b7b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b786:	1d3b      	adds	r3, r7, #4
 800b788:	3304      	adds	r3, #4
 800b78a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10a      	bne.n	800b7a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	61fb      	str	r3, [r7, #28]
}
 800b7a4:	bf00      	nop
 800b7a6:	e7fe      	b.n	800b7a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ae:	6850      	ldr	r0, [r2, #4]
 800b7b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7b2:	6892      	ldr	r2, [r2, #8]
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f2c0 80aa 	blt.w	800b914 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d004      	beq.n	800b7d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fd fcd3 	bl	800917c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff ff6b 	bl	800b6b4 <prvSampleTimeNow>
 800b7de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	f200 8097 	bhi.w	800b916 <prvProcessReceivedCommands+0x19e>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <prvProcessReceivedCommands+0x78>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b819 	.word	0x0800b819
 800b7f4:	0800b819 	.word	0x0800b819
 800b7f8:	0800b819 	.word	0x0800b819
 800b7fc:	0800b88d 	.word	0x0800b88d
 800b800:	0800b8a1 	.word	0x0800b8a1
 800b804:	0800b8eb 	.word	0x0800b8eb
 800b808:	0800b819 	.word	0x0800b819
 800b80c:	0800b819 	.word	0x0800b819
 800b810:	0800b88d 	.word	0x0800b88d
 800b814:	0800b8a1 	.word	0x0800b8a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	b2da      	uxtb	r2, r3
 800b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	18d1      	adds	r1, r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b838:	f7ff ff5c 	bl	800b6f4 <prvInsertTimerInActiveList>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d069      	beq.n	800b916 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b848:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d05e      	beq.n	800b916 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	441a      	add	r2, r3
 800b860:	2300      	movs	r3, #0
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	2300      	movs	r3, #0
 800b866:	2100      	movs	r1, #0
 800b868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b86a:	f7ff fe05 	bl	800b478 <xTimerGenericCommand>
 800b86e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d14f      	bne.n	800b916 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	61bb      	str	r3, [r7, #24]
}
 800b888:	bf00      	nop
 800b88a:	e7fe      	b.n	800b88a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b892:	f023 0301 	bic.w	r3, r3, #1
 800b896:	b2da      	uxtb	r2, r3
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b89e:	e03a      	b.n	800b916 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8a6:	f043 0301 	orr.w	r3, r3, #1
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	617b      	str	r3, [r7, #20]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	699a      	ldr	r2, [r3, #24]
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	18d1      	adds	r1, r2, r3
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e4:	f7ff ff06 	bl	800b6f4 <prvInsertTimerInActiveList>
					break;
 800b8e8:	e015      	b.n	800b916 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f0:	f003 0302 	and.w	r3, r3, #2
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d103      	bne.n	800b900 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f000 fbe1 	bl	800c0c0 <vPortFree>
 800b8fe:	e00a      	b.n	800b916 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b906:	f023 0301 	bic.w	r3, r3, #1
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b912:	e000      	b.n	800b916 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b916:	4b08      	ldr	r3, [pc, #32]	; (800b938 <prvProcessReceivedCommands+0x1c0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	1d39      	adds	r1, r7, #4
 800b91c:	2200      	movs	r2, #0
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe f8da 	bl	8009ad8 <xQueueReceive>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	f47f af2a 	bne.w	800b780 <prvProcessReceivedCommands+0x8>
	}
}
 800b92c:	bf00      	nop
 800b92e:	bf00      	nop
 800b930:	3730      	adds	r7, #48	; 0x30
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	2401b6b4 	.word	0x2401b6b4

0800b93c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b088      	sub	sp, #32
 800b940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b942:	e048      	b.n	800b9d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b944:	4b2d      	ldr	r3, [pc, #180]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b94e:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fd fc0d 	bl	800917c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d02e      	beq.n	800b9d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	4413      	add	r3, r2
 800b980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	429a      	cmp	r2, r3
 800b988:	d90e      	bls.n	800b9a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b996:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	f7fd fbb2 	bl	800910a <vListInsert>
 800b9a6:	e016      	b.n	800b9d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff fd60 	bl	800b478 <xTimerGenericCommand>
 800b9b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	603b      	str	r3, [r7, #0]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1b1      	bne.n	800b944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9e0:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9e6:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <prvSwitchTimerLists+0xc4>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a04      	ldr	r2, [pc, #16]	; (800b9fc <prvSwitchTimerLists+0xc0>)
 800b9ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9ee:	4a04      	ldr	r2, [pc, #16]	; (800ba00 <prvSwitchTimerLists+0xc4>)
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	6013      	str	r3, [r2, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2401b6ac 	.word	0x2401b6ac
 800ba00:	2401b6b0 	.word	0x2401b6b0

0800ba04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba0a:	f000 f96b 	bl	800bce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba0e:	4b15      	ldr	r3, [pc, #84]	; (800ba64 <prvCheckForValidListAndQueue+0x60>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d120      	bne.n	800ba58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba16:	4814      	ldr	r0, [pc, #80]	; (800ba68 <prvCheckForValidListAndQueue+0x64>)
 800ba18:	f7fd fb26 	bl	8009068 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba1c:	4813      	ldr	r0, [pc, #76]	; (800ba6c <prvCheckForValidListAndQueue+0x68>)
 800ba1e:	f7fd fb23 	bl	8009068 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba22:	4b13      	ldr	r3, [pc, #76]	; (800ba70 <prvCheckForValidListAndQueue+0x6c>)
 800ba24:	4a10      	ldr	r2, [pc, #64]	; (800ba68 <prvCheckForValidListAndQueue+0x64>)
 800ba26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba28:	4b12      	ldr	r3, [pc, #72]	; (800ba74 <prvCheckForValidListAndQueue+0x70>)
 800ba2a:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <prvCheckForValidListAndQueue+0x68>)
 800ba2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	4b11      	ldr	r3, [pc, #68]	; (800ba78 <prvCheckForValidListAndQueue+0x74>)
 800ba34:	4a11      	ldr	r2, [pc, #68]	; (800ba7c <prvCheckForValidListAndQueue+0x78>)
 800ba36:	2110      	movs	r1, #16
 800ba38:	200a      	movs	r0, #10
 800ba3a:	f7fd fc31 	bl	80092a0 <xQueueGenericCreateStatic>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4a08      	ldr	r2, [pc, #32]	; (800ba64 <prvCheckForValidListAndQueue+0x60>)
 800ba42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <prvCheckForValidListAndQueue+0x60>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba4c:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <prvCheckForValidListAndQueue+0x60>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	490b      	ldr	r1, [pc, #44]	; (800ba80 <prvCheckForValidListAndQueue+0x7c>)
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fbf8 	bl	800a248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba58:	f000 f974 	bl	800bd44 <vPortExitCritical>
}
 800ba5c:	bf00      	nop
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2401b6b4 	.word	0x2401b6b4
 800ba68:	2401b684 	.word	0x2401b684
 800ba6c:	2401b698 	.word	0x2401b698
 800ba70:	2401b6ac 	.word	0x2401b6ac
 800ba74:	2401b6b0 	.word	0x2401b6b0
 800ba78:	2401b760 	.word	0x2401b760
 800ba7c:	2401b6c0 	.word	0x2401b6c0
 800ba80:	080258f4 	.word	0x080258f4

0800ba84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3b04      	subs	r3, #4
 800ba94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3b04      	subs	r3, #4
 800baa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f023 0201 	bic.w	r2, r3, #1
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3b04      	subs	r3, #4
 800bab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bab4:	4a0c      	ldr	r2, [pc, #48]	; (800bae8 <pxPortInitialiseStack+0x64>)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3b14      	subs	r3, #20
 800babe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3b04      	subs	r3, #4
 800baca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f06f 0202 	mvn.w	r2, #2
 800bad2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3b20      	subs	r3, #32
 800bad8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bada:	68fb      	ldr	r3, [r7, #12]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	0800baed 	.word	0x0800baed

0800baec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800baf6:	4b12      	ldr	r3, [pc, #72]	; (800bb40 <prvTaskExitError+0x54>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d00a      	beq.n	800bb16 <prvTaskExitError+0x2a>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	60fb      	str	r3, [r7, #12]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <prvTaskExitError+0x28>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60bb      	str	r3, [r7, #8]
}
 800bb28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb2a:	bf00      	nop
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0fc      	beq.n	800bb2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb32:	bf00      	nop
 800bb34:	bf00      	nop
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	24000014 	.word	0x24000014
	...

0800bb50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <pxCurrentTCBConst2>)
 800bb52:	6819      	ldr	r1, [r3, #0]
 800bb54:	6808      	ldr	r0, [r1, #0]
 800bb56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5a:	f380 8809 	msr	PSP, r0
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f04f 0000 	mov.w	r0, #0
 800bb66:	f380 8811 	msr	BASEPRI, r0
 800bb6a:	4770      	bx	lr
 800bb6c:	f3af 8000 	nop.w

0800bb70 <pxCurrentTCBConst2>:
 800bb70:	2401b184 	.word	0x2401b184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop

0800bb78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb78:	4808      	ldr	r0, [pc, #32]	; (800bb9c <prvPortStartFirstTask+0x24>)
 800bb7a:	6800      	ldr	r0, [r0, #0]
 800bb7c:	6800      	ldr	r0, [r0, #0]
 800bb7e:	f380 8808 	msr	MSP, r0
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f380 8814 	msr	CONTROL, r0
 800bb8a:	b662      	cpsie	i
 800bb8c:	b661      	cpsie	f
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	df00      	svc	0
 800bb98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb9a:	bf00      	nop
 800bb9c:	e000ed08 	.word	0xe000ed08

0800bba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bba6:	4b46      	ldr	r3, [pc, #280]	; (800bcc0 <xPortStartScheduler+0x120>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a46      	ldr	r2, [pc, #280]	; (800bcc4 <xPortStartScheduler+0x124>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d10a      	bne.n	800bbc6 <xPortStartScheduler+0x26>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbc6:	4b3e      	ldr	r3, [pc, #248]	; (800bcc0 <xPortStartScheduler+0x120>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a3f      	ldr	r2, [pc, #252]	; (800bcc8 <xPortStartScheduler+0x128>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d10a      	bne.n	800bbe6 <xPortStartScheduler+0x46>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	f383 8811 	msr	BASEPRI, r3
 800bbd8:	f3bf 8f6f 	isb	sy
 800bbdc:	f3bf 8f4f 	dsb	sy
 800bbe0:	60fb      	str	r3, [r7, #12]
}
 800bbe2:	bf00      	nop
 800bbe4:	e7fe      	b.n	800bbe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbe6:	4b39      	ldr	r3, [pc, #228]	; (800bccc <xPortStartScheduler+0x12c>)
 800bbe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	22ff      	movs	r2, #255	; 0xff
 800bbf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	4b31      	ldr	r3, [pc, #196]	; (800bcd0 <xPortStartScheduler+0x130>)
 800bc0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc0e:	4b31      	ldr	r3, [pc, #196]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc10:	2207      	movs	r2, #7
 800bc12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc14:	e009      	b.n	800bc2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc16:	4b2f      	ldr	r3, [pc, #188]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	4a2d      	ldr	r2, [pc, #180]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	005b      	lsls	r3, r3, #1
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc32:	2b80      	cmp	r3, #128	; 0x80
 800bc34:	d0ef      	beq.n	800bc16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc36:	4b27      	ldr	r3, [pc, #156]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f1c3 0307 	rsb	r3, r3, #7
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d00a      	beq.n	800bc58 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	60bb      	str	r3, [r7, #8]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	021b      	lsls	r3, r3, #8
 800bc5e:	4a1d      	ldr	r2, [pc, #116]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc62:	4b1c      	ldr	r3, [pc, #112]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc6a:	4a1a      	ldr	r2, [pc, #104]	; (800bcd4 <xPortStartScheduler+0x134>)
 800bc6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <xPortStartScheduler+0x138>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a17      	ldr	r2, [pc, #92]	; (800bcd8 <xPortStartScheduler+0x138>)
 800bc7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc82:	4b15      	ldr	r3, [pc, #84]	; (800bcd8 <xPortStartScheduler+0x138>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a14      	ldr	r2, [pc, #80]	; (800bcd8 <xPortStartScheduler+0x138>)
 800bc88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc8e:	f000 f8dd 	bl	800be4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc92:	4b12      	ldr	r3, [pc, #72]	; (800bcdc <xPortStartScheduler+0x13c>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc98:	f000 f8fc 	bl	800be94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc9c:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <xPortStartScheduler+0x140>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a0f      	ldr	r2, [pc, #60]	; (800bce0 <xPortStartScheduler+0x140>)
 800bca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bca8:	f7ff ff66 	bl	800bb78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcac:	f7fe ff26 	bl	800aafc <vTaskSwitchContext>
	prvTaskExitError();
 800bcb0:	f7ff ff1c 	bl	800baec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	e000ed00 	.word	0xe000ed00
 800bcc4:	410fc271 	.word	0x410fc271
 800bcc8:	410fc270 	.word	0x410fc270
 800bccc:	e000e400 	.word	0xe000e400
 800bcd0:	2401b7b0 	.word	0x2401b7b0
 800bcd4:	2401b7b4 	.word	0x2401b7b4
 800bcd8:	e000ed20 	.word	0xe000ed20
 800bcdc:	24000014 	.word	0x24000014
 800bce0:	e000ef34 	.word	0xe000ef34

0800bce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	607b      	str	r3, [r7, #4]
}
 800bcfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <vPortEnterCritical+0x58>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	4a0d      	ldr	r2, [pc, #52]	; (800bd3c <vPortEnterCritical+0x58>)
 800bd06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd08:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <vPortEnterCritical+0x58>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d10f      	bne.n	800bd30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd10:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <vPortEnterCritical+0x5c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d00a      	beq.n	800bd30 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	603b      	str	r3, [r7, #0]
}
 800bd2c:	bf00      	nop
 800bd2e:	e7fe      	b.n	800bd2e <vPortEnterCritical+0x4a>
	}
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	24000014 	.word	0x24000014
 800bd40:	e000ed04 	.word	0xe000ed04

0800bd44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd4a:	4b12      	ldr	r3, [pc, #72]	; (800bd94 <vPortExitCritical+0x50>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10a      	bne.n	800bd68 <vPortExitCritical+0x24>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	607b      	str	r3, [r7, #4]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <vPortExitCritical+0x50>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	4a09      	ldr	r2, [pc, #36]	; (800bd94 <vPortExitCritical+0x50>)
 800bd70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd72:	4b08      	ldr	r3, [pc, #32]	; (800bd94 <vPortExitCritical+0x50>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d105      	bne.n	800bd86 <vPortExitCritical+0x42>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f383 8811 	msr	BASEPRI, r3
}
 800bd84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	24000014 	.word	0x24000014
	...

0800bda0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bda0:	f3ef 8009 	mrs	r0, PSP
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	4b15      	ldr	r3, [pc, #84]	; (800be00 <pxCurrentTCBConst>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	f01e 0f10 	tst.w	lr, #16
 800bdb0:	bf08      	it	eq
 800bdb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdba:	6010      	str	r0, [r2, #0]
 800bdbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bdc4:	f380 8811 	msr	BASEPRI, r0
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f7fe fe94 	bl	800aafc <vTaskSwitchContext>
 800bdd4:	f04f 0000 	mov.w	r0, #0
 800bdd8:	f380 8811 	msr	BASEPRI, r0
 800bddc:	bc09      	pop	{r0, r3}
 800bdde:	6819      	ldr	r1, [r3, #0]
 800bde0:	6808      	ldr	r0, [r1, #0]
 800bde2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde6:	f01e 0f10 	tst.w	lr, #16
 800bdea:	bf08      	it	eq
 800bdec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bdf0:	f380 8809 	msr	PSP, r0
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	f3af 8000 	nop.w

0800be00 <pxCurrentTCBConst>:
 800be00:	2401b184 	.word	0x2401b184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be04:	bf00      	nop
 800be06:	bf00      	nop

0800be08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be22:	f7fe fdb1 	bl	800a988 <xTaskIncrementTick>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <xPortSysTickHandler+0x40>)
 800be2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	2300      	movs	r3, #0
 800be36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f383 8811 	msr	BASEPRI, r3
}
 800be3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	e000ed04 	.word	0xe000ed04

0800be4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <vPortSetupTimerInterrupt+0x34>)
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be56:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <vPortSetupTimerInterrupt+0x38>)
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <vPortSetupTimerInterrupt+0x3c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a0a      	ldr	r2, [pc, #40]	; (800be8c <vPortSetupTimerInterrupt+0x40>)
 800be62:	fba2 2303 	umull	r2, r3, r2, r3
 800be66:	099b      	lsrs	r3, r3, #6
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <vPortSetupTimerInterrupt+0x44>)
 800be6a:	3b01      	subs	r3, #1
 800be6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be6e:	4b04      	ldr	r3, [pc, #16]	; (800be80 <vPortSetupTimerInterrupt+0x34>)
 800be70:	2207      	movs	r2, #7
 800be72:	601a      	str	r2, [r3, #0]
}
 800be74:	bf00      	nop
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	e000e010 	.word	0xe000e010
 800be84:	e000e018 	.word	0xe000e018
 800be88:	24000004 	.word	0x24000004
 800be8c:	10624dd3 	.word	0x10624dd3
 800be90:	e000e014 	.word	0xe000e014

0800be94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bea4 <vPortEnableVFP+0x10>
 800be98:	6801      	ldr	r1, [r0, #0]
 800be9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be9e:	6001      	str	r1, [r0, #0]
 800bea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bea2:	bf00      	nop
 800bea4:	e000ed88 	.word	0xe000ed88

0800bea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800beae:	f3ef 8305 	mrs	r3, IPSR
 800beb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b0f      	cmp	r3, #15
 800beb8:	d914      	bls.n	800bee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beba:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <vPortValidateInterruptPriority+0x70>)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4413      	add	r3, r2
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bec4:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <vPortValidateInterruptPriority+0x74>)
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	7afa      	ldrb	r2, [r7, #11]
 800beca:	429a      	cmp	r2, r3
 800becc:	d20a      	bcs.n	800bee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	607b      	str	r3, [r7, #4]
}
 800bee0:	bf00      	nop
 800bee2:	e7fe      	b.n	800bee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bee4:	4b0e      	ldr	r3, [pc, #56]	; (800bf20 <vPortValidateInterruptPriority+0x78>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800beec:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <vPortValidateInterruptPriority+0x7c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d90a      	bls.n	800bf0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	603b      	str	r3, [r7, #0]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <vPortValidateInterruptPriority+0x60>
	}
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	e000e3f0 	.word	0xe000e3f0
 800bf1c:	2401b7b0 	.word	0x2401b7b0
 800bf20:	e000ed0c 	.word	0xe000ed0c
 800bf24:	2401b7b4 	.word	0x2401b7b4

0800bf28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08a      	sub	sp, #40	; 0x28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf34:	f7fe fc6c 	bl	800a810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf38:	4b5b      	ldr	r3, [pc, #364]	; (800c0a8 <pvPortMalloc+0x180>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf40:	f000 f920 	bl	800c184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf44:	4b59      	ldr	r3, [pc, #356]	; (800c0ac <pvPortMalloc+0x184>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f040 8093 	bne.w	800c078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01d      	beq.n	800bf94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf58:	2208      	movs	r2, #8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d014      	beq.n	800bf94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f023 0307 	bic.w	r3, r3, #7
 800bf70:	3308      	adds	r3, #8
 800bf72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00a      	beq.n	800bf94 <pvPortMalloc+0x6c>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	617b      	str	r3, [r7, #20]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d06e      	beq.n	800c078 <pvPortMalloc+0x150>
 800bf9a:	4b45      	ldr	r3, [pc, #276]	; (800c0b0 <pvPortMalloc+0x188>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d869      	bhi.n	800c078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfa4:	4b43      	ldr	r3, [pc, #268]	; (800c0b4 <pvPortMalloc+0x18c>)
 800bfa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfa8:	4b42      	ldr	r3, [pc, #264]	; (800c0b4 <pvPortMalloc+0x18c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfae:	e004      	b.n	800bfba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d903      	bls.n	800bfcc <pvPortMalloc+0xa4>
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1f1      	bne.n	800bfb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfcc:	4b36      	ldr	r3, [pc, #216]	; (800c0a8 <pvPortMalloc+0x180>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d050      	beq.n	800c078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2208      	movs	r2, #8
 800bfdc:	4413      	add	r3, r2
 800bfde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	1ad2      	subs	r2, r2, r3
 800bff0:	2308      	movs	r3, #8
 800bff2:	005b      	lsls	r3, r3, #1
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d91f      	bls.n	800c038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <pvPortMalloc+0xf8>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	613b      	str	r3, [r7, #16]
}
 800c01c:	bf00      	nop
 800c01e:	e7fe      	b.n	800c01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c032:	69b8      	ldr	r0, [r7, #24]
 800c034:	f000 f908 	bl	800c248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c038:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <pvPortMalloc+0x188>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	4a1b      	ldr	r2, [pc, #108]	; (800c0b0 <pvPortMalloc+0x188>)
 800c044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c046:	4b1a      	ldr	r3, [pc, #104]	; (800c0b0 <pvPortMalloc+0x188>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4b1b      	ldr	r3, [pc, #108]	; (800c0b8 <pvPortMalloc+0x190>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d203      	bcs.n	800c05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c052:	4b17      	ldr	r3, [pc, #92]	; (800c0b0 <pvPortMalloc+0x188>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a18      	ldr	r2, [pc, #96]	; (800c0b8 <pvPortMalloc+0x190>)
 800c058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <pvPortMalloc+0x184>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	431a      	orrs	r2, r3
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	2200      	movs	r2, #0
 800c06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c06e:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <pvPortMalloc+0x194>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	4a11      	ldr	r2, [pc, #68]	; (800c0bc <pvPortMalloc+0x194>)
 800c076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c078:	f7fe fbd8 	bl	800a82c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	f003 0307 	and.w	r3, r3, #7
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00a      	beq.n	800c09c <pvPortMalloc+0x174>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60fb      	str	r3, [r7, #12]
}
 800c098:	bf00      	nop
 800c09a:	e7fe      	b.n	800c09a <pvPortMalloc+0x172>
	return pvReturn;
 800c09c:	69fb      	ldr	r3, [r7, #28]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3728      	adds	r7, #40	; 0x28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	2403b7c0 	.word	0x2403b7c0
 800c0ac:	2403b7d4 	.word	0x2403b7d4
 800c0b0:	2403b7c4 	.word	0x2403b7c4
 800c0b4:	2403b7b8 	.word	0x2403b7b8
 800c0b8:	2403b7c8 	.word	0x2403b7c8
 800c0bc:	2403b7cc 	.word	0x2403b7cc

0800c0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d04d      	beq.n	800c16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0d2:	2308      	movs	r3, #8
 800c0d4:	425b      	negs	r3, r3
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	4413      	add	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	4b24      	ldr	r3, [pc, #144]	; (800c178 <vPortFree+0xb8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <vPortFree+0x44>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	60fb      	str	r3, [r7, #12]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00a      	beq.n	800c122 <vPortFree+0x62>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	60bb      	str	r3, [r7, #8]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	4b14      	ldr	r3, [pc, #80]	; (800c178 <vPortFree+0xb8>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01e      	beq.n	800c16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d11a      	bne.n	800c16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <vPortFree+0xb8>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	43db      	mvns	r3, r3
 800c142:	401a      	ands	r2, r3
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c148:	f7fe fb62 	bl	800a810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	685a      	ldr	r2, [r3, #4]
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <vPortFree+0xbc>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4413      	add	r3, r2
 800c156:	4a09      	ldr	r2, [pc, #36]	; (800c17c <vPortFree+0xbc>)
 800c158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c15a:	6938      	ldr	r0, [r7, #16]
 800c15c:	f000 f874 	bl	800c248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <vPortFree+0xc0>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3301      	adds	r3, #1
 800c166:	4a06      	ldr	r2, [pc, #24]	; (800c180 <vPortFree+0xc0>)
 800c168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c16a:	f7fe fb5f 	bl	800a82c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c16e:	bf00      	nop
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	2403b7d4 	.word	0x2403b7d4
 800c17c:	2403b7c4 	.word	0x2403b7c4
 800c180:	2403b7d0 	.word	0x2403b7d0

0800c184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c18a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c190:	4b27      	ldr	r3, [pc, #156]	; (800c230 <prvHeapInit+0xac>)
 800c192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f003 0307 	and.w	r3, r3, #7
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00c      	beq.n	800c1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	3307      	adds	r3, #7
 800c1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f023 0307 	bic.w	r3, r3, #7
 800c1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	4a1f      	ldr	r2, [pc, #124]	; (800c230 <prvHeapInit+0xac>)
 800c1b4:	4413      	add	r3, r2
 800c1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1bc:	4a1d      	ldr	r2, [pc, #116]	; (800c234 <prvHeapInit+0xb0>)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1c2:	4b1c      	ldr	r3, [pc, #112]	; (800c234 <prvHeapInit+0xb0>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1d0:	2208      	movs	r2, #8
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f023 0307 	bic.w	r3, r3, #7
 800c1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4a15      	ldr	r2, [pc, #84]	; (800c238 <prvHeapInit+0xb4>)
 800c1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1e6:	4b14      	ldr	r3, [pc, #80]	; (800c238 <prvHeapInit+0xb4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1ee:	4b12      	ldr	r3, [pc, #72]	; (800c238 <prvHeapInit+0xb4>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	1ad2      	subs	r2, r2, r3
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c204:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <prvHeapInit+0xb4>)
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	4a0a      	ldr	r2, [pc, #40]	; (800c23c <prvHeapInit+0xb8>)
 800c212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4a09      	ldr	r2, [pc, #36]	; (800c240 <prvHeapInit+0xbc>)
 800c21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c21c:	4b09      	ldr	r3, [pc, #36]	; (800c244 <prvHeapInit+0xc0>)
 800c21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c222:	601a      	str	r2, [r3, #0]
}
 800c224:	bf00      	nop
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr
 800c230:	2401b7b8 	.word	0x2401b7b8
 800c234:	2403b7b8 	.word	0x2403b7b8
 800c238:	2403b7c0 	.word	0x2403b7c0
 800c23c:	2403b7c8 	.word	0x2403b7c8
 800c240:	2403b7c4 	.word	0x2403b7c4
 800c244:	2403b7d4 	.word	0x2403b7d4

0800c248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c250:	4b28      	ldr	r3, [pc, #160]	; (800c2f4 <prvInsertBlockIntoFreeList+0xac>)
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	e002      	b.n	800c25c <prvInsertBlockIntoFreeList+0x14>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	429a      	cmp	r2, r3
 800c264:	d8f7      	bhi.n	800c256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	4413      	add	r3, r2
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	429a      	cmp	r2, r3
 800c276:	d108      	bne.n	800c28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	441a      	add	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	441a      	add	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d118      	bne.n	800c2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d00d      	beq.n	800c2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e008      	b.n	800c2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e003      	b.n	800c2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d002      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2e6:	bf00      	nop
 800c2e8:	3714      	adds	r7, #20
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	2403b7b8 	.word	0x2403b7b8
 800c2f8:	2403b7c0 	.word	0x2403b7c0

0800c2fc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
}
 800c300:	bf00      	nop
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800c30e:	f004 fc45 	bl	8010b9c <touchgfx_init>
}
 800c312:	bf00      	nop
 800c314:	bd80      	pop	{r7, pc}

0800c316 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800c31e:	f004 fc67 	bl	8010bf0 <touchgfx_taskEntry>
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
	...

0800c32c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
    {
 800c334:	4a04      	ldr	r2, [pc, #16]	; (800c348 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	601a      	str	r2, [r3, #0]
    }
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	08027b50 	.word	0x08027b50

0800c34c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
    }
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff ffe9 	bl	800c32c <_ZN8touchgfx12FontProviderD1Ev>
 800c35a:	2104      	movs	r1, #4
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f018 f942 	bl	80245e6 <_ZdlPvj>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800c378:	887b      	ldrh	r3, [r7, #2]
 800c37a:	2b02      	cmp	r3, #2
 800c37c:	d010      	beq.n	800c3a0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800c37e:	2b02      	cmp	r3, #2
 800c380:	dc13      	bgt.n	800c3aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800c386:	2b01      	cmp	r3, #1
 800c388:	d005      	beq.n	800c396 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800c38a:	e00e      	b.n	800c3aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800c38c:	f001 fd68 	bl	800de60 <_ZN17TypedTextDatabase8getFontsEv>
 800c390:	4603      	mov	r3, r0
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	e00a      	b.n	800c3ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800c396:	f001 fd63 	bl	800de60 <_ZN17TypedTextDatabase8getFontsEv>
 800c39a:	4603      	mov	r3, r0
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	e005      	b.n	800c3ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800c3a0:	f001 fd5e 	bl	800de60 <_ZN17TypedTextDatabase8getFontsEv>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	e000      	b.n	800c3ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800c3aa:	2300      	movs	r3, #0
    }
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	4a05      	ldr	r2, [pc, #20]	; (800c3d4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff ffb1 	bl	800c32c <_ZN8touchgfx12FontProviderD1Ev>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08027b3c 	.word	0x08027b3c

0800c3d8 <_ZN23ApplicationFontProviderD0Ev>:
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff ffe7 	bl	800c3b4 <_ZN23ApplicationFontProviderD1Ev>
 800c3e6:	2104      	movs	r1, #4
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f018 f8fc 	bl	80245e6 <_ZdlPvj>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
    {
 800c400:	4a04      	ldr	r2, [pc, #16]	; (800c414 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
    }
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	370c      	adds	r7, #12
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	08027dd8 	.word	0x08027dd8

0800c418 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
    }
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7ff ffe9 	bl	800c3f8 <_ZN8touchgfx4FontD1Ev>
 800c426:	2110      	movs	r1, #16
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f018 f8dc 	bl	80245e6 <_ZdlPvj>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800c438:	b590      	push	{r4, r7, lr}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800c444:	887b      	ldrh	r3, [r7, #2]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e010      	b.n	800c470 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3308      	adds	r3, #8
 800c45c:	681c      	ldr	r4, [r3, #0]
 800c45e:	f107 030f 	add.w	r3, r7, #15
 800c462:	f107 0210 	add.w	r2, r7, #16
 800c466:	8879      	ldrh	r1, [r7, #2]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	47a0      	blx	r4
 800c46c:	6178      	str	r0, [r7, #20]
        return glyph;
 800c46e:	697b      	ldr	r3, [r7, #20]
    }
 800c470:	4618      	mov	r0, r3
 800c472:	371c      	adds	r7, #28
 800c474:	46bd      	mov	sp, r7
 800c476:	bd90      	pop	{r4, r7, pc}

0800c478 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	895b      	ldrh	r3, [r3, #10]
    }
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	899b      	ldrh	r3, [r3, #12]
    }
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	889b      	ldrh	r3, [r3, #4]
    }
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	889a      	ldrh	r2, [r3, #4]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	799b      	ldrb	r3, [r3, #6]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	4413      	add	r3, r2
 800c4d4:	b29b      	uxth	r3, r3
    }
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	79db      	ldrb	r3, [r3, #7]
 800c4ee:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c4f2:	b2db      	uxtb	r3, r3
    }
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	79db      	ldrb	r3, [r3, #7]
 800c50c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c510:	b2db      	uxtb	r3, r3
    }
 800c512:	4618      	mov	r0, r3
 800c514:	370c      	adds	r7, #12
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
	...

0800c520 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	4a05      	ldr	r2, [pc, #20]	; (800c540 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff ff61 	bl	800c3f8 <_ZN8touchgfx4FontD1Ev>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4618      	mov	r0, r3
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	08028d1c 	.word	0x08028d1c

0800c544 <_ZN8touchgfx9ConstFontD0Ev>:
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff ffe7 	bl	800c520 <_ZN8touchgfx9ConstFontD1Ev>
 800c552:	2118      	movs	r1, #24
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f018 f846 	bl	80245e6 <_ZdlPvj>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	4a05      	ldr	r2, [pc, #20]	; (800c584 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4618      	mov	r0, r3
 800c576:	f7ff ffd3 	bl	800c520 <_ZN8touchgfx9ConstFontD1Ev>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	08027b64 	.word	0x08027b64

0800c588 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff ffe7 	bl	800c564 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c596:	2128      	movs	r1, #40	; 0x28
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f018 f824 	bl	80245e6 <_ZdlPvj>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a1b      	ldr	r3, [r3, #32]
    }
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08c      	sub	sp, #48	; 0x30
 800c5dc:	af08      	add	r7, sp, #32
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	80fb      	strh	r3, [r7, #6]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	88b9      	ldrh	r1, [r7, #4]
 800c5f2:	88fa      	ldrh	r2, [r7, #6]
 800c5f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c5f6:	9306      	str	r3, [sp, #24]
 800c5f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c5fa:	9305      	str	r3, [sp, #20]
 800c5fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c606:	9303      	str	r3, [sp, #12]
 800c608:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c60c:	9302      	str	r3, [sp, #8]
 800c60e:	7f3b      	ldrb	r3, [r7, #28]
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	7e3b      	ldrb	r3, [r7, #24]
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	460b      	mov	r3, r1
 800c618:	68b9      	ldr	r1, [r7, #8]
 800c61a:	f00a febf 	bl	801739c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800c61e:	4a0a      	ldr	r2, [pc, #40]	; (800c648 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c628:	619a      	str	r2, [r3, #24]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62e:	61da      	str	r2, [r3, #28]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c634:	621a      	str	r2, [r3, #32]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c63a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	08027b64 	.word	0x08027b64

0800c64c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	889b      	ldrh	r3, [r3, #4]
 800c660:	0adb      	lsrs	r3, r3, #11
 800c662:	b29b      	uxth	r3, r3
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4413      	add	r3, r2
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c67e:	b480      	push	{r7}
 800c680:	b089      	sub	sp, #36	; 0x24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	460b      	mov	r3, r1
 800c688:	607a      	str	r2, [r7, #4]
 800c68a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7b1b      	ldrb	r3, [r3, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	e030      	b.n	800c700 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	69da      	ldr	r2, [r3, #28]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	7b5b      	ldrb	r3, [r3, #13]
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	b21b      	sxth	r3, r3
 800c6ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6b2:	b219      	sxth	r1, r3
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	7adb      	ldrb	r3, [r3, #11]
 800c6b8:	b21b      	sxth	r3, r3
 800c6ba:	430b      	orrs	r3, r1
 800c6bc:	b21b      	sxth	r3, r3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	7b1b      	ldrb	r3, [r3, #12]
 800c6ca:	837b      	strh	r3, [r7, #26]
 800c6cc:	8b7b      	ldrh	r3, [r7, #26]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d015      	beq.n	800c6fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	897a      	ldrh	r2, [r7, #10]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d103      	bne.n	800c6e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c6e2:	e00d      	b.n	800c700 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	897a      	ldrh	r2, [r7, #10]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d306      	bcc.n	800c6fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800c6ee:	8b7b      	ldrh	r3, [r7, #26]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	837b      	strh	r3, [r7, #26]
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	e7e7      	b.n	800c6cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800c6fc:	bf00      	nop
        }
    }
    return 0;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3724      	adds	r7, #36	; 0x24
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
 800c710:	4801      	ldr	r0, [pc, #4]	; (800c718 <__tcf_0+0xc>)
 800c712:	f7ff ff27 	bl	800c564 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c716:	bd80      	pop	{r7, pc}
 800c718:	2403b7d8 	.word	0x2403b7d8

0800c71c <_Z23getFont_verdana_10_4bppv>:
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08c      	sub	sp, #48	; 0x30
 800c720:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800c722:	4b1f      	ldr	r3, [pc, #124]	; (800c7a0 <_Z23getFont_verdana_10_4bppv+0x84>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	f3bf 8f5b 	dmb	ish
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	bf0c      	ite	eq
 800c734:	2301      	moveq	r3, #1
 800c736:	2300      	movne	r3, #0
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d02c      	beq.n	800c798 <_Z23getFont_verdana_10_4bppv+0x7c>
 800c73e:	4818      	ldr	r0, [pc, #96]	; (800c7a0 <_Z23getFont_verdana_10_4bppv+0x84>)
 800c740:	f017 ff53 	bl	80245ea <__cxa_guard_acquire>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	bf14      	ite	ne
 800c74a:	2301      	movne	r3, #1
 800c74c:	2300      	moveq	r3, #0
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d021      	beq.n	800c798 <_Z23getFont_verdana_10_4bppv+0x7c>
 800c754:	2300      	movs	r3, #0
 800c756:	930a      	str	r3, [sp, #40]	; 0x28
 800c758:	2300      	movs	r3, #0
 800c75a:	9309      	str	r3, [sp, #36]	; 0x24
 800c75c:	2300      	movs	r3, #0
 800c75e:	9308      	str	r3, [sp, #32]
 800c760:	233f      	movs	r3, #63	; 0x3f
 800c762:	9307      	str	r3, [sp, #28]
 800c764:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <_Z23getFont_verdana_10_4bppv+0x88>)
 800c766:	9306      	str	r3, [sp, #24]
 800c768:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	2300      	movs	r3, #0
 800c76e:	9304      	str	r3, [sp, #16]
 800c770:	2300      	movs	r3, #0
 800c772:	9303      	str	r3, [sp, #12]
 800c774:	2301      	movs	r3, #1
 800c776:	9302      	str	r3, [sp, #8]
 800c778:	2304      	movs	r3, #4
 800c77a:	9301      	str	r3, [sp, #4]
 800c77c:	2300      	movs	r3, #0
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	230a      	movs	r3, #10
 800c782:	2201      	movs	r2, #1
 800c784:	4909      	ldr	r1, [pc, #36]	; (800c7ac <_Z23getFont_verdana_10_4bppv+0x90>)
 800c786:	480a      	ldr	r0, [pc, #40]	; (800c7b0 <_Z23getFont_verdana_10_4bppv+0x94>)
 800c788:	f7ff ff26 	bl	800c5d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c78c:	4809      	ldr	r0, [pc, #36]	; (800c7b4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800c78e:	f017 ff77 	bl	8024680 <atexit>
 800c792:	4803      	ldr	r0, [pc, #12]	; (800c7a0 <_Z23getFont_verdana_10_4bppv+0x84>)
 800c794:	f017 ff35 	bl	8024602 <__cxa_guard_release>
    return verdana_10_4bpp;
 800c798:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	2403b800 	.word	0x2403b800
 800c7a4:	0802913c 	.word	0x0802913c
 800c7a8:	08029148 	.word	0x08029148
 800c7ac:	903e2458 	.word	0x903e2458
 800c7b0:	2403b7d8 	.word	0x2403b7d8
 800c7b4:	0800c70d 	.word	0x0800c70d

0800c7b8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	4801      	ldr	r0, [pc, #4]	; (800c7c4 <__tcf_0+0xc>)
 800c7be:	f7ff fed1 	bl	800c564 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	2403b804 	.word	0x2403b804

0800c7c8 <_Z23getFont_verdana_20_4bppv>:
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08c      	sub	sp, #48	; 0x30
 800c7cc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800c7ce:	4b1f      	ldr	r3, [pc, #124]	; (800c84c <_Z23getFont_verdana_20_4bppv+0x84>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	f3bf 8f5b 	dmb	ish
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bf0c      	ite	eq
 800c7e0:	2301      	moveq	r3, #1
 800c7e2:	2300      	movne	r3, #0
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d02c      	beq.n	800c844 <_Z23getFont_verdana_20_4bppv+0x7c>
 800c7ea:	4818      	ldr	r0, [pc, #96]	; (800c84c <_Z23getFont_verdana_20_4bppv+0x84>)
 800c7ec:	f017 fefd 	bl	80245ea <__cxa_guard_acquire>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bf14      	ite	ne
 800c7f6:	2301      	movne	r3, #1
 800c7f8:	2300      	moveq	r3, #0
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d021      	beq.n	800c844 <_Z23getFont_verdana_20_4bppv+0x7c>
 800c800:	2300      	movs	r3, #0
 800c802:	930a      	str	r3, [sp, #40]	; 0x28
 800c804:	2300      	movs	r3, #0
 800c806:	9309      	str	r3, [sp, #36]	; 0x24
 800c808:	2300      	movs	r3, #0
 800c80a:	9308      	str	r3, [sp, #32]
 800c80c:	233f      	movs	r3, #63	; 0x3f
 800c80e:	9307      	str	r3, [sp, #28]
 800c810:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <_Z23getFont_verdana_20_4bppv+0x88>)
 800c812:	9306      	str	r3, [sp, #24]
 800c814:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	2300      	movs	r3, #0
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	2300      	movs	r3, #0
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	2301      	movs	r3, #1
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	2304      	movs	r3, #4
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	2300      	movs	r3, #0
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2314      	movs	r3, #20
 800c82e:	2201      	movs	r2, #1
 800c830:	4909      	ldr	r1, [pc, #36]	; (800c858 <_Z23getFont_verdana_20_4bppv+0x90>)
 800c832:	480a      	ldr	r0, [pc, #40]	; (800c85c <_Z23getFont_verdana_20_4bppv+0x94>)
 800c834:	f7ff fed0 	bl	800c5d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c838:	4809      	ldr	r0, [pc, #36]	; (800c860 <_Z23getFont_verdana_20_4bppv+0x98>)
 800c83a:	f017 ff21 	bl	8024680 <atexit>
 800c83e:	4803      	ldr	r0, [pc, #12]	; (800c84c <_Z23getFont_verdana_20_4bppv+0x84>)
 800c840:	f017 fedf 	bl	8024602 <__cxa_guard_release>
    return verdana_20_4bpp;
 800c844:	4b05      	ldr	r3, [pc, #20]	; (800c85c <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800c846:	4618      	mov	r0, r3
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	2403b82c 	.word	0x2403b82c
 800c850:	08029140 	.word	0x08029140
 800c854:	0802914c 	.word	0x0802914c
 800c858:	903e2468 	.word	0x903e2468
 800c85c:	2403b804 	.word	0x2403b804
 800c860:	0800c7b9 	.word	0x0800c7b9

0800c864 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
 800c868:	4801      	ldr	r0, [pc, #4]	; (800c870 <__tcf_0+0xc>)
 800c86a:	f7ff fe7b 	bl	800c564 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	2403b830 	.word	0x2403b830

0800c874 <_Z23getFont_verdana_40_4bppv>:
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800c87a:	4b1f      	ldr	r3, [pc, #124]	; (800c8f8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	f3bf 8f5b 	dmb	ish
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bf0c      	ite	eq
 800c88c:	2301      	moveq	r3, #1
 800c88e:	2300      	movne	r3, #0
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d02c      	beq.n	800c8f0 <_Z23getFont_verdana_40_4bppv+0x7c>
 800c896:	4818      	ldr	r0, [pc, #96]	; (800c8f8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c898:	f017 fea7 	bl	80245ea <__cxa_guard_acquire>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	bf14      	ite	ne
 800c8a2:	2301      	movne	r3, #1
 800c8a4:	2300      	moveq	r3, #0
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d021      	beq.n	800c8f0 <_Z23getFont_verdana_40_4bppv+0x7c>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	9308      	str	r3, [sp, #32]
 800c8b8:	233f      	movs	r3, #63	; 0x3f
 800c8ba:	9307      	str	r3, [sp, #28]
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <_Z23getFont_verdana_40_4bppv+0x88>)
 800c8be:	9306      	str	r3, [sp, #24]
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	2304      	movs	r3, #4
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	2328      	movs	r3, #40	; 0x28
 800c8da:	2201      	movs	r2, #1
 800c8dc:	4909      	ldr	r1, [pc, #36]	; (800c904 <_Z23getFont_verdana_40_4bppv+0x90>)
 800c8de:	480a      	ldr	r0, [pc, #40]	; (800c908 <_Z23getFont_verdana_40_4bppv+0x94>)
 800c8e0:	f7ff fe7a 	bl	800c5d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800c8e4:	4809      	ldr	r0, [pc, #36]	; (800c90c <_Z23getFont_verdana_40_4bppv+0x98>)
 800c8e6:	f017 fecb 	bl	8024680 <atexit>
 800c8ea:	4803      	ldr	r0, [pc, #12]	; (800c8f8 <_Z23getFont_verdana_40_4bppv+0x84>)
 800c8ec:	f017 fe89 	bl	8024602 <__cxa_guard_release>
    return verdana_40_4bpp;
 800c8f0:	4b05      	ldr	r3, [pc, #20]	; (800c908 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	2403b858 	.word	0x2403b858
 800c8fc:	08029144 	.word	0x08029144
 800c900:	08029150 	.word	0x08029150
 800c904:	903e2478 	.word	0x903e2478
 800c908:	2403b830 	.word	0x2403b830
 800c90c:	0800c865 	.word	0x0800c865

0800c910 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c932:	bf00      	nop
 800c934:	370c      	adds	r7, #12
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c93e:	b480      	push	{r7}
 800c940:	b083      	sub	sp, #12
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800c95e:	bf00      	nop
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	460b      	mov	r3, r1
 800c974:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
    {
    }
 800c98a:	bf00      	nop
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800c996:	b480      	push	{r7}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
    {
    }
 800c99e:	bf00      	nop
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
	...

0800c9ac <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
    {
 800c9b4:	4a04      	ldr	r2, [pc, #16]	; (800c9c8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	601a      	str	r2, [r3, #0]
    }
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	08027ccc 	.word	0x08027ccc

0800c9cc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
    }
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ffe9 	bl	800c9ac <_ZN8touchgfx15UIEventListenerD1Ev>
 800c9da:	2104      	movs	r1, #4
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f017 fe02 	bl	80245e6 <_ZdlPvj>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
    {
    }
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800ca2a:	6810      	ldr	r0, [r2, #0]
 800ca2c:	6851      	ldr	r1, [r2, #4]
 800ca2e:	c303      	stmia	r3!, {r0, r1}
    }
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
    {
 800ca44:	4a04      	ldr	r2, [pc, #16]	; (800ca58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	601a      	str	r2, [r3, #0]
    }
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	08027cb4 	.word	0x08027cb4

0800ca5c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
    }
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff ffe9 	bl	800ca3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ca6a:	2104      	movs	r1, #4
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f017 fdba 	bl	80245e6 <_ZdlPvj>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
    {
        return instance;
 800ca80:	4b03      	ldr	r3, [pc, #12]	; (800ca90 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ca82:	681b      	ldr	r3, [r3, #0]
    }
 800ca84:	4618      	mov	r0, r3
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	24041b0c 	.word	0x24041b0c

0800ca94 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ca98:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800caa4:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800caae:	4b06      	ldr	r3, [pc, #24]	; (800cac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab4:	e002      	b.n	800cabc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800cab6:	4b04      	ldr	r3, [pc, #16]	; (800cac8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
    }
 800cabc:	4618      	mov	r0, r3
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	24041b0c 	.word	0x24041b0c

0800cacc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800cad4:	4a07      	ldr	r2, [pc, #28]	; (800caf4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	605a      	str	r2, [r3, #4]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	721a      	strb	r2, [r3, #8]
    {
    }
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	08027c90 	.word	0x08027c90

0800caf8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
    {
 800cb00:	4a04      	ldr	r2, [pc, #16]	; (800cb14 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	601a      	str	r2, [r3, #0]
    }
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr
 800cb14:	08027c90 	.word	0x08027c90

0800cb18 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
    }
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ffe9 	bl	800caf8 <_ZN8touchgfx10TransitionD1Ev>
 800cb26:	210c      	movs	r1, #12
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f017 fd5c 	bl	80245e6 <_ZdlPvj>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
    {
    }
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
    {
    }
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
    {
    }
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800cb7c:	f009 fb8c 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f009 ff6a 	bl	8016a5c <_ZN8touchgfx11Application10invalidateEv>
    }
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
    }
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	4a05      	ldr	r2, [pc, #20]	; (800cbcc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	601a      	str	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7ff fef5 	bl	800c9ac <_ZN8touchgfx15UIEventListenerD1Ev>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	08028c68 	.word	0x08028c68

0800cbd0 <_ZN8touchgfx11ApplicationD0Ev>:
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ffe7 	bl	800cbac <_ZN8touchgfx11ApplicationD1Ev>
 800cbde:	f44f 719c 	mov.w	r1, #312	; 0x138
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f017 fcff 	bl	80245e6 <_ZdlPvj>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f009 fba8 	bl	8016354 <_ZN8touchgfx11ApplicationC1Ev>
 800cc04:	4a09      	ldr	r2, [pc, #36]	; (800cc2c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a04      	ldr	r2, [pc, #16]	; (800cc30 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800cc1e:	6013      	str	r3, [r2, #0]
    }
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	08027c44 	.word	0x08027c44
 800cc30:	24041b58 	.word	0x24041b58

0800cc34 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f804 	bl	800cc4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b082      	sub	sp, #8
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00f      	beq.n	800cc7c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	330c      	adds	r3, #12
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4610      	mov	r0, r2
 800cc70:	4798      	blx	r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00e      	beq.n	800cca0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3308      	adds	r3, #8
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	601a      	str	r2, [r3, #0]
    }
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	601a      	str	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff ff69 	bl	800cbac <_ZN8touchgfx11ApplicationD1Ev>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	08027c44 	.word	0x08027c44

0800cce8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff ffe7 	bl	800ccc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ccf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f017 fc73 	bl	80245e6 <_ZdlPvj>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 fac5 	bl	800d2b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff ffcb 	bl	800ccc4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	08027be0 	.word	0x08027be0

0800cd3c <_ZN23FrontendApplicationBaseD0Ev>:
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff ffe1 	bl	800cd0c <_ZN23FrontendApplicationBaseD1Ev>
 800cd4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f017 fc49 	bl	80245e6 <_ZdlPvj>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4618      	mov	r0, r3
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f87a 	bl	800ce60 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	721a      	strb	r2, [r3, #8]
    }
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800cd8e:	b480      	push	{r7}
 800cd90:	b083      	sub	sp, #12
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	605a      	str	r2, [r3, #4]
    }
 800cd9e:	bf00      	nop
 800cda0:	370c      	adds	r7, #12
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
	...

0800cdac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff ff1a 	bl	800cbf4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800cdc0:	4a12      	ldr	r2, [pc, #72]	; (800ce0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f89d 	bl	800cf0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800cde2:	f7ff fe4b 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 800cde6:	4603      	mov	r3, r0
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	3208      	adds	r2, #8
 800cdec:	6812      	ldr	r2, [r2, #0]
 800cdee:	2100      	movs	r1, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800cdf4:	f7ff fe4e 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f010 fcef 	bl	801d7de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	08027be0 	.word	0x08027be0

0800ce10 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff ffe9 	bl	800ce10 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	605a      	str	r2, [r3, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	3208      	adds	r2, #8
 800ce4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce52:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 800ce60:	b590      	push	{r4, r7, lr}
 800ce62:	b089      	sub	sp, #36	; 0x24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ce6e:	4b10      	ldr	r3, [pc, #64]	; (800ceb0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 800ce70:	61bb      	str	r3, [r7, #24]
 800ce72:	2300      	movs	r3, #0
 800ce74:	61fb      	str	r3, [r7, #28]
 800ce76:	f107 0008 	add.w	r0, r7, #8
 800ce7a:	f107 0318 	add.w	r3, r7, #24
 800ce7e:	cb0c      	ldmia	r3, {r2, r3}
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	f000 f85f 	bl	800cf44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ce86:	f107 0308 	add.w	r3, r7, #8
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f7ff ffcb 	bl	800ce28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ce92:	f107 0308 	add.w	r3, r7, #8
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fa0a 	bl	800d2b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800cea8:	bf00      	nop
 800ceaa:	3724      	adds	r7, #36	; 0x24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd90      	pop	{r4, r7, pc}
 800ceb0:	0800ceb5 	.word	0x0800ceb5

0800ceb4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800cec8:	461a      	mov	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4b04      	ldr	r3, [pc, #16]	; (800cee4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 800ced4:	4804      	ldr	r0, [pc, #16]	; (800cee8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 800ced6:	f000 f867 	bl	800cfa8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ceda:	bf00      	nop
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	24041b4c 	.word	0x24041b4c
 800cee8:	24041b48 	.word	0x24041b48

0800ceec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	4a04      	ldr	r2, [pc, #16]	; (800cf08 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	08027cb4 	.word	0x08027cb4

0800cf0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff ffe8 	bl	800ceec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf1c:	4a08      	ldr	r2, [pc, #32]	; (800cf40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	605a      	str	r2, [r3, #4]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	609a      	str	r2, [r3, #8]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	60da      	str	r2, [r3, #12]
    {
    }
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	08027c2c 	.word	0x08027c2c

0800cf44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	4639      	mov	r1, r7
 800cf50:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff ffc8 	bl	800ceec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cf5c:	4a08      	ldr	r2, [pc, #32]	; (800cf80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	605a      	str	r2, [r3, #4]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	463a      	mov	r2, r7
 800cf6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf72:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	08027c2c 	.word	0x08027c2c

0800cf84 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fd9c 	bl	800cacc <_ZN8touchgfx10TransitionC1Ev>
 800cf94:	4a03      	ldr	r2, [pc, #12]	; (800cfa4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	08027bbc 	.word	0x08027bbc

0800cfa8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b08f      	sub	sp, #60	; 0x3c
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689a      	ldr	r2, [r3, #8]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3320      	adds	r3, #32
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4798      	blx	r3
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2bab      	cmp	r3, #171	; 0xab
 800cfcc:	d805      	bhi.n	800cfda <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800cfce:	4b7e      	ldr	r3, [pc, #504]	; (800d1c8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800cfd0:	4a7e      	ldr	r2, [pc, #504]	; (800d1cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cfd2:	21a3      	movs	r1, #163	; 0xa3
 800cfd4:	487e      	ldr	r0, [pc, #504]	; (800d1d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cfd6:	f017 fb35 	bl	8024644 <__assert_func>
 800cfda:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	3320      	adds	r3, #32
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4610      	mov	r0, r2
 800cfec:	4798      	blx	r3
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b0f      	cmp	r3, #15
 800cff2:	d805      	bhi.n	800d000 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800cff4:	4b77      	ldr	r3, [pc, #476]	; (800d1d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800cff6:	4a75      	ldr	r2, [pc, #468]	; (800d1cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800cff8:	21a4      	movs	r1, #164	; 0xa4
 800cffa:	4875      	ldr	r0, [pc, #468]	; (800d1d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800cffc:	f017 fb22 	bl	8024644 <__assert_func>
 800d000:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68da      	ldr	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3320      	adds	r3, #32
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4610      	mov	r0, r2
 800d012:	4798      	blx	r3
 800d014:	4603      	mov	r3, r0
 800d016:	2b0b      	cmp	r3, #11
 800d018:	d805      	bhi.n	800d026 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800d01a:	4b6f      	ldr	r3, [pc, #444]	; (800d1d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800d01c:	4a6b      	ldr	r2, [pc, #428]	; (800d1cc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800d01e:	21a5      	movs	r1, #165	; 0xa5
 800d020:	486b      	ldr	r0, [pc, #428]	; (800d1d0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800d022:	f017 fb0f 	bl	8024644 <__assert_func>
 800d026:	bf00      	nop
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800d034:	f009 f930 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 800d038:	4603      	mov	r3, r0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f009 f96d 	bl	801631a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d008      	beq.n	800d05a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800d048:	6a3b      	ldr	r3, [r7, #32]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	330c      	adds	r3, #12
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4610      	mov	r0, r2
 800d058:	4798      	blx	r3
    if (*currentTrans)
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d007      	beq.n	800d072 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4610      	mov	r0, r2
 800d070:	4798      	blx	r3
    if (*currentScreen)
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d008      	beq.n	800d08c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3314      	adds	r3, #20
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4610      	mov	r0, r2
 800d08a:	4798      	blx	r3
    if (*currentPresenter)
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d008      	beq.n	800d0a6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3304      	adds	r3, #4
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4798      	blx	r3
    if (*currentScreen)
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	4798      	blx	r3
    if (*currentPresenter)
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d008      	beq.n	800d0d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4798      	blx	r3
}
 800d0d8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	2100      	movs	r1, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 f87b 	bl	800d1dc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	200c      	movs	r0, #12
 800d0ec:	f7ff fc10 	bl	800c910 <_ZnwjPv>
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f7ff ff46 	bl	800cf84 <_ZN8touchgfx12NoTransitionC1Ev>
 800d0f8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	2100      	movs	r1, #0
 800d100:	4618      	mov	r0, r3
 800d102:	f000 f87e 	bl	800d202 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800d106:	4603      	mov	r3, r0
 800d108:	4619      	mov	r1, r3
 800d10a:	20ac      	movs	r0, #172	; 0xac
 800d10c:	f7ff fc00 	bl	800c910 <_ZnwjPv>
 800d110:	4604      	mov	r4, r0
 800d112:	4620      	mov	r0, r4
 800d114:	f001 f83e 	bl	800e194 <_ZN10screenViewC1Ev>
 800d118:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	2100      	movs	r1, #0
 800d120:	4618      	mov	r0, r3
 800d122:	f000 f881 	bl	800d228 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800d126:	4603      	mov	r3, r0
 800d128:	4619      	mov	r1, r3
 800d12a:	2010      	movs	r0, #16
 800d12c:	f7ff fbf0 	bl	800c910 <_ZnwjPv>
 800d130:	4604      	mov	r4, r0
 800d132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d134:	4620      	mov	r0, r4
 800d136:	f000 ffd7 	bl	800e0e8 <_ZN15screenPresenterC1ER10screenView>
 800d13a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d140:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d146:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d14c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	3304      	adds	r3, #4
 800d158:	e000      	b.n	800d15c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800d15a:	2300      	movs	r3, #0
 800d15c:	4619      	mov	r1, r3
 800d15e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d160:	f7ff fda2 	bl	800cca8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	3304      	adds	r3, #4
 800d168:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7ff fe0f 	bl	800cd8e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800d170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d174:	4618      	mov	r0, r3
 800d176:	f000 f86a 	bl	800d24e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	330c      	adds	r3, #12
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	69f8      	ldr	r0, [r7, #28]
 800d190:	4798      	blx	r3
    newPresenter->activate();
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	69b8      	ldr	r0, [r7, #24]
 800d19a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	69f8      	ldr	r0, [r7, #28]
 800d1a0:	f00a fc94 	bl	8017acc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	3310      	adds	r3, #16
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	6978      	ldr	r0, [r7, #20]
 800d1ae:	4798      	blx	r3
    newTransition->invalidate();
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3314      	adds	r3, #20
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6978      	ldr	r0, [r7, #20]
 800d1ba:	4798      	blx	r3
}
 800d1bc:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	373c      	adds	r7, #60	; 0x3c
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd90      	pop	{r4, r7, pc}
 800d1c8:	080258fc 	.word	0x080258fc
 800d1cc:	0802598c 	.word	0x0802598c
 800d1d0:	08025a90 	.word	0x08025a90
 800d1d4:	08025ad4 	.word	0x08025ad4
 800d1d8:	08025b78 	.word	0x08025b78

0800d1dc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3324      	adds	r3, #36	; 0x24
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	887a      	ldrh	r2, [r7, #2]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	4798      	blx	r3
 800d1f8:	4603      	mov	r3, r0
    }
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	460b      	mov	r3, r1
 800d20c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3324      	adds	r3, #36	; 0x24
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	887a      	ldrh	r2, [r7, #2]
 800d218:	4611      	mov	r1, r2
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	4798      	blx	r3
 800d21e:	4603      	mov	r3, r0
    }
 800d220:	4618      	mov	r0, r3
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3324      	adds	r3, #36	; 0x24
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	887a      	ldrh	r2, [r7, #2]
 800d23e:	4611      	mov	r1, r2
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	4798      	blx	r3
 800d244:	4603      	mov	r3, r0
    }
 800d246:	4618      	mov	r0, r3
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d25e:	bf00      	nop
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr
	...

0800d26c <_ZN8touchgfx12NoTransitionD1Ev>:
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	4a05      	ldr	r2, [pc, #20]	; (800d28c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fc3b 	bl	800caf8 <_ZN8touchgfx10TransitionD1Ev>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08027bbc 	.word	0x08027bbc

0800d290 <_ZN8touchgfx12NoTransitionD0Ev>:
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ffe7 	bl	800d26c <_ZN8touchgfx12NoTransitionD1Ev>
 800d29e:	210c      	movs	r1, #12
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f017 f9a0 	bl	80245e6 <_ZdlPvj>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	4a05      	ldr	r2, [pc, #20]	; (800d2d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fbbb 	bl	800ca3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	08027c2c 	.word	0x08027c2c

0800d2d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ffe7 	bl	800d2b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800d2e2:	2110      	movs	r1, #16
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f017 f97e 	bl	80245e6 <_ZdlPvj>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	68d2      	ldr	r2, [r2, #12]
 800d304:	1052      	asrs	r2, r2, #1
 800d306:	1899      	adds	r1, r3, r2
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d102      	bne.n	800d31a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	e00a      	b.n	800d330 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	68d2      	ldr	r2, [r2, #12]
 800d322:	1052      	asrs	r2, r2, #1
 800d324:	4413      	add	r3, r2
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6892      	ldr	r2, [r2, #8]
 800d32c:	4413      	add	r3, r2
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4608      	mov	r0, r1
 800d332:	4798      	blx	r3
    }
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d010      	beq.n	800d36e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d107      	bne.n	800d364 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d101      	bne.n	800d364 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800d364:	2300      	movs	r3, #0
 800d366:	2b01      	cmp	r3, #1
 800d368:	d001      	beq.n	800d36e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800d36e:	2300      	movs	r3, #0
    }
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
        : color(col)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	601a      	str	r2, [r3, #0]
    {
    }
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800d39a:	b480      	push	{r7}
 800d39c:	b083      	sub	sp, #12
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	801a      	strh	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	805a      	strh	r2, [r3, #2]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	809a      	strh	r2, [r3, #4]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	80da      	strh	r2, [r3, #6]
    {
    }
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800d3d0:	4a14      	ldr	r2, [pc, #80]	; (800d424 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff ffdd 	bl	800d39a <_ZN8touchgfx4RectC1Ev>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	330c      	adds	r3, #12
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff ffd8 	bl	800d39a <_ZN8touchgfx4RectC1Ev>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	615a      	str	r2, [r3, #20]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	619a      	str	r2, [r3, #24]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	61da      	str	r2, [r3, #28]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	841a      	strh	r2, [r3, #32]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	845a      	strh	r2, [r3, #34]	; 0x22
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	08028cb4 	.word	0x08028cb4

0800d428 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
    {
 800d430:	4a04      	ldr	r2, [pc, #16]	; (800d444 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	601a      	str	r2, [r3, #0]
    }
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4618      	mov	r0, r3
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr
 800d444:	08028cb4 	.word	0x08028cb4

0800d448 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
    }
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f7ff ffe9 	bl	800d428 <_ZN8touchgfx8DrawableD1Ev>
 800d456:	2128      	movs	r1, #40	; 0x28
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f017 f8c4 	bl	80245e6 <_ZdlPvj>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d476:	2b00      	cmp	r3, #0
 800d478:	d005      	beq.n	800d486 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3314      	adds	r3, #20
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	4798      	blx	r3
        }
    }
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d496:	2300      	movs	r3, #0
    }
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	817b      	strh	r3, [r7, #10]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	813b      	strh	r3, [r7, #8]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d4be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d4c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f000 f82a 	bl	800d522 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800d4ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d4d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 f87e 	bl	800d5da <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800d4de:	bf00      	nop
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	887a      	ldrh	r2, [r7, #2]
 800d4f6:	809a      	strh	r2, [r3, #4]
    }
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	460b      	mov	r3, r1
 800d50e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	887a      	ldrh	r2, [r7, #2]
 800d514:	80da      	strh	r2, [r3, #6]
    }
 800d516:	bf00      	nop
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800d522:	b580      	push	{r7, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	460b      	mov	r3, r1
 800d52c:	807b      	strh	r3, [r7, #2]
 800d52e:	4613      	mov	r3, r2
 800d530:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3330      	adds	r3, #48	; 0x30
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d53e:	4611      	mov	r1, r2
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	4798      	blx	r3
        setY(y);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3334      	adds	r3, #52	; 0x34
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d550:	4611      	mov	r1, r2
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	4798      	blx	r3
    }
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800d55e:	b480      	push	{r7}
 800d560:	b083      	sub	sp, #12
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	460b      	mov	r3, r1
 800d568:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	887a      	ldrh	r2, [r7, #2]
 800d56e:	811a      	strh	r2, [r3, #8]
    }
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	887a      	ldrh	r2, [r7, #2]
 800d58c:	815a      	strh	r2, [r3, #10]
    }
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr

0800d59a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800d59a:	b480      	push	{r7}
 800d59c:	b083      	sub	sp, #12
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
    {
    }
 800d5a2:	bf00      	nop
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d5ce:	bf00      	nop
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	807b      	strh	r3, [r7, #2]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3338      	adds	r3, #56	; 0x38
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	4798      	blx	r3
        setHeight(height);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	333c      	adds	r3, #60	; 0x3c
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d608:	4611      	mov	r1, r2
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	4798      	blx	r3
    }
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
    {
    }
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d64e:	4618      	mov	r0, r3
 800d650:	370c      	adds	r7, #12
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	807b      	strh	r3, [r7, #2]
 800d680:	4613      	mov	r3, r2
 800d682:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3354      	adds	r3, #84	; 0x54
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	8879      	ldrh	r1, [r7, #2]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d694:	b292      	uxth	r2, r2
 800d696:	1a8a      	subs	r2, r1, r2
 800d698:	b292      	uxth	r2, r2
 800d69a:	b210      	sxth	r0, r2
 800d69c:	8839      	ldrh	r1, [r7, #0]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d6a4:	b292      	uxth	r2, r2
 800d6a6:	1a8a      	subs	r2, r1, r2
 800d6a8:	b292      	uxth	r2, r2
 800d6aa:	b212      	sxth	r2, r2
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	4798      	blx	r3
    }
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6c8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6d0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6d8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d6da:	bf00      	nop
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7ff ffe1 	bl	800d6ba <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	601a      	str	r2, [r3, #0]
    }
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
	...

0800d710 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
    {
 800d718:	4a06      	ldr	r2, [pc, #24]	; (800d734 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	3304      	adds	r3, #4
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f9c4 	bl	800dab0 <_ZN8touchgfx9ContainerD1Ev>
    }
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	08028db0 	.word	0x08028db0

0800d738 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
    }
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff ffe5 	bl	800d710 <_ZN8touchgfx6ScreenD1Ev>
 800d746:	213c      	movs	r1, #60	; 0x3c
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f016 ff4c 	bl	80245e6 <_ZdlPvj>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
    {
    }
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
    {
    }
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
    {
    }
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
    {
    }
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f006 f9eb 	bl	8013bac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d7d6:	bf00      	nop
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	60f8      	str	r0, [r7, #12]
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	817b      	strh	r3, [r7, #10]
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff ff24 	bl	800d640 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d008      	beq.n	800d810 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff ff2a 	bl	800d65a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d80c:	2301      	movs	r3, #1
 800d80e:	e000      	b.n	800d812 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800d810:	2300      	movs	r3, #0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	601a      	str	r2, [r3, #0]
        }
    }
 800d81c:	bf00      	nop
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fdca 	bl	800d3c8 <_ZN8touchgfx8DrawableC1Ev>
 800d834:	4a03      	ldr	r2, [pc, #12]	; (800d844 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	08027d5c 	.word	0x08027d5c

0800d848 <_ZN8touchgfx6WidgetD1Ev>:
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	4a05      	ldr	r2, [pc, #20]	; (800d868 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff fde5 	bl	800d428 <_ZN8touchgfx8DrawableD1Ev>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	08027d5c 	.word	0x08027d5c

0800d86c <_ZN8touchgfx6WidgetD0Ev>:
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7ff ffe7 	bl	800d848 <_ZN8touchgfx6WidgetD1Ev>
 800d87a:	2128      	movs	r1, #40	; 0x28
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f016 feb2 	bl	80245e6 <_ZdlPvj>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4618      	mov	r0, r3
 800d898:	2326      	movs	r3, #38	; 0x26
 800d89a:	461a      	mov	r2, r3
 800d89c:	2100      	movs	r1, #0
 800d89e:	f017 f857 	bl	8024950 <memset>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff ffbd 	bl	800d824 <_ZN8touchgfx6WidgetC1Ev>
 800d8aa:	4a09      	ldr	r2, [pc, #36]	; (800d8d0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	22ff      	movs	r2, #255	; 0xff
 800d8b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3328      	adds	r3, #40	; 0x28
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff fd5c 	bl	800d37c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	08028b40 	.word	0x08028b40

0800d8d4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	4a05      	ldr	r2, [pc, #20]	; (800d910 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff ff05 	bl	800d710 <_ZN8touchgfx6ScreenD1Ev>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	08027d28 	.word	0x08027d28

0800d914 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ffe7 	bl	800d8f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800d922:	2140      	movs	r1, #64	; 0x40
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f016 fe5e 	bl	80245e6 <_ZdlPvj>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	4a0a      	ldr	r2, [pc, #40]	; (800d968 <_ZN14screenViewBaseD1Ev+0x34>)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	336c      	adds	r3, #108	; 0x6c
 800d946:	4618      	mov	r0, r3
 800d948:	f007 fae6 	bl	8014f18 <_ZN8touchgfx11VideoWidgetD1Ev>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3340      	adds	r3, #64	; 0x40
 800d950:	4618      	mov	r0, r3
 800d952:	f000 f8cf 	bl	800daf4 <_ZN8touchgfx3BoxD1Ev>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff ffc9 	bl	800d8f0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	08027cf4 	.word	0x08027cf4

0800d96c <_ZN14screenViewBaseD0Ev>:
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff ffdd 	bl	800d934 <_ZN14screenViewBaseD1Ev>
 800d97a:	21ac      	movs	r1, #172	; 0xac
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f016 fe32 	bl	80245e6 <_ZdlPvj>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <videos/VideoDatabase.hpp>

screenViewBase::screenViewBase()
 800d98c:	b590      	push	{r4, r7, lr}
 800d98e:	b087      	sub	sp, #28
 800d990:	af02      	add	r7, sp, #8
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f874 	bl	800da84 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800d99c:	4a31      	ldr	r2, [pc, #196]	; (800da64 <_ZN14screenViewBaseC1Ev+0xd8>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3340      	adds	r3, #64	; 0x40
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff ff70 	bl	800d88c <_ZN8touchgfx3BoxC1Ev>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	336c      	adds	r3, #108	; 0x6c
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f007 fb57 	bl	8015064 <_ZN8touchgfx11VideoWidgetC1Ev>
{

    __background.setPosition(0, 0, 216, 216);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d9bc:	23d8      	movs	r3, #216	; 0xd8
 800d9be:	9300      	str	r3, [sp, #0]
 800d9c0:	23d8      	movs	r3, #216	; 0xd8
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	f7ff fd6d 	bl	800d4a4 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	73fb      	strb	r3, [r7, #15]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73bb      	strb	r3, [r7, #14]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	737b      	strb	r3, [r7, #13]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	041b      	lsls	r3, r3, #16
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	7bbb      	ldrb	r3, [r7, #14]
 800d9e4:	021b      	lsls	r3, r3, #8
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	7b7b      	ldrb	r3, [r7, #13]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d9f0:	f107 0308 	add.w	r3, r7, #8
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fcc0 	bl	800d37c <_ZN8touchgfx9colortypeC1Em>
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	4619      	mov	r1, r3
 800da00:	4620      	mov	r0, r4
 800da02:	f7ff ff67 	bl	800d8d4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    video1.setPosition(0, 0, 216, 216);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800da0c:	23d8      	movs	r3, #216	; 0xd8
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	23d8      	movs	r3, #216	; 0xd8
 800da12:	2200      	movs	r2, #0
 800da14:	2100      	movs	r1, #0
 800da16:	f7ff fd45 	bl	800d4a4 <_ZN8touchgfx8Drawable11setPositionEssss>
    video1.setRepeat(true);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	336c      	adds	r3, #108	; 0x6c
 800da1e:	2101      	movs	r1, #1
 800da20:	4618      	mov	r0, r3
 800da22:	f007 fb5c 	bl	80150de <_ZNK8touchgfx11VideoWidget9setRepeatEb>
    video1.setVideoData(video_SampleVideo2_216x216_bin_start, video_SampleVideo2_216x216_bin_length);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	336c      	adds	r3, #108	; 0x6c
 800da2a:	4a0f      	ldr	r2, [pc, #60]	; (800da68 <_ZN14screenViewBaseC1Ev+0xdc>)
 800da2c:	490f      	ldr	r1, [pc, #60]	; (800da6c <_ZN14screenViewBaseC1Ev+0xe0>)
 800da2e:	4618      	mov	r0, r3
 800da30:	f007 fb8b 	bl	801514a <_ZN8touchgfx11VideoWidget12setVideoDataEPKhm>
    video1.play();
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	336c      	adds	r3, #108	; 0x6c
 800da38:	4618      	mov	r0, r3
 800da3a:	f007 fb43 	bl	80150c4 <_ZNK8touchgfx11VideoWidget4playEv>

    add(__background);
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3340      	adds	r3, #64	; 0x40
 800da44:	4619      	mov	r1, r3
 800da46:	4610      	mov	r0, r2
 800da48:	f7ff feba 	bl	800d7c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(video1);
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	336c      	adds	r3, #108	; 0x6c
 800da52:	4619      	mov	r1, r3
 800da54:	4610      	mov	r0, r2
 800da56:	f7ff feb3 	bl	800d7c0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4618      	mov	r0, r3
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	bd90      	pop	{r4, r7, pc}
 800da64:	08027cf4 	.word	0x08027cf4
 800da68:	003e22e0 	.word	0x003e22e0
 800da6c:	90000000 	.word	0x90000000

0800da70 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]

}
 800da78:	bf00      	nop
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	f009 fe70 	bl	8017774 <_ZN8touchgfx6ScreenC1Ev>
 800da94:	4a05      	ldr	r2, [pc, #20]	; (800daac <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	08027d28 	.word	0x08027d28

0800dab0 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	4a05      	ldr	r2, [pc, #20]	; (800dad0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff fcb1 	bl	800d428 <_ZN8touchgfx8DrawableD1Ev>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	08028958 	.word	0x08028958

0800dad4 <_ZN8touchgfx9ContainerD0Ev>:
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff ffe7 	bl	800dab0 <_ZN8touchgfx9ContainerD1Ev>
 800dae2:	212c      	movs	r1, #44	; 0x2c
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f016 fd7e 	bl	80245e6 <_ZdlPvj>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	4a05      	ldr	r2, [pc, #20]	; (800db14 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4618      	mov	r0, r3
 800db06:	f7ff fe9f 	bl	800d848 <_ZN8touchgfx6WidgetD1Ev>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	08028b40 	.word	0x08028b40

0800db18 <_ZN8touchgfx3BoxD0Ev>:
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7ff ffe7 	bl	800daf4 <_ZN8touchgfx3BoxD1Ev>
 800db26:	212c      	movs	r1, #44	; 0x2c
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f016 fd5c 	bl	80245e6 <_ZdlPvj>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4618      	mov	r0, r3
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800db38:	b480      	push	{r7}
 800db3a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800db3c:	4b02      	ldr	r3, [pc, #8]	; (800db48 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800db3e:	4618      	mov	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	08027dbc 	.word	0x08027dbc

0800db4c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800db4c:	b480      	push	{r7}
 800db4e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800db50:	2301      	movs	r3, #1
}
 800db52:	4618      	mov	r0, r3
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	460b      	mov	r3, r1
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800db6a:	2300      	movs	r3, #0
    }
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800db80:	2300      	movs	r3, #0
    }
 800db82:	4618      	mov	r0, r3
 800db84:	370c      	adds	r7, #12
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr

0800db8e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800db8e:	b480      	push	{r7}
 800db90:	b083      	sub	sp, #12
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800db96:	2300      	movs	r3, #0
    }
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4613      	mov	r3, r2
 800dbb0:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800dbb2:	4a07      	ldr	r2, [pc, #28]	; (800dbd0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6013      	str	r3, [r2, #0]
        fonts = f;
 800dbb8:	4a06      	ldr	r2, [pc, #24]	; (800dbd4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800dbbe:	4a06      	ldr	r2, [pc, #24]	; (800dbd8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800dbc0:	88fb      	ldrh	r3, [r7, #6]
 800dbc2:	8013      	strh	r3, [r2, #0]
    }
 800dbc4:	bf00      	nop
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	24041b5c 	.word	0x24041b5c
 800dbd4:	24041b64 	.word	0x24041b64
 800dbd8:	24041b60 	.word	0x24041b60

0800dbdc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800dbdc:	b40e      	push	{r1, r2, r3}
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b085      	sub	sp, #20
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800dbe6:	f107 0320 	add.w	r3, r7, #32
 800dbea:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	69fa      	ldr	r2, [r7, #28]
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f009 fa02 	bl	8016ffc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800dbfc:	89fb      	ldrh	r3, [r7, #14]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc08:	b003      	add	sp, #12
 800dc0a:	4770      	bx	lr

0800dc0c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800dc0c:	b40c      	push	{r2, r3}
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	460b      	mov	r3, r1
 800dc18:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800dc1a:	f107 031c 	add.w	r3, r7, #28
 800dc1e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800dc20:	78f9      	ldrb	r1, [r7, #3]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	69ba      	ldr	r2, [r7, #24]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f009 f9e8 	bl	8016ffc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800dc30:	89fb      	ldrh	r3, [r7, #14]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc3c:	b002      	add	sp, #8
 800dc3e:	4770      	bx	lr

0800dc40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d016      	beq.n	800dc82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3322      	adds	r3, #34	; 0x22
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	8adb      	ldrh	r3, [r3, #22]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d105      	bne.n	800dc6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800dc62:	4b43      	ldr	r3, [pc, #268]	; (800dd70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800dc64:	4a43      	ldr	r2, [pc, #268]	; (800dd74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800dc66:	21c0      	movs	r1, #192	; 0xc0
 800dc68:	4843      	ldr	r0, [pc, #268]	; (800dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dc6a:	f016 fceb 	bl	8024644 <__assert_func>
            return buffer[pos];
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc70:	8a9b      	ldrh	r3, [r3, #20]
 800dc72:	461a      	mov	r2, r3
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e000      	b.n	800dc84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800dc82:	2300      	movs	r3, #0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d06a      	beq.n	800dd5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f00a fbeb 	bl	8018464 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	3322      	adds	r3, #34	; 0x22
 800dc92:	623b      	str	r3, [r7, #32]
 800dc94:	2301      	movs	r3, #1
 800dc96:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	8adb      	ldrh	r3, [r3, #22]
 800dc9c:	8bfa      	ldrh	r2, [r7, #30]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d305      	bcc.n	800dcae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800dca2:	4b36      	ldr	r3, [pc, #216]	; (800dd7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800dca4:	4a36      	ldr	r2, [pc, #216]	; (800dd80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800dca6:	21c5      	movs	r1, #197	; 0xc5
 800dca8:	4833      	ldr	r0, [pc, #204]	; (800dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dcaa:	f016 fccb 	bl	8024644 <__assert_func>
            const uint16_t index = pos + offset;
 800dcae:	6a3b      	ldr	r3, [r7, #32]
 800dcb0:	8a9a      	ldrh	r2, [r3, #20]
 800dcb2:	8bfb      	ldrh	r3, [r7, #30]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800dcb8:	8bbb      	ldrh	r3, [r7, #28]
 800dcba:	2b09      	cmp	r3, #9
 800dcbc:	d801      	bhi.n	800dcc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800dcbe:	8bbb      	ldrh	r3, [r7, #28]
 800dcc0:	e001      	b.n	800dcc6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800dcc2:	8bbb      	ldrh	r3, [r7, #28]
 800dcc4:	3b0a      	subs	r3, #10
 800dcc6:	6a3a      	ldr	r2, [r7, #32]
 800dcc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dccc:	f640 123f 	movw	r2, #2367	; 0x93f
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	bf0c      	ite	eq
 800dcd4:	2301      	moveq	r3, #1
 800dcd6:	2300      	movne	r3, #0
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d03f      	beq.n	800dd5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3322      	adds	r3, #34	; 0x22
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	3222      	adds	r2, #34	; 0x22
 800dce6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	8ad2      	ldrh	r2, [r2, #22]
 800dcec:	2a00      	cmp	r2, #0
 800dcee:	d105      	bne.n	800dcfc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800dcf0:	4b1f      	ldr	r3, [pc, #124]	; (800dd70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800dcf2:	4a20      	ldr	r2, [pc, #128]	; (800dd74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800dcf4:	21c0      	movs	r1, #192	; 0xc0
 800dcf6:	4820      	ldr	r0, [pc, #128]	; (800dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dcf8:	f016 fca4 	bl	8024644 <__assert_func>
            return buffer[pos];
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	8a92      	ldrh	r2, [r2, #20]
 800dd00:	4611      	mov	r1, r2
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800dd08:	613b      	str	r3, [r7, #16]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	8adb      	ldrh	r3, [r3, #22]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d806      	bhi.n	800dd24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800dd16:	4b1b      	ldr	r3, [pc, #108]	; (800dd84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800dd18:	4a1b      	ldr	r2, [pc, #108]	; (800dd88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800dd1a:	f240 110d 	movw	r1, #269	; 0x10d
 800dd1e:	4816      	ldr	r0, [pc, #88]	; (800dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dd20:	f016 fc90 	bl	8024644 <__assert_func>
            const uint16_t index = pos + 1;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	8a9b      	ldrh	r3, [r3, #20]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800dd2c:	89bb      	ldrh	r3, [r7, #12]
 800dd2e:	2b09      	cmp	r3, #9
 800dd30:	d801      	bhi.n	800dd36 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800dd32:	89bb      	ldrh	r3, [r7, #12]
 800dd34:	e000      	b.n	800dd38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800dd36:	2300      	movs	r3, #0
 800dd38:	693a      	ldr	r2, [r7, #16]
 800dd3a:	89f9      	ldrh	r1, [r7, #14]
 800dd3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800dd40:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3322      	adds	r3, #34	; 0x22
 800dd46:	61bb      	str	r3, [r7, #24]
 800dd48:	f640 133f 	movw	r3, #2367	; 0x93f
 800dd4c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	8a9b      	ldrh	r3, [r3, #20]
 800dd52:	4619      	mov	r1, r3
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	8afa      	ldrh	r2, [r7, #22]
 800dd58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800dd5c:	bf00      	nop
        }
    }
    return getNextChar();
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f00a fa82 	bl	8018268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dd64:	4603      	mov	r3, r0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3728      	adds	r7, #40	; 0x28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	08025c1c 	.word	0x08025c1c
 800dd74:	08025c28 	.word	0x08025c28
 800dd78:	08025cd4 	.word	0x08025cd4
 800dd7c:	08025d1c 	.word	0x08025d1c
 800dd80:	08025d2c 	.word	0x08025d2c
 800dd84:	08025e00 	.word	0x08025e00
 800dd88:	08025e0c 	.word	0x08025e0c

0800dd8c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f00a fa30 	bl	80181fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800dd9a:	bf00      	nop
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800dda4:	b590      	push	{r4, r7, lr}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d127      	bne.n	800de08 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	4a1e      	ldr	r2, [pc, #120]	; (800de34 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ddbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d016      	beq.n	800ddf2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800ddc4:	88fb      	ldrh	r3, [r7, #6]
 800ddc6:	4a1b      	ldr	r2, [pc, #108]	; (800de34 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddcc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	4a18      	ldr	r2, [pc, #96]	; (800de38 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ddd8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	4413      	add	r3, r2
 800dde2:	4a16      	ldr	r2, [pc, #88]	; (800de3c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800dde4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	4413      	add	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e00a      	b.n	800de08 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800ddf2:	4b11      	ldr	r3, [pc, #68]	; (800de38 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800ddf4:	4a12      	ldr	r2, [pc, #72]	; (800de40 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800ddf6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800ddf8:	4a12      	ldr	r2, [pc, #72]	; (800de44 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800ddfa:	4b10      	ldr	r3, [pc, #64]	; (800de3c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800ddfc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800ddfe:	88fb      	ldrh	r3, [r7, #6]
 800de00:	4a11      	ldr	r2, [pc, #68]	; (800de48 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800de02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de06:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00d      	beq.n	800de2a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800de0e:	4a0f      	ldr	r2, [pc, #60]	; (800de4c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800de10:	88fb      	ldrh	r3, [r7, #6]
 800de12:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800de14:	f000 f824 	bl	800de60 <_ZN17TypedTextDatabase8getFontsEv>
 800de18:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800de1a:	f000 f819 	bl	800de50 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800de1e:	4603      	mov	r3, r0
 800de20:	461a      	mov	r2, r3
 800de22:	4621      	mov	r1, r4
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7ff febd 	bl	800dba4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800de2a:	bf00      	nop
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd90      	pop	{r4, r7, pc}
 800de32:	bf00      	nop
 800de34:	2403b85c 	.word	0x2403b85c
 800de38:	2403b864 	.word	0x2403b864
 800de3c:	2403b868 	.word	0x2403b868
 800de40:	903e248c 	.word	0x903e248c
 800de44:	903e2488 	.word	0x903e2488
 800de48:	903e2494 	.word	0x903e2494
 800de4c:	2403b860 	.word	0x2403b860

0800de50 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800de50:	b480      	push	{r7}
 800de52:	af00      	add	r7, sp, #0
    return 0;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800de60:	b480      	push	{r7}
 800de62:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800de64:	4b02      	ldr	r3, [pc, #8]	; (800de70 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800de66:	4618      	mov	r0, r3
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	2403b86c 	.word	0x2403b86c

0800de74 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d113      	bne.n	800deac <_Z41__static_initialization_and_destruction_0ii+0x38>
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d10e      	bne.n	800deac <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800de8e:	f7fe fc9b 	bl	800c7c8 <_Z23getFont_verdana_20_4bppv>
 800de92:	4603      	mov	r3, r0
};
 800de94:	4a07      	ldr	r2, [pc, #28]	; (800deb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800de96:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800de98:	f7fe fcec 	bl	800c874 <_Z23getFont_verdana_40_4bppv>
 800de9c:	4603      	mov	r3, r0
};
 800de9e:	4a05      	ldr	r2, [pc, #20]	; (800deb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800dea0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800dea2:	f7fe fc3b 	bl	800c71c <_Z23getFont_verdana_10_4bppv>
 800dea6:	4603      	mov	r3, r0
};
 800dea8:	4a02      	ldr	r2, [pc, #8]	; (800deb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800deaa:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2403b86c 	.word	0x2403b86c

0800deb8 <_GLOBAL__sub_I_touchgfx_fonts>:
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
 800debc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dec0:	2001      	movs	r0, #1
 800dec2:	f7ff ffd7 	bl	800de74 <_Z41__static_initialization_and_destruction_0ii>
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	4a05      	ldr	r2, [pc, #20]	; (800dee8 <_ZN19FrontendApplicationD1Ev+0x20>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fe ff17 	bl	800cd0c <_ZN23FrontendApplicationBaseD1Ev>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	08027e2c 	.word	0x08027e2c

0800deec <_ZN19FrontendApplicationD0Ev>:
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff ffe7 	bl	800dec8 <_ZN19FrontendApplicationD1Ev>
 800defa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f016 fb71 	bl	80245e6 <_ZdlPvj>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 f82d 	bl	800df7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4618      	mov	r0, r3
 800df26:	f008 f86f 	bl	8016008 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	68b9      	ldr	r1, [r7, #8]
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe ff30 	bl	800cdac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800df4c:	4a03      	ldr	r2, [pc, #12]	; (800df5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	601a      	str	r2, [r3, #0]
{

}
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	4618      	mov	r0, r3
 800df56:	3710      	adds	r7, #16
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	08027e2c 	.word	0x08027e2c

0800df60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2200      	movs	r2, #0
 800df6c:	601a      	str	r2, [r3, #0]
{

}
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4618      	mov	r0, r3
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <_ZN5Model4tickEv>:

void Model::tick()
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]

}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
    {
    }
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    {
    }
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
    {
 800dfc0:	4a04      	ldr	r2, [pc, #16]	; (800dfd4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	601a      	str	r2, [r3, #0]
    }
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	08027eb0 	.word	0x08027eb0

0800dfd8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
    }
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff ffe9 	bl	800dfb8 <_ZN8touchgfx9PresenterD1Ev>
 800dfe6:	2104      	movs	r1, #4
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f016 fafc 	bl	80245e6 <_ZdlPvj>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
    {
 800e000:	4a04      	ldr	r2, [pc, #16]	; (800e014 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	601a      	str	r2, [r3, #0]
    }
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	08027eb0 	.word	0x08027eb0

0800e018 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	4a06      	ldr	r2, [pc, #24]	; (800e03c <_ZN13ModelListenerC1Ev+0x24>)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	601a      	str	r2, [r3, #0]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	605a      	str	r2, [r3, #4]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4618      	mov	r0, r3
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	08027ea0 	.word	0x08027ea0

0800e040 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4a04      	ldr	r2, [pc, #16]	; (800e05c <_ZN13ModelListenerD1Ev+0x1c>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	08027ea0 	.word	0x08027ea0

0800e060 <_ZN13ModelListenerD0Ev>:
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff ffe9 	bl	800e040 <_ZN13ModelListenerD1Ev>
 800e06e:	2108      	movs	r1, #8
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f016 fab8 	bl	80245e6 <_ZdlPvj>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	4a09      	ldr	r2, [pc, #36]	; (800e0b0 <_ZN15screenPresenterD1Ev+0x30>)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	4a09      	ldr	r2, [pc, #36]	; (800e0b4 <_ZN15screenPresenterD1Ev+0x34>)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	605a      	str	r2, [r3, #4]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3304      	adds	r3, #4
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff ffd1 	bl	800e040 <_ZN13ModelListenerD1Ev>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff ff89 	bl	800dfb8 <_ZN8touchgfx9PresenterD1Ev>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	08027e78 	.word	0x08027e78
 800e0b4:	08027e90 	.word	0x08027e90

0800e0b8 <_ZThn4_N15screenPresenterD1Ev>:
 800e0b8:	f1a0 0004 	sub.w	r0, r0, #4
 800e0bc:	e7e0      	b.n	800e080 <_ZN15screenPresenterD1Ev>
 800e0be:	bf00      	nop

0800e0c0 <_ZN15screenPresenterD0Ev>:
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff ffd9 	bl	800e080 <_ZN15screenPresenterD1Ev>
 800e0ce:	2110      	movs	r1, #16
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f016 fa88 	bl	80245e6 <_ZdlPvj>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <_ZThn4_N15screenPresenterD0Ev>:
 800e0e0:	f1a0 0004 	sub.w	r0, r0, #4
 800e0e4:	e7ec      	b.n	800e0c0 <_ZN15screenPresenterD0Ev>
	...

0800e0e8 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
    : view(v)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7ff ff7f 	bl	800dff8 <_ZN8touchgfx9PresenterC1Ev>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff ff8a 	bl	800e018 <_ZN13ModelListenerC1Ev>
 800e104:	4a06      	ldr	r2, [pc, #24]	; (800e120 <_ZN15screenPresenterC1ER10screenView+0x38>)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	4a06      	ldr	r2, [pc, #24]	; (800e124 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	605a      	str	r2, [r3, #4]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	60da      	str	r2, [r3, #12]
{

}
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	08027e78 	.word	0x08027e78
 800e124:	08027e90 	.word	0x08027e90

0800e128 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]

}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]

}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	4a05      	ldr	r2, [pc, #20]	; (800e170 <_ZN10screenViewD1Ev+0x20>)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff fbe7 	bl	800d934 <_ZN14screenViewBaseD1Ev>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	08027ec8 	.word	0x08027ec8

0800e174 <_ZN10screenViewD0Ev>:
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ffe7 	bl	800e150 <_ZN10screenViewD1Ev>
 800e182:	21ac      	movs	r1, #172	; 0xac
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f016 fa2e 	bl	80245e6 <_ZdlPvj>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fbf4 	bl	800d98c <_ZN14screenViewBaseC1Ev>
 800e1a4:	4a03      	ldr	r2, [pc, #12]	; (800e1b4 <_ZN10screenViewC1Ev+0x20>)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	601a      	str	r2, [r3, #0]
{

}
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08027ec8 	.word	0x08027ec8

0800e1b8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff fc54 	bl	800da70 <_ZN14screenViewBase11setupScreenEv>
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff fad0 	bl	800d780 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
    {
 800e1f0:	4a04      	ldr	r2, [pc, #16]	; (800e204 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
    }
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	08027f14 	.word	0x08027f14

0800e208 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
    }
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff ffe9 	bl	800e1e8 <_ZN8touchgfx15TouchControllerD1Ev>
 800e216:	2104      	movs	r1, #4
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f016 f9e4 	bl	80245e6 <_ZdlPvj>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800e230:	bf00      	nop
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	4a05      	ldr	r2, [pc, #20]	; (800e278 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7ff ffbd 	bl	800e1e8 <_ZN8touchgfx15TouchControllerD1Ev>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	08027efc 	.word	0x08027efc

0800e27c <_ZN20STM32TouchControllerD0Ev>:
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff ffe7 	bl	800e258 <_ZN20STM32TouchControllerD1Ev>
 800e28a:	2104      	movs	r1, #4
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f016 f9aa 	bl	80245e6 <_ZdlPvj>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4618      	mov	r0, r3
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	2b03      	cmp	r3, #3
 800e2aa:	d80c      	bhi.n	800e2c6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800e2ac:	a201      	add	r2, pc, #4	; (adr r2, 800e2b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800e2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b2:	bf00      	nop
 800e2b4:	0800e2c5 	.word	0x0800e2c5
 800e2b8:	0800e2c5 	.word	0x0800e2c5
 800e2bc:	0800e2c5 	.word	0x0800e2c5
 800e2c0:	0800e2c5 	.word	0x0800e2c5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800e2c4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800e2c6:	bf00      	nop
 800e2c8:	370c      	adds	r7, #12
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop

0800e2d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d80c      	bhi.n	800e2fe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800e2e4:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800e2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ea:	bf00      	nop
 800e2ec:	0800e2fd 	.word	0x0800e2fd
 800e2f0:	0800e2fd 	.word	0x0800e2fd
 800e2f4:	0800e2fd 	.word	0x0800e2fd
 800e2f8:	0800e2fd 	.word	0x0800e2fd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800e2fc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop

0800e30c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d80c      	bhi.n	800e336 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800e31c:	a201      	add	r2, pc, #4	; (adr r2, 800e324 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800e31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e322:	bf00      	nop
 800e324:	0800e335 	.word	0x0800e335
 800e328:	0800e335 	.word	0x0800e335
 800e32c:	0800e335 	.word	0x0800e335
 800e330:	0800e335 	.word	0x0800e335
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800e334:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop

0800e344 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
    {
 800e34c:	4a04      	ldr	r2, [pc, #16]	; (800e360 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	601a      	str	r2, [r3, #0]
    }
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4618      	mov	r0, r3
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	080289f4 	.word	0x080289f4

0800e364 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
    }
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff ffe9 	bl	800e344 <_ZN8touchgfx3HALD1Ev>
 800e372:	217c      	movs	r1, #124	; 0x7c
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f016 f936 	bl	80245e6 <_ZdlPvj>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800e3a0:	bf00      	nop
 800e3a2:	370c      	adds	r7, #12
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr

0800e3ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	807b      	strh	r3, [r7, #2]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800e3bc:	4b0c      	ldr	r3, [pc, #48]	; (800e3f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	887a      	ldrh	r2, [r7, #2]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d304      	bcc.n	800e3d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	883a      	ldrh	r2, [r7, #0]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d205      	bcs.n	800e3dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800e3d0:	4b09      	ldr	r3, [pc, #36]	; (800e3f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800e3d2:	4a0a      	ldr	r2, [pc, #40]	; (800e3fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800e3d4:	219e      	movs	r1, #158	; 0x9e
 800e3d6:	480a      	ldr	r0, [pc, #40]	; (800e400 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800e3d8:	f016 f934 	bl	8024644 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800e3dc:	4a09      	ldr	r2, [pc, #36]	; (800e404 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800e3e2:	4a09      	ldr	r2, [pc, #36]	; (800e408 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800e3e4:	883b      	ldrh	r3, [r7, #0]
 800e3e6:	8013      	strh	r3, [r2, #0]
    }
 800e3e8:	bf00      	nop
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	24041b00 	.word	0x24041b00
 800e3f4:	24041b02 	.word	0x24041b02
 800e3f8:	08025ec0 	.word	0x08025ec0
 800e3fc:	08025f24 	.word	0x08025f24
 800e400:	08025f68 	.word	0x08025f68
 800e404:	24041b06 	.word	0x24041b06
 800e408:	24041b08 	.word	0x24041b08

0800e40c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	685a      	ldr	r2, [r3, #4]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4610      	mov	r0, r2
 800e42c:	4798      	blx	r3
 800e42e:	4603      	mov	r3, r0
 800e430:	e000      	b.n	800e434 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800e432:	2300      	movs	r3, #0
    }
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f006 fbe7 	bl	8014c18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	33ac      	adds	r3, #172	; 0xac
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
    }
 800e456:	bf00      	nop
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800e45e:	b480      	push	{r7}
 800e460:	b083      	sub	sp, #12
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800e468:	2300      	movs	r3, #0
    }
 800e46a:	4618      	mov	r0, r3
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d106      	bne.n	800e49a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800e48c:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800e48e:	4a10      	ldr	r2, [pc, #64]	; (800e4d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800e490:	f240 21d2 	movw	r1, #722	; 0x2d2
 800e494:	480f      	ldr	r0, [pc, #60]	; (800e4d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800e496:	f016 f8d5 	bl	8024644 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	bf14      	ite	ne
 800e4ac:	2301      	movne	r3, #1
 800e4ae:	2300      	moveq	r3, #0
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	4b09      	ldr	r3, [pc, #36]	; (800e4d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800e4b4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	338c      	adds	r3, #140	; 0x8c
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	4798      	blx	r3
    }
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	08025fac 	.word	0x08025fac
 800e4d0:	08025fe4 	.word	0x08025fe4
 800e4d4:	08025f68 	.word	0x08025f68
 800e4d8:	24041b0a 	.word	0x24041b0a

0800e4dc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	bf14      	ite	ne
 800e4f2:	2301      	movne	r3, #1
 800e4f4:	2300      	moveq	r3, #0
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	4b03      	ldr	r3, [pc, #12]	; (800e508 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800e4fa:	701a      	strb	r2, [r3, #0]
    }
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	24041b0b 	.word	0x24041b0b

0800e50c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800e514:	2300      	movs	r3, #0
    }
 800e516:	4618      	mov	r0, r3
 800e518:	370c      	adds	r7, #12
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr

0800e522 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800e522:	b580      	push	{r7, lr}
 800e524:	b082      	sub	sp, #8
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	460b      	mov	r3, r1
 800e52c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e532:	2b00      	cmp	r3, #0
 800e534:	d004      	beq.n	800e540 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53a:	887a      	ldrh	r2, [r7, #2]
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
        }
    }
 800e540:	bf00      	nop
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3318      	adds	r3, #24
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4610      	mov	r0, r2
 800e560:	4798      	blx	r3
 800e562:	4603      	mov	r3, r0
    }
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e580:	429a      	cmp	r2, r3
 800e582:	d011      	beq.n	800e5a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800e584:	4b14      	ldr	r3, [pc, #80]	; (800e5d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d11e      	bne.n	800e5ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800e58c:	4b13      	ldr	r3, [pc, #76]	; (800e5dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e592:	4b13      	ldr	r3, [pc, #76]	; (800e5e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e594:	881a      	ldrh	r2, [r3, #0]
 800e596:	4b11      	ldr	r3, [pc, #68]	; (800e5dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e598:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800e59a:	4a11      	ldr	r2, [pc, #68]	; (800e5e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e59c:	89bb      	ldrh	r3, [r7, #12]
 800e59e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800e5a0:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800e5a6:	e010      	b.n	800e5ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800e5a8:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00c      	beq.n	800e5ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800e5b0:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800e5b6:	4b0a      	ldr	r3, [pc, #40]	; (800e5e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e5b8:	881a      	ldrh	r2, [r3, #0]
 800e5ba:	4b08      	ldr	r3, [pc, #32]	; (800e5dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800e5bc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800e5be:	4a08      	ldr	r2, [pc, #32]	; (800e5e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
    }
 800e5ca:	bf00      	nop
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	24041b04 	.word	0x24041b04
 800e5dc:	24041b02 	.word	0x24041b02
 800e5e0:	24041b00 	.word	0x24041b00

0800e5e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f005 fd77 	bl	80140e2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	4a05      	ldr	r2, [pc, #20]	; (800e61c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	601a      	str	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7ff fe99 	bl	800e344 <_ZN8touchgfx3HALD1Ev>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	0802824c 	.word	0x0802824c

0800e620 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff ffe7 	bl	800e5fc <_ZN20TouchGFXGeneratedHALD1Ev>
 800e62e:	217c      	movs	r1, #124	; 0x7c
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f015 ffd8 	bl	80245e6 <_ZdlPvj>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff ffca 	bl	800e5e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4618      	mov	r0, r3
 800e664:	f002 fde2 	bl	801122c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800e668:	bf00      	nop
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f002 fea0 	bl	80113c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800e680:	4603      	mov	r3, r0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	4618      	mov	r0, r3
 800e69a:	f002 fe9f 	bl	80113dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800e69e:	bf00      	nop
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b082      	sub	sp, #8
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f002 fea7 	bl	8011408 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	f002 feee 	bl	80114b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800e6dc:	4603      	mov	r3, r0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b082      	sub	sp, #8
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f002 fde1 	bl	80112b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b082      	sub	sp, #8
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4618      	mov	r0, r3
 800e70a:	f002 fde5 	bl	80112d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4618      	mov	r0, r3
 800e722:	f002 fde7 	bl	80112f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800e726:	bf00      	nop
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}

0800e72e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b082      	sub	sp, #8
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	f002 fde9 	bl	8011310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b082      	sub	sp, #8
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	f002 fe0b 	bl	801136c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800e756:	4603      	mov	r3, r0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f002 fe0c 	bl	8011388 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	4a05      	ldr	r2, [pc, #20]	; (800e798 <_ZN11TouchGFXHALD1Ev+0x20>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff ff37 	bl	800e5fc <_ZN20TouchGFXGeneratedHALD1Ev>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4618      	mov	r0, r3
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	08027f2c 	.word	0x08027f2c

0800e79c <_ZN11TouchGFXHALD0Ev>:
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ffe7 	bl	800e778 <_ZN11TouchGFXHALD1Ev>
 800e7aa:	217c      	movs	r1, #124	; 0x7c
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f015 ff1a 	bl	80245e6 <_ZdlPvj>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
    {
 800e7c4:	4a04      	ldr	r2, [pc, #16]	; (800e7d8 <_ZN12MJPEGDecoderD1Ev+0x1c>)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	601a      	str	r2, [r3, #0]
    }
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr
 800e7d8:	08028048 	.word	0x08028048

0800e7dc <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
    }
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7ff ffe9 	bl	800e7bc <_ZN12MJPEGDecoderD1Ev>
 800e7ea:	2104      	movs	r1, #4
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f015 fefa 	bl	80245e6 <_ZdlPvj>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e822:	4618      	mov	r0, r3
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
	...

0800e830 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	4a04      	ldr	r2, [pc, #16]	; (800e84c <_ZN12MJPEGDecoderC1Ev+0x1c>)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	08028048 	.word	0x08028048

0800e850 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff ffe8 	bl	800e830 <_ZN12MJPEGDecoderC1Ev>
 800e860:	4a21      	ldr	r2, [pc, #132]	; (800e8e8 <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	615a      	str	r2, [r3, #20]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	619a      	str	r2, [r3, #24]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	61da      	str	r2, [r3, #28]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	621a      	str	r2, [r3, #32]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	625a      	str	r2, [r3, #36]	; 0x24
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	629a      	str	r2, [r3, #40]	; 0x28
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	631a      	str	r2, [r3, #48]	; 0x30
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	635a      	str	r2, [r3, #52]	; 0x34
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	639a      	str	r2, [r3, #56]	; 0x38
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	63da      	str	r2, [r3, #60]	; 0x3c
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 800e8c8:	f004 fa2e 	bl	8012d28 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	f7fa f943 	bl	8008b5c <osSemaphoreNew>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	4a04      	ldr	r2, [pc, #16]	; (800e8ec <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 800e8da:	6013      	str	r3, [r2, #0]
}
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	08028004 	.word	0x08028004
 800e8ec:	2403b8b0 	.word	0x2403b8b0

0800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	2b00      	cmp	r3, #0
 800e904:	d008      	beq.n	800e918 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90e:	68b9      	ldr	r1, [r7, #8]
 800e910:	1acb      	subs	r3, r1, r3
 800e912:	4413      	add	r3, r2
 800e914:	617b      	str	r3, [r7, #20]
 800e916:	e004      	b.n	800e922 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	4413      	add	r3, r2
 800e920:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	6978      	ldr	r0, [r7, #20]
 800e928:	f016 fce9 	bl	80252fe <strncmp>
 800e92c:	4603      	mov	r3, r0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3718      	adds	r7, #24
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 800e936:	b480      	push	{r7}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e944:	2b00      	cmp	r3, #0
 800e946:	d024      	beq.n	800e992 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4413      	add	r3, r2
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	4619      	mov	r1, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	3301      	adds	r3, #1
 800e966:	4413      	add	r3, r2
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	021b      	lsls	r3, r3, #8
 800e96c:	ea41 0203 	orr.w	r2, r1, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	3302      	adds	r3, #2
 800e978:	440b      	add	r3, r1
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	041b      	lsls	r3, r3, #16
 800e97e:	431a      	orrs	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	3303      	adds	r3, #3
 800e988:	440b      	add	r3, r1
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	061b      	lsls	r3, r3, #24
 800e98e:	4313      	orrs	r3, r2
 800e990:	e016      	b.n	800e9c0 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	4413      	add	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	021b      	lsls	r3, r3, #8
 800e9aa:	431a      	orrs	r2, r3
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	3302      	adds	r3, #2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	041b      	lsls	r3, r3, #16
 800e9b4:	431a      	orrs	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3303      	adds	r3, #3
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	061b      	lsls	r3, r3, #24
 800e9be:	4313      	orrs	r3, r2
    }
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d013      	beq.n	800ea06 <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	021b      	lsls	r3, r3, #8
 800ea02:	430b      	orrs	r3, r1
 800ea04:	e00c      	b.n	800ea20 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	461a      	mov	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	021b      	lsls	r3, r3, #8
 800ea1e:	4313      	orrs	r3, r2
    }
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d033      	beq.n	800eaa8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d909      	bls.n	800ea5e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2209      	movs	r2, #9
 800ea4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 800ea52:	4b19      	ldr	r3, [pc, #100]	; (800eab8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 800ea54:	4a19      	ldr	r2, [pc, #100]	; (800eabc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 800ea56:	21ac      	movs	r1, #172	; 0xac
 800ea58:	4819      	ldr	r0, [pc, #100]	; (800eac0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 800ea5a:	f015 fdf3 	bl	8024644 <__assert_func>
        }

        reader->seek(offset);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	330c      	adds	r3, #12
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	4610      	mov	r0, r2
 800ea70:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3310      	adds	r3, #16
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	4798      	blx	r3
 800ea88:	4603      	mov	r3, r0
 800ea8a:	f083 0301 	eor.w	r3, r3, #1
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d003      	beq.n	800ea9c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	220d      	movs	r2, #13
 800ea98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa6:	e003      	b.n	800eab0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	4413      	add	r3, r2
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	08026034 	.word	0x08026034
 800eabc:	08026048 	.word	0x08026048
 800eac0:	0802608c 	.word	0x0802608c

0800eac4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08e      	sub	sp, #56	; 0x38
 800eac8:	af04      	add	r7, sp, #16
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4611      	mov	r1, r2
 800ead0:	461a      	mov	r2, r3
 800ead2:	460b      	mov	r3, r1
 800ead4:	80fb      	strh	r3, [r7, #6]
 800ead6:	4613      	mov	r3, r2
 800ead8:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	695b      	ldr	r3, [r3, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 800eae2:	4b4e      	ldr	r3, [pc, #312]	; (800ec1c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 800eae4:	4a4e      	ldr	r2, [pc, #312]	; (800ec20 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 800eae6:	21be      	movs	r1, #190	; 0xbe
 800eae8:	484e      	ldr	r0, [pc, #312]	; (800ec24 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 800eaea:	f015 fdab 	bl	8024644 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	699b      	ldr	r3, [r3, #24]
 800eaf2:	2208      	movs	r2, #8
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff ff98 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	4619      	mov	r1, r3
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7ff ff62 	bl	800e9cc <_ZN20HardwareMJPEGDecoder6getU16Em>
 800eb08:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	3302      	adds	r3, #2
 800eb10:	4619      	mov	r1, r3
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff ff5a 	bl	800e9cc <_ZN20HardwareMJPEGDecoder6getU16Em>
 800eb18:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	3304      	adds	r3, #4
 800eb20:	4619      	mov	r1, r3
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7ff ff07 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800eb28:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 800eb2a:	f243 0330 	movw	r3, #12336	; 0x3030
 800eb2e:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 800eb30:	f246 3364 	movw	r3, #25444	; 0x6364
 800eb34:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	699a      	ldr	r2, [r3, #24]
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	f103 0208 	add.w	r2, r3, #8
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d255      	bcs.n	800ebf6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	f243 0230 	movw	r2, #12336	; 0x3030
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d126      	bne.n	800eba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	f246 3264 	movw	r2, #25444	; 0x6364
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d121      	bne.n	800eba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01e      	beq.n	800eba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	f103 0208 	add.w	r2, r3, #8
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	69ba      	ldr	r2, [r7, #24]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff ff57 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800eb7e:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	9302      	str	r3, [sp, #8]
 800eb84:	88bb      	ldrh	r3, [r7, #4]
 800eb86:	9301      	str	r3, [sp, #4]
 800eb88:	88fb      	ldrh	r3, [r7, #6]
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	6939      	ldr	r1, [r7, #16]
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f000 fa8e 	bl	800f0b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	1c5a      	adds	r2, r3, #1
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 800eba2:	2300      	movs	r3, #0
 800eba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	699a      	ldr	r2, [r3, #24]
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	441a      	add	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	f103 0208 	add.w	r2, r3, #8
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	f023 0201 	bic.w	r2, r3, #1
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	699a      	ldr	r2, [r3, #24]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d114      	bne.n	800ec0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6a1a      	ldr	r2, [r3, #32]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebf4:	e009      	b.n	800ec0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6a1a      	ldr	r2, [r3, #32]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 800ec04:	2301      	movs	r3, #1
 800ec06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 800ec0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec0e:	f083 0301 	eor.w	r3, r3, #1
 800ec12:	b2db      	uxtb	r3, r3
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3728      	adds	r7, #40	; 0x28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	080260c4 	.word	0x080260c4
 800ec20:	08026110 	.word	0x08026110
 800ec24:	0802608c 	.word	0x0802608c

0800ec28 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 800ec38:	4b37      	ldr	r3, [pc, #220]	; (800ed18 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 800ec3a:	4a38      	ldr	r2, [pc, #224]	; (800ed1c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 800ec3c:	21f2      	movs	r1, #242	; 0xf2
 800ec3e:	4838      	ldr	r0, [pc, #224]	; (800ed20 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 800ec40:	f015 fd00 	bl	8024644 <__assert_func>

    readData(currentMovieOffset, 8);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	699b      	ldr	r3, [r3, #24]
 800ec48:	2208      	movs	r2, #8
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff feed 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	3304      	adds	r3, #4
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff fe6b 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ec60:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	699a      	ldr	r2, [r3, #24]
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	4413      	add	r3, r2
 800ec6a:	f103 0208 	add.w	r2, r3, #8
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d243      	bcs.n	800ecfe <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	699a      	ldr	r2, [r3, #24]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	f103 0208 	add.w	r2, r3, #8
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	699b      	ldr	r3, [r3, #24]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	f023 0201 	bic.w	r2, r3, #1
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	619a      	str	r2, [r3, #24]
        frameNumber++;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	695b      	ldr	r3, [r3, #20]
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	699b      	ldr	r3, [r3, #24]
 800eca2:	2208      	movs	r2, #8
 800eca4:	4619      	mov	r1, r3
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff fec0 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f7ff fe8a 	bl	800e9cc <_ZN20HardwareMJPEGDecoder6getU16Em>
 800ecb8:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	3302      	adds	r3, #2
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fe82 	bl	800e9cc <_ZN20HardwareMJPEGDecoder6getU16Em>
 800ecc8:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7ff fe2f 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ecd8:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 800ecda:	f243 0330 	movw	r3, #12336	; 0x3030
 800ecde:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 800ece0:	f246 3364 	movw	r3, #25444	; 0x6364
 800ece4:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	f243 0230 	movw	r2, #12336	; 0x3030
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d1b8      	bne.n	800ec62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f246 3264 	movw	r2, #25444	; 0x6364
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d1b3      	bne.n	800ec62 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e007      	b.n	800ed0e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2201      	movs	r2, #1
 800ed02:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6a1a      	ldr	r2, [r3, #32]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	619a      	str	r2, [r3, #24]
    return false;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3718      	adds	r7, #24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	080260c4 	.word	0x080260c4
 800ed1c:	0802616c 	.word	0x0802616c
 800ed20:	0802608c 	.word	0x0802608c

0800ed24 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
    movieData = movie;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f000 f834 	bl	800edb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800ed48:	bf00      	nop
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3308      	adds	r3, #8
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6838      	ldr	r0, [r7, #0]
 800ed70:	4798      	blx	r3
 800ed72:	4602      	mov	r2, r0
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f819 	bl	800edb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 800ed86:	b480      	push	{r7}
 800ed88:	b083      	sub	sp, #12
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d103      	bne.n	800ed9e <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e000      	b.n	800eda4 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	370c      	adds	r7, #12
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b08a      	sub	sp, #40	; 0x28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 800edc6:	2248      	movs	r2, #72	; 0x48
 800edc8:	2100      	movs	r1, #0
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff fe2e 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6999      	ldr	r1, [r3, #24]
 800edd4:	2304      	movs	r3, #4
 800edd6:	4aa5      	ldr	r2, [pc, #660]	; (800f06c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff fd89 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	bf14      	ite	ne
 800ede4:	2301      	movne	r3, #1
 800ede6:	2300      	moveq	r3, #0
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00a      	beq.n	800ee04 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2203      	movs	r2, #3
 800edf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 800edf6:	4b9e      	ldr	r3, [pc, #632]	; (800f070 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 800edf8:	4a9e      	ldr	r2, [pc, #632]	; (800f074 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800edfa:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800edfe:	489e      	ldr	r0, [pc, #632]	; (800f078 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800ee00:	f015 fc20 	bl	8024644 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	f103 0208 	add.w	r2, r3, #8
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6999      	ldr	r1, [r3, #24]
 800ee14:	2304      	movs	r3, #4
 800ee16:	4a99      	ldr	r2, [pc, #612]	; (800f07c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7ff fd69 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	bf14      	ite	ne
 800ee24:	2301      	movne	r3, #1
 800ee26:	2300      	moveq	r3, #0
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2204      	movs	r2, #4
 800ee32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 800ee36:	4b92      	ldr	r3, [pc, #584]	; (800f080 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 800ee38:	4a8e      	ldr	r2, [pc, #568]	; (800f074 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800ee3a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800ee3e:	488e      	ldr	r0, [pc, #568]	; (800f078 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800ee40:	f015 fc00 	bl	8024644 <__assert_func>
    }

    currentMovieOffset += 4;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6999      	ldr	r1, [r3, #24]
 800ee52:	2304      	movs	r3, #4
 800ee54:	4a8b      	ldr	r2, [pc, #556]	; (800f084 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff fd4a 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	bf14      	ite	ne
 800ee62:	2301      	movne	r3, #1
 800ee64:	2300      	moveq	r3, #0
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00a      	beq.n	800ee82 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2205      	movs	r2, #5
 800ee70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 800ee74:	4b84      	ldr	r3, [pc, #528]	; (800f088 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 800ee76:	4a7f      	ldr	r2, [pc, #508]	; (800f074 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800ee78:	f240 1149 	movw	r1, #329	; 0x149
 800ee7c:	487e      	ldr	r0, [pc, #504]	; (800f078 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800ee7e:	f015 fbe1 	bl	8024644 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	699b      	ldr	r3, [r3, #24]
 800ee86:	3304      	adds	r3, #4
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7ff fd53 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ee90:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	699b      	ldr	r3, [r3, #24]
 800ee96:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 800ee9e:	4b7b      	ldr	r3, [pc, #492]	; (800f08c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 800eea0:	4a74      	ldr	r2, [pc, #464]	; (800f074 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 800eea2:	f240 114f 	movw	r1, #335	; 0x14f
 800eea6:	4874      	ldr	r0, [pc, #464]	; (800f078 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 800eea8:	f015 fbcc 	bl	8024644 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 800eeac:	2301      	movs	r3, #1
 800eeae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 800eeba:	2304      	movs	r3, #4
 800eebc:	4a74      	ldr	r2, [pc, #464]	; (800f090 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 800eebe:	6979      	ldr	r1, [r7, #20]
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff fd15 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bf14      	ite	ne
 800eecc:	2301      	movne	r3, #1
 800eece:	2300      	moveq	r3, #0
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d006      	beq.n	800eee4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2206      	movs	r2, #6
 800eeda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 800eede:	2300      	movs	r3, #0
 800eee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	3304      	adds	r3, #4
 800eee8:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 800eeea:	2304      	movs	r3, #4
 800eeec:	4a69      	ldr	r2, [pc, #420]	; (800f094 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 800eeee:	6979      	ldr	r1, [r7, #20]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f7ff fcfd 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	bf14      	ite	ne
 800eefc:	2301      	movne	r3, #1
 800eefe:	2300      	moveq	r3, #0
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2207      	movs	r2, #7
 800ef0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 800ef14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d028      	beq.n	800ef6e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	3308      	adds	r3, #8
 800ef20:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 800ef22:	6979      	ldr	r1, [r7, #20]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7ff fd06 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	4a5a      	ldr	r2, [pc, #360]	; (800f098 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 800ef2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef32:	099a      	lsrs	r2, r3, #6
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	3310      	adds	r3, #16
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff fcf9 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ef44:	4602      	mov	r2, r0
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	3320      	adds	r3, #32
 800ef4e:	4619      	mov	r1, r3
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fcf0 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ef56:	4602      	mov	r2, r0
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	3324      	adds	r3, #36	; 0x24
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7ff fce7 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800ef6e:	69ba      	ldr	r2, [r7, #24]
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	4413      	add	r3, r2
 800ef74:	3308      	adds	r3, #8
 800ef76:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 800ef78:	220c      	movs	r2, #12
 800ef7a:	6a39      	ldr	r1, [r7, #32]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff fd55 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	f103 0108 	add.w	r1, r3, #8
 800ef88:	2304      	movs	r3, #4
 800ef8a:	4a44      	ldr	r2, [pc, #272]	; (800f09c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7ff fcaf 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00b      	beq.n	800efb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa6:	6a3a      	ldr	r2, [r7, #32]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d201      	bcs.n	800efb0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 800efac:	2301      	movs	r3, #1
 800efae:	e000      	b.n	800efb2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 800efb0:	2300      	movs	r3, #0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d012      	beq.n	800efdc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	3304      	adds	r3, #4
 800efba:	4619      	mov	r1, r3
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff fcba 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800efc2:	4603      	mov	r3, r0
 800efc4:	3308      	adds	r3, #8
 800efc6:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 800efc8:	6a3a      	ldr	r2, [r7, #32]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	4413      	add	r3, r2
 800efce:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 800efd0:	220c      	movs	r2, #12
 800efd2:	6a39      	ldr	r1, [r7, #32]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff fd29 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800efda:	e7d2      	b.n	800ef82 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d004      	beq.n	800eff0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	220a      	movs	r2, #10
 800efea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 800efee:	e05e      	b.n	800f0ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	f103 020c 	add.w	r2, r3, #12
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800effa:	6a3b      	ldr	r3, [r7, #32]
 800effc:	3304      	adds	r3, #4
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fc98 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800f006:	4602      	mov	r2, r0
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	4413      	add	r3, r2
 800f00c:	f103 0208 	add.w	r2, r3, #8
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 800f014:	6a3b      	ldr	r3, [r7, #32]
 800f016:	3304      	adds	r3, #4
 800f018:	4619      	mov	r1, r3
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7ff fc8b 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800f020:	4603      	mov	r3, r0
 800f022:	3308      	adds	r3, #8
 800f024:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 800f026:	6a3a      	ldr	r2, [r7, #32]
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	4413      	add	r3, r2
 800f02c:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 800f02e:	2204      	movs	r2, #4
 800f030:	6a39      	ldr	r1, [r7, #32]
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff fcfa 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800f038:	2304      	movs	r3, #4
 800f03a:	4a19      	ldr	r2, [pc, #100]	; (800f0a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 800f03c:	6a39      	ldr	r1, [r7, #32]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7ff fc56 	bl	800e8f0 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	bf0c      	ite	eq
 800f04a:	2301      	moveq	r3, #1
 800f04c:	2300      	movne	r3, #0
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d027      	beq.n	800f0a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6a3a      	ldr	r2, [r7, #32]
 800f058:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2201      	movs	r2, #1
 800f05e:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	699a      	ldr	r2, [r3, #24]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	621a      	str	r2, [r3, #32]
 800f068:	e021      	b.n	800f0ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 800f06a:	bf00      	nop
 800f06c:	080261a0 	.word	0x080261a0
 800f070:	080261a8 	.word	0x080261a8
 800f074:	080261c4 	.word	0x080261c4
 800f078:	0802608c 	.word	0x0802608c
 800f07c:	080261f4 	.word	0x080261f4
 800f080:	080261fc 	.word	0x080261fc
 800f084:	08026214 	.word	0x08026214
 800f088:	0802621c 	.word	0x0802621c
 800f08c:	08026234 	.word	0x08026234
 800f090:	08026240 	.word	0x08026240
 800f094:	08026248 	.word	0x08026248
 800f098:	10624dd3 	.word	0x10624dd3
 800f09c:	08026250 	.word	0x08026250
 800f0a0:	08026258 	.word	0x08026258
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	220b      	movs	r2, #11
 800f0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 800f0ac:	bf00      	nop
}
 800f0ae:	3728      	adds	r7, #40	; 0x28
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	60b9      	str	r1, [r7, #8]
 800f0be:	607a      	str	r2, [r7, #4]
 800f0c0:	603b      	str	r3, [r7, #0]
    if (length == 0)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d05d      	beq.n	800f184 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd0>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d05b      	beq.n	800f186 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd2>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
 800f0ce:	4b2f      	ldr	r3, [pc, #188]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	4a2c      	ldr	r2, [pc, #176]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0da:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800f0dc:	4b2b      	ldr	r3, [pc, #172]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f003 030f 	and.w	r3, r3, #15
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d006      	beq.n	800f0f6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800f0e8:	4b28      	ldr	r3, [pc, #160]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f023 030f 	bic.w	r3, r3, #15
 800f0f0:	3310      	adds	r3, #16
 800f0f2:	4a26      	ldr	r2, [pc, #152]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0f4:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 216 * JPEG_ConvertorParams.bytes_pr_pixel;
 800f0f6:	4b25      	ldr	r3, [pc, #148]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	22d8      	movs	r2, #216	; 0xd8
 800f0fc:	fb02 f303 	mul.w	r3, r2, r3
 800f100:	4a22      	ldr	r2, [pc, #136]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f102:	6053      	str	r3, [r2, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 800f104:	4b21      	ldr	r3, [pc, #132]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	091b      	lsrs	r3, r3, #4
 800f10a:	4a20      	ldr	r2, [pc, #128]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f10c:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	691b      	ldr	r3, [r3, #16]
 800f112:	f003 030f 	and.w	r3, r3, #15
 800f116:	f1c3 0310 	rsb	r3, r3, #16
 800f11a:	4a1c      	ldr	r2, [pc, #112]	; (800f18c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd8>)
 800f11c:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	68b9      	ldr	r1, [r7, #8]
 800f124:	481a      	ldr	r0, [pc, #104]	; (800f190 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800f126:	f000 f901 	bl	800f32c <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f12e:	4619      	mov	r1, r3
 800f130:	4817      	ldr	r0, [pc, #92]	; (800f190 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xdc>)
 800f132:	f000 fabb 	bl	800f6ac <JPEG_OutputHandler>
 800f136:	4603      	mov	r3, r0
 800f138:	4a16      	ldr	r2, [pc, #88]	; (800f194 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800f13a:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 800f13c:	4b15      	ldr	r3, [pc, #84]	; (800f194 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2b02      	cmp	r3, #2
 800f142:	bf0c      	ite	eq
 800f144:	2301      	moveq	r3, #1
 800f146:	2300      	movne	r3, #0
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d006      	beq.n	800f15c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xa8>
        {
          SEM_WAIT(semDecodingDone);
 800f14e:	4b12      	ldr	r3, [pc, #72]	; (800f198 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe4>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f04f 31ff 	mov.w	r1, #4294967295
 800f156:	4618      	mov	r0, r3
 800f158:	f7f9 fd8a 	bl	8008c70 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 800f15c:	4b0d      	ldr	r3, [pc, #52]	; (800f194 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe0>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	2b01      	cmp	r3, #1
 800f162:	bf14      	ite	ne
 800f164:	2301      	movne	r3, #1
 800f166:	2300      	moveq	r3, #0
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d000      	beq.n	800f170 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>
      do
 800f16e:	e7dc      	b.n	800f12a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x76>

      // reset job queue and flags after frame is decoded
      external_queue.reset();
 800f170:	480a      	ldr	r0, [pc, #40]	; (800f19c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xe8>)
 800f172:	f000 fc0d 	bl	800f990 <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>
      Jpeg_HWDecodingEnd = 0;
 800f176:	4b0a      	ldr	r3, [pc, #40]	; (800f1a0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xec>)
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
      DMA2D_CopyBufferEnd = 0;
 800f17c:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xf0>)
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	e000      	b.n	800f186 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xd2>
        return;
 800f184:	bf00      	nop
    }
}
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	2403b8d4 	.word	0x2403b8d4
 800f190:	2401954c 	.word	0x2401954c
 800f194:	2403b8a0 	.word	0x2403b8a0
 800f198:	2403b8b0 	.word	0x2403b8b0
 800f19c:	2403b8b4 	.word	0x2403b8b4
 800f1a0:	2403b888 	.word	0x2403b888
 800f1a4:	2403b898 	.word	0x2403b898

0800f1a8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	2208      	movs	r2, #8
 800f1bc:	4619      	mov	r1, r3
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff fc34 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7ff fbb2 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800f1d2:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	3308      	adds	r3, #8
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f7ff fc24 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800f1e4:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d018      	beq.n	800f21e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	6939      	ldr	r1, [r7, #16]
 800f1f2:	480d      	ldr	r0, [pc, #52]	; (800f228 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 800f1f4:	f000 f89a 	bl	800f32c <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	480a      	ldr	r0, [pc, #40]	; (800f228 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 800f200:	f000 fa54 	bl	800f6ac <JPEG_OutputHandler>
 800f204:	4603      	mov	r3, r0
 800f206:	4a09      	ldr	r2, [pc, #36]	; (800f22c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 800f208:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 800f20a:	4b08      	ldr	r3, [pc, #32]	; (800f22c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x84>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bf0c      	ite	eq
 800f212:	2301      	moveq	r3, #1
 800f214:	2300      	movne	r3, #0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d000      	beq.n	800f21e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x76>
      do
 800f21c:	e7ec      	b.n	800f1f8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 800f21e:	2301      	movs	r3, #1
}
 800f220:	4618      	mov	r0, r3
 800f222:	3718      	adds	r7, #24
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	2401954c 	.word	0x2401954c
 800f22c:	2403b8a0 	.word	0x2403b8a0

0800f230 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	807b      	strh	r3, [r7, #2]
    assert(0);
 800f23e:	4b03      	ldr	r3, [pc, #12]	; (800f24c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 800f240:	4a03      	ldr	r2, [pc, #12]	; (800f250 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 800f242:	f240 11d5 	movw	r1, #469	; 0x1d5
 800f246:	4803      	ldr	r0, [pc, #12]	; (800f254 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 800f248:	f015 f9fc 	bl	8024644 <__assert_func>
 800f24c:	08026260 	.word	0x08026260
 800f250:	08026264 	.word	0x08026264
 800f254:	0802608c 	.word	0x0802608c

0800f258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 800f268:	2301      	movs	r3, #1
 800f26a:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	332c      	adds	r3, #44	; 0x2c
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	4798      	blx	r3
 800f278:	4602      	mov	r2, r0
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	4293      	cmp	r3, r2
 800f27e:	bf8c      	ite	hi
 800f280:	2301      	movhi	r3, #1
 800f282:	2300      	movls	r3, #0
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d006      	beq.n	800f298 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	332c      	adds	r3, #44	; 0x2c
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	4798      	blx	r3
 800f296:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	69da      	ldr	r2, [r3, #28]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	011b      	lsls	r3, r3, #4
 800f2a2:	4413      	add	r3, r2
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 800f2a8:	2210      	movs	r2, #16
 800f2aa:	68f9      	ldr	r1, [r7, #12]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff fbbd 	bl	800ea2c <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff fb3c 	bl	800e936 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a1b      	ldr	r3, [r3, #32]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	1f1a      	subs	r2, r3, #4
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	683a      	ldr	r2, [r7, #0]
 800f2d0:	615a      	str	r2, [r3, #20]
}
 800f2d2:	bf00      	nop
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	689b      	ldr	r3, [r3, #8]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 800f2f2:	b480      	push	{r7}
 800f2f4:	b083      	sub	sp, #12
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	70fb      	strb	r3, [r7, #3]

}
 800f2fe:	bf00      	nop
 800f300:	370c      	adds	r7, #12
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 800f30a:	b490      	push	{r4, r7}
 800f30c:	b082      	sub	sp, #8
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
 800f312:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4614      	mov	r4, r2
 800f31a:	3304      	adds	r3, #4
 800f31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f322:	bf00      	nop
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bc90      	pop	{r4, r7}
 800f32a:	4770      	bx	lr

0800f32c <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b088      	sub	sp, #32
 800f330:	af02      	add	r7, sp, #8
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 800f33a:	4a2a      	ldr	r2, [pc, #168]	; (800f3e4 <JPEG_Decode_DMA+0xb8>)
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 800f340:	4b29      	ldr	r3, [pc, #164]	; (800f3e8 <JPEG_Decode_DMA+0xbc>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 800f346:	4b29      	ldr	r3, [pc, #164]	; (800f3ec <JPEG_Decode_DMA+0xc0>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 800f34c:	4b28      	ldr	r3, [pc, #160]	; (800f3f0 <JPEG_Decode_DMA+0xc4>)
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 800f352:	4b28      	ldr	r3, [pc, #160]	; (800f3f4 <JPEG_Decode_DMA+0xc8>)
 800f354:	2200      	movs	r2, #0
 800f356:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	4a27      	ldr	r2, [pc, #156]	; (800f3f8 <JPEG_Decode_DMA+0xcc>)
 800f35c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 800f35e:	4a27      	ldr	r2, [pc, #156]	; (800f3fc <JPEG_Decode_DMA+0xd0>)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 800f364:	4b26      	ldr	r3, [pc, #152]	; (800f400 <JPEG_Decode_DMA+0xd4>)
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
    DMA2D_output_Is_Paused = 1;
 800f36a:	4b26      	ldr	r3, [pc, #152]	; (800f404 <JPEG_Decode_DMA+0xd8>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 800f370:	2300      	movs	r3, #0
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2b01      	cmp	r3, #1
 800f378:	d816      	bhi.n	800f3a8 <JPEG_Decode_DMA+0x7c>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800f37a:	4923      	ldr	r1, [pc, #140]	; (800f408 <JPEG_Decode_DMA+0xdc>)
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	4613      	mov	r3, r2
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	4413      	add	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	440b      	add	r3, r1
 800f388:	2200      	movs	r2, #0
 800f38a:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 800f38c:	491e      	ldr	r1, [pc, #120]	; (800f408 <JPEG_Decode_DMA+0xdc>)
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	4613      	mov	r3, r2
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	4413      	add	r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	440b      	add	r3, r1
 800f39a:	3308      	adds	r3, #8
 800f39c:	2200      	movs	r2, #0
 800f39e:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	617b      	str	r3, [r7, #20]
 800f3a6:	e7e5      	b.n	800f374 <JPEG_Decode_DMA+0x48>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800f3a8:	4b11      	ldr	r3, [pc, #68]	; (800f3f0 <JPEG_Decode_DMA+0xc4>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	4916      	ldr	r1, [pc, #88]	; (800f408 <JPEG_Decode_DMA+0xdc>)
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	005b      	lsls	r3, r3, #1
 800f3b2:	4413      	add	r3, r2
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	440b      	add	r3, r1
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	6819      	ldr	r1, [r3, #0]
 800f3bc:	4b13      	ldr	r3, [pc, #76]	; (800f40c <JPEG_Decode_DMA+0xe0>)
 800f3be:	68da      	ldr	r2, [r3, #12]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	4413      	add	r3, r2
 800f3c6:	01db      	lsls	r3, r3, #7
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7f3 f901 	bl	80025da <HAL_JPEG_Decode_DMA>

    return 0;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	2403b878 	.word	0x2403b878
 800f3e8:	2403b894 	.word	0x2403b894
 800f3ec:	2403b88c 	.word	0x2403b88c
 800f3f0:	2403b890 	.word	0x2403b890
 800f3f4:	2403b87c 	.word	0x2403b87c
 800f3f8:	2403b884 	.word	0x2403b884
 800f3fc:	2403b880 	.word	0x2403b880
 800f400:	2403b8ac 	.word	0x2403b8ac
 800f404:	2403b89c 	.word	0x2403b89c
 800f408:	24000018 	.word	0x24000018
 800f40c:	2403b8d4 	.word	0x2403b8d4

0800f410 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d12f      	bne.n	800f482 <HAL_JPEG_InfoReadyCallback+0x72>
  {
    if((pInfo->ImageWidth % 16) != 0)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	f003 030f 	and.w	r3, r3, #15
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <HAL_JPEG_InfoReadyCallback+0x2e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	f023 030f 	bic.w	r3, r3, #15
 800f436:	f103 0210 	add.w	r2, r3, #16
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	60da      	str	r2, [r3, #12]

    if((pInfo->ImageHeight % 16) != 0)
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	f003 030f 	and.w	r3, r3, #15
 800f446:	2b00      	cmp	r3, #0
 800f448:	d007      	beq.n	800f45a <HAL_JPEG_InfoReadyCallback+0x4a>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	f023 030f 	bic.w	r3, r3, #15
 800f452:	f103 0210 	add.w	r2, r3, #16
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	609a      	str	r2, [r3, #8]

    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800f45a:	4a36      	ldr	r2, [pc, #216]	; (800f534 <HAL_JPEG_InfoReadyCallback+0x124>)
 800f45c:	4936      	ldr	r1, [pc, #216]	; (800f538 <HAL_JPEG_InfoReadyCallback+0x128>)
 800f45e:	6838      	ldr	r0, [r7, #0]
 800f460:	f003 fb0c 	bl	8012a7c <TGFX_JPEG_GetDecodeColorConvertFunc>
 800f464:	4603      	mov	r3, r0
 800f466:	73bb      	strb	r3, [r7, #14]
    if(status != HAL_OK)
 800f468:	7bbb      	ldrb	r3, [r7, #14]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d05d      	beq.n	800f52a <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d05a      	beq.n	800f52a <HAL_JPEG_InfoReadyCallback+0x11a>
 800f474:	4b31      	ldr	r3, [pc, #196]	; (800f53c <HAL_JPEG_InfoReadyCallback+0x12c>)
 800f476:	4a32      	ldr	r2, [pc, #200]	; (800f540 <HAL_JPEG_InfoReadyCallback+0x130>)
 800f478:	f44f 710d 	mov.w	r1, #564	; 0x234
 800f47c:	4831      	ldr	r0, [pc, #196]	; (800f544 <HAL_JPEG_InfoReadyCallback+0x134>)
 800f47e:	f015 f8e1 	bl	8024644 <__assert_func>
    }
  }
  else
  {
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	2b02      	cmp	r3, #2
 800f488:	d11b      	bne.n	800f4c2 <HAL_JPEG_InfoReadyCallback+0xb2>
    {
      if((pInfo->ImageWidth % 16) != 0)
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	f003 030f 	and.w	r3, r3, #15
 800f492:	2b00      	cmp	r3, #0
 800f494:	d007      	beq.n	800f4a6 <HAL_JPEG_InfoReadyCallback+0x96>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	f023 030f 	bic.w	r3, r3, #15
 800f49e:	f103 0210 	add.w	r2, r3, #16
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	f003 0307 	and.w	r3, r3, #7
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d007      	beq.n	800f4c2 <HAL_JPEG_InfoReadyCallback+0xb2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	f023 0307 	bic.w	r3, r3, #7
 800f4ba:	f103 0208 	add.w	r2, r3, #8
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	609a      	str	r2, [r3, #8]
    }

    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d11b      	bne.n	800f502 <HAL_JPEG_InfoReadyCallback+0xf2>
    {
      if((pInfo->ImageWidth % 8) != 0)
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	f003 0307 	and.w	r3, r3, #7
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d007      	beq.n	800f4e6 <HAL_JPEG_InfoReadyCallback+0xd6>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	f023 0307 	bic.w	r3, r3, #7
 800f4de:	f103 0208 	add.w	r2, r3, #8
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	60da      	str	r2, [r3, #12]

      if((pInfo->ImageHeight % 8) != 0)
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	f003 0307 	and.w	r3, r3, #7
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <HAL_JPEG_InfoReadyCallback+0xf2>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	f103 0208 	add.w	r2, r3, #8
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	609a      	str	r2, [r3, #8]
    }

    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
 800f502:	4a0c      	ldr	r2, [pc, #48]	; (800f534 <HAL_JPEG_InfoReadyCallback+0x124>)
 800f504:	490c      	ldr	r1, [pc, #48]	; (800f538 <HAL_JPEG_InfoReadyCallback+0x128>)
 800f506:	6838      	ldr	r0, [r7, #0]
 800f508:	f004 fa0e 	bl	8013928 <JPEG_GetDecodeColorConvertFunc>
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK)
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d009      	beq.n	800f52a <HAL_JPEG_InfoReadyCallback+0x11a>
    {
      assert(status == HAL_OK);
 800f516:	7bfb      	ldrb	r3, [r7, #15]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d006      	beq.n	800f52a <HAL_JPEG_InfoReadyCallback+0x11a>
 800f51c:	4b07      	ldr	r3, [pc, #28]	; (800f53c <HAL_JPEG_InfoReadyCallback+0x12c>)
 800f51e:	4a08      	ldr	r2, [pc, #32]	; (800f540 <HAL_JPEG_InfoReadyCallback+0x130>)
 800f520:	f240 214e 	movw	r1, #590	; 0x24e
 800f524:	4807      	ldr	r0, [pc, #28]	; (800f544 <HAL_JPEG_InfoReadyCallback+0x134>)
 800f526:	f015 f88d 	bl	8024644 <__assert_func>
    }
  }
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	2403b8a4 	.word	0x2403b8a4
 800f538:	2403b8a8 	.word	0x2403b8a8
 800f53c:	080262c0 	.word	0x080262c0
 800f540:	080262d4 	.word	0x080262d4
 800f544:	0802608c 	.word	0x0802608c

0800f548 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 800f552:	4b14      	ldr	r3, [pc, #80]	; (800f5a4 <HAL_JPEG_GetDataCallback+0x5c>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	4413      	add	r3, r2
 800f55a:	4a12      	ldr	r2, [pc, #72]	; (800f5a4 <HAL_JPEG_GetDataCallback+0x5c>)
 800f55c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800f55e:	4b11      	ldr	r3, [pc, #68]	; (800f5a4 <HAL_JPEG_GetDataCallback+0x5c>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	4b11      	ldr	r3, [pc, #68]	; (800f5a8 <HAL_JPEG_GetDataCallback+0x60>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d218      	bcs.n	800f59c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800f56a:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <HAL_JPEG_GetDataCallback+0x64>)
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	4413      	add	r3, r2
 800f572:	4a0e      	ldr	r2, [pc, #56]	; (800f5ac <HAL_JPEG_GetDataCallback+0x64>)
 800f574:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 800f576:	4b0c      	ldr	r3, [pc, #48]	; (800f5a8 <HAL_JPEG_GetDataCallback+0x60>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	4b0a      	ldr	r3, [pc, #40]	; (800f5a4 <HAL_JPEG_GetDataCallback+0x5c>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800f582:	4b0a      	ldr	r3, [pc, #40]	; (800f5ac <HAL_JPEG_GetDataCallback+0x64>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4619      	mov	r1, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f58e:	bf28      	it	cs
 800f590:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 800f594:	461a      	mov	r2, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7f3 f9c5 	bl	8002926 <HAL_JPEG_ConfigInputBuffer>
  }
}
 800f59c:	bf00      	nop
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	2403b87c 	.word	0x2403b87c
 800f5a8:	2403b880 	.word	0x2403b880
 800f5ac:	2403b884 	.word	0x2403b884

0800f5b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800f5bc:	4b27      	ldr	r3, [pc, #156]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	4927      	ldr	r1, [pc, #156]	; (800f660 <HAL_JPEG_DataReadyCallback+0xb0>)
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	440b      	add	r3, r1
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800f5d0:	4b22      	ldr	r3, [pc, #136]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	4922      	ldr	r1, [pc, #136]	; (800f660 <HAL_JPEG_DataReadyCallback+0xb0>)
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	440b      	add	r3, r1
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 800f5e6:	4b1d      	ldr	r3, [pc, #116]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	4a1b      	ldr	r2, [pc, #108]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5ee:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800f5f0:	4b1a      	ldr	r3, [pc, #104]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d902      	bls.n	800f5fe <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 800f5f8:	4b18      	ldr	r3, [pc, #96]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800f5fe:	4b17      	ldr	r3, [pc, #92]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	4917      	ldr	r1, [pc, #92]	; (800f660 <HAL_JPEG_DataReadyCallback+0xb0>)
 800f604:	4613      	mov	r3, r2
 800f606:	005b      	lsls	r3, r3, #1
 800f608:	4413      	add	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	440b      	add	r3, r1
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d006      	beq.n	800f622 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800f614:	2102      	movs	r1, #2
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7f3 f842 	bl	80026a0 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 800f61c:	4b11      	ldr	r3, [pc, #68]	; (800f664 <HAL_JPEG_DataReadyCallback+0xb4>)
 800f61e:	2201      	movs	r2, #1
 800f620:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800f622:	4b0e      	ldr	r3, [pc, #56]	; (800f65c <HAL_JPEG_DataReadyCallback+0xac>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	490e      	ldr	r1, [pc, #56]	; (800f660 <HAL_JPEG_DataReadyCallback+0xb0>)
 800f628:	4613      	mov	r3, r2
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	4413      	add	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	3304      	adds	r3, #4
 800f634:	6819      	ldr	r1, [r3, #0]
 800f636:	4b0c      	ldr	r3, [pc, #48]	; (800f668 <HAL_JPEG_DataReadyCallback+0xb8>)
 800f638:	68da      	ldr	r2, [r3, #12]
 800f63a:	4613      	mov	r3, r2
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	4413      	add	r3, r2
 800f640:	01db      	lsls	r3, r3, #7
 800f642:	461a      	mov	r2, r3
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f7f3 f980 	bl	800294a <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 800f64a:	4b08      	ldr	r3, [pc, #32]	; (800f66c <HAL_JPEG_DataReadyCallback+0xbc>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f9 fb60 	bl	8008d14 <osSemaphoreRelease>
}
 800f654:	bf00      	nop
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	2403b890 	.word	0x2403b890
 800f660:	24000018 	.word	0x24000018
 800f664:	2403b894 	.word	0x2403b894
 800f668:	2403b8d4 	.word	0x2403b8d4
 800f66c:	2403b8b0 	.word	0x2403b8b0

0800f670 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7f3 f9a8 	bl	80029ce <HAL_JPEG_GetState>
 800f67e:	4603      	mov	r3, r0
 800f680:	73fb      	strb	r3, [r7, #15]
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7f3 f9b1 	bl	80029ea <HAL_JPEG_GetError>
 800f688:	60b8      	str	r0, [r7, #8]
  while(1){}
 800f68a:	e7fe      	b.n	800f68a <HAL_JPEG_ErrorCallback+0x1a>

0800f68c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 800f694:	4b04      	ldr	r3, [pc, #16]	; (800f6a8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800f696:	2201      	movs	r2, #1
 800f698:	601a      	str	r2, [r3, #0]
}
 800f69a:	bf00      	nop
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	2403b888 	.word	0x2403b888

0800f6ac <JPEG_OutputHandler>:
  * @param hjpeg: JPEG handle pointer
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
 800f6b6:	4b45      	ldr	r3, [pc, #276]	; (800f7cc <JPEG_OutputHandler+0x120>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d005      	beq.n	800f6ca <JPEG_OutputHandler+0x1e>
 800f6be:	4b44      	ldr	r3, [pc, #272]	; (800f7d0 <JPEG_OutputHandler+0x124>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d001      	beq.n	800f6ca <JPEG_OutputHandler+0x1e>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e000      	b.n	800f6cc <JPEG_OutputHandler+0x20>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <JPEG_OutputHandler+0x28>
  {
      return 1;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e077      	b.n	800f7c4 <JPEG_OutputHandler+0x118>
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
 800f6d4:	4b3f      	ldr	r3, [pc, #252]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	493f      	ldr	r1, [pc, #252]	; (800f7d8 <JPEG_OutputHandler+0x12c>)
 800f6da:	4613      	mov	r3, r2
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	4413      	add	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	440b      	add	r3, r1
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d105      	bne.n	800f6f6 <JPEG_OutputHandler+0x4a>
 800f6ea:	4b3c      	ldr	r3, [pc, #240]	; (800f7dc <JPEG_OutputHandler+0x130>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d101      	bne.n	800f6f6 <JPEG_OutputHandler+0x4a>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e000      	b.n	800f6f8 <JPEG_OutputHandler+0x4c>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d02d      	beq.n	800f758 <JPEG_OutputHandler+0xac>
  {
      External_DMA2D_JobTypeDef new_job = {
          MCU_BlockIndex,
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
      };
 800f6fc:	4b38      	ldr	r3, [pc, #224]	; (800f7e0 <JPEG_OutputHandler+0x134>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	60bb      	str	r3, [r7, #8]
          &Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]
 800f702:	4b34      	ldr	r3, [pc, #208]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	4613      	mov	r3, r2
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4a32      	ldr	r2, [pc, #200]	; (800f7d8 <JPEG_OutputHandler+0x12c>)
 800f710:	4413      	add	r3, r2
      };
 800f712:	60fb      	str	r3, [r7, #12]

      external_queue.push(new_job);
 800f714:	f107 0308 	add.w	r3, r7, #8
 800f718:	4619      	mov	r1, r3
 800f71a:	4832      	ldr	r0, [pc, #200]	; (800f7e4 <JPEG_OutputHandler+0x138>)
 800f71c:	f000 f94d 	bl	800f9ba <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>

      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 800f720:	4b31      	ldr	r3, [pc, #196]	; (800f7e8 <JPEG_OutputHandler+0x13c>)
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	4b2e      	ldr	r3, [pc, #184]	; (800f7e0 <JPEG_OutputHandler+0x134>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	4413      	add	r3, r2
 800f72a:	4a2d      	ldr	r2, [pc, #180]	; (800f7e0 <JPEG_OutputHandler+0x134>)
 800f72c:	6013      	str	r3, [r2, #0]

      JPEG_OUT_Read_BufferIndex++;
 800f72e:	4b29      	ldr	r3, [pc, #164]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3301      	adds	r3, #1
 800f734:	4a27      	ldr	r2, [pc, #156]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f736:	6013      	str	r3, [r2, #0]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800f738:	4b26      	ldr	r3, [pc, #152]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d902      	bls.n	800f746 <JPEG_OutputHandler+0x9a>
      {
        JPEG_OUT_Read_BufferIndex = 0;
 800f740:	4b24      	ldr	r3, [pc, #144]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f742:	2200      	movs	r2, #0
 800f744:	601a      	str	r2, [r3, #0]
      }

      DMA2D_output_Is_Paused = 0;
 800f746:	4b25      	ldr	r3, [pc, #148]	; (800f7dc <JPEG_OutputHandler+0x130>)
 800f748:	2200      	movs	r2, #0
 800f74a:	601a      	str	r2, [r3, #0]

      // Try to start DMA2D
      dma.start();
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	3310      	adds	r3, #16
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6838      	ldr	r0, [r7, #0]
 800f756:	4798      	blx	r3
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
 800f758:	4b24      	ldr	r3, [pc, #144]	; (800f7ec <JPEG_OutputHandler+0x140>)
 800f75a:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d117      	bne.n	800f790 <JPEG_OutputHandler+0xe4>
 800f760:	4b23      	ldr	r3, [pc, #140]	; (800f7f0 <JPEG_OutputHandler+0x144>)
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	491c      	ldr	r1, [pc, #112]	; (800f7d8 <JPEG_OutputHandler+0x12c>)
 800f766:	4613      	mov	r3, r2
 800f768:	005b      	lsls	r3, r3, #1
 800f76a:	4413      	add	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	440b      	add	r3, r1
 800f770:	781b      	ldrb	r3, [r3, #0]
  if((Output_Is_Paused == 1) && \
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10c      	bne.n	800f790 <JPEG_OutputHandler+0xe4>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 800f776:	4b17      	ldr	r3, [pc, #92]	; (800f7d4 <JPEG_OutputHandler+0x128>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	4917      	ldr	r1, [pc, #92]	; (800f7d8 <JPEG_OutputHandler+0x12c>)
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	440b      	add	r3, r1
 800f786:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <JPEG_OutputHandler+0xe4>
 800f78c:	2301      	movs	r3, #1
 800f78e:	e000      	b.n	800f792 <JPEG_OutputHandler+0xe6>
 800f790:	2300      	movs	r3, #0
  if((Output_Is_Paused == 1) && \
 800f792:	2b00      	cmp	r3, #0
 800f794:	d006      	beq.n	800f7a4 <JPEG_OutputHandler+0xf8>
  {
      Output_Is_Paused = 0;
 800f796:	4b15      	ldr	r3, [pc, #84]	; (800f7ec <JPEG_OutputHandler+0x140>)
 800f798:	2200      	movs	r2, #0
 800f79a:	601a      	str	r2, [r3, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800f79c:	2102      	movs	r1, #2
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7f2 ffd6 	bl	8002750 <HAL_JPEG_Resume>
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
 800f7a4:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <JPEG_OutputHandler+0x140>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d105      	bne.n	800f7b8 <JPEG_OutputHandler+0x10c>
 800f7ac:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <JPEG_OutputHandler+0x130>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <JPEG_OutputHandler+0x10c>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <JPEG_OutputHandler+0x10e>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d001      	beq.n	800f7c2 <JPEG_OutputHandler+0x116>
  {
      return 2;
 800f7be:	2302      	movs	r3, #2
 800f7c0:	e000      	b.n	800f7c4 <JPEG_OutputHandler+0x118>
  }

  return 0;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	3710      	adds	r7, #16
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	2403b888 	.word	0x2403b888
 800f7d0:	2403b898 	.word	0x2403b898
 800f7d4:	2403b88c 	.word	0x2403b88c
 800f7d8:	24000018 	.word	0x24000018
 800f7dc:	2403b89c 	.word	0x2403b89c
 800f7e0:	2403b8ac 	.word	0x2403b8ac
 800f7e4:	2403b8b4 	.word	0x2403b8b4
 800f7e8:	2403b8d4 	.word	0x2403b8d4
 800f7ec:	2403b894 	.word	0x2403b894
 800f7f0:	2403b890 	.word	0x2403b890

0800f7f4 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  uint32_t xRef, yRef, refline;

  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	011a      	lsls	r2, r3, #4
 800f802:	4b2e      	ldr	r3, [pc, #184]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	fbb2 f3f3 	udiv	r3, r2, r3
 800f80a:	011b      	lsls	r3, r3, #4
 800f80c:	617b      	str	r3, [r7, #20]
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	011b      	lsls	r3, r3, #4
 800f814:	4a29      	ldr	r2, [pc, #164]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f816:	6812      	ldr	r2, [r2, #0]
 800f818:	fbb3 f1f2 	udiv	r1, r3, r2
 800f81c:	fb01 f202 	mul.w	r2, r1, r2
 800f820:	1a9b      	subs	r3, r3, r2
 800f822:	613b      	str	r3, [r7, #16]

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
 800f824:	4b25      	ldr	r3, [pc, #148]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	fb03 f202 	mul.w	r2, r3, r2
 800f82e:	4b23      	ldr	r3, [pc, #140]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f830:	691b      	ldr	r3, [r3, #16]
 800f832:	6939      	ldr	r1, [r7, #16]
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	4413      	add	r3, r2
 800f83a:	60fb      	str	r3, [r7, #12]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 800f83c:	4b20      	ldr	r3, [pc, #128]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f83e:	2202      	movs	r2, #2
 800f840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	4b1f      	ldr	r3, [pc, #124]	; (800f8c4 <DMA2D_CopyBuffer+0xd0>)
 800f848:	6819      	ldr	r1, [r3, #0]
 800f84a:	4b1c      	ldr	r3, [pc, #112]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	1acb      	subs	r3, r1, r3
 800f850:	429a      	cmp	r2, r3
 800f852:	d309      	bcc.n	800f868 <DMA2D_CopyBuffer+0x74>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800f854:	4b19      	ldr	r3, [pc, #100]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f856:	689a      	ldr	r2, [r3, #8]
 800f858:	4b18      	ldr	r3, [pc, #96]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	011b      	lsls	r3, r3, #4
 800f85e:	041b      	lsls	r3, r3, #16
 800f860:	4917      	ldr	r1, [pc, #92]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f862:	4313      	orrs	r3, r2
 800f864:	644b      	str	r3, [r1, #68]	; 0x44
 800f866:	e007      	b.n	800f878 <DMA2D_CopyBuffer+0x84>
  }
  else
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800f868:	4b14      	ldr	r3, [pc, #80]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	011b      	lsls	r3, r3, #4
 800f86e:	041b      	lsls	r3, r3, #16
 800f870:	4a13      	ldr	r2, [pc, #76]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f872:	f043 0310 	orr.w	r3, r3, #16
 800f876:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 800f878:	4b13      	ldr	r3, [pc, #76]	; (800f8c8 <DMA2D_CopyBuffer+0xd4>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4619      	mov	r1, r3
 800f87e:	4a10      	ldr	r2, [pc, #64]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	440b      	add	r3, r1
 800f884:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 216 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 800f886:	4b0d      	ldr	r3, [pc, #52]	; (800f8bc <DMA2D_CopyBuffer+0xc8>)
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	011b      	lsls	r3, r3, #4
 800f88c:	4a0c      	ldr	r2, [pc, #48]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f88e:	f1c3 03d8 	rsb	r3, r3, #216	; 0xd8
 800f892:	6413      	str	r3, [r2, #64]	; 0x40

  /* DMA2D FGOR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGOR, 0);
 800f894:	4b0a      	ldr	r3, [pc, #40]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f896:	2200      	movs	r2, #0
 800f898:	611a      	str	r2, [r3, #16]

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 800f89a:	4b09      	ldr	r3, [pc, #36]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f89c:	4a0b      	ldr	r2, [pc, #44]	; (800f8cc <DMA2D_CopyBuffer+0xd8>)
 800f89e:	61da      	str	r2, [r3, #28]

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	4b06      	ldr	r3, [pc, #24]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f8a8:	60da      	str	r2, [r3, #12]

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800f8aa:	4b05      	ldr	r3, [pc, #20]	; (800f8c0 <DMA2D_CopyBuffer+0xcc>)
 800f8ac:	4a08      	ldr	r2, [pc, #32]	; (800f8d0 <DMA2D_CopyBuffer+0xdc>)
 800f8ae:	601a      	str	r2, [r3, #0]
}
 800f8b0:	bf00      	nop
 800f8b2:	371c      	adds	r7, #28
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	2403b8d4 	.word	0x2403b8d4
 800f8c0:	52001000 	.word	0x52001000
 800f8c4:	2403b8a4 	.word	0x2403b8a4
 800f8c8:	2403b878 	.word	0x2403b878
 800f8cc:	ff09000b 	.word	0xff09000b
 800f8d0:	00010201 	.word	0x00010201

0800f8d4 <DMA2D_ExternalJobCompleted>:
  * @brief  External DMA2D job complete callback
  * @param job: External job reference
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	609a      	str	r2, [r3, #8]

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
 800f8ec:	480e      	ldr	r0, [pc, #56]	; (800f928 <DMA2D_ExternalJobCompleted+0x54>)
 800f8ee:	f000 f827 	bl	800f940 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_output_Is_Paused = 1;
 800f8f8:	4b0c      	ldr	r3, [pc, #48]	; (800f92c <DMA2D_ExternalJobCompleted+0x58>)
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <DMA2D_ExternalJobCompleted+0x5c>)
 800f904:	6819      	ldr	r1, [r3, #0]
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <DMA2D_ExternalJobCompleted+0x60>)
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	1acb      	subs	r3, r1, r3
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d302      	bcc.n	800f916 <DMA2D_ExternalJobCompleted+0x42>
  {
      DMA2D_CopyBufferEnd = 1;
 800f910:	4b09      	ldr	r3, [pc, #36]	; (800f938 <DMA2D_ExternalJobCompleted+0x64>)
 800f912:	2201      	movs	r2, #1
 800f914:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
 800f916:	4b09      	ldr	r3, [pc, #36]	; (800f93c <DMA2D_ExternalJobCompleted+0x68>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7f9 f9fa 	bl	8008d14 <osSemaphoreRelease>
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	2403b8b4 	.word	0x2403b8b4
 800f92c:	2403b89c 	.word	0x2403b89c
 800f930:	2403b8a4 	.word	0x2403b8a4
 800f934:	2403b8d4 	.word	0x2403b8d4
 800f938:	2403b898 	.word	0x2403b898
 800f93c:	2403b8b0 	.word	0x2403b8b0

0800f940 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>:
  }
  External_DMA2D_JobTypeDef& front()
  {
      return buffer_[head_];
  }
  bool is_empty()
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  {
      return count_ == 0;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bf0c      	ite	eq
 800f950:	2301      	moveq	r3, #1
 800f952:	2300      	movne	r3, #0
 800f954:	b2db      	uxtb	r3, r3
  }
 800f956:	4618      	mov	r0, r3
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr

0800f962 <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>:
  ExternalDMAJob_Queue()
 800f962:	b480      	push	{r7}
 800f964:	b083      	sub	sp, #12
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
      : max_size_(Size), head_(0), tail_(0), count_(0)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2202      	movs	r2, #2
 800f96e:	601a      	str	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	605a      	str	r2, [r3, #4]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	609a      	str	r2, [r3, #8]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2200      	movs	r2, #0
 800f980:	60da      	str	r2, [r3, #12]
  {}
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <_ZN20ExternalDMAJob_QueueILm2EE5resetEv>:
  bool is_full()
  {
      return count_ == max_size_;
  }
  void reset()
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  {
      head_ = tail_ = count_ = 0;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	60da      	str	r2, [r3, #12]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	68da      	ldr	r2, [r3, #12]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	609a      	str	r2, [r3, #8]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	689a      	ldr	r2, [r3, #8]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	605a      	str	r2, [r3, #4]
  }
 800f9ae:	bf00      	nop
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr

0800f9ba <_ZN20ExternalDMAJob_QueueILm2EE4pushERK25External_DMA2D_JobTypeDef>:
  void push(const External_DMA2D_JobTypeDef& job)
 800f9ba:	b480      	push	{r7}
 800f9bc:	b083      	sub	sp, #12
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	6039      	str	r1, [r7, #0]
      buffer_[tail_] = job;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	3302      	adds	r3, #2
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	4413      	add	r3, r2
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9d8:	e883 0003 	stmia.w	r3, {r0, r1}
      tail_ = (tail_ + 1) % max_size_;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	6812      	ldr	r2, [r2, #0]
 800f9e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9ea:	fb01 f202 	mul.w	r2, r1, r2
 800f9ee:	1a9a      	subs	r2, r3, r2
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	609a      	str	r2, [r3, #8]
      count_++;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	60da      	str	r2, [r3, #12]
  }
 800f9fe:	bf00      	nop
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
	...

0800fa0c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	4a05      	ldr	r2, [pc, #20]	; (800fa2c <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	601a      	str	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe fecd 	bl	800e7bc <_ZN12MJPEGDecoderD1Ev>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	08028004 	.word	0x08028004

0800fa30 <_ZN20HardwareMJPEGDecoderD0Ev>:
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff ffe7 	bl	800fa0c <_ZN20HardwareMJPEGDecoderD1Ev>
 800fa3e:	2148      	movs	r1, #72	; 0x48
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f014 fdd0 	bl	80245e6 <_ZdlPvj>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <_Z41__static_initialization_and_destruction_0ii>:
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d107      	bne.n	800fa70 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d102      	bne.n	800fa70 <_Z41__static_initialization_and_destruction_0ii+0x20>
ExternalDMAJob_Queue<EXT_DMA2D_QUEUE_SIZE> external_queue;
 800fa6a:	4803      	ldr	r0, [pc, #12]	; (800fa78 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800fa6c:	f7ff ff79 	bl	800f962 <_ZN20ExternalDMAJob_QueueILm2EEC1Ev>
}
 800fa70:	bf00      	nop
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	2403b8b4 	.word	0x2403b8b4

0800fa7c <_GLOBAL__sub_I_FrameBufferAddress>:
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fa84:	2001      	movs	r0, #1
 800fa86:	f7ff ffe3 	bl	800fa50 <_Z41__static_initialization_and_destruction_0ii>
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800fa90:	2200      	movs	r2, #0
 800fa92:	2101      	movs	r1, #1
 800fa94:	2001      	movs	r0, #1
 800fa96:	f7f9 f861 	bl	8008b5c <osSemaphoreNew>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	4a0f      	ldr	r2, [pc, #60]	; (800fadc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800fa9e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800faa0:	4b0e      	ldr	r3, [pc, #56]	; (800fadc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800faa8:	4b0d      	ldr	r3, [pc, #52]	; (800fae0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800faaa:	4a0e      	ldr	r2, [pc, #56]	; (800fae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800faac:	2128      	movs	r1, #40	; 0x28
 800faae:	480e      	ldr	r0, [pc, #56]	; (800fae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800fab0:	f014 fdc8 	bl	8024644 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800fab4:	2200      	movs	r2, #0
 800fab6:	2104      	movs	r1, #4
 800fab8:	2001      	movs	r0, #1
 800faba:	f7f9 f96f 	bl	8008d9c <osMessageQueueNew>
 800fabe:	4603      	mov	r3, r0
 800fac0:	4a0a      	ldr	r2, [pc, #40]	; (800faec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800fac2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800fac4:	4b09      	ldr	r3, [pc, #36]	; (800faec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d105      	bne.n	800fad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800facc:	4b08      	ldr	r3, [pc, #32]	; (800faf0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800face:	4a05      	ldr	r2, [pc, #20]	; (800fae4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800fad0:	212c      	movs	r1, #44	; 0x2c
 800fad2:	4805      	ldr	r0, [pc, #20]	; (800fae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800fad4:	f014 fdb6 	bl	8024644 <__assert_func>
}
 800fad8:	bf00      	nop
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	2403b8e8 	.word	0x2403b8e8
 800fae0:	0802631c 	.word	0x0802631c
 800fae4:	08026368 	.word	0x08026368
 800fae8:	08026398 	.word	0x08026398
 800faec:	2403b8ec 	.word	0x2403b8ec
 800faf0:	080263c4 	.word	0x080263c4

0800faf4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800faf8:	4b04      	ldr	r3, [pc, #16]	; (800fb0c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f04f 31ff 	mov.w	r1, #4294967295
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7f9 f8b5 	bl	8008c70 <osSemaphoreAcquire>
}
 800fb06:	bf00      	nop
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	2403b8e8 	.word	0x2403b8e8

0800fb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800fb14:	4b03      	ldr	r3, [pc, #12]	; (800fb24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7f9 f8fb 	bl	8008d14 <osSemaphoreRelease>
}
 800fb1e:	bf00      	nop
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	2403b8e8 	.word	0x2403b8e8

0800fb28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800fb2c:	4b03      	ldr	r3, [pc, #12]	; (800fb3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2100      	movs	r1, #0
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7f9 f89c 	bl	8008c70 <osSemaphoreAcquire>
}
 800fb38:	bf00      	nop
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	2403b8e8 	.word	0x2403b8e8

0800fb40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800fb44:	4b03      	ldr	r3, [pc, #12]	; (800fb54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7f9 f8e3 	bl	8008d14 <osSemaphoreRelease>
}
 800fb4e:	bf00      	nop
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	2403b8e8 	.word	0x2403b8e8

0800fb58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800fb5c:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800fb5e:	6818      	ldr	r0, [r3, #0]
 800fb60:	2300      	movs	r3, #0
 800fb62:	2200      	movs	r2, #0
 800fb64:	4903      	ldr	r1, [pc, #12]	; (800fb74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800fb66:	f7f9 f98d 	bl	8008e84 <osMessageQueuePut>
}
 800fb6a:	bf00      	nop
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	2403b8ec 	.word	0x2403b8ec
 800fb74:	24000030 	.word	0x24000030

0800fb78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800fb7e:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fb80:	6818      	ldr	r0, [r3, #0]
 800fb82:	1d39      	adds	r1, r7, #4
 800fb84:	2300      	movs	r3, #0
 800fb86:	2200      	movs	r2, #0
 800fb88:	f7f9 f9dc 	bl	8008f44 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	1d39      	adds	r1, r7, #4
 800fb92:	f04f 33ff 	mov.w	r3, #4294967295
 800fb96:	2200      	movs	r2, #0
 800fb98:	f7f9 f9d4 	bl	8008f44 <osMessageQueueGet>
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	2403b8ec 	.word	0x2403b8ec

0800fba8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800fbb2:	88fb      	ldrh	r3, [r7, #6]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f8 fea8 	bl	800890a <osDelay>
}
 800fbba:	bf00      	nop
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
	...

0800fbc4 <__NVIC_EnableIRQ>:
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	4603      	mov	r3, r0
 800fbcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fbce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	db0b      	blt.n	800fbee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fbd6:	88fb      	ldrh	r3, [r7, #6]
 800fbd8:	f003 021f 	and.w	r2, r3, #31
 800fbdc:	4907      	ldr	r1, [pc, #28]	; (800fbfc <__NVIC_EnableIRQ+0x38>)
 800fbde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbe2:	095b      	lsrs	r3, r3, #5
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	fa00 f202 	lsl.w	r2, r0, r2
 800fbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fbee:	bf00      	nop
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	e000e100 	.word	0xe000e100

0800fc00 <__NVIC_DisableIRQ>:
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4603      	mov	r3, r0
 800fc08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fc0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	db12      	blt.n	800fc38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fc12:	88fb      	ldrh	r3, [r7, #6]
 800fc14:	f003 021f 	and.w	r2, r3, #31
 800fc18:	490a      	ldr	r1, [pc, #40]	; (800fc44 <__NVIC_DisableIRQ+0x44>)
 800fc1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc1e:	095b      	lsrs	r3, r3, #5
 800fc20:	2001      	movs	r0, #1
 800fc22:	fa00 f202 	lsl.w	r2, r0, r2
 800fc26:	3320      	adds	r3, #32
 800fc28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800fc2c:	f3bf 8f4f 	dsb	sy
}
 800fc30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fc32:	f3bf 8f6f 	isb	sy
}
 800fc36:	bf00      	nop
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	e000e100 	.word	0xe000e100

0800fc48 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
        : color(0)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
    }
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	370c      	adds	r7, #12
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
        return color;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
    }
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
    {
 800fc84:	4a04      	ldr	r2, [pc, #16]	; (800fc98 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	601a      	str	r2, [r3, #0]
    }
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	080280d8 	.word	0x080280d8

0800fc9c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
    }
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffe9 	bl	800fc7c <_ZN8touchgfx9DMA_QueueD1Ev>
 800fcaa:	2104      	movs	r1, #4
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f014 fc9a 	bl	80245e6 <_ZdlPvj>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}

0800fcbc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3344      	adds	r3, #68	; 0x44
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	4798      	blx	r3
    }
 800fcd0:	bf00      	nop
 800fcd2:	3708      	adds	r7, #8
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
    {
 800fce0:	4a04      	ldr	r2, [pc, #16]	; (800fcf4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	601a      	str	r2, [r3, #0]
    }
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	4618      	mov	r0, r3
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	08028acc 	.word	0x08028acc

0800fcf8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
    }
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff ffe9 	bl	800fcd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800fd06:	210c      	movs	r1, #12
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f014 fc6c 	bl	80245e6 <_ZdlPvj>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800fd22:	4a09      	ldr	r2, [pc, #36]	; (800fd48 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	601a      	str	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	605a      	str	r2, [r3, #4]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2200      	movs	r2, #0
 800fd32:	721a      	strb	r2, [r3, #8]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	725a      	strb	r2, [r3, #9]
    {
    }
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	08028acc 	.word	0x08028acc

0800fd4c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800fd54:	2301      	movs	r3, #1
    }
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
	...

0800fd64 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
    {
        if(started_by_external_job)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f893 3da0 	ldrb.w	r3, [r3, #3488]	; 0xda0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
        {
            externalJobCompleted();
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 f88a 	bl	800fe90 <_ZN8STM32DMA20externalJobCompletedEv>
            {
                started_by_external_job = true;
                externalJobExecute();
            }
        }
    }
 800fd7c:	e022      	b.n	800fdc4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
            executeCompleted();
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3328      	adds	r3, #40	; 0x28
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4610      	mov	r0, r2
 800fd8a:	4798      	blx	r3
            if(!external_queue.is_empty() && !isRunning)
 800fd8c:	480f      	ldr	r0, [pc, #60]	; (800fdcc <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
 800fd8e:	f7ff fdd7 	bl	800f940 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800fd92:	4603      	mov	r3, r0
 800fd94:	f083 0301 	eor.w	r3, r3, #1
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d008      	beq.n	800fdb0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	7a1b      	ldrb	r3, [r3, #8]
 800fda2:	f083 0301 	eor.w	r3, r3, #1
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <_ZN8STM32DMA18signalDMAInterruptEv+0x4c>
 800fdac:	2301      	movs	r3, #1
 800fdae:	e000      	b.n	800fdb2 <_ZN8STM32DMA18signalDMAInterruptEv+0x4e>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d006      	beq.n	800fdc4 <_ZN8STM32DMA18signalDMAInterruptEv+0x60>
                started_by_external_job = true;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
                externalJobExecute();
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f890 	bl	800fee4 <_ZN8STM32DMA18externalJobExecuteEv>
    }
 800fdc4:	bf00      	nop
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2403b8b4 	.word	0x2403b8b4

0800fdd0 <_ZN8STM32DMA5startEv>:

    virtual void start()
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    {
        MUTEX_LOCK(mutexIsRunning);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800fdde:	f04f 31ff 	mov.w	r1, #4294967295
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7f8 fe32 	bl	8008a4c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	685a      	ldr	r2, [r3, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4610      	mov	r0, r2
 800fdf6:	4798      	blx	r3
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	f083 0301 	eor.w	r3, r3, #1
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00d      	beq.n	800fe20 <_ZN8STM32DMA5startEv+0x50>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	7a5b      	ldrb	r3, [r3, #9]
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d008      	beq.n	800fe20 <_ZN8STM32DMA5startEv+0x50>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	7a1b      	ldrb	r3, [r3, #8]
 800fe12:	f083 0301 	eor.w	r3, r3, #1
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d001      	beq.n	800fe20 <_ZN8STM32DMA5startEv+0x50>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	e000      	b.n	800fe22 <_ZN8STM32DMA5startEv+0x52>
 800fe20:	2300      	movs	r3, #0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d00b      	beq.n	800fe3e <_ZN8STM32DMA5startEv+0x6e>
        {
            started_by_external_job = false;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            execute();
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3324      	adds	r3, #36	; 0x24
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3
 800fe3c:	e01b      	b.n	800fe76 <_ZN8STM32DMA5startEv+0xa6>
        }
        else if(!external_queue.is_empty() && !isRunning)
 800fe3e:	4813      	ldr	r0, [pc, #76]	; (800fe8c <_ZN8STM32DMA5startEv+0xbc>)
 800fe40:	f7ff fd7e 	bl	800f940 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800fe44:	4603      	mov	r3, r0
 800fe46:	f083 0301 	eor.w	r3, r3, #1
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <_ZN8STM32DMA5startEv+0x92>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	7a1b      	ldrb	r3, [r3, #8]
 800fe54:	f083 0301 	eor.w	r3, r3, #1
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <_ZN8STM32DMA5startEv+0x92>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e000      	b.n	800fe64 <_ZN8STM32DMA5startEv+0x94>
 800fe62:	2300      	movs	r3, #0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d006      	beq.n	800fe76 <_ZN8STM32DMA5startEv+0xa6>
        {
            started_by_external_job = true;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
            externalJobExecute();
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f837 	bl	800fee4 <_ZN8STM32DMA18externalJobExecuteEv>
        }
        MUTEX_UNLOCK(mutexIsRunning);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8d3 3da4 	ldr.w	r3, [r3, #3492]	; 0xda4
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f8 fe30 	bl	8008ae2 <osMutexRelease>
    }
 800fe82:	bf00      	nop
 800fe84:	3708      	adds	r7, #8
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	2403b8b4 	.word	0x2403b8b4

0800fe90 <_ZN8STM32DMA20externalJobCompletedEv>:
     *
     * @brief Handle DMA2D when an external job has been executed
     *
     * @param None
     */
    void externalJobCompleted()
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
    {
        if(!external_queue.is_empty() && isRunning)
 800fe98:	4811      	ldr	r0, [pc, #68]	; (800fee0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800fe9a:	f7ff fd51 	bl	800f940 <_ZN20ExternalDMAJob_QueueILm2EE8is_emptyEv>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	f083 0301 	eor.w	r3, r3, #1
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d005      	beq.n	800feb6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	7a1b      	ldrb	r3, [r3, #8]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d001      	beq.n	800feb6 <_ZN8STM32DMA20externalJobCompletedEv+0x26>
 800feb2:	2301      	movs	r3, #1
 800feb4:	e000      	b.n	800feb8 <_ZN8STM32DMA20externalJobCompletedEv+0x28>
 800feb6:	2300      	movs	r3, #0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00c      	beq.n	800fed6 <_ZN8STM32DMA20externalJobCompletedEv+0x46>
        {
            isRunning = false;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	721a      	strb	r2, [r3, #8]
            External_DMA2D_JobTypeDef& completed_job = external_queue.front();
 800fec2:	4807      	ldr	r0, [pc, #28]	; (800fee0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800fec4:	f000 fb64 	bl	8010590 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 800fec8:	60f8      	str	r0, [r7, #12]
            external_queue.pop();
 800feca:	4805      	ldr	r0, [pc, #20]	; (800fee0 <_ZN8STM32DMA20externalJobCompletedEv+0x50>)
 800fecc:	f000 fb70 	bl	80105b0 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>
            DMA2D_ExternalJobCompleted(completed_job);
 800fed0:	68f8      	ldr	r0, [r7, #12]
 800fed2:	f7ff fcff 	bl	800f8d4 <DMA2D_ExternalJobCompleted>
        }
    }
 800fed6:	bf00      	nop
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	2403b8b4 	.word	0x2403b8b4

0800fee4 <_ZN8STM32DMA18externalJobExecuteEv>:
     *
     * @brief Executes an external DMA2D job
     *
     * @param None
     */
    void externalJobExecute()
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
    {
        isRunning = true;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2201      	movs	r2, #1
 800fef0:	721a      	strb	r2, [r3, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
 800fef2:	4805      	ldr	r0, [pc, #20]	; (800ff08 <_ZN8STM32DMA18externalJobExecuteEv+0x24>)
 800fef4:	f000 fb4c 	bl	8010590 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>
 800fef8:	60f8      	str	r0, [r7, #12]
        DMA2D_CopyBuffer(job);
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f7ff fc7a 	bl	800f7f4 <DMA2D_CopyBuffer>
    }
 800ff00:	bf00      	nop
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	2403b8b4 	.word	0x2403b8b4

0800ff0c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	685a      	ldr	r2, [r3, #4]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	3314      	adds	r3, #20
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4610      	mov	r0, r2
 800ff24:	4798      	blx	r3
    }
 800ff26:	bf00      	nop
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b082      	sub	sp, #8
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800ff36:	f7fc fda1 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff ffe5 	bl	800ff0c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	330c      	adds	r3, #12
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fe76 	bl	800fc48 <_ZN8touchgfx9colortypeC1Ev>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3708      	adds	r7, #8
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
	...

0800ff68 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800ff68:	b5b0      	push	{r4, r5, r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	330c      	adds	r3, #12
 800ff76:	4619      	mov	r1, r3
 800ff78:	4610      	mov	r0, r2
 800ff7a:	f7ff fecd 	bl	800fd18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800ff7e:	4a16      	ldr	r2, [pc, #88]	; (800ffd8 <_ZN8STM32DMAC1Ev+0x70>)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	601a      	str	r2, [r3, #0]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f103 000c 	add.w	r0, r3, #12
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	3320      	adds	r3, #32
 800ff8e:	2260      	movs	r2, #96	; 0x60
 800ff90:	4619      	mov	r1, r3
 800ff92:	f004 ff7b 	bl	8014e8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3320      	adds	r3, #32
 800ff9a:	245f      	movs	r4, #95	; 0x5f
 800ff9c:	461d      	mov	r5, r3
 800ff9e:	2c00      	cmp	r4, #0
 800ffa0:	db05      	blt.n	800ffae <_ZN8STM32DMAC1Ev+0x46>
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	f7ff ffd1 	bl	800ff4a <_ZN8touchgfx6BlitOpC1Ev>
 800ffa8:	3524      	adds	r5, #36	; 0x24
 800ffaa:	3c01      	subs	r4, #1
 800ffac:	e7f7      	b.n	800ff9e <_ZN8STM32DMAC1Ev+0x36>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 2da0 	strb.w	r2, [r3, #3488]	; 0xda0
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
{
    mutexIsRunning = MUTEX_CREATE();
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	f7f8 fcbe 	bl	8008940 <osMutexNew>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
}
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08028088 	.word	0x08028088

0800ffdc <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	4a09      	ldr	r2, [pc, #36]	; (801000c <_ZN8STM32DMAD1Ev+0x30>)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800ffea:	205a      	movs	r0, #90	; 0x5a
 800ffec:	f7ff fe08 	bl	800fc00 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	330c      	adds	r3, #12
 800fff4:	4618      	mov	r0, r3
 800fff6:	f000 faf7 	bl	80105e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff fe6b 	bl	800fcd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	4618      	mov	r0, r3
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	08028088 	.word	0x08028088

08010010 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
}
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7ff ffdf 	bl	800ffdc <_ZN8STM32DMAD1Ev>
 801001e:	f640 51a8 	movw	r1, #3496	; 0xda8
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f014 fadf 	bl	80245e6 <_ZdlPvj>
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
	...

08010034 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801003c:	4b12      	ldr	r3, [pc, #72]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 801003e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010042:	4a11      	ldr	r2, [pc, #68]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 8010044:	f043 0310 	orr.w	r3, r3, #16
 8010048:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801004c:	4b0e      	ldr	r3, [pc, #56]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 801004e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010052:	f003 0310 	and.w	r3, r3, #16
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801005a:	4b0b      	ldr	r3, [pc, #44]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 801005c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801005e:	4a0a      	ldr	r2, [pc, #40]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 8010060:	f043 0310 	orr.w	r3, r3, #16
 8010064:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8010066:	4b08      	ldr	r3, [pc, #32]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 8010068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801006a:	4a07      	ldr	r2, [pc, #28]	; (8010088 <_ZN8STM32DMA10initializeEv+0x54>)
 801006c:	f023 0310 	bic.w	r3, r3, #16
 8010070:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8010072:	4b06      	ldr	r3, [pc, #24]	; (801008c <_ZN8STM32DMA10initializeEv+0x58>)
 8010074:	4a06      	ldr	r2, [pc, #24]	; (8010090 <_ZN8STM32DMA10initializeEv+0x5c>)
 8010076:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010078:	205a      	movs	r0, #90	; 0x5a
 801007a:	f7ff fda3 	bl	800fbc4 <__NVIC_EnableIRQ>
}
 801007e:	bf00      	nop
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	58024400 	.word	0x58024400
 801008c:	240194d8 	.word	0x240194d8
 8010090:	0800ff2f 	.word	0x0800ff2f

08010094 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	460b      	mov	r3, r1
 801009e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80100a0:	2300      	movs	r3, #0
 80100a2:	60fb      	str	r3, [r7, #12]

    switch (format)
 80100a4:	78fb      	ldrb	r3, [r7, #3]
 80100a6:	2b0b      	cmp	r3, #11
 80100a8:	d826      	bhi.n	80100f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80100aa:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80100ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b0:	080100ed 	.word	0x080100ed
 80100b4:	080100e7 	.word	0x080100e7
 80100b8:	080100e1 	.word	0x080100e1
 80100bc:	080100f9 	.word	0x080100f9
 80100c0:	080100f9 	.word	0x080100f9
 80100c4:	080100f9 	.word	0x080100f9
 80100c8:	080100f9 	.word	0x080100f9
 80100cc:	080100f3 	.word	0x080100f3
 80100d0:	080100f3 	.word	0x080100f3
 80100d4:	080100f3 	.word	0x080100f3
 80100d8:	080100f3 	.word	0x080100f3
 80100dc:	080100f3 	.word	0x080100f3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80100e0:	2300      	movs	r3, #0
 80100e2:	60fb      	str	r3, [r7, #12]
        break;
 80100e4:	e00e      	b.n	8010104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80100e6:	2301      	movs	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]
        break;
 80100ea:	e00b      	b.n	8010104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80100ec:	2302      	movs	r3, #2
 80100ee:	60fb      	str	r3, [r7, #12]
        break;
 80100f0:	e008      	b.n	8010104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80100f2:	2305      	movs	r3, #5
 80100f4:	60fb      	str	r3, [r7, #12]
        break;
 80100f6:	e005      	b.n	8010104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80100f8:	4b05      	ldr	r3, [pc, #20]	; (8010110 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80100fa:	4a06      	ldr	r2, [pc, #24]	; (8010114 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80100fc:	2167      	movs	r1, #103	; 0x67
 80100fe:	4806      	ldr	r0, [pc, #24]	; (8010118 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8010100:	f014 faa0 	bl	8024644 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010104:	68fb      	ldr	r3, [r7, #12]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	08026408 	.word	0x08026408
 8010114:	08026424 	.word	0x08026424
 8010118:	08026470 	.word	0x08026470

0801011c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	460b      	mov	r3, r1
 8010126:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010128:	2300      	movs	r3, #0
 801012a:	60fb      	str	r3, [r7, #12]

    switch (format)
 801012c:	78fb      	ldrb	r3, [r7, #3]
 801012e:	2b0a      	cmp	r3, #10
 8010130:	d821      	bhi.n	8010176 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8010132:	a201      	add	r2, pc, #4	; (adr r2, 8010138 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010138:	08010171 	.word	0x08010171
 801013c:	0801016b 	.word	0x0801016b
 8010140:	08010165 	.word	0x08010165
 8010144:	08010177 	.word	0x08010177
 8010148:	08010177 	.word	0x08010177
 801014c:	08010177 	.word	0x08010177
 8010150:	08010177 	.word	0x08010177
 8010154:	0801016b 	.word	0x0801016b
 8010158:	0801016b 	.word	0x0801016b
 801015c:	0801016b 	.word	0x0801016b
 8010160:	0801016b 	.word	0x0801016b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010164:	2300      	movs	r3, #0
 8010166:	60fb      	str	r3, [r7, #12]
        break;
 8010168:	e00b      	b.n	8010182 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801016a:	2301      	movs	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
        break;
 801016e:	e008      	b.n	8010182 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8010170:	2302      	movs	r3, #2
 8010172:	60fb      	str	r3, [r7, #12]
        break;
 8010174:	e005      	b.n	8010182 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8010176:	4b05      	ldr	r3, [pc, #20]	; (801018c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8010178:	4a05      	ldr	r2, [pc, #20]	; (8010190 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801017a:	2188      	movs	r1, #136	; 0x88
 801017c:	4805      	ldr	r0, [pc, #20]	; (8010194 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801017e:	f014 fa61 	bl	8024644 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010182:	68fb      	ldr	r3, [r7, #12]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}
 801018c:	08026408 	.word	0x08026408
 8010190:	0802649c 	.word	0x0802649c
 8010194:	08026470 	.word	0x08026470

08010198 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8010198:	b480      	push	{r7}
 801019a:	b083      	sub	sp, #12
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80101a0:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80101b0:	b590      	push	{r4, r7, lr}
 80101b2:	b089      	sub	sp, #36	; 0x24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	7f5b      	ldrb	r3, [r3, #29]
 80101be:	4619      	mov	r1, r3
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff ff67 	bl	8010094 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80101c6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	7f9b      	ldrb	r3, [r3, #30]
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff ff60 	bl	8010094 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80101d4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	7f9b      	ldrb	r3, [r3, #30]
 80101da:	4619      	mov	r1, r3
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7ff ff9d 	bl	801011c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80101e2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	8b5b      	ldrh	r3, [r3, #26]
 80101e8:	461a      	mov	r2, r3
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	8a9b      	ldrh	r3, [r3, #20]
 80101ee:	1ad2      	subs	r2, r2, r3
 80101f0:	4b92      	ldr	r3, [pc, #584]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80101f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	8b5b      	ldrh	r3, [r3, #26]
 80101f8:	461a      	mov	r2, r3
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	8a9b      	ldrh	r3, [r3, #20]
 80101fe:	1ad2      	subs	r2, r2, r3
 8010200:	4b8e      	ldr	r3, [pc, #568]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010202:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	8b1b      	ldrh	r3, [r3, #24]
 8010208:	461a      	mov	r2, r3
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	8a9b      	ldrh	r3, [r3, #20]
 801020e:	1ad2      	subs	r2, r2, r3
 8010210:	4b8a      	ldr	r3, [pc, #552]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010212:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010214:	4a89      	ldr	r2, [pc, #548]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	8adb      	ldrh	r3, [r3, #22]
 801021e:	461a      	mov	r2, r3
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	8a9b      	ldrh	r3, [r3, #20]
 8010224:	041b      	lsls	r3, r3, #16
 8010226:	431a      	orrs	r2, r3
 8010228:	4b84      	ldr	r3, [pc, #528]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801022a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	691a      	ldr	r2, [r3, #16]
 8010230:	4b82      	ldr	r3, [pc, #520]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	685a      	ldr	r2, [r3, #4]
 8010238:	4b80      	ldr	r3, [pc, #512]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801023a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010244:	d036      	beq.n	80102b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8010246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801024a:	f200 80e2 	bhi.w	8010412 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801024e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010252:	d014      	beq.n	801027e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8010254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010258:	f200 80db 	bhi.w	8010412 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 801025c:	2b80      	cmp	r3, #128	; 0x80
 801025e:	d059      	beq.n	8010314 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8010260:	2b80      	cmp	r3, #128	; 0x80
 8010262:	f200 80d6 	bhi.w	8010412 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8010266:	2b40      	cmp	r3, #64	; 0x40
 8010268:	f000 80be 	beq.w	80103e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801026c:	2b40      	cmp	r3, #64	; 0x40
 801026e:	f200 80d0 	bhi.w	8010412 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8010272:	2b04      	cmp	r3, #4
 8010274:	d039      	beq.n	80102ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8010276:	2b20      	cmp	r3, #32
 8010278:	f000 80b6 	beq.w	80103e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 801027c:	e0c9      	b.n	8010412 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	7f1b      	ldrb	r3, [r3, #28]
 8010282:	061b      	lsls	r3, r3, #24
 8010284:	4619      	mov	r1, r3
 8010286:	4a6d      	ldr	r2, [pc, #436]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010288:	4b6d      	ldr	r3, [pc, #436]	; (8010440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801028a:	430b      	orrs	r3, r1
 801028c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	330c      	adds	r3, #12
 8010292:	4c6a      	ldr	r4, [pc, #424]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fce5 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 801029a:	4603      	mov	r3, r0
 801029c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801029e:	4a67      	ldr	r2, [pc, #412]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	691a      	ldr	r2, [r3, #16]
 80102a8:	4b64      	ldr	r3, [pc, #400]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102aa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80102ac:	4b63      	ldr	r3, [pc, #396]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102ae:	4a65      	ldr	r2, [pc, #404]	; (8010444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80102b0:	601a      	str	r2, [r3, #0]
        break;
 80102b2:	e0da      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	7f1b      	ldrb	r3, [r3, #28]
 80102b8:	061b      	lsls	r3, r3, #24
 80102ba:	4619      	mov	r1, r3
 80102bc:	4a5f      	ldr	r2, [pc, #380]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102be:	4b62      	ldr	r3, [pc, #392]	; (8010448 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80102c0:	430b      	orrs	r3, r1
 80102c2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	330c      	adds	r3, #12
 80102c8:	4c5c      	ldr	r4, [pc, #368]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fcca 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 80102d0:	4603      	mov	r3, r0
 80102d2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80102d4:	4a59      	ldr	r2, [pc, #356]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	691a      	ldr	r2, [r3, #16]
 80102de:	4b57      	ldr	r3, [pc, #348]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102e0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80102e2:	4b56      	ldr	r3, [pc, #344]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102e4:	4a57      	ldr	r2, [pc, #348]	; (8010444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80102e6:	601a      	str	r2, [r3, #0]
        break;
 80102e8:	e0bf      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	7f1b      	ldrb	r3, [r3, #28]
 80102ee:	061b      	lsls	r3, r3, #24
 80102f0:	461a      	mov	r2, r3
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	4a51      	ldr	r2, [pc, #324]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80102f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102fc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80102fe:	4a4f      	ldr	r2, [pc, #316]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	691a      	ldr	r2, [r3, #16]
 8010308:	4b4c      	ldr	r3, [pc, #304]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801030a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801030c:	4b4b      	ldr	r3, [pc, #300]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801030e:	4a4d      	ldr	r2, [pc, #308]	; (8010444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010310:	601a      	str	r2, [r3, #0]
        break;
 8010312:	e0aa      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8010314:	2301      	movs	r3, #1
 8010316:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	1d1a      	adds	r2, r3, #4
 8010322:	4b46      	ldr	r3, [pc, #280]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010324:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	7f1b      	ldrb	r3, [r3, #28]
 801032a:	061b      	lsls	r3, r3, #24
 801032c:	461a      	mov	r2, r3
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	4313      	orrs	r3, r2
 8010332:	4a42      	ldr	r2, [pc, #264]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010338:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801033a:	4a40      	ldr	r2, [pc, #256]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	691a      	ldr	r2, [r3, #16]
 8010344:	4b3d      	ldr	r3, [pc, #244]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010346:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2b00      	cmp	r3, #0
 8010350:	d002      	beq.n	8010358 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8010352:	2b01      	cmp	r3, #1
 8010354:	d00d      	beq.n	8010372 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8010356:	e020      	b.n	801039a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010358:	4b38      	ldr	r3, [pc, #224]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801035a:	69da      	ldr	r2, [r3, #28]
 801035c:	4b3b      	ldr	r3, [pc, #236]	; (801044c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801035e:	4013      	ands	r3, r2
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	8852      	ldrh	r2, [r2, #2]
 8010364:	3a01      	subs	r2, #1
 8010366:	0212      	lsls	r2, r2, #8
 8010368:	4611      	mov	r1, r2
 801036a:	4a34      	ldr	r2, [pc, #208]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801036c:	430b      	orrs	r3, r1
 801036e:	61d3      	str	r3, [r2, #28]
                break;
 8010370:	e01a      	b.n	80103a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	7f1b      	ldrb	r3, [r3, #28]
 8010376:	2bff      	cmp	r3, #255	; 0xff
 8010378:	d101      	bne.n	801037e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 801037a:	2300      	movs	r3, #0
 801037c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 801037e:	4b2f      	ldr	r3, [pc, #188]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010380:	69da      	ldr	r2, [r3, #28]
 8010382:	4b32      	ldr	r3, [pc, #200]	; (801044c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010384:	4013      	ands	r3, r2
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	8852      	ldrh	r2, [r2, #2]
 801038a:	3a01      	subs	r2, #1
 801038c:	0212      	lsls	r2, r2, #8
 801038e:	4313      	orrs	r3, r2
 8010390:	4a2a      	ldr	r2, [pc, #168]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010392:	f043 0310 	orr.w	r3, r3, #16
 8010396:	61d3      	str	r3, [r2, #28]
                break;
 8010398:	e006      	b.n	80103a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 801039a:	4b2d      	ldr	r3, [pc, #180]	; (8010450 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801039c:	4a2d      	ldr	r2, [pc, #180]	; (8010454 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801039e:	f44f 7189 	mov.w	r1, #274	; 0x112
 80103a2:	482d      	ldr	r0, [pc, #180]	; (8010458 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80103a4:	f014 f94e 	bl	8024644 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80103a8:	4b24      	ldr	r3, [pc, #144]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103aa:	69db      	ldr	r3, [r3, #28]
 80103ac:	4a23      	ldr	r2, [pc, #140]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103ae:	f043 0320 	orr.w	r3, r3, #32
 80103b2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80103b4:	4b21      	ldr	r3, [pc, #132]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103b6:	69db      	ldr	r3, [r3, #28]
 80103b8:	f003 0320 	and.w	r3, r3, #32
 80103bc:	2b00      	cmp	r3, #0
 80103be:	bf14      	ite	ne
 80103c0:	2301      	movne	r3, #1
 80103c2:	2300      	moveq	r3, #0
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d000      	beq.n	80103cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 80103ca:	e7f3      	b.n	80103b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80103cc:	4b1b      	ldr	r3, [pc, #108]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103ce:	2210      	movs	r2, #16
 80103d0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80103d2:	7ffb      	ldrb	r3, [r7, #31]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d003      	beq.n	80103e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80103d8:	4b18      	ldr	r3, [pc, #96]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103da:	4a1a      	ldr	r2, [pc, #104]	; (8010444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80103dc:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80103de:	e044      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80103e0:	4b16      	ldr	r3, [pc, #88]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103e2:	4a1e      	ldr	r2, [pc, #120]	; (801045c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80103e4:	601a      	str	r2, [r3, #0]
        break;
 80103e6:	e040      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	7f1b      	ldrb	r3, [r3, #28]
 80103ec:	061b      	lsls	r3, r3, #24
 80103ee:	461a      	mov	r2, r3
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	4a11      	ldr	r2, [pc, #68]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103fa:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80103fc:	4a0f      	ldr	r2, [pc, #60]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	691a      	ldr	r2, [r3, #16]
 8010406:	4b0d      	ldr	r3, [pc, #52]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010408:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801040a:	4b0c      	ldr	r3, [pc, #48]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801040c:	4a0d      	ldr	r2, [pc, #52]	; (8010444 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801040e:	601a      	str	r2, [r3, #0]
        break;
 8010410:	e02b      	b.n	801046a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	7f1b      	ldrb	r3, [r3, #28]
 8010416:	061b      	lsls	r3, r3, #24
 8010418:	461a      	mov	r2, r3
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	4313      	orrs	r3, r2
 801041e:	4a07      	ldr	r2, [pc, #28]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010424:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	7f5a      	ldrb	r2, [r3, #29]
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	7f9b      	ldrb	r3, [r3, #30]
 801042e:	429a      	cmp	r2, r3
 8010430:	d016      	beq.n	8010460 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8010432:	4b02      	ldr	r3, [pc, #8]	; (801043c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8010434:	4a09      	ldr	r2, [pc, #36]	; (801045c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010436:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8010438:	e016      	b.n	8010468 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 801043a:	bf00      	nop
 801043c:	52001000 	.word	0x52001000
 8010440:	0002000a 	.word	0x0002000a
 8010444:	00020201 	.word	0x00020201
 8010448:	00020009 	.word	0x00020009
 801044c:	ffff00ef 	.word	0xffff00ef
 8010450:	080264e8 	.word	0x080264e8
 8010454:	08026504 	.word	0x08026504
 8010458:	08026470 	.word	0x08026470
 801045c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8010460:	4b04      	ldr	r3, [pc, #16]	; (8010474 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8010462:	f240 2201 	movw	r2, #513	; 0x201
 8010466:	601a      	str	r2, [r3, #0]
        break;
 8010468:	bf00      	nop
    }
}
 801046a:	bf00      	nop
 801046c:	3724      	adds	r7, #36	; 0x24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd90      	pop	{r4, r7, pc}
 8010472:	bf00      	nop
 8010474:	52001000 	.word	0x52001000

08010478 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8010478:	b590      	push	{r4, r7, lr}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	7f9b      	ldrb	r3, [r3, #30]
 8010486:	4619      	mov	r1, r3
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff fe47 	bl	801011c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801048e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010490:	4a3b      	ldr	r2, [pc, #236]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	8adb      	ldrh	r3, [r3, #22]
 801049a:	461a      	mov	r2, r3
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	8a9b      	ldrh	r3, [r3, #20]
 80104a0:	041b      	lsls	r3, r3, #16
 80104a2:	431a      	orrs	r2, r3
 80104a4:	4b36      	ldr	r3, [pc, #216]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	691a      	ldr	r2, [r3, #16]
 80104ac:	4b34      	ldr	r3, [pc, #208]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	8b5b      	ldrh	r3, [r3, #26]
 80104b4:	461a      	mov	r2, r3
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	8a9b      	ldrh	r3, [r3, #20]
 80104ba:	1ad2      	subs	r2, r2, r3
 80104bc:	4b30      	ldr	r3, [pc, #192]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104be:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	d12e      	bne.n	8010526 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	8b5b      	ldrh	r3, [r3, #26]
 80104cc:	461a      	mov	r2, r3
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	8a9b      	ldrh	r3, [r3, #20]
 80104d2:	1ad2      	subs	r2, r2, r3
 80104d4:	4b2a      	ldr	r3, [pc, #168]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104d6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	8b5b      	ldrh	r3, [r3, #26]
 80104dc:	461a      	mov	r2, r3
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	8a9b      	ldrh	r3, [r3, #20]
 80104e2:	1ad2      	subs	r2, r2, r3
 80104e4:	4b26      	ldr	r3, [pc, #152]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104e6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80104e8:	4a25      	ldr	r2, [pc, #148]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	7f1b      	ldrb	r3, [r3, #28]
 80104f2:	061b      	lsls	r3, r3, #24
 80104f4:	4619      	mov	r1, r3
 80104f6:	4a22      	ldr	r2, [pc, #136]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80104f8:	4b22      	ldr	r3, [pc, #136]	; (8010584 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80104fa:	430b      	orrs	r3, r1
 80104fc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	330c      	adds	r3, #12
 8010502:	4c1f      	ldr	r4, [pc, #124]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010504:	4618      	mov	r0, r3
 8010506:	f7ff fbad 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 801050a:	4603      	mov	r3, r0
 801050c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	691a      	ldr	r2, [r3, #16]
 8010512:	4b1b      	ldr	r3, [pc, #108]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010514:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	691a      	ldr	r2, [r3, #16]
 801051a:	4b19      	ldr	r3, [pc, #100]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801051c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 801051e:	4b18      	ldr	r3, [pc, #96]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010520:	4a19      	ldr	r2, [pc, #100]	; (8010588 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8010522:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8010524:	e027      	b.n	8010576 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8010526:	4a16      	ldr	r2, [pc, #88]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801052e:	2200      	movs	r2, #0
 8010530:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	330c      	adds	r3, #12
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fb94 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 801053c:	4603      	mov	r3, r0
 801053e:	0a1b      	lsrs	r3, r3, #8
 8010540:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	330c      	adds	r3, #12
 8010548:	4618      	mov	r0, r3
 801054a:	f7ff fb8b 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 801054e:	4603      	mov	r3, r0
 8010550:	095b      	lsrs	r3, r3, #5
 8010552:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8010556:	431c      	orrs	r4, r3
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	330c      	adds	r3, #12
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fb81 	bl	800fc64 <_ZNK8touchgfx9colortypecvmEv>
 8010562:	4603      	mov	r3, r0
 8010564:	08db      	lsrs	r3, r3, #3
 8010566:	f003 031f 	and.w	r3, r3, #31
 801056a:	4a05      	ldr	r2, [pc, #20]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801056c:	4323      	orrs	r3, r4
 801056e:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8010570:	4b03      	ldr	r3, [pc, #12]	; (8010580 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8010572:	4a06      	ldr	r2, [pc, #24]	; (801058c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8010574:	601a      	str	r2, [r3, #0]
}
 8010576:	bf00      	nop
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	bd90      	pop	{r4, r7, pc}
 801057e:	bf00      	nop
 8010580:	52001000 	.word	0x52001000
 8010584:	00010009 	.word	0x00010009
 8010588:	00020201 	.word	0x00020201
 801058c:	00030201 	.word	0x00030201

08010590 <_ZN20ExternalDMAJob_QueueILm2EE5frontEv>:
  External_DMA2D_JobTypeDef& front()
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
      return buffer_[head_];
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	3302      	adds	r3, #2
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	4413      	add	r3, r2
  }
 80105a4:	4618      	mov	r0, r3
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZN20ExternalDMAJob_QueueILm2EE3popEv>:
  void pop()
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
      head_ = (head_ + 1) % max_size_;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	3301      	adds	r3, #1
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	6812      	ldr	r2, [r2, #0]
 80105c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80105c6:	fb01 f202 	mul.w	r2, r1, r2
 80105ca:	1a9a      	subs	r2, r3, r2
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	605a      	str	r2, [r3, #4]
      count_--;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	1e5a      	subs	r2, r3, #1
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	60da      	str	r2, [r3, #12]
  }
 80105da:	bf00      	nop
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
	...

080105e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	4a05      	ldr	r2, [pc, #20]	; (8010608 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7ff fb3f 	bl	800fc7c <_ZN8touchgfx9DMA_QueueD1Ev>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}
 8010608:	08028b1c 	.word	0x08028b1c

0801060c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7ff ffe7 	bl	80105e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801061a:	2114      	movs	r1, #20
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f013 ffe2 	bl	80245e6 <_ZdlPvj>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	3708      	adds	r7, #8
 8010628:	46bd      	mov	sp, r7
 801062a:	bd80      	pop	{r7, pc}

0801062c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8010634:	4a04      	ldr	r2, [pc, #16]	; (8010648 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6013      	str	r3, [r2, #0]
    }
 801063a:	bf00      	nop
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	24041b68 	.word	0x24041b68

0801064c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801065a:	4a0b      	ldr	r2, [pc, #44]	; (8010688 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	601a      	str	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	605a      	str	r2, [r3, #4]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	609a      	str	r2, [r3, #8]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	60da      	str	r2, [r3, #12]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	69ba      	ldr	r2, [r7, #24]
 8010676:	611a      	str	r2, [r3, #16]
    {
    }
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	4618      	mov	r0, r3
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
 8010686:	bf00      	nop
 8010688:	080281c0 	.word	0x080281c0

0801068c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
    {
 8010694:	4a04      	ldr	r2, [pc, #16]	; (80106a8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	601a      	str	r2, [r3, #0]
    }
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4618      	mov	r0, r3
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	080281c0 	.word	0x080281c0

080106ac <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
    }
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7ff ffe9 	bl	801068c <_ZN8touchgfx7MVPHeapD1Ev>
 80106ba:	2114      	movs	r1, #20
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f013 ff92 	bl	80245e6 <_ZdlPvj>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4618      	mov	r0, r3
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    {
 80106d4:	4a04      	ldr	r2, [pc, #16]	; (80106e8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	601a      	str	r2, [r3, #0]
    }
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	08028c10 	.word	0x08028c10

080106ec <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
    }
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff ffe9 	bl	80106cc <_ZN8touchgfx3LCDD1Ev>
 80106fa:	2108      	movs	r1, #8
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f013 ff72 	bl	80245e6 <_ZdlPvj>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	801a      	strh	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	805a      	strh	r2, [r3, #2]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	809a      	strh	r2, [r3, #4]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	80da      	strh	r2, [r3, #6]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2200      	movs	r2, #0
 8010730:	811a      	strh	r2, [r3, #8]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	815a      	strh	r2, [r3, #10]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	819a      	strh	r2, [r3, #12]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	739a      	strb	r2, [r3, #14]
        {
        }
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff ffd5 	bl	801070c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	611a      	str	r2, [r3, #16]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	829a      	strh	r2, [r3, #20]
    {
    }
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
 8010784:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8010786:	4a55      	ldr	r2, [pc, #340]	; (80108dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	605a      	str	r2, [r3, #4]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	609a      	str	r2, [r3, #8]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	683a      	ldr	r2, [r7, #0]
 801079c:	60da      	str	r2, [r3, #12]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	611a      	str	r2, [r3, #16]
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	615a      	str	r2, [r3, #20]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	619a      	str	r2, [r3, #24]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	331c      	adds	r3, #28
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff ffcc 	bl	8010752 <_ZN8touchgfx8GesturesC1Ev>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2200      	movs	r2, #0
 80107c6:	639a      	str	r2, [r3, #56]	; 0x38
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2200      	movs	r2, #0
 80107cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	641a      	str	r2, [r3, #64]	; 0x40
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	645a      	str	r2, [r3, #68]	; 0x44
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	3350      	adds	r3, #80	; 0x50
 8010804:	4618      	mov	r0, r3
 8010806:	f7fc fdc8 	bl	800d39a <_ZN8touchgfx4RectC1Ev>
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2200      	movs	r2, #0
 801080e:	659a      	str	r2, [r3, #88]	; 0x58
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2200      	movs	r2, #0
 8010814:	65da      	str	r2, [r3, #92]	; 0x5c
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	661a      	str	r2, [r3, #96]	; 0x60
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2201      	movs	r2, #1
 8010820:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2201      	movs	r2, #1
 8010838:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2200      	movs	r2, #0
 8010840:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2200      	movs	r2, #0
 8010848:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2200      	movs	r2, #0
 8010850:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2200      	movs	r2, #0
 8010858:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2200      	movs	r2, #0
 8010868:	671a      	str	r2, [r3, #112]	; 0x70
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2200      	movs	r2, #0
 8010876:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2201      	movs	r2, #1
 8010886:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2201      	movs	r2, #1
 801088e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8010892:	4a13      	ldr	r2, [pc, #76]	; (80108e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8010898:	4a12      	ldr	r2, [pc, #72]	; (80108e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801089a:	8b3b      	ldrh	r3, [r7, #24]
 801089c:	8013      	strh	r3, [r2, #0]
 801089e:	4b11      	ldr	r3, [pc, #68]	; (80108e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80108a0:	881a      	ldrh	r2, [r3, #0]
 80108a2:	4b11      	ldr	r3, [pc, #68]	; (80108e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80108a4:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80108a6:	4a11      	ldr	r2, [pc, #68]	; (80108ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80108a8:	8bbb      	ldrh	r3, [r7, #28]
 80108aa:	8013      	strh	r3, [r2, #0]
 80108ac:	4b0f      	ldr	r3, [pc, #60]	; (80108ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80108ae:	881a      	ldrh	r2, [r3, #0]
 80108b0:	4b0f      	ldr	r3, [pc, #60]	; (80108f0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80108b2:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80108b4:	4b0f      	ldr	r3, [pc, #60]	; (80108f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80108ba:	8b3a      	ldrh	r2, [r7, #24]
 80108bc:	8bbb      	ldrh	r3, [r7, #28]
 80108be:	429a      	cmp	r2, r3
 80108c0:	bf34      	ite	cc
 80108c2:	2301      	movcc	r3, #1
 80108c4:	2300      	movcs	r3, #0
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	461a      	mov	r2, r3
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	080289f4 	.word	0x080289f4
 80108e0:	24041b0c 	.word	0x24041b0c
 80108e4:	24041b00 	.word	0x24041b00
 80108e8:	24041b06 	.word	0x24041b06
 80108ec:	24041b02 	.word	0x24041b02
 80108f0:	24041b08 	.word	0x24041b08
 80108f4:	24041b04 	.word	0x24041b04

080108f8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f7fc faab 	bl	800ce60 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801090a:	bf00      	nop
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
	...

08010914 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8010914:	b580      	push	{r7, lr}
 8010916:	b086      	sub	sp, #24
 8010918:	af02      	add	r7, sp, #8
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	68b9      	ldr	r1, [r7, #8]
 801092e:	f7ff fe8d 	bl	801064c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8010932:	4a04      	ldr	r2, [pc, #16]	; (8010944 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	601a      	str	r2, [r3, #0]
    {

    }
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	4618      	mov	r0, r3
 801093c:	3710      	adds	r7, #16
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	080281ac 	.word	0x080281ac

08010948 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8010948:	b580      	push	{r7, lr}
 801094a:	af00      	add	r7, sp, #0
 801094c:	4801      	ldr	r0, [pc, #4]	; (8010954 <__tcf_0+0xc>)
 801094e:	f000 f959 	bl	8010c04 <_ZN12FrontendHeapD1Ev>
 8010952:	bd80      	pop	{r7, pc}
 8010954:	2403b8f0 	.word	0x2403b8f0

08010958 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8010958:	b580      	push	{r7, lr}
 801095a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801095c:	4b12      	ldr	r3, [pc, #72]	; (80109a8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f3bf 8f5b 	dmb	ish
 8010964:	b2db      	uxtb	r3, r3
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	bf0c      	ite	eq
 801096e:	2301      	moveq	r3, #1
 8010970:	2300      	movne	r3, #0
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2b00      	cmp	r3, #0
 8010976:	d013      	beq.n	80109a0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8010978:	480b      	ldr	r0, [pc, #44]	; (80109a8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801097a:	f013 fe36 	bl	80245ea <__cxa_guard_acquire>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	bf14      	ite	ne
 8010984:	2301      	movne	r3, #1
 8010986:	2300      	moveq	r3, #0
 8010988:	b2db      	uxtb	r3, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	d008      	beq.n	80109a0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801098e:	4807      	ldr	r0, [pc, #28]	; (80109ac <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8010990:	f000 f868 	bl	8010a64 <_ZN12FrontendHeapC1Ev>
 8010994:	4806      	ldr	r0, [pc, #24]	; (80109b0 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8010996:	f013 fe73 	bl	8024680 <atexit>
 801099a:	4803      	ldr	r0, [pc, #12]	; (80109a8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801099c:	f013 fe31 	bl	8024602 <__cxa_guard_release>
        return instance;
 80109a0:	4b02      	ldr	r3, [pc, #8]	; (80109ac <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80109a2:	4618      	mov	r0, r3
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	2403bb40 	.word	0x2403bb40
 80109ac:	2403b8f0 	.word	0x2403b8f0
 80109b0:	08010949 	.word	0x08010949

080109b4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	4a05      	ldr	r2, [pc, #20]	; (80109d4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff fe61 	bl	801068c <_ZN8touchgfx7MVPHeapD1Ev>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	080281ac 	.word	0x080281ac

080109d8 <_ZN16FrontendHeapBaseD0Ev>:
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f7ff ffe7 	bl	80109b4 <_ZN16FrontendHeapBaseD1Ev>
 80109e6:	2114      	movs	r1, #20
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f013 fdfc 	bl	80245e6 <_ZdlPvj>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f003 f8be 	bl	8013b84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010a08:	4a03      	ldr	r2, [pc, #12]	; (8010a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	601a      	str	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	08028178 	.word	0x08028178

08010a1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f003 f8ac 	bl	8013b84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010a2c:	4a03      	ldr	r2, [pc, #12]	; (8010a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4618      	mov	r0, r3
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	08028144 	.word	0x08028144

08010a40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f003 f89a 	bl	8013b84 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010a50:	4a03      	ldr	r2, [pc, #12]	; (8010a60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	08028110 	.word	0x08028110

08010a64 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8010a64:	b590      	push	{r4, r7, lr}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f103 0114 	add.w	r1, r3, #20
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	33f8      	adds	r3, #248	; 0xf8
                     app(model, *this)
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	4623      	mov	r3, r4
 8010a88:	f7ff ff44 	bl	8010914 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8010a8c:	4a15      	ldr	r2, [pc, #84]	; (8010ae4 <_ZN12FrontendHeapC1Ev+0x80>)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	3314      	adds	r3, #20
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7ff ffae 	bl	80109f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	332c      	adds	r3, #44	; 0x2c
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff ffbb 	bl	8010a1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	33e0      	adds	r3, #224	; 0xe0
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff ffc8 	bl	8010a40 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	33f4      	adds	r3, #244	; 0xf4
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fd fa53 	bl	800df60 <_ZN5ModelC1Ev>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	33f4      	adds	r3, #244	; 0xf4
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	f7fd fa34 	bl	800df34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	33f8      	adds	r3, #248	; 0xf8
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4610      	mov	r0, r2
 8010ad6:	f7ff ff0f 	bl	80108f8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4618      	mov	r0, r3
 8010ade:	370c      	adds	r7, #12
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd90      	pop	{r4, r7, pc}
 8010ae4:	080280fc 	.word	0x080280fc

08010ae8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af02      	add	r7, sp, #8
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8010af6:	68f8      	ldr	r0, [r7, #12]
 8010af8:	8bbb      	ldrh	r3, [r7, #28]
 8010afa:	9301      	str	r3, [sp, #4]
 8010afc:	8b3b      	ldrh	r3, [r7, #24]
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	68b9      	ldr	r1, [r7, #8]
 8010b06:	f7ff fe37 	bl	8010778 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8010b0a:	4a04      	ldr	r2, [pc, #16]	; (8010b1c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	601a      	str	r2, [r3, #0]
    }
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	0802824c 	.word	0x0802824c

08010b20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af02      	add	r7, sp, #8
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
 8010b2c:	603b      	str	r3, [r7, #0]
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	8bbb      	ldrh	r3, [r7, #28]
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	8b3b      	ldrh	r3, [r7, #24]
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	68b9      	ldr	r1, [r7, #8]
 8010b3e:	f7ff ffd3 	bl	8010ae8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010b42:	4a04      	ldr	r2, [pc, #16]	; (8010b54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	601a      	str	r2, [r3, #0]
    }
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	08027f2c 	.word	0x08027f2c

08010b58 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	4a04      	ldr	r2, [pc, #16]	; (8010b74 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	08027f14 	.word	0x08027f14

08010b78 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7ff ffe8 	bl	8010b58 <_ZN8touchgfx15TouchControllerC1Ev>
 8010b88:	4a03      	ldr	r2, [pc, #12]	; (8010b98 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	08027efc 	.word	0x08027efc

08010b9c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 216, 216);

void touchgfx_init()
{
 8010b9c:	b590      	push	{r4, r7, lr}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8010ba2:	f7fc ffc9 	bl	800db38 <_ZN14BitmapDatabase11getInstanceEv>
 8010ba6:	4604      	mov	r4, r0
 8010ba8:	f7fc ffd0 	bl	800db4c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8010bac:	4603      	mov	r3, r0
 8010bae:	4619      	mov	r1, r3
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f007 ff27 	bl	8018a0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8010bbe:	4809      	ldr	r0, [pc, #36]	; (8010be4 <touchgfx_init+0x48>)
 8010bc0:	f7ff fd34 	bl	801062c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	f7fd f8ed 	bl	800dda4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8010bca:	4807      	ldr	r0, [pc, #28]	; (8010be8 <touchgfx_init+0x4c>)
 8010bcc:	f007 fe86 	bl	80188dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8010bd0:	f7ff fec2 	bl	8010958 <_ZN12FrontendHeap11getInstanceEv>
 8010bd4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8010bd6:	4805      	ldr	r0, [pc, #20]	; (8010bec <touchgfx_init+0x50>)
 8010bd8:	f7fd fd3e 	bl	800e658 <_ZN11TouchGFXHAL10initializeEv>
}
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd90      	pop	{r4, r7, pc}
 8010be4:	2403c968 	.word	0x2403c968
 8010be8:	24000034 	.word	0x24000034
 8010bec:	2403c96c 	.word	0x2403c96c

08010bf0 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8010bf4:	4802      	ldr	r0, [pc, #8]	; (8010c00 <touchgfx_taskEntry+0x10>)
 8010bf6:	f003 fadc 	bl	80141b2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8010bfa:	bf00      	nop
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	2403c96c 	.word	0x2403c96c

08010c04 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	4a0f      	ldr	r2, [pc, #60]	; (8010c4c <_ZN12FrontendHeapD1Ev+0x48>)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	601a      	str	r2, [r3, #0]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	33f8      	adds	r3, #248	; 0xf8
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fd f956 	bl	800dec8 <_ZN19FrontendApplicationD1Ev>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	33e0      	adds	r3, #224	; 0xe0
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 f827 	bl	8010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	332c      	adds	r3, #44	; 0x2c
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 f844 	bl	8010cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	3314      	adds	r3, #20
 8010c34:	4618      	mov	r0, r3
 8010c36:	f000 f861 	bl	8010cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7ff feb9 	bl	80109b4 <_ZN16FrontendHeapBaseD1Ev>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	080280fc 	.word	0x080280fc

08010c50 <_ZN12FrontendHeapD0Ev>:
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7ff ffd3 	bl	8010c04 <_ZN12FrontendHeapD1Ev>
 8010c5e:	f44f 7114 	mov.w	r1, #592	; 0x250
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f013 fcbf 	bl	80245e6 <_ZdlPvj>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	4a05      	ldr	r2, [pc, #20]	; (8010c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f002 ff7c 	bl	8013b82 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	08028110 	.word	0x08028110

08010c98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff ffe7 	bl	8010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010ca6:	2114      	movs	r1, #20
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f013 fc9c 	bl	80245e6 <_ZdlPvj>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	4a05      	ldr	r2, [pc, #20]	; (8010cd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f002 ff5a 	bl	8013b82 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	08028144 	.word	0x08028144

08010cdc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff ffe7 	bl	8010cb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010cea:	21b4      	movs	r1, #180	; 0xb4
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f013 fc7a 	bl	80245e6 <_ZdlPvj>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	4a05      	ldr	r2, [pc, #20]	; (8010d1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f002 ff38 	bl	8013b82 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4618      	mov	r0, r3
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	08028178 	.word	0x08028178

08010d20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ff ffe7 	bl	8010cfc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010d2e:	2118      	movs	r1, #24
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f013 fc58 	bl	80245e6 <_ZdlPvj>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3708      	adds	r7, #8
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	4a05      	ldr	r2, [pc, #20]	; (8010d60 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	601a      	str	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7ff fcbb 	bl	80106cc <_ZN8touchgfx3LCDD1Ev>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	08029014 	.word	0x08029014

08010d64 <_ZN8touchgfx8LCD16bppD0Ev>:
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7ff ffe7 	bl	8010d40 <_ZN8touchgfx8LCD16bppD1Ev>
 8010d72:	2178      	movs	r1, #120	; 0x78
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f013 fc36 	bl	80245e6 <_ZdlPvj>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <_Z41__static_initialization_and_destruction_0ii>:
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af02      	add	r7, sp, #8
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d117      	bne.n	8010dc4 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d112      	bne.n	8010dc4 <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 8010d9e:	4817      	ldr	r0, [pc, #92]	; (8010dfc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010da0:	f7ff feea 	bl	8010b78 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8010da4:	4816      	ldr	r0, [pc, #88]	; (8010e00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010da6:	f7ff f8df 	bl	800ff68 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8010daa:	4816      	ldr	r0, [pc, #88]	; (8010e04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010dac:	f00a ff30 	bl	801bc10 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 216, 216);
 8010db0:	23d8      	movs	r3, #216	; 0xd8
 8010db2:	9301      	str	r3, [sp, #4]
 8010db4:	23d8      	movs	r3, #216	; 0xd8
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010dba:	4a12      	ldr	r2, [pc, #72]	; (8010e04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010dbc:	4910      	ldr	r1, [pc, #64]	; (8010e00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010dbe:	4812      	ldr	r0, [pc, #72]	; (8010e08 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010dc0:	f7ff feae 	bl	8010b20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d113      	bne.n	8010df2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d10e      	bne.n	8010df2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010dd4:	480c      	ldr	r0, [pc, #48]	; (8010e08 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010dd6:	f7fd fccf 	bl	800e778 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8010dda:	480c      	ldr	r0, [pc, #48]	; (8010e0c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010ddc:	f7fb faea 	bl	800c3b4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010de0:	4808      	ldr	r0, [pc, #32]	; (8010e04 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010de2:	f7ff ffad 	bl	8010d40 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8010de6:	4806      	ldr	r0, [pc, #24]	; (8010e00 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010de8:	f7ff f8f8 	bl	800ffdc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8010dec:	4803      	ldr	r0, [pc, #12]	; (8010dfc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010dee:	f7fd fa33 	bl	800e258 <_ZN20STM32TouchControllerD1Ev>
}
 8010df2:	bf00      	nop
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	2403bb44 	.word	0x2403bb44
 8010e00:	2403bb48 	.word	0x2403bb48
 8010e04:	2403c8f0 	.word	0x2403c8f0
 8010e08:	2403c96c 	.word	0x2403c96c
 8010e0c:	24000034 	.word	0x24000034

08010e10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010e18:	2301      	movs	r3, #1
    }
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	370c      	adds	r7, #12
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8010e26:	b480      	push	{r7}
 8010e28:	b083      	sub	sp, #12
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8010e2e:	230c      	movs	r3, #12
    }
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	460b      	mov	r3, r1
 8010e46:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010e48:	887a      	ldrh	r2, [r7, #2]
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	4413      	add	r3, r2
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	3308      	adds	r3, #8
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	4413      	add	r3, r2
    }
 8010e58:	4618      	mov	r0, r3
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010e70:	887a      	ldrh	r2, [r7, #2]
 8010e72:	4613      	mov	r3, r2
 8010e74:	005b      	lsls	r3, r3, #1
 8010e76:	4413      	add	r3, r2
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	4413      	add	r3, r2
    }
 8010e80:	4618      	mov	r0, r3
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010e94:	2301      	movs	r3, #1
    }
 8010e96:	4618      	mov	r0, r3
 8010e98:	370c      	adds	r7, #12
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010eaa:	23ac      	movs	r3, #172	; 0xac
    }
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010ec4:	887b      	ldrh	r3, [r7, #2]
 8010ec6:	22ac      	movs	r2, #172	; 0xac
 8010ec8:	fb02 f303 	mul.w	r3, r2, r3
 8010ecc:	3308      	adds	r3, #8
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	4413      	add	r3, r2
    }
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	370c      	adds	r7, #12
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010ede:	b480      	push	{r7}
 8010ee0:	b083      	sub	sp, #12
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010eea:	887b      	ldrh	r3, [r7, #2]
 8010eec:	22ac      	movs	r2, #172	; 0xac
 8010eee:	fb02 f303 	mul.w	r3, r2, r3
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	4413      	add	r3, r2
    }
 8010ef8:	4618      	mov	r0, r3
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010f0c:	2301      	movs	r3, #1
    }
 8010f0e:	4618      	mov	r0, r3
 8010f10:	370c      	adds	r7, #12
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr

08010f1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010f1a:	b480      	push	{r7}
 8010f1c:	b083      	sub	sp, #12
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010f22:	2310      	movs	r3, #16
    }
 8010f24:	4618      	mov	r0, r3
 8010f26:	370c      	adds	r7, #12
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010f3c:	887b      	ldrh	r3, [r7, #2]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	3308      	adds	r3, #8
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	4413      	add	r3, r2
    }
 8010f46:	4618      	mov	r0, r3
 8010f48:	370c      	adds	r7, #12
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010f52:	b480      	push	{r7}
 8010f54:	b083      	sub	sp, #12
 8010f56:	af00      	add	r7, sp, #0
 8010f58:	6078      	str	r0, [r7, #4]
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010f5e:	887b      	ldrh	r3, [r7, #2]
 8010f60:	011b      	lsls	r3, r3, #4
 8010f62:	3308      	adds	r3, #8
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	4413      	add	r3, r2
    }
 8010f68:	4618      	mov	r0, r3
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <_GLOBAL__sub_I_touchgfx_init>:
 8010f74:	b580      	push	{r7, lr}
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f7c:	2001      	movs	r0, #1
 8010f7e:	f7ff ff01 	bl	8010d84 <_Z41__static_initialization_and_destruction_0ii>
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <_GLOBAL__sub_D_touchgfx_init>:
 8010f84:	b580      	push	{r7, lr}
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	f7ff fef9 	bl	8010d84 <_Z41__static_initialization_and_destruction_0ii>
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	3320      	adds	r3, #32
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	4798      	blx	r3
    }
 8010fa8:	bf00      	nop
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	370c      	adds	r7, #12
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr

08010fca <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8010fca:	b480      	push	{r7}
 8010fcc:	b083      	sub	sp, #12
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8010fd8:	3301      	adds	r3, #1
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8010fe2:	bf00      	nop
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
	...

08010ff0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8010ffc:	78fb      	ldrb	r3, [r7, #3]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d002      	beq.n	8011008 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8011002:	78fb      	ldrb	r3, [r7, #3]
 8011004:	2b02      	cmp	r3, #2
 8011006:	d105      	bne.n	8011014 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	78fa      	ldrb	r2, [r7, #3]
 801100c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8011010:	2301      	movs	r3, #1
 8011012:	e027      	b.n	8011064 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d123      	bne.n	8011062 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801101e:	2b00      	cmp	r3, #0
 8011020:	d014      	beq.n	801104c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	339c      	adds	r3, #156	; 0x9c
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	4798      	blx	r3
 801102e:	4603      	mov	r3, r0
 8011030:	461a      	mov	r2, r3
 8011032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011036:	429a      	cmp	r2, r3
 8011038:	d008      	beq.n	801104c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801103a:	4b0c      	ldr	r3, [pc, #48]	; (801106c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	f083 0301 	eor.w	r3, r3, #1
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011048:	2301      	movs	r3, #1
 801104a:	e000      	b.n	801104e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 801104c:	2300      	movs	r3, #0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d005      	beq.n	801105e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	78fa      	ldrb	r2, [r7, #3]
 8011056:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 801105a:	2301      	movs	r3, #1
 801105c:	e002      	b.n	8011064 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 801105e:	2300      	movs	r3, #0
 8011060:	e000      	b.n	8011064 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8011062:	2300      	movs	r3, #0
    }
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	24041b0a 	.word	0x24041b0a

08011070 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	683a      	ldr	r2, [r7, #0]
 801107e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr

0801108c <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
    {
 8011094:	4a04      	ldr	r2, [pc, #16]	; (80110a8 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	601a      	str	r2, [r3, #0]
    }
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	08028210 	.word	0x08028210

080110ac <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
    }
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff ffe9 	bl	801108c <_ZN8touchgfx15VideoControllerD1Ev>
 80110ba:	2104      	movs	r1, #4
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f013 fa92 	bl	80245e6 <_ZdlPvj>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4618      	mov	r0, r3
 80110c6:	3708      	adds	r7, #8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	683a      	ldr	r2, [r7, #0]
 80110da:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	4608      	mov	r0, r1
 80110f2:	4611      	mov	r1, r2
 80110f4:	461a      	mov	r2, r3
 80110f6:	4603      	mov	r3, r0
 80110f8:	72fb      	strb	r3, [r7, #11]
 80110fa:	460b      	mov	r3, r1
 80110fc:	813b      	strh	r3, [r7, #8]
 80110fe:	4613      	mov	r3, r2
 8011100:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	7afa      	ldrb	r2, [r7, #11]
 8011106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	893a      	ldrh	r2, [r7, #8]
 801110e:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	88fa      	ldrh	r2, [r7, #6]
 8011114:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8011116:	bf00      	nop
 8011118:	3714      	adds	r7, #20
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>:
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	683a      	ldr	r2, [r7, #0]
 8011130:	645a      	str	r2, [r3, #68]	; 0x44
 8011132:	bf00      	nop
 8011134:	370c      	adds	r7, #12
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr
	...

08011140 <__NVIC_EnableIRQ>:
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	4603      	mov	r3, r0
 8011148:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801114e:	2b00      	cmp	r3, #0
 8011150:	db0b      	blt.n	801116a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011152:	88fb      	ldrh	r3, [r7, #6]
 8011154:	f003 021f 	and.w	r2, r3, #31
 8011158:	4907      	ldr	r1, [pc, #28]	; (8011178 <__NVIC_EnableIRQ+0x38>)
 801115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801115e:	095b      	lsrs	r3, r3, #5
 8011160:	2001      	movs	r0, #1
 8011162:	fa00 f202 	lsl.w	r2, r0, r2
 8011166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801116a:	bf00      	nop
 801116c:	370c      	adds	r7, #12
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	e000e100 	.word	0xe000e100

0801117c <__NVIC_DisableIRQ>:
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801118a:	2b00      	cmp	r3, #0
 801118c:	db12      	blt.n	80111b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801118e:	88fb      	ldrh	r3, [r7, #6]
 8011190:	f003 021f 	and.w	r2, r3, #31
 8011194:	490a      	ldr	r1, [pc, #40]	; (80111c0 <__NVIC_DisableIRQ+0x44>)
 8011196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801119a:	095b      	lsrs	r3, r3, #5
 801119c:	2001      	movs	r0, #1
 801119e:	fa00 f202 	lsl.w	r2, r0, r2
 80111a2:	3320      	adds	r3, #32
 80111a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80111a8:	f3bf 8f4f 	dsb	sy
}
 80111ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80111ae:	f3bf 8f6f 	isb	sy
}
 80111b2:	bf00      	nop
}
 80111b4:	bf00      	nop
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr
 80111c0:	e000e100 	.word	0xe000e100

080111c4 <__NVIC_SetPriority>:
{
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	4603      	mov	r3, r0
 80111cc:	6039      	str	r1, [r7, #0]
 80111ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80111d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	db0a      	blt.n	80111ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	b2da      	uxtb	r2, r3
 80111dc:	490c      	ldr	r1, [pc, #48]	; (8011210 <__NVIC_SetPriority+0x4c>)
 80111de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111e2:	0112      	lsls	r2, r2, #4
 80111e4:	b2d2      	uxtb	r2, r2
 80111e6:	440b      	add	r3, r1
 80111e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80111ec:	e00a      	b.n	8011204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	4908      	ldr	r1, [pc, #32]	; (8011214 <__NVIC_SetPriority+0x50>)
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	f003 030f 	and.w	r3, r3, #15
 80111fa:	3b04      	subs	r3, #4
 80111fc:	0112      	lsls	r2, r2, #4
 80111fe:	b2d2      	uxtb	r2, r2
 8011200:	440b      	add	r3, r1
 8011202:	761a      	strb	r2, [r3, #24]
}
 8011204:	bf00      	nop
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr
 8011210:	e000e100 	.word	0xe000e100
 8011214:	e000ed00 	.word	0xe000ed00

08011218 <_ZN8touchgfx15VideoController11getInstanceEv>:
uint32_t videoRGBBuffer[23328] LOCATION_ATTRIBUTE_NOLOAD("Video_RGB_Buffer");
DedicatedBufferController<1, 216, 216, 216*2U, Bitmap::RGB565> videoController;

//Singleton Factory
VideoController& VideoController::getInstance()
{
 8011218:	b480      	push	{r7}
 801121a:	af00      	add	r7, sp, #0
    return videoController;
 801121c:	4b02      	ldr	r3, [pc, #8]	; (8011228 <_ZN8touchgfx15VideoController11getInstanceEv+0x10>)
}
 801121e:	4618      	mov	r0, r3
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	2403ca30 	.word	0x2403ca30

0801122c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801122c:	b5b0      	push	{r4, r5, r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4618      	mov	r0, r3
 8011238:	f002 ffa9 	bl	801418e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801123c:	687d      	ldr	r5, [r7, #4]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	3364      	adds	r3, #100	; 0x64
 8011244:	681c      	ldr	r4, [r3, #0]
 8011246:	f005 f827 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 801124a:	4603      	mov	r3, r0
 801124c:	4619      	mov	r1, r3
 801124e:	4628      	mov	r0, r5
 8011250:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4912      	ldr	r1, [pc, #72]	; (80112a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff ff0a 	bl	8011070 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2101      	movs	r1, #1
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff fec5 	bl	8010ff0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3388      	adds	r3, #136	; 0x88
 801126e:	681c      	ldr	r4, [r3, #0]
 8011270:	2300      	movs	r3, #0
 8011272:	2200      	movs	r2, #0
 8011274:	490b      	ldr	r1, [pc, #44]	; (80112a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8011276:	47a0      	blx	r4

    /*
     * Add DMA2D to hardware decoder
     */
    mjpegdecoder1.addDMA(dma);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	4619      	mov	r1, r3
 801127e:	480a      	ldr	r0, [pc, #40]	; (80112a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
 8011280:	f7ff ff4f 	bl	8011122 <_ZN20HardwareMJPEGDecoder6addDMAERN8touchgfx13DMA_InterfaceE>

    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 8011284:	2200      	movs	r2, #0
 8011286:	4908      	ldr	r1, [pc, #32]	; (80112a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
 8011288:	4808      	ldr	r0, [pc, #32]	; (80112ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
 801128a:	f000 fab1 	bl	80117f0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 801128e:	4a08      	ldr	r2, [pc, #32]	; (80112b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
 8011290:	4908      	ldr	r1, [pc, #32]	; (80112b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
 8011292:	4806      	ldr	r0, [pc, #24]	; (80112ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
 8011294:	f000 facc 	bl	8011830 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bdb0      	pop	{r4, r5, r7, pc}
 80112a0:	0800fba9 	.word	0x0800fba9
 80112a4:	24002818 	.word	0x24002818
 80112a8:	2403c9e8 	.word	0x2403c9e8
 80112ac:	2403ca30 	.word	0x2403ca30
 80112b0:	00016c80 	.word	0x00016c80
 80112b4:	30000000 	.word	0x30000000

080112b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80112c0:	2109      	movs	r1, #9
 80112c2:	205a      	movs	r0, #90	; 0x5a
 80112c4:	f7ff ff7e 	bl	80111c4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80112c8:	2109      	movs	r1, #9
 80112ca:	2058      	movs	r0, #88	; 0x58
 80112cc:	f7ff ff7a 	bl	80111c4 <__NVIC_SetPriority>
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80112e0:	205a      	movs	r0, #90	; 0x5a
 80112e2:	f7ff ff2d 	bl	8011140 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80112e6:	2058      	movs	r0, #88	; 0x58
 80112e8:	f7ff ff2a 	bl	8011140 <__NVIC_EnableIRQ>
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80112fc:	205a      	movs	r0, #90	; 0x5a
 80112fe:	f7ff ff3d 	bl	801117c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011302:	2058      	movs	r0, #88	; 0x58
 8011304:	f7ff ff3a 	bl	801117c <__NVIC_DisableIRQ>
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8011318:	4b11      	ldr	r3, [pc, #68]	; (8011360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	b29b      	uxth	r3, r3
 801131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011322:	b29b      	uxth	r3, r3
 8011324:	3b01      	subs	r3, #1
 8011326:	b29a      	uxth	r2, r3
 8011328:	4b0e      	ldr	r3, [pc, #56]	; (8011364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801132a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801132c:	4b0c      	ldr	r3, [pc, #48]	; (8011360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	b29b      	uxth	r3, r3
 8011332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011336:	b29b      	uxth	r3, r3
 8011338:	3b01      	subs	r3, #1
 801133a:	b29a      	uxth	r2, r3
 801133c:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801133e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011340:	4b08      	ldr	r3, [pc, #32]	; (8011364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011342:	881a      	ldrh	r2, [r3, #0]
 8011344:	4b06      	ldr	r3, [pc, #24]	; (8011360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011346:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011348:	4b05      	ldr	r3, [pc, #20]	; (8011360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801134c:	4a04      	ldr	r2, [pc, #16]	; (8011360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801134e:	f043 0301 	orr.w	r3, r3, #1
 8011352:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011354:	bf00      	nop
 8011356:	370c      	adds	r7, #12
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr
 8011360:	50001000 	.word	0x50001000
 8011364:	2403ca7a 	.word	0x2403ca7a
 8011368:	2403ca7c 	.word	0x2403ca7c

0801136c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4618      	mov	r0, r3
 8011378:	f002 fef0 	bl	801415c <_ZN8touchgfx3HAL10beginFrameEv>
 801137c:	4603      	mov	r3, r0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
	...

08011388 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8011396:	2b00      	cmp	r3, #0
 8011398:	d002      	beq.n	80113a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801139a:	4b07      	ldr	r3, [pc, #28]	; (80113b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 801139c:	2201      	movs	r2, #1
 801139e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f002 fee6 	bl	8014174 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 80113a8:	4804      	ldr	r0, [pc, #16]	; (80113bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 80113aa:	f000 fa57 	bl	801185c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>
}
 80113ae:	bf00      	nop
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	2403ca78 	.word	0x2403ca78
 80113bc:	2403ca30 	.word	0x2403ca30

080113c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80113c8:	4b03      	ldr	r3, [pc, #12]	; (80113d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80113ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	50001084 	.word	0x50001084

080113dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80113dc:	b480      	push	{r7}
 80113de:	b083      	sub	sp, #12
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80113e6:	4a06      	ldr	r2, [pc, #24]	; (8011400 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80113ec:	4b05      	ldr	r3, [pc, #20]	; (8011404 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80113ee:	2201      	movs	r2, #1
 80113f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80113f2:	bf00      	nop
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	50001084 	.word	0x50001084
 8011404:	50001000 	.word	0x50001000

08011408 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6839      	ldr	r1, [r7, #0]
 8011416:	4618      	mov	r0, r3
 8011418:	f002 fe69 	bl	80140ee <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801141c:	4b25      	ldr	r3, [pc, #148]	; (80114b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011424:	2b00      	cmp	r3, #0
 8011426:	bf14      	ite	ne
 8011428:	2301      	movne	r3, #1
 801142a:	2300      	moveq	r3, #0
 801142c:	b2db      	uxtb	r3, r3
 801142e:	2b00      	cmp	r3, #0
 8011430:	d03c      	beq.n	80114ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011432:	4b20      	ldr	r3, [pc, #128]	; (80114b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8011434:	2200      	movs	r2, #0
 8011436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801143a:	f3bf 8f4f 	dsb	sy
}
 801143e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011440:	4b1c      	ldr	r3, [pc, #112]	; (80114b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8011442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011446:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	0b5b      	lsrs	r3, r3, #13
 801144c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011450:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	08db      	lsrs	r3, r3, #3
 8011456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801145a:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	015a      	lsls	r2, r3, #5
 8011460:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011464:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011466:	68fa      	ldr	r2, [r7, #12]
 8011468:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801146a:	4912      	ldr	r1, [pc, #72]	; (80114b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 801146c:	4313      	orrs	r3, r2
 801146e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	1e5a      	subs	r2, r3, #1
 8011476:	60fa      	str	r2, [r7, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	bf14      	ite	ne
 801147c:	2301      	movne	r3, #1
 801147e:	2300      	moveq	r3, #0
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	d000      	beq.n	8011488 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8011486:	e7e9      	b.n	801145c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	1e5a      	subs	r2, r3, #1
 801148c:	613a      	str	r2, [r7, #16]
 801148e:	2b00      	cmp	r3, #0
 8011490:	bf14      	ite	ne
 8011492:	2301      	movne	r3, #1
 8011494:	2300      	moveq	r3, #0
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b00      	cmp	r3, #0
 801149a:	d000      	beq.n	801149e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 801149c:	e7d9      	b.n	8011452 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 801149e:	f3bf 8f4f 	dsb	sy
}
 80114a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80114a4:	f3bf 8f6f 	isb	sy
}
 80114a8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80114aa:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80114ac:	bf00      	nop
 80114ae:	3718      	adds	r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	e000ed00 	.word	0xe000ed00

080114b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
 80114c4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68b9      	ldr	r1, [r7, #8]
 80114ce:	f002 ff78 	bl	80143c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80114d2:	4603      	mov	r3, r0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80114e4:	4b0d      	ldr	r3, [pc, #52]	; (801151c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80114e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114e8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80114ea:	4b0c      	ldr	r3, [pc, #48]	; (801151c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80114ec:	68db      	ldr	r3, [r3, #12]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	3301      	adds	r3, #1
 80114f8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80114fa:	89fa      	ldrh	r2, [r7, #14]
 80114fc:	89bb      	ldrh	r3, [r7, #12]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d304      	bcc.n	801150c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8011502:	89fa      	ldrh	r2, [r7, #14]
 8011504:	89bb      	ldrh	r3, [r7, #12]
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	b29b      	uxth	r3, r3
 801150a:	e000      	b.n	801150e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3714      	adds	r7, #20
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	50001000 	.word	0x50001000

08011520 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8011520:	b480      	push	{r7}
 8011522:	b087      	sub	sp, #28
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011528:	4b26      	ldr	r3, [pc, #152]	; (80115c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801152a:	695b      	ldr	r3, [r3, #20]
 801152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011530:	2b00      	cmp	r3, #0
 8011532:	bf14      	ite	ne
 8011534:	2301      	movne	r3, #1
 8011536:	2300      	moveq	r3, #0
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d03c      	beq.n	80115b8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801153e:	4b21      	ldr	r3, [pc, #132]	; (80115c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8011540:	2200      	movs	r2, #0
 8011542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011546:	f3bf 8f4f 	dsb	sy
}
 801154a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801154c:	4b1d      	ldr	r3, [pc, #116]	; (80115c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801154e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011552:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	0b5b      	lsrs	r3, r3, #13
 8011558:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801155c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	08db      	lsrs	r3, r3, #3
 8011562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011566:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	015a      	lsls	r2, r3, #5
 801156c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011570:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011576:	4913      	ldr	r1, [pc, #76]	; (80115c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8011578:	4313      	orrs	r3, r2
 801157a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	1e5a      	subs	r2, r3, #1
 8011582:	60fa      	str	r2, [r7, #12]
 8011584:	2b00      	cmp	r3, #0
 8011586:	bf14      	ite	ne
 8011588:	2301      	movne	r3, #1
 801158a:	2300      	moveq	r3, #0
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d000      	beq.n	8011594 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8011592:	e7e9      	b.n	8011568 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	1e5a      	subs	r2, r3, #1
 8011598:	613a      	str	r2, [r7, #16]
 801159a:	2b00      	cmp	r3, #0
 801159c:	bf14      	ite	ne
 801159e:	2301      	movne	r3, #1
 80115a0:	2300      	moveq	r3, #0
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d000      	beq.n	80115aa <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 80115a8:	e7d9      	b.n	801155e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80115aa:	f3bf 8f4f 	dsb	sy
}
 80115ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80115b0:	f3bf 8f6f 	isb	sy
}
 80115b4:	bf00      	nop
}
 80115b6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80115b8:	bf00      	nop
 80115ba:	371c      	adds	r7, #28
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	e000ed00 	.word	0xe000ed00

080115c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80115c8:	b480      	push	{r7}
 80115ca:	b087      	sub	sp, #28
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80115d0:	4b26      	ldr	r3, [pc, #152]	; (801166c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80115d2:	695b      	ldr	r3, [r3, #20]
 80115d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	bf14      	ite	ne
 80115dc:	2301      	movne	r3, #1
 80115de:	2300      	moveq	r3, #0
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d03c      	beq.n	8011660 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80115e6:	4b21      	ldr	r3, [pc, #132]	; (801166c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80115e8:	2200      	movs	r2, #0
 80115ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80115ee:	f3bf 8f4f 	dsb	sy
}
 80115f2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80115f4:	4b1d      	ldr	r3, [pc, #116]	; (801166c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 80115f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115fa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	0b5b      	lsrs	r3, r3, #13
 8011600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011604:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	08db      	lsrs	r3, r3, #3
 801160a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801160e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	015a      	lsls	r2, r3, #5
 8011614:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011618:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801161a:	68fa      	ldr	r2, [r7, #12]
 801161c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801161e:	4913      	ldr	r1, [pc, #76]	; (801166c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8011620:	4313      	orrs	r3, r2
 8011622:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	1e5a      	subs	r2, r3, #1
 801162a:	60fa      	str	r2, [r7, #12]
 801162c:	2b00      	cmp	r3, #0
 801162e:	bf14      	ite	ne
 8011630:	2301      	movne	r3, #1
 8011632:	2300      	moveq	r3, #0
 8011634:	b2db      	uxtb	r3, r3
 8011636:	2b00      	cmp	r3, #0
 8011638:	d000      	beq.n	801163c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 801163a:	e7e9      	b.n	8011610 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	1e5a      	subs	r2, r3, #1
 8011640:	613a      	str	r2, [r7, #16]
 8011642:	2b00      	cmp	r3, #0
 8011644:	bf14      	ite	ne
 8011646:	2301      	movne	r3, #1
 8011648:	2300      	moveq	r3, #0
 801164a:	b2db      	uxtb	r3, r3
 801164c:	2b00      	cmp	r3, #0
 801164e:	d000      	beq.n	8011652 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8011650:	e7d9      	b.n	8011606 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011652:	f3bf 8f4f 	dsb	sy
}
 8011656:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011658:	f3bf 8f6f 	isb	sy
}
 801165c:	bf00      	nop
}
 801165e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8011660:	bf00      	nop
 8011662:	371c      	adds	r7, #28
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	e000ed00 	.word	0xe000ed00

08011670 <videoTaskFunc>:

extern "C" void videoTaskFunc(void *argument)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
    videoController.decoderTaskEntry();
 8011678:	4803      	ldr	r0, [pc, #12]	; (8011688 <videoTaskFunc+0x18>)
 801167a:	f000 f934 	bl	80118e6 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
}
 801167e:	bf00      	nop
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	2403ca30 	.word	0x2403ca30

0801168c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8011694:	f7fb f9f2 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	bf0c      	ite	eq
 801169e:	2301      	moveq	r3, #1
 80116a0:	2300      	movne	r3, #0
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d132      	bne.n	801170e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80116a8:	4b1b      	ldr	r3, [pc, #108]	; (8011718 <HAL_LTDC_LineEventCallback+0x8c>)
 80116aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ac:	4a1b      	ldr	r2, [pc, #108]	; (801171c <HAL_LTDC_LineEventCallback+0x90>)
 80116ae:	8812      	ldrh	r2, [r2, #0]
 80116b0:	4293      	cmp	r3, r2
 80116b2:	bf0c      	ite	eq
 80116b4:	2301      	moveq	r3, #1
 80116b6:	2300      	movne	r3, #0
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d017      	beq.n	80116ee <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80116be:	4b18      	ldr	r3, [pc, #96]	; (8011720 <HAL_LTDC_LineEventCallback+0x94>)
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	4619      	mov	r1, r3
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7f2 ffc1 	bl	800464c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80116ca:	f7fb f9d7 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 80116ce:	4603      	mov	r3, r0
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff fc7a 	bl	8010fca <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80116d6:	f7fe fa3f 	bl	800fb58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80116da:	f7fb f9cf 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 80116de:	4603      	mov	r3, r0
 80116e0:	4618      	mov	r0, r3
 80116e2:	f003 fa99 	bl	8014c18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80116e6:	2000      	movs	r0, #0
 80116e8:	f7fc fdd8 	bl	800e29c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80116ec:	e010      	b.n	8011710 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80116ee:	4b0b      	ldr	r3, [pc, #44]	; (801171c <HAL_LTDC_LineEventCallback+0x90>)
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	4619      	mov	r1, r3
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7f2 ffa9 	bl	800464c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80116fa:	f7fb f9bf 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 80116fe:	4603      	mov	r3, r0
 8011700:	4618      	mov	r0, r3
 8011702:	f7ff fc47 	bl	8010f94 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011706:	2000      	movs	r0, #0
 8011708:	f7fc fde4 	bl	800e2d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801170c:	e000      	b.n	8011710 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801170e:	bf00      	nop
        }
    }
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	50001000 	.word	0x50001000
 801171c:	2403ca7a 	.word	0x2403ca7a
 8011720:	2403ca7c 	.word	0x2403ca7c

08011724 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	4a04      	ldr	r2, [pc, #16]	; (8011740 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4618      	mov	r0, r3
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr
 8011740:	08028210 	.word	0x08028210

08011744 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8011744:	b5b0      	push	{r4, r5, r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	4618      	mov	r0, r3
 8011750:	f7ff ffe8 	bl	8011724 <_ZN8touchgfx15VideoControllerC1Ev>
 8011754:	4a25      	ldr	r2, [pc, #148]	; (80117ec <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0xa8>)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	330c      	adds	r3, #12
 801175e:	2400      	movs	r4, #0
 8011760:	461d      	mov	r5, r3
 8011762:	2c00      	cmp	r4, #0
 8011764:	db05      	blt.n	8011772 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x2e>
 8011766:	4628      	mov	r0, r5
 8011768:	f000 f96f 	bl	8011a4a <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 801176c:	3524      	adds	r5, #36	; 0x24
 801176e:	3c01      	subs	r4, #1
 8011770:	e7f7      	b.n	8011762 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev+0x1e>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2200      	movs	r2, #0
 8011776:	631a      	str	r2, [r3, #48]	; 0x30
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	635a      	str	r2, [r3, #52]	; 0x34
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	639a      	str	r2, [r3, #56]	; 0x38
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2200      	movs	r2, #0
 80117a0:	641a      	str	r2, [r3, #64]	; 0x40
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2200      	movs	r2, #0
 80117a6:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3308      	adds	r3, #8
 80117ac:	2204      	movs	r2, #4
 80117ae:	2100      	movs	r1, #0
 80117b0:	4618      	mov	r0, r3
 80117b2:	f013 f8cd 	bl	8024950 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	3304      	adds	r3, #4
 80117ba:	2204      	movs	r2, #4
 80117bc:	2100      	movs	r1, #0
 80117be:	4618      	mov	r0, r3
 80117c0:	f013 f8c6 	bl	8024950 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 80117c4:	2200      	movs	r2, #0
 80117c6:	2100      	movs	r1, #0
 80117c8:	2001      	movs	r0, #1
 80117ca:	f7f7 f9c7 	bl	8008b5c <osSemaphoreNew>
 80117ce:	4602      	mov	r2, r0
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 80117d4:	2000      	movs	r0, #0
 80117d6:	f7f7 f8b3 	bl	8008940 <osMutexNew>
 80117da:	4602      	mov	r2, r0
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	645a      	str	r2, [r3, #68]	; 0x44
    }
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4618      	mov	r0, r3
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bdb0      	pop	{r4, r5, r7, pc}
 80117ea:	bf00      	nop
 80117ec:	080281d0 	.word	0x080281d0

080117f0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d006      	beq.n	8011810 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x20>
 8011802:	4b08      	ldr	r3, [pc, #32]	; (8011824 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x34>)
 8011804:	4a08      	ldr	r2, [pc, #32]	; (8011828 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x38>)
 8011806:	f240 1103 	movw	r1, #259	; 0x103
 801180a:	4808      	ldr	r0, [pc, #32]	; (801182c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801180c:	f012 ff1a 	bl	8024644 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4413      	add	r3, r2
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	605a      	str	r2, [r3, #4]
    }
 801181c:	bf00      	nop
 801181e:	3710      	adds	r7, #16
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	080266b8 	.word	0x080266b8
 8011828:	080266cc 	.word	0x080266cc
 801182c:	08026830 	.word	0x08026830

08011830 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	68ba      	ldr	r2, [r7, #8]
 8011840:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8011850:	bf00      	nop
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv>:

    void endFrame()
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8011864:	2300      	movs	r3, #0
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d120      	bne.n	80118b0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 801186e:	68fa      	ldr	r2, [r7, #12]
 8011870:	4613      	mov	r3, r2
 8011872:	00db      	lsls	r3, r3, #3
 8011874:	4413      	add	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	3308      	adds	r3, #8
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	4413      	add	r3, r2
 801187e:	3304      	adds	r3, #4
 8011880:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	7f5b      	ldrb	r3, [r3, #29]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x36>
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	7f9b      	ldrb	r3, [r3, #30]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00a      	beq.n	80118a8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8011892:	68b9      	ldr	r1, [r7, #8]
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f000 f910 	bl	8011aba <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>
 801189a:	4603      	mov	r3, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	2201      	movs	r2, #1
 80118a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	3301      	adds	r3, #1
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	e7db      	b.n	8011868 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2201      	movs	r2, #1
 80118b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118bc:	4618      	mov	r0, r3
 80118be:	f7f7 fa29 	bl	8008d14 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d008      	beq.n	80118de <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f7 f906 	bl	8008ae2 <osMutexRelease>
            uiHasMutex = false;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 80118de:	bf00      	nop
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:

    void decoderTaskEntry()
 80118e6:	b590      	push	{r4, r7, lr}
 80118e8:	b08b      	sub	sp, #44	; 0x2c
 80118ea:	af02      	add	r7, sp, #8
 80118ec:	6078      	str	r0, [r7, #4]
        // Running in Decoder thread!!

        while (1)
        {
            // Wait for synchronisation signal from UI thread
            SEM_WAIT(semDecode);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f2:	f04f 31ff 	mov.w	r1, #4294967295
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7f7 f9ba 	bl	8008c70 <osSemaphoreAcquire>

            // Lock out the UI by taking the mutex
            MUTEX_LOCK(mutexBuffers);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011900:	f04f 31ff 	mov.w	r1, #4294967295
 8011904:	4618      	mov	r0, r3
 8011906:	f7f7 f8a1 	bl	8008a4c <osMutexAcquire>

            // Update stream flags
            for (uint32_t i = 0; i < no_streams; i++)
 801190a:	2300      	movs	r3, #0
 801190c:	61fb      	str	r3, [r7, #28]
 801190e:	69fb      	ldr	r3, [r7, #28]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d115      	bne.n	8011940 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5a>
            {
                Stream& stream = streams[i];
 8011914:	69fa      	ldr	r2, [r7, #28]
 8011916:	4613      	mov	r3, r2
 8011918:	00db      	lsls	r3, r3, #3
 801191a:	4413      	add	r3, r2
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	3308      	adds	r3, #8
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	4413      	add	r3, r2
 8011924:	3304      	adds	r3, #4
 8011926:	617b      	str	r3, [r7, #20]
                if (stream.doDecode)
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801192e:	2b00      	cmp	r3, #0
 8011930:	d002      	beq.n	8011938 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                {
                    stream.doInvalidateOnNextTick = true;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	2201      	movs	r2, #1
 8011936:	77da      	strb	r2, [r3, #31]
            for (uint32_t i = 0; i < no_streams; i++)
 8011938:	69fb      	ldr	r3, [r7, #28]
 801193a:	3301      	adds	r3, #1
 801193c:	61fb      	str	r3, [r7, #28]
 801193e:	e7e6      	b.n	801190e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x28>
                }
            }

            // Now decode all streams marked for invalidation in next tick
            for (uint32_t i = 0; i < no_streams; i++)
 8011940:	2300      	movs	r3, #0
 8011942:	61bb      	str	r3, [r7, #24]
 8011944:	69bb      	ldr	r3, [r7, #24]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d179      	bne.n	8011a3e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x158>
            {
                Stream& stream = streams[i];
 801194a:	69ba      	ldr	r2, [r7, #24]
 801194c:	4613      	mov	r3, r2
 801194e:	00db      	lsls	r3, r3, #3
 8011950:	4413      	add	r3, r2
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	3308      	adds	r3, #8
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	4413      	add	r3, r2
 801195a:	3304      	adds	r3, #4
 801195c:	613b      	str	r3, [r7, #16]
                if (stream.doDecode)
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011964:	2b00      	cmp	r3, #0
 8011966:	d066      	beq.n	8011a36 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x150>
                {
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	60fb      	str	r3, [r7, #12]
                    // Seek or increment video frame
                    if (stream.seek_to_frame > 0)
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	695b      	ldr	r3, [r3, #20]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00c      	beq.n	8011996 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
                    {
                        decoder->gotoFrame(stream.seek_to_frame);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	3324      	adds	r3, #36	; 0x24
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	693a      	ldr	r2, [r7, #16]
 8011986:	6952      	ldr	r2, [r2, #20]
 8011988:	4611      	mov	r1, r2
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	2200      	movs	r2, #0
 8011992:	615a      	str	r2, [r3, #20]
 8011994:	e01e      	b.n	80119d4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                    }
                    else
                    {
                        if (stream.skip_frames > 0)
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	699b      	ldr	r3, [r3, #24]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d01a      	beq.n	80119d4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xee>
                        {
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3324      	adds	r3, #36	; 0x24
 80119a4:	681c      	ldr	r4, [r3, #0]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3328      	adds	r3, #40	; 0x28
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	4798      	blx	r3
 80119b2:	4602      	mov	r2, r0
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	699b      	ldr	r3, [r3, #24]
 80119b8:	4413      	add	r3, r2
 80119ba:	4619      	mov	r1, r3
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	47a0      	blx	r4
                            stream.frameCount += stream.skip_frames;
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	685a      	ldr	r2, [r3, #4]
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	699b      	ldr	r3, [r3, #24]
 80119c8:	441a      	add	r2, r3
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	605a      	str	r2, [r3, #4]
                            stream.skip_frames = 0;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	2200      	movs	r2, #0
 80119d2:	619a      	str	r2, [r3, #24]
                        }
                    }

                    // Decode frame
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	3314      	adds	r3, #20
 80119da:	681c      	ldr	r4, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	69ba      	ldr	r2, [r7, #24]
 80119e0:	3202      	adds	r2, #2
 80119e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119e6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	23d8      	movs	r3, #216	; 0xd8
 80119ee:	22d8      	movs	r2, #216	; 0xd8
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	47a0      	blx	r4
 80119f4:	4603      	mov	r3, r0
 80119f6:	461a      	mov	r2, r3
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	f883 2020 	strb.w	r2, [r3, #32]
                    stream.frameCount++;
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	1c5a      	adds	r2, r3, #1
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	605a      	str	r2, [r3, #4]

                    // Update frame number
                    if (stream.hasMoreFrames)
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d00a      	beq.n	8011a28 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x142>
                    {
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3328      	adds	r3, #40	; 0x28
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	4798      	blx	r3
 8011a1e:	4603      	mov	r3, r0
 8011a20:	1e5a      	subs	r2, r3, #1
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	e002      	b.n	8011a2e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x148>
                    }
                    else
                    {
                        stream.frameNumber = 1;
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	601a      	str	r2, [r3, #0]
                    }
                    stream.doDecode = false;
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            for (uint32_t i = 0; i < no_streams; i++)
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	61bb      	str	r3, [r7, #24]
 8011a3c:	e782      	b.n	8011944 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                }
            }

            // Release the stream and decode buffer and let UI continue
            MUTEX_UNLOCK(mutexBuffers);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7f7 f84d 	bl	8008ae2 <osMutexRelease>
        while (1)
 8011a48:	e751      	b.n	80118ee <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x8>

08011a4a <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2200      	movs	r2, #0
 8011a56:	601a      	str	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	605a      	str	r2, [r3, #4]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	609a      	str	r2, [r3, #8]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	60da      	str	r2, [r3, #12]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	611a      	str	r2, [r3, #16]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	615a      	str	r2, [r3, #20]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	619a      	str	r2, [r3, #24]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	771a      	strb	r2, [r3, #28]
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2200      	movs	r2, #0
 8011a86:	775a      	strb	r2, [r3, #29]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	779a      	strb	r2, [r3, #30]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	77da      	strb	r2, [r3, #31]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	f883 2020 	strb.w	r2, [r3, #32]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr

08011aba <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8011aba:	b480      	push	{r7}
 8011abc:	b083      	sub	sp, #12
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
 8011ac2:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	683a      	ldr	r2, [r7, #0]
 8011aca:	68d2      	ldr	r2, [r2, #12]
 8011acc:	fb03 f202 	mul.w	r2, r3, r2
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6849      	ldr	r1, [r1, #4]
 8011ad8:	fb01 f303 	mul.w	r3, r1, r3
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d322      	bcc.n	8011b26 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d01b      	beq.n	8011b22 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	683a      	ldr	r2, [r7, #0]
 8011af0:	68d2      	ldr	r2, [r2, #12]
 8011af2:	fb03 f202 	mul.w	r2, r3, r2
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	6839      	ldr	r1, [r7, #0]
 8011afc:	6849      	ldr	r1, [r1, #4]
 8011afe:	fb01 f303 	mul.w	r3, r1, r3
 8011b02:	1ad2      	subs	r2, r2, r3
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	691b      	ldr	r3, [r3, #16]
 8011b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	699b      	ldr	r3, [r3, #24]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d004      	beq.n	8011b22 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	699b      	ldr	r3, [r3, #24]
 8011b1c:	1e5a      	subs	r2, r3, #1
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 8011b22:	2301      	movs	r3, #1
 8011b24:	e000      	b.n	8011b28 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8011b26:	2300      	movs	r3, #0
    }
 8011b28:	4618      	mov	r0, r3
 8011b2a:	370c      	adds	r7, #12
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	4a05      	ldr	r2, [pc, #20]	; (8011b54 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev+0x20>)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff faa1 	bl	801108c <_ZN8touchgfx15VideoControllerD1Ev>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3708      	adds	r7, #8
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	080281d0 	.word	0x080281d0

08011b58 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff ffe7 	bl	8011b34 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
 8011b66:	2148      	movs	r1, #72	; 0x48
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f012 fd3c 	bl	80245e6 <_ZdlPvj>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	4618      	mov	r0, r3
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <_Z41__static_initialization_and_destruction_0ii>:
}
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d10a      	bne.n	8011b9e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d105      	bne.n	8011b9e <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 8011b92:	480c      	ldr	r0, [pc, #48]	; (8011bc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011b94:	f7fc fe5c 	bl	800e850 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 216, 216, 216*2U, Bitmap::RGB565> videoController;
 8011b98:	480b      	ldr	r0, [pc, #44]	; (8011bc8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8011b9a:	f7ff fdd3 	bl	8011744 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EEC1Ev>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10a      	bne.n	8011bba <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d105      	bne.n	8011bba <_Z41__static_initialization_and_destruction_0ii+0x42>
 8011bae:	4806      	ldr	r0, [pc, #24]	; (8011bc8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8011bb0:	f7ff ffc0 	bl	8011b34 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8011bb4:	4803      	ldr	r0, [pc, #12]	; (8011bc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8011bb6:	f7fd ff29 	bl	800fa0c <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8011bba:	bf00      	nop
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	2403c9e8 	.word	0x2403c9e8
 8011bc8:	2403ca30 	.word	0x2403ca30

08011bcc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 8011bd6:	4b1e      	ldr	r3, [pc, #120]	; (8011c50 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8011bd8:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 fa80 	bl	80120e0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>
 8011be0:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 8011be2:	6879      	ldr	r1, [r7, #4]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	4613      	mov	r3, r2
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	4413      	add	r3, r2
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	440b      	add	r3, r1
 8011bf0:	3328      	adds	r3, #40	; 0x28
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bfa:	4b15      	ldr	r3, [pc, #84]	; (8011c50 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8011bfc:	4413      	add	r3, r2
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011c06:	440a      	add	r2, r1
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d905      	bls.n	8011c18 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4c>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8011c0c:	4b11      	ldr	r3, [pc, #68]	; (8011c54 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x88>)
 8011c0e:	4a12      	ldr	r2, [pc, #72]	; (8011c58 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x8c>)
 8011c10:	2152      	movs	r1, #82	; 0x52
 8011c12:	4812      	ldr	r0, [pc, #72]	; (8011c5c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x90>)
 8011c14:	f012 fd16 	bl	8024644 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	3202      	adds	r2, #2
 8011c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c2a:	4b09      	ldr	r3, [pc, #36]	; (8011c50 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 8011c2c:	4413      	add	r3, r2
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	6393      	str	r3, [r2, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8011c32:	23d8      	movs	r3, #216	; 0xd8
 8011c34:	22d8      	movs	r2, #216	; 0xd8
 8011c36:	2100      	movs	r1, #0
 8011c38:	6838      	ldr	r0, [r7, #0]
 8011c3a:	f7ff fa55 	bl	80110e8 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8011c3e:	2100      	movs	r1, #0
 8011c40:	6838      	ldr	r0, [r7, #0]
 8011c42:	f7ff fa43 	bl	80110cc <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 8011c46:	68bb      	ldr	r3, [r7, #8]
    }
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	00016c80 	.word	0x00016c80
 8011c54:	08026870 	.word	0x08026870
 8011c58:	080268ac 	.word	0x080268ac
 8011c5c:	08026830 	.word	0x08026830

08011c60 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7f6 feea 	bl	8008a4c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f6 ff30 	bl	8008ae2 <osMutexRelease>
        streams[handle].isActive = false;
 8011c82:	6879      	ldr	r1, [r7, #4]
 8011c84:	683a      	ldr	r2, [r7, #0]
 8011c86:	4613      	mov	r3, r2
 8011c88:	00db      	lsls	r3, r3, #3
 8011c8a:	4413      	add	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	440b      	add	r3, r1
 8011c90:	3328      	adds	r3, #40	; 0x28
 8011c92:	2200      	movs	r2, #0
 8011c94:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8011c96:	2300      	movs	r3, #0
 8011c98:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	60bb      	str	r3, [r7, #8]
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d114      	bne.n	8011cce <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8011ca4:	6879      	ldr	r1, [r7, #4]
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	4613      	mov	r3, r2
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	4413      	add	r3, r2
 8011cae:	009b      	lsls	r3, r3, #2
 8011cb0:	440b      	add	r3, r1
 8011cb2:	3328      	adds	r3, #40	; 0x28
 8011cb4:	781a      	ldrb	r2, [r3, #0]
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bf14      	ite	ne
 8011cc0:	2301      	movne	r3, #1
 8011cc2:	2300      	moveq	r3, #0
 8011cc4:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	60bb      	str	r3, [r7, #8]
 8011ccc:	e7e7      	b.n	8011c9e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d103      	bne.n	8011cdc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8011cdc:	bf00      	nop
 8011cde:	3710      	adds	r7, #16
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d005      	beq.n	8011d04 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>
 8011cf8:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x54>)
 8011cfa:	4a10      	ldr	r2, [pc, #64]	; (8011d3c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x58>)
 8011cfc:	2182      	movs	r1, #130	; 0x82
 8011cfe:	4810      	ldr	r0, [pc, #64]	; (8011d40 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x5c>)
 8011d00:	f012 fca0 	bl	8024644 <__assert_func>
        Stream& stream = streams[handle];
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	4613      	mov	r3, r2
 8011d08:	00db      	lsls	r3, r3, #3
 8011d0a:	4413      	add	r3, r2
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	3308      	adds	r3, #8
 8011d10:	68fa      	ldr	r2, [r7, #12]
 8011d12:	4413      	add	r3, r2
 8011d14:	3304      	adds	r3, #4
 8011d16:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	2200      	movs	r2, #0
 8011d22:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	60da      	str	r2, [r3, #12]
    }
 8011d30:	bf00      	nop
 8011d32:	3718      	adds	r7, #24
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}
 8011d38:	08026a50 	.word	0x08026a50
 8011d3c:	08026a64 	.word	0x08026a64
 8011d40:	08026830 	.word	0x08026830

08011d44 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b086      	sub	sp, #24
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	60f8      	str	r0, [r7, #12]
 8011d4c:	60b9      	str	r1, [r7, #8]
 8011d4e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d005      	beq.n	8011d62 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8011d56:	4b29      	ldr	r3, [pc, #164]	; (8011dfc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8011d58:	4a29      	ldr	r2, [pc, #164]	; (8011e00 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8011d5a:	21d0      	movs	r1, #208	; 0xd0
 8011d5c:	4829      	ldr	r0, [pc, #164]	; (8011e04 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8011d5e:	f012 fc71 	bl	8024644 <__assert_func>
        Stream& stream = streams[handle];
 8011d62:	68ba      	ldr	r2, [r7, #8]
 8011d64:	4613      	mov	r3, r2
 8011d66:	00db      	lsls	r3, r3, #3
 8011d68:	4413      	add	r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	68fa      	ldr	r2, [r7, #12]
 8011d70:	4413      	add	r3, r2
 8011d72:	3304      	adds	r3, #4
 8011d74:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	7f5b      	ldrb	r3, [r3, #29]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00b      	beq.n	8011d96 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8011d7e:	f7fa fe7d 	bl	800ca7c <_ZN8touchgfx3HAL11getInstanceEv>
 8011d82:	4603      	mov	r3, r0
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff f913 	bl	8010fb0 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	689b      	ldr	r3, [r3, #8]
 8011d90:	441a      	add	r2, r3
 8011d92:	697b      	ldr	r3, [r7, #20]
 8011d94:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	7fdb      	ldrb	r3, [r3, #31]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d029      	beq.n	8011df2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	68ba      	ldr	r2, [r7, #8]
 8011da2:	3202      	adds	r2, #2
 8011da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f7ff f98e 	bl	80110cc <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	3314      	adds	r3, #20
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4610      	mov	r0, r2
 8011dbc:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011dca:	f083 0301 	eor.w	r3, r3, #1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00a      	beq.n	8011dea <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011dda:	f083 0301 	eor.w	r3, r3, #1
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d002      	beq.n	8011dea <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	2200      	movs	r2, #0
 8011de8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011df0:	e000      	b.n	8011df4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8011df2:	2301      	movs	r3, #1
    }
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	08026a50 	.word	0x08026a50
 8011e00:	08026c20 	.word	0x08026c20
 8011e04:	08026830 	.word	0x08026830

08011e08 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b084      	sub	sp, #16
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00e      	beq.n	8011e3e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e24:	f04f 31ff 	mov.w	r1, #4294967295
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f6 fe0f 	bl	8008a4c <osMutexAcquire>
            firstDrawThisFrame = false;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8011e3e:	bf00      	nop
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
	...

08011e48 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
 8011e54:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d005      	beq.n	8011e68 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x20>
 8011e5c:	4b13      	ldr	r3, [pc, #76]	; (8011eac <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x64>)
 8011e5e:	4a14      	ldr	r2, [pc, #80]	; (8011eb0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x68>)
 8011e60:	2190      	movs	r1, #144	; 0x90
 8011e62:	4814      	ldr	r0, [pc, #80]	; (8011eb4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x6c>)
 8011e64:	f012 fbee 	bl	8024644 <__assert_func>
        Stream& stream = streams[handle];
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	3308      	adds	r3, #8
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	4413      	add	r3, r2
 8011e78:	3304      	adds	r3, #4
 8011e7a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	009b      	lsls	r3, r3, #2
 8011e88:	4413      	add	r3, r2
 8011e8a:	6858      	ldr	r0, [r3, #4]
 8011e8c:	68fa      	ldr	r2, [r7, #12]
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3308      	adds	r3, #8
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	683a      	ldr	r2, [r7, #0]
 8011e9e:	6879      	ldr	r1, [r7, #4]
 8011ea0:	4798      	blx	r3
    }
 8011ea2:	bf00      	nop
 8011ea4:	3718      	adds	r7, #24
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	08026a50 	.word	0x08026a50
 8011eb0:	08026dc0 	.word	0x08026dc0
 8011eb4:	08026830 	.word	0x08026830

08011eb8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	4413      	add	r3, r2
 8011ecc:	6858      	ldr	r0, [r3, #4]
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	4413      	add	r3, r2
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	330c      	adds	r3, #12
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	6879      	ldr	r1, [r7, #4]
 8011ee0:	4798      	blx	r3
    }
 8011ee2:	bf00      	nop
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
	...

08011eec <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	603b      	str	r3, [r7, #0]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d005      	beq.n	8011f0e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8011f02:	4b3a      	ldr	r3, [pc, #232]	; (8011fec <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8011f04:	4a3a      	ldr	r2, [pc, #232]	; (8011ff0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8011f06:	21a2      	movs	r1, #162	; 0xa2
 8011f08:	483a      	ldr	r0, [pc, #232]	; (8011ff4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8011f0a:	f012 fb9b 	bl	8024644 <__assert_func>
        Stream& stream = streams[handle];
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	4613      	mov	r3, r2
 8011f12:	00db      	lsls	r3, r3, #3
 8011f14:	4413      	add	r3, r2
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	3308      	adds	r3, #8
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	3304      	adds	r3, #4
 8011f20:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8011f22:	79fb      	ldrb	r3, [r7, #7]
 8011f24:	2b05      	cmp	r3, #5
 8011f26:	d85c      	bhi.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8011f28:	a201      	add	r2, pc, #4	; (adr r2, 8011f30 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8011f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f2e:	bf00      	nop
 8011f30:	08011f49 	.word	0x08011f49
 8011f34:	08011f89 	.word	0x08011f89
 8011f38:	08011f91 	.word	0x08011f91
 8011f3c:	08011fa5 	.word	0x08011fa5
 8011f40:	08011fbf 	.word	0x08011fbf
 8011f44:	08011fcd 	.word	0x08011fcd
            if (mjpegDecoders[handle]->hasVideo())
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	4413      	add	r3, r2
 8011f50:	6859      	ldr	r1, [r3, #4]
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	3310      	adds	r3, #16
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4608      	mov	r0, r1
 8011f64:	4798      	blx	r3
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d039      	beq.n	8011fe0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	2201      	movs	r2, #1
 8011f76:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	2200      	movs	r2, #0
 8011f84:	609a      	str	r2, [r3, #8]
            break;
 8011f86:	e02b      	b.n	8011fe0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	775a      	strb	r2, [r3, #29]
            break;
 8011f8e:	e028      	b.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	683a      	ldr	r2, [r7, #0]
 8011f94:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	609a      	str	r2, [r3, #8]
            break;
 8011fa2:	e01e      	b.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2201      	movs	r2, #1
 8011fae:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	609a      	str	r2, [r3, #8]
            break;
 8011fbc:	e011      	b.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	615a      	str	r2, [r3, #20]
            break;
 8011fca:	e00a      	b.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	bf14      	ite	ne
 8011fd2:	2301      	movne	r3, #1
 8011fd4:	2300      	moveq	r3, #0
 8011fd6:	b2da      	uxtb	r2, r3
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8011fde:	e000      	b.n	8011fe2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8011fe0:	bf00      	nop
    }
 8011fe2:	bf00      	nop
 8011fe4:	3718      	adds	r7, #24
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	08026a50 	.word	0x08026a50
 8011ff0:	08026f9c 	.word	0x08026f9c
 8011ff4:	08026830 	.word	0x08026830

08011ff8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d005      	beq.n	8012014 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>
 8012008:	4b0a      	ldr	r3, [pc, #40]	; (8012034 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x3c>)
 801200a:	4a0b      	ldr	r2, [pc, #44]	; (8012038 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x40>)
 801200c:	2179      	movs	r1, #121	; 0x79
 801200e:	480b      	ldr	r0, [pc, #44]	; (801203c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x44>)
 8012010:	f012 fb18 	bl	8024644 <__assert_func>
        const Stream& stream = streams[handle];
 8012014:	683a      	ldr	r2, [r7, #0]
 8012016:	4613      	mov	r3, r2
 8012018:	00db      	lsls	r3, r3, #3
 801201a:	4413      	add	r3, r2
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	3308      	adds	r3, #8
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	4413      	add	r3, r2
 8012024:	3304      	adds	r3, #4
 8012026:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
    }
 801202c:	4618      	mov	r0, r3
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	08026a50 	.word	0x08026a50
 8012038:	08027170 	.word	0x08027170
 801203c:	08026830 	.word	0x08026830

08012040 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	60b9      	str	r1, [r7, #8]
 801204a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d006      	beq.n	8012060 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8012052:	4b0d      	ldr	r3, [pc, #52]	; (8012088 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8012054:	4a0d      	ldr	r2, [pc, #52]	; (801208c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8012056:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801205a:	480d      	ldr	r0, [pc, #52]	; (8012090 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 801205c:	f012 faf2 	bl	8024644 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	6858      	ldr	r0, [r3, #4]
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	4413      	add	r3, r2
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	3330      	adds	r3, #48	; 0x30
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	6879      	ldr	r1, [r7, #4]
 801207c:	4798      	blx	r3
    }
 801207e:	bf00      	nop
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	08026a50 	.word	0x08026a50
 801208c:	08027324 	.word	0x08027324
 8012090:	08026830 	.word	0x08026830

08012094 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d006      	beq.n	80120b2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1e>
 80120a4:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x40>)
 80120a6:	4a0c      	ldr	r2, [pc, #48]	; (80120d8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x44>)
 80120a8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80120ac:	480b      	ldr	r0, [pc, #44]	; (80120dc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x48>)
 80120ae:	f012 fac9 	bl	8024644 <__assert_func>
        Stream& stream = streams[handle];
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	4613      	mov	r3, r2
 80120b6:	00db      	lsls	r3, r3, #3
 80120b8:	4413      	add	r3, r2
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	3308      	adds	r3, #8
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	4413      	add	r3, r2
 80120c2:	3304      	adds	r3, #4
 80120c4:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	7f5b      	ldrb	r3, [r3, #29]
    }
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	08026a50 	.word	0x08026a50
 80120d8:	080274d4 	.word	0x080274d4
 80120dc:	08026830 	.word	0x08026830

080120e0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv>:

    Handle getFreeHandle()
 80120e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120e2:	b08d      	sub	sp, #52	; 0x34
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 80120e8:	2300      	movs	r3, #0
 80120ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d135      	bne.n	801215e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 80120f2:	6879      	ldr	r1, [r7, #4]
 80120f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120f6:	4613      	mov	r3, r2
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	4413      	add	r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	440b      	add	r3, r1
 8012100:	3328      	adds	r3, #40	; 0x28
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d126      	bne.n	8012156 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8012108:	f107 0308 	add.w	r3, r7, #8
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff fc9c 	bl	8011a4a <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE6StreamC1Ev>
 8012112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012114:	4613      	mov	r3, r2
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	4413      	add	r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	3308      	adds	r3, #8
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	4413      	add	r3, r2
 8012122:	3304      	adds	r3, #4
 8012124:	f107 0408 	add.w	r4, r7, #8
 8012128:	469c      	mov	ip, r3
 801212a:	f104 0e20 	add.w	lr, r4, #32
 801212e:	4665      	mov	r5, ip
 8012130:	4626      	mov	r6, r4
 8012132:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012134:	6028      	str	r0, [r5, #0]
 8012136:	6069      	str	r1, [r5, #4]
 8012138:	60aa      	str	r2, [r5, #8]
 801213a:	60eb      	str	r3, [r5, #12]
 801213c:	3410      	adds	r4, #16
 801213e:	f10c 0c10 	add.w	ip, ip, #16
 8012142:	4574      	cmp	r4, lr
 8012144:	d1f3      	bne.n	801212e <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x4e>
 8012146:	4663      	mov	r3, ip
 8012148:	4622      	mov	r2, r4
 801214a:	8811      	ldrh	r1, [r2, #0]
 801214c:	7892      	ldrb	r2, [r2, #2]
 801214e:	8019      	strh	r1, [r3, #0]
 8012150:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8012152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012154:	e00a      	b.n	801216c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8012156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012158:	3301      	adds	r3, #1
 801215a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801215c:	e7c6      	b.n	80120ec <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 801215e:	4b05      	ldr	r3, [pc, #20]	; (8012174 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x94>)
 8012160:	4a05      	ldr	r2, [pc, #20]	; (8012178 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x98>)
 8012162:	f240 11c5 	movw	r1, #453	; 0x1c5
 8012166:	4805      	ldr	r0, [pc, #20]	; (801217c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE13getFreeHandleEv+0x9c>)
 8012168:	f012 fa6c 	bl	8024644 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 801216c:	4618      	mov	r0, r3
 801216e:	3734      	adds	r7, #52	; 0x34
 8012170:	46bd      	mov	sp, r7
 8012172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012174:	08027660 	.word	0x08027660
 8012178:	08027690 	.word	0x08027690
 801217c:	08026830 	.word	0x08026830

08012180 <_GLOBAL__sub_I_mjpegdecoder1>:
 8012180:	b580      	push	{r7, lr}
 8012182:	af00      	add	r7, sp, #0
 8012184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012188:	2001      	movs	r0, #1
 801218a:	f7ff fcf5 	bl	8011b78 <_Z41__static_initialization_and_destruction_0ii>
 801218e:	bd80      	pop	{r7, pc}

08012190 <_GLOBAL__sub_D_mjpegdecoder1>:
 8012190:	b580      	push	{r7, lr}
 8012192:	af00      	add	r7, sp, #0
 8012194:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012198:	2000      	movs	r0, #0
 801219a:	f7ff fced 	bl	8011b78 <_Z41__static_initialization_and_destruction_0ii>
 801219e:	bd80      	pop	{r7, pc}

080121a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b097      	sub	sp, #92	; 0x5c
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	60f8      	str	r0, [r7, #12]
 80121a8:	60b9      	str	r1, [r7, #8]
 80121aa:	607a      	str	r2, [r7, #4]
 80121ac:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	4a28      	ldr	r2, [pc, #160]	; (8012254 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb4>)
 80121b2:	fba2 2303 	umull	r2, r3, r2, r3
 80121b6:	0a1b      	lsrs	r3, r3, #8
 80121b8:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80121be:	e150      	b.n	8012462 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2c2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 80121c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121c2:	011a      	lsls	r2, r3, #4
 80121c4:	4b24      	ldr	r3, [pc, #144]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80121cc:	011b      	lsls	r3, r3, #4
 80121ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80121d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121d2:	011b      	lsls	r3, r3, #4
 80121d4:	4a20      	ldr	r2, [pc, #128]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 80121d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80121d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80121dc:	fb01 f202 	mul.w	r2, r1, r2
 80121e0:	1a9b      	subs	r3, r3, r2
 80121e2:	62bb      	str	r3, [r7, #40]	; 0x28

    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 216 * 2;
 80121e4:	4b1c      	ldr	r3, [pc, #112]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 80121e6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80121ea:	629a      	str	r2, [r3, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80121ec:	4b1a      	ldr	r3, [pc, #104]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 80121ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121f2:	fb03 f202 	mul.w	r2, r3, r2
 80121f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80121fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012200:	3301      	adds	r3, #1
 8012202:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801220a:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  16; i+=2)
 8012210:	2300      	movs	r3, #0
 8012212:	657b      	str	r3, [r7, #84]	; 0x54
 8012214:	e11d      	b.n	8012452 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
    {
      if(i == 8)
 8012216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012218:	2b08      	cmp	r3, #8
 801221a:	d102      	bne.n	8012222 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      {
        pLum = pInBuffer + 128;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	3380      	adds	r3, #128	; 0x80
 8012220:	637b      	str	r3, [r7, #52]	; 0x34
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 216)
 8012222:	4b0d      	ldr	r3, [pc, #52]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 8012224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012226:	22d8      	movs	r2, #216	; 0xd8
 8012228:	fb02 f303 	mul.w	r3, r2, r3
 801222c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801222e:	429a      	cmp	r2, r3
 8012230:	f080 810c 	bcs.w	801244c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2ac>
      {
        pOutAddr = pOutBuffer + refline;
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012238:	4413      	add	r3, r2
 801223a:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 801223c:	4b06      	ldr	r3, [pc, #24]	; (8012258 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb8>)
 801223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012242:	4413      	add	r3, r2
 8012244:	63fb      	str	r3, [r7, #60]	; 0x3c

        for(k= 0; k<2; k++)
 8012246:	2300      	movs	r3, #0
 8012248:	64fb      	str	r3, [r7, #76]	; 0x4c
 801224a:	e0f2      	b.n	8012432 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x292>
        {
          for(j=0; j < 8; j+=2)
 801224c:	2300      	movs	r3, #0
 801224e:	653b      	str	r3, [r7, #80]	; 0x50
 8012250:	e0e5      	b.n	801241e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x27e>
 8012252:	bf00      	nop
 8012254:	aaaaaaab 	.word	0xaaaaaaab
 8012258:	2403ca80 	.word	0x2403ca80
          {
            cbcomp = (int32_t)(*(pChrom));
 801225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	4a86      	ldr	r2, [pc, #536]	; (8012480 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8012268:	4413      	add	r3, r2
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 801226e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012270:	3340      	adds	r3, #64	; 0x40
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8012276:	69fb      	ldr	r3, [r7, #28]
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	4a82      	ldr	r2, [pc, #520]	; (8012484 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 801227c:	4413      	add	r3, r2
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	4a80      	ldr	r2, [pc, #512]	; (8012488 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e8>)
 8012288:	4413      	add	r3, r2
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	497e      	ldr	r1, [pc, #504]	; (801248c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2ec>)
 8012292:	440b      	add	r3, r1
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	4413      	add	r3, r2
 8012298:	141b      	asrs	r3, r3, #16
 801229a:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 801229c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a0:	4413      	add	r3, r2
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	4413      	add	r3, r2
 80122ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122b0:	4a77      	ldr	r2, [pc, #476]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80122b2:	5cd3      	ldrb	r3, [r2, r3]
 80122b4:	08db      	lsrs	r3, r3, #3
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	02db      	lsls	r3, r3, #11
 80122ba:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80122bc:	6939      	ldr	r1, [r7, #16]
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	440b      	add	r3, r1
 80122c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122c6:	4972      	ldr	r1, [pc, #456]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80122c8:	5ccb      	ldrb	r3, [r1, r3]
 80122ca:	089b      	lsrs	r3, r3, #2
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80122d0:	b21b      	sxth	r3, r3
 80122d2:	4313      	orrs	r3, r2
 80122d4:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80122d6:	6939      	ldr	r1, [r7, #16]
 80122d8:	6a3b      	ldr	r3, [r7, #32]
 80122da:	440b      	add	r3, r1
 80122dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80122e0:	496b      	ldr	r1, [pc, #428]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80122e2:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80122e4:	08db      	lsrs	r3, r3, #3
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	b21b      	sxth	r3, r3
 80122ea:	4313      	orrs	r3, r2
 80122ec:	b21b      	sxth	r3, r3
 80122ee:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80122f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122f2:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80122f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122f6:	3301      	adds	r3, #1
 80122f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122fa:	4413      	add	r3, r2
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012300:	693a      	ldr	r2, [r7, #16]
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	4413      	add	r3, r2
 8012306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801230a:	4a61      	ldr	r2, [pc, #388]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 801230c:	5cd3      	ldrb	r3, [r2, r3]
 801230e:	08db      	lsrs	r3, r3, #3
 8012310:	b2db      	uxtb	r3, r3
 8012312:	02db      	lsls	r3, r3, #11
 8012314:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012316:	6939      	ldr	r1, [r7, #16]
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	440b      	add	r3, r1
 801231c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012320:	495b      	ldr	r1, [pc, #364]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 8012322:	5ccb      	ldrb	r3, [r1, r3]
 8012324:	089b      	lsrs	r3, r3, #2
 8012326:	b2db      	uxtb	r3, r3
 8012328:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801232a:	b21b      	sxth	r3, r3
 801232c:	4313      	orrs	r3, r2
 801232e:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012330:	6939      	ldr	r1, [r7, #16]
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	440b      	add	r3, r1
 8012336:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801233a:	4955      	ldr	r1, [pc, #340]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 801233c:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801233e:	08db      	lsrs	r3, r3, #3
 8012340:	b2db      	uxtb	r3, r3
 8012342:	b21b      	sxth	r3, r3
 8012344:	4313      	orrs	r3, r2
 8012346:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8012348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801234a:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801234c:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 801234e:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 8012350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012352:	3308      	adds	r3, #8
 8012354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012356:	4413      	add	r3, r2
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr2 =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801235c:	693a      	ldr	r2, [r7, #16]
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	4413      	add	r3, r2
 8012362:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012366:	4a4a      	ldr	r2, [pc, #296]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 8012368:	5cd3      	ldrb	r3, [r2, r3]
 801236a:	08db      	lsrs	r3, r3, #3
 801236c:	b2db      	uxtb	r3, r3
 801236e:	02db      	lsls	r3, r3, #11
 8012370:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012372:	6939      	ldr	r1, [r7, #16]
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	440b      	add	r3, r1
 8012378:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801237c:	4944      	ldr	r1, [pc, #272]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 801237e:	5ccb      	ldrb	r3, [r1, r3]
 8012380:	089b      	lsrs	r3, r3, #2
 8012382:	b2db      	uxtb	r3, r3
 8012384:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012386:	b21b      	sxth	r3, r3
 8012388:	4313      	orrs	r3, r2
 801238a:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801238c:	6939      	ldr	r1, [r7, #16]
 801238e:	6a3b      	ldr	r3, [r7, #32]
 8012390:	440b      	add	r3, r1
 8012392:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012396:	493e      	ldr	r1, [pc, #248]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 8012398:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801239a:	08db      	lsrs	r3, r3, #3
 801239c:	b2db      	uxtb	r3, r3
 801239e:	b21b      	sxth	r3, r3
 80123a0:	4313      	orrs	r3, r2
 80123a2:	b21b      	sxth	r3, r3
 80123a4:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 =
 80123a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123a8:	801a      	strh	r2, [r3, #0]

            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 80123aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ac:	3309      	adds	r3, #9
 80123ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123b0:	4413      	add	r3, r2
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	613b      	str	r3, [r7, #16]

            *((__IO uint16_t *)(pOutAddr2 +2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80123b6:	693a      	ldr	r2, [r7, #16]
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	4413      	add	r3, r2
 80123bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123c0:	4a33      	ldr	r2, [pc, #204]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80123c2:	5cd3      	ldrb	r3, [r2, r3]
 80123c4:	08db      	lsrs	r3, r3, #3
 80123c6:	b2db      	uxtb	r3, r3
 80123c8:	02db      	lsls	r3, r3, #11
 80123ca:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80123cc:	6939      	ldr	r1, [r7, #16]
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	440b      	add	r3, r1
 80123d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123d6:	492e      	ldr	r1, [pc, #184]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80123d8:	5ccb      	ldrb	r3, [r1, r3]
 80123da:	089b      	lsrs	r3, r3, #2
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80123e0:	b21b      	sxth	r3, r3
 80123e2:	4313      	orrs	r3, r2
 80123e4:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80123e6:	6939      	ldr	r1, [r7, #16]
 80123e8:	6a3b      	ldr	r3, [r7, #32]
 80123ea:	440b      	add	r3, r1
 80123ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123f0:	4927      	ldr	r1, [pc, #156]	; (8012490 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f0>)
 80123f2:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80123f4:	08db      	lsrs	r3, r3, #3
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	b21b      	sxth	r3, r3
 80123fa:	4313      	orrs	r3, r2
 80123fc:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 80123fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012400:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012402:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) =
 8012404:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8012406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012408:	3304      	adds	r3, #4
 801240a:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 801240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801240e:	3304      	adds	r3, #4
 8012410:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 8012412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012414:	3301      	adds	r3, #1
 8012416:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 8012418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801241a:	3302      	adds	r3, #2
 801241c:	653b      	str	r3, [r7, #80]	; 0x50
 801241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012420:	2b07      	cmp	r3, #7
 8012422:	f67f af1b 	bls.w	801225c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xbc>
          }
          pLum += 64;
 8012426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012428:	3340      	adds	r3, #64	; 0x40
 801242a:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 801242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801242e:	3301      	adds	r3, #1
 8012430:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012434:	2b01      	cmp	r3, #1
 8012436:	f67f af09 	bls.w	801224c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
        }

        pLum = pLum - 128 + 16;
 801243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801243c:	3b70      	subs	r3, #112	; 0x70
 801243e:	637b      	str	r3, [r7, #52]	; 0x34

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
 8012440:	4b14      	ldr	r3, [pc, #80]	; (8012494 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2f4>)
 8012442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012448:	4413      	add	r3, r2
 801244a:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 801244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801244e:	3302      	adds	r3, #2
 8012450:	657b      	str	r3, [r7, #84]	; 0x54
 8012452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012454:	2b0f      	cmp	r3, #15
 8012456:	f67f aede 	bls.w	8012216 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x76>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012460:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	4413      	add	r3, r2
 8012468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801246a:	429a      	cmp	r2, r3
 801246c:	f4ff aea8 	bcc.w	80121c0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8012470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8012472:	4618      	mov	r0, r3
 8012474:	375c      	adds	r7, #92	; 0x5c
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	2403cec0 	.word	0x2403cec0
 8012484:	2403cac0 	.word	0x2403cac0
 8012488:	2403d2c0 	.word	0x2403d2c0
 801248c:	2403d6c0 	.word	0x2403d6c0
 8012490:	0802831c 	.word	0x0802831c
 8012494:	2403ca80 	.word	0x2403ca80

08012498 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8012498:	b480      	push	{r7}
 801249a:	b097      	sub	sp, #92	; 0x5c
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	60b9      	str	r1, [r7, #8]
 80124a2:	607a      	str	r2, [r7, #4]
 80124a4:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	0a1b      	lsrs	r3, r3, #8
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	64bb      	str	r3, [r7, #72]	; 0x48

  while(currentMCU < (numberMCU + BlockIndex))
 80124b0:	e0d9      	b.n	8012666 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 80124b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124b4:	011a      	lsls	r2, r3, #4
 80124b6:	4b73      	ldr	r3, [pc, #460]	; (8012684 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80124b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	633b      	str	r3, [r7, #48]	; 0x30

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 80124c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124c4:	011b      	lsls	r3, r3, #4
 80124c6:	4a6f      	ldr	r2, [pc, #444]	; (8012684 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80124c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80124ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80124ce:	fb01 f202 	mul.w	r2, r1, r2
 80124d2:	1a9b      	subs	r3, r3, r2
 80124d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80124d6:	4b6b      	ldr	r3, [pc, #428]	; (8012684 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80124d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124dc:	fb03 f202 	mul.w	r2, r3, r2
 80124e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e2:	005b      	lsls	r3, r3, #1
 80124e4:	4413      	add	r3, r2
 80124e6:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80124e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124ea:	3301      	adds	r3, #1
 80124ec:	64bb      	str	r3, [r7, #72]	; 0x48

    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	3380      	adds	r3, #128	; 0x80
 80124f2:	63fb      	str	r3, [r7, #60]	; 0x3c

    pLum = pInBuffer;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	63bb      	str	r3, [r7, #56]	; 0x38

    for(i= 0; i <  8; i++)
 80124f8:	2300      	movs	r3, #0
 80124fa:	657b      	str	r3, [r7, #84]	; 0x54
 80124fc:	e0ab      	b.n	8012656 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80124fe:	4b61      	ldr	r3, [pc, #388]	; (8012684 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8012500:	691b      	ldr	r3, [r3, #16]
 8012502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012504:	429a      	cmp	r2, r3
 8012506:	f080 80a3 	bcs.w	8012650 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 801250a:	68ba      	ldr	r2, [r7, #8]
 801250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801250e:	4413      	add	r3, r2
 8012510:	643b      	str	r3, [r7, #64]	; 0x40

        for(k= 0; k<2; k++)
 8012512:	2300      	movs	r3, #0
 8012514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012516:	e08f      	b.n	8012638 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 8012518:	2300      	movs	r3, #0
 801251a:	653b      	str	r3, [r7, #80]	; 0x50
 801251c:	e082      	b.n	8012624 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {
            cbcomp = (int32_t)(*(pChrom));
 801251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	4a57      	ldr	r2, [pc, #348]	; (8012688 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 801252a:	4413      	add	r3, r2
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	627b      	str	r3, [r7, #36]	; 0x24

            crcomp = (int32_t)(*(pChrom + 64));
 8012530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012532:	3340      	adds	r3, #64	; 0x40
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 8012538:	6a3b      	ldr	r3, [r7, #32]
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	4a53      	ldr	r2, [pc, #332]	; (801268c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 801253e:	4413      	add	r3, r2
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	61fb      	str	r3, [r7, #28]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8012544:	6a3b      	ldr	r3, [r7, #32]
 8012546:	009b      	lsls	r3, r3, #2
 8012548:	4a51      	ldr	r2, [pc, #324]	; (8012690 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 801254a:	4413      	add	r3, r2
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012550:	009b      	lsls	r3, r3, #2
 8012552:	4950      	ldr	r1, [pc, #320]	; (8012694 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 8012554:	440b      	add	r3, r1
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	4413      	add	r3, r2
 801255a:	141b      	asrs	r3, r3, #16
 801255c:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 801255e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012562:	4413      	add	r3, r2
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	617b      	str	r3, [r7, #20]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	4413      	add	r3, r2
 801256e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012572:	4a49      	ldr	r2, [pc, #292]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8012574:	5cd3      	ldrb	r3, [r2, r3]
 8012576:	08db      	lsrs	r3, r3, #3
 8012578:	b2db      	uxtb	r3, r3
 801257a:	02db      	lsls	r3, r3, #11
 801257c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801257e:	6979      	ldr	r1, [r7, #20]
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	440b      	add	r3, r1
 8012584:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012588:	4943      	ldr	r1, [pc, #268]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801258a:	5ccb      	ldrb	r3, [r1, r3]
 801258c:	089b      	lsrs	r3, r3, #2
 801258e:	b2db      	uxtb	r3, r3
 8012590:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012592:	b21b      	sxth	r3, r3
 8012594:	4313      	orrs	r3, r2
 8012596:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8012598:	6979      	ldr	r1, [r7, #20]
 801259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259c:	440b      	add	r3, r1
 801259e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80125a2:	493d      	ldr	r1, [pc, #244]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80125a4:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80125a6:	08db      	lsrs	r3, r3, #3
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	b21b      	sxth	r3, r3
 80125ac:	4313      	orrs	r3, r2
 80125ae:	b21b      	sxth	r3, r3
 80125b0:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80125b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b4:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80125b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125b8:	3301      	adds	r3, #1
 80125ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125bc:	4413      	add	r3, r2
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	617b      	str	r3, [r7, #20]

            *((__IO uint16_t *)(pOutAddr + 2)) =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80125c2:	697a      	ldr	r2, [r7, #20]
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	4413      	add	r3, r2
 80125c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80125cc:	4a32      	ldr	r2, [pc, #200]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80125ce:	5cd3      	ldrb	r3, [r2, r3]
 80125d0:	08db      	lsrs	r3, r3, #3
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	02db      	lsls	r3, r3, #11
 80125d6:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80125d8:	6979      	ldr	r1, [r7, #20]
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	440b      	add	r3, r1
 80125de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80125e2:	492d      	ldr	r1, [pc, #180]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80125e4:	5ccb      	ldrb	r3, [r1, r3]
 80125e6:	089b      	lsrs	r3, r3, #2
 80125e8:	b2db      	uxtb	r3, r3
 80125ea:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80125ec:	b21b      	sxth	r3, r3
 80125ee:	4313      	orrs	r3, r2
 80125f0:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80125f2:	6979      	ldr	r1, [r7, #20]
 80125f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f6:	440b      	add	r3, r1
 80125f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80125fc:	4926      	ldr	r1, [pc, #152]	; (8012698 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80125fe:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012600:	08db      	lsrs	r3, r3, #3
 8012602:	b2db      	uxtb	r3, r3
 8012604:	b21b      	sxth	r3, r3
 8012606:	4313      	orrs	r3, r2
 8012608:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) =
 801260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801260c:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801260e:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) =
 8012610:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT*/

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 8012612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012614:	3304      	adds	r3, #4
 8012616:	643b      	str	r3, [r7, #64]	; 0x40

            pChrom++;
 8012618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801261a:	3301      	adds	r3, #1
 801261c:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 801261e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012620:	3302      	adds	r3, #2
 8012622:	653b      	str	r3, [r7, #80]	; 0x50
 8012624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012626:	2b07      	cmp	r3, #7
 8012628:	f67f af79 	bls.w	801251e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;
 801262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262e:	3340      	adds	r3, #64	; 0x40
 8012630:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 8012632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012634:	3301      	adds	r3, #1
 8012636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801263a:	2b01      	cmp	r3, #1
 801263c:	f67f af6c 	bls.w	8012518 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }

        pLum = pLum - 128 + 8;
 8012640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012642:	3b78      	subs	r3, #120	; 0x78
 8012644:	63bb      	str	r3, [r7, #56]	; 0x38

        refline += JPEG_ConvertorParams.ScaledWidth;
 8012646:	4b0f      	ldr	r3, [pc, #60]	; (8012684 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8012648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801264a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801264c:	4413      	add	r3, r2
 801264e:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 8012650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012652:	3301      	adds	r3, #1
 8012654:	657b      	str	r3, [r7, #84]	; 0x54
 8012656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012658:	2b07      	cmp	r3, #7
 801265a:	f67f af50 	bls.w	80124fe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012664:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4413      	add	r3, r2
 801266c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801266e:	429a      	cmp	r2, r3
 8012670:	f4ff af1f 	bcc.w	80124b2 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8012674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012676:	4618      	mov	r0, r3
 8012678:	375c      	adds	r7, #92	; 0x5c
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	2403ca80 	.word	0x2403ca80
 8012688:	2403cec0 	.word	0x2403cec0
 801268c:	2403cac0 	.word	0x2403cac0
 8012690:	2403d2c0 	.word	0x2403d2c0
 8012694:	2403d6c0 	.word	0x2403d6c0
 8012698:	0802831c 	.word	0x0802831c

0801269c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 801269c:	b480      	push	{r7}
 801269e:	b095      	sub	sp, #84	; 0x54
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
 80126a8:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	4a58      	ldr	r2, [pc, #352]	; (8012810 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 80126ae:	fba2 2303 	umull	r2, r3, r2, r3
 80126b2:	09db      	lsrs	r3, r3, #7
 80126b4:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	647b      	str	r3, [r7, #68]	; 0x44

  while(currentMCU < (numberMCU + BlockIndex))
 80126ba:	e09a      	b.n	80127f2 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80126bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126be:	00da      	lsls	r2, r3, #3
 80126c0:	4b54      	ldr	r3, [pc, #336]	; (8012814 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80126c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80126cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ce:	00db      	lsls	r3, r3, #3
 80126d0:	4a50      	ldr	r2, [pc, #320]	; (8012814 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80126d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80126d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80126d8:	fb01 f202 	mul.w	r2, r1, r2
 80126dc:	1a9b      	subs	r3, r3, r2
 80126de:	62bb      	str	r3, [r7, #40]	; 0x28

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80126e0:	4b4c      	ldr	r3, [pc, #304]	; (8012814 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80126e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126e6:	fb03 f202 	mul.w	r2, r3, r2
 80126ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ec:	005b      	lsls	r3, r3, #1
 80126ee:	4413      	add	r3, r2
 80126f0:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;
 80126f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126f4:	3301      	adds	r3, #1
 80126f6:	647b      	str	r3, [r7, #68]	; 0x44

    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	3340      	adds	r3, #64	; 0x40
 80126fc:	63bb      	str	r3, [r7, #56]	; 0x38

    pLum = pInBuffer;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	637b      	str	r3, [r7, #52]	; 0x34

    for(i= 0; i <  8; i++)
 8012702:	2300      	movs	r3, #0
 8012704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012706:	e06e      	b.n	80127e6 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8012708:	4b42      	ldr	r3, [pc, #264]	; (8012814 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801270a:	691b      	ldr	r3, [r3, #16]
 801270c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801270e:	429a      	cmp	r2, r3
 8012710:	d266      	bcs.n	80127e0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 8012712:	68ba      	ldr	r2, [r7, #8]
 8012714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012716:	4413      	add	r3, r2
 8012718:	63fb      	str	r3, [r7, #60]	; 0x3c

          for(j=0; j < 8; j++)
 801271a:	2300      	movs	r3, #0
 801271c:	64bb      	str	r3, [r7, #72]	; 0x48
 801271e:	e054      	b.n	80127ca <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {
            cbcomp = (int32_t)(*pChrom);
 8012720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	4a3b      	ldr	r2, [pc, #236]	; (8012818 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 801272c:	4413      	add	r3, r2
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	623b      	str	r3, [r7, #32]

            crcomp = (int32_t)(*(pChrom + 64));
 8012732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012734:	3340      	adds	r3, #64	; 0x40
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4a37      	ldr	r2, [pc, #220]	; (801281c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 8012740:	4413      	add	r3, r2
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	61bb      	str	r3, [r7, #24]

            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4a35      	ldr	r2, [pc, #212]	; (8012820 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 801274c:	4413      	add	r3, r2
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	4933      	ldr	r1, [pc, #204]	; (8012824 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 8012756:	440b      	add	r3, r1
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4413      	add	r3, r2
 801275c:	141b      	asrs	r3, r3, #16
 801275e:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));
 8012760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012764:	4413      	add	r3, r2
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	613b      	str	r3, [r7, #16]

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801276a:	693a      	ldr	r2, [r7, #16]
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	4413      	add	r3, r2
 8012770:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012774:	4a2c      	ldr	r2, [pc, #176]	; (8012828 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8012776:	5cd3      	ldrb	r3, [r2, r3]
 8012778:	08db      	lsrs	r3, r3, #3
 801277a:	b2db      	uxtb	r3, r3
 801277c:	02db      	lsls	r3, r3, #11
 801277e:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8012780:	6939      	ldr	r1, [r7, #16]
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	440b      	add	r3, r1
 8012786:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801278a:	4927      	ldr	r1, [pc, #156]	; (8012828 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 801278c:	5ccb      	ldrb	r3, [r1, r3]
 801278e:	089b      	lsrs	r3, r3, #2
 8012790:	b2db      	uxtb	r3, r3
 8012792:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8012794:	b21b      	sxth	r3, r3
 8012796:	4313      	orrs	r3, r2
 8012798:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 801279a:	6939      	ldr	r1, [r7, #16]
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	440b      	add	r3, r1
 80127a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80127a4:	4920      	ldr	r1, [pc, #128]	; (8012828 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 80127a6:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80127a8:	08db      	lsrs	r3, r3, #3
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	b21b      	sxth	r3, r3
 80127ae:	4313      	orrs	r3, r2
 80127b0:	b21b      	sxth	r3, r3
 80127b2:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr =
 80127b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b6:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80127b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127ba:	3302      	adds	r3, #2
 80127bc:	63fb      	str	r3, [r7, #60]	; 0x3c

            pChrom++;
 80127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c0:	3301      	adds	r3, #1
 80127c2:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 80127c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127c6:	3301      	adds	r3, #1
 80127c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80127ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127cc:	2b07      	cmp	r3, #7
 80127ce:	d9a7      	bls.n	8012720 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 80127d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127d2:	3308      	adds	r3, #8
 80127d4:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;
 80127d6:	4b0f      	ldr	r3, [pc, #60]	; (8012814 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80127d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127dc:	4413      	add	r3, r2
 80127de:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 80127e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127e2:	3301      	adds	r3, #1
 80127e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127e8:	2b07      	cmp	r3, #7
 80127ea:	d98d      	bls.n	8012708 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	33c0      	adds	r3, #192	; 0xc0
 80127f0:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80127f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4413      	add	r3, r2
 80127f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127fa:	429a      	cmp	r2, r3
 80127fc:	f4ff af5e 	bcc.w	80126bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 8012800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8012802:	4618      	mov	r0, r3
 8012804:	3754      	adds	r7, #84	; 0x54
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	aaaaaaab 	.word	0xaaaaaaab
 8012814:	2403ca80 	.word	0x2403ca80
 8012818:	2403cec0 	.word	0x2403cec0
 801281c:	2403cac0 	.word	0x2403cac0
 8012820:	2403d2c0 	.word	0x2403d2c0
 8012824:	2403d6c0 	.word	0x2403d6c0
 8012828:	0802831c 	.word	0x0802831c

0801282c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 801282c:	b480      	push	{r7}
 801282e:	b08f      	sub	sp, #60	; 0x3c
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
 8012838:	603b      	str	r3, [r7, #0]
  uint32_t refline;

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	099b      	lsrs	r3, r3, #6
 801283e:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	637b      	str	r3, [r7, #52]	; 0x34

  while(currentMCU < (numberMCU + BlockIndex))
 8012844:	e05e      	b.n	8012904 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8012846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012848:	00da      	lsls	r2, r3, #3
 801284a:	4b35      	ldr	r3, [pc, #212]	; (8012920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012852:	00db      	lsls	r3, r3, #3
 8012854:	61bb      	str	r3, [r7, #24]

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8012856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012858:	00db      	lsls	r3, r3, #3
 801285a:	4a31      	ldr	r2, [pc, #196]	; (8012920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801285c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801285e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012862:	fb01 f202 	mul.w	r2, r1, r2
 8012866:	1a9b      	subs	r3, r3, r2
 8012868:	617b      	str	r3, [r7, #20]

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801286a:	4b2d      	ldr	r3, [pc, #180]	; (8012920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 801286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801286e:	69ba      	ldr	r2, [r7, #24]
 8012870:	fb03 f202 	mul.w	r2, r3, r2
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	005b      	lsls	r3, r3, #1
 8012878:	4413      	add	r3, r2
 801287a:	633b      	str	r3, [r7, #48]	; 0x30

    currentMCU++;
 801287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801287e:	3301      	adds	r3, #1
 8012880:	637b      	str	r3, [r7, #52]	; 0x34

    pLum = pInBuffer;
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	623b      	str	r3, [r7, #32]

    for(i= 0; i <  8; i++)
 8012886:	2300      	movs	r3, #0
 8012888:	62fb      	str	r3, [r7, #44]	; 0x2c
 801288a:	e035      	b.n	80128f8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    {
      pOutAddr = pOutBuffer + refline;
 801288c:	68ba      	ldr	r2, [r7, #8]
 801288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012890:	4413      	add	r3, r2
 8012892:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8012894:	4b22      	ldr	r3, [pc, #136]	; (8012920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8012896:	691b      	ldr	r3, [r3, #16]
 8012898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801289a:	429a      	cmp	r2, r3
 801289c:	d229      	bcs.n	80128f2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {
        for(j=0; j < 8; j++)
 801289e:	2300      	movs	r3, #0
 80128a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128a2:	e01e      	b.n	80128e2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        {
          ySample =   (uint32_t)(*pLum);
 80128a4:	6a3b      	ldr	r3, [r7, #32]
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	08db      	lsrs	r3, r3, #3
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	02db      	lsls	r3, r3, #11
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	089b      	lsrs	r3, r3, #2
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	015b      	lsls	r3, r3, #5
 80128bc:	b29b      	uxth	r3, r3
 80128be:	4313      	orrs	r3, r2
 80128c0:	b29a      	uxth	r2, r3
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	08db      	lsrs	r3, r3, #3
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	4313      	orrs	r3, r2
 80128ca:	b29a      	uxth	r2, r3
 80128cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ce:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

          pOutAddr += JPEG_BYTES_PER_PIXEL;
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	3302      	adds	r3, #2
 80128d4:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 80128d6:	6a3b      	ldr	r3, [r7, #32]
 80128d8:	3301      	adds	r3, #1
 80128da:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 80128dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128de:	3301      	adds	r3, #1
 80128e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e4:	2b07      	cmp	r3, #7
 80128e6:	d9dd      	bls.n	80128a4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;
 80128e8:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80128ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128ee:	4413      	add	r3, r2
 80128f0:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	3301      	adds	r3, #1
 80128f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fa:	2b07      	cmp	r3, #7
 80128fc:	d9c6      	bls.n	801288c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	3340      	adds	r3, #64	; 0x40
 8012902:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012904:	69fa      	ldr	r2, [r7, #28]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	4413      	add	r3, r2
 801290a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801290c:	429a      	cmp	r2, r3
 801290e:	d39a      	bcc.n	8012846 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8012910:	69fb      	ldr	r3, [r7, #28]
}
 8012912:	4618      	mov	r0, r3
 8012914:	373c      	adds	r7, #60	; 0x3c
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	2403ca80 	.word	0x2403ca80

08012924 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 8012924:	b480      	push	{r7}
 8012926:	b093      	sub	sp, #76	; 0x4c
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
 8012930:	603b      	str	r3, [r7, #0]

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	0a1b      	lsrs	r3, r3, #8
 8012936:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while(currentMCU < (numberMCU + BlockIndex))
 801293c:	e08b      	b.n	8012a56 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 801293e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012940:	00da      	lsls	r2, r3, #3
 8012942:	4b4c      	ldr	r3, [pc, #304]	; (8012a74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012946:	fbb2 f3f3 	udiv	r3, r2, r3
 801294a:	00db      	lsls	r3, r3, #3
 801294c:	62bb      	str	r3, [r7, #40]	; 0x28

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 801294e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012950:	00db      	lsls	r3, r3, #3
 8012952:	4a48      	ldr	r2, [pc, #288]	; (8012a74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012956:	fbb3 f1f2 	udiv	r1, r3, r2
 801295a:	fb01 f202 	mul.w	r2, r1, r2
 801295e:	1a9b      	subs	r3, r3, r2
 8012960:	627b      	str	r3, [r7, #36]	; 0x24

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8012962:	4b44      	ldr	r3, [pc, #272]	; (8012a74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012968:	fb03 f202 	mul.w	r2, r3, r2
 801296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296e:	005b      	lsls	r3, r3, #1
 8012970:	4413      	add	r3, r2
 8012972:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8012974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012976:	3301      	adds	r3, #1
 8012978:	63fb      	str	r3, [r7, #60]	; 0x3c

    pChrom = pInBuffer;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	633b      	str	r3, [r7, #48]	; 0x30

    for(i= 0; i <  8; i++)
 801297e:	2300      	movs	r3, #0
 8012980:	647b      	str	r3, [r7, #68]	; 0x44
 8012982:	e061      	b.n	8012a48 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8012984:	4b3b      	ldr	r3, [pc, #236]	; (8012a74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012986:	691b      	ldr	r3, [r3, #16]
 8012988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801298a:	429a      	cmp	r2, r3
 801298c:	d259      	bcs.n	8012a42 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;
 801298e:	68ba      	ldr	r2, [r7, #8]
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	4413      	add	r3, r2
 8012994:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8012996:	2300      	movs	r3, #0
 8012998:	643b      	str	r3, [r7, #64]	; 0x40
 801299a:	e04a      	b.n	8012a32 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {
            color_k = (int32_t)(*(pChrom + 192));
 801299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299e:	33c0      	adds	r3, #192	; 0xc0
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	461a      	mov	r2, r3
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	fb02 f303 	mul.w	r3, r2, r3
 80129b0:	4a31      	ldr	r2, [pc, #196]	; (8012a78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80129b2:	fb82 1203 	smull	r1, r2, r2, r3
 80129b6:	441a      	add	r2, r3
 80129b8:	11d2      	asrs	r2, r2, #7
 80129ba:	17db      	asrs	r3, r3, #31
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	61fb      	str	r3, [r7, #28]

            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	3340      	adds	r3, #64	; 0x40
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	461a      	mov	r2, r3
 80129c8:	6a3b      	ldr	r3, [r7, #32]
 80129ca:	fb02 f303 	mul.w	r3, r2, r3
 80129ce:	4a2a      	ldr	r2, [pc, #168]	; (8012a78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80129d0:	fb82 1203 	smull	r1, r2, r2, r3
 80129d4:	441a      	add	r2, r3
 80129d6:	11d2      	asrs	r2, r2, #7
 80129d8:	17db      	asrs	r3, r3, #31
 80129da:	1ad3      	subs	r3, r2, r3
 80129dc:	61bb      	str	r3, [r7, #24]

            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 80129de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e0:	3380      	adds	r3, #128	; 0x80
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	461a      	mov	r2, r3
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	fb02 f303 	mul.w	r3, r2, r3
 80129ec:	4a22      	ldr	r2, [pc, #136]	; (8012a78 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 80129ee:	fb82 1203 	smull	r1, r2, r2, r3
 80129f2:	441a      	add	r2, r3
 80129f4:	11d2      	asrs	r2, r2, #7
 80129f6:	17db      	asrs	r3, r3, #31
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

          *(__IO uint16_t *)pOutAddr =
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	10db      	asrs	r3, r3, #3
 8012a00:	02db      	lsls	r3, r3, #11
 8012a02:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	109b      	asrs	r3, r3, #2
 8012a08:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 8012a0a:	b21b      	sxth	r3, r3
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 8012a14:	b21b      	sxth	r3, r3
 8012a16:	4313      	orrs	r3, r2
 8012a18:	b21b      	sxth	r3, r3
 8012a1a:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr =
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	801a      	strh	r2, [r3, #0]

#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8012a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a22:	3302      	adds	r3, #2
 8012a24:	637b      	str	r3, [r7, #52]	; 0x34

            pChrom++;
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	3301      	adds	r3, #1
 8012a2a:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 8012a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a2e:	3301      	adds	r3, #1
 8012a30:	643b      	str	r3, [r7, #64]	; 0x40
 8012a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a34:	2b07      	cmp	r3, #7
 8012a36:	d9b1      	bls.n	801299c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;
 8012a38:	4b0e      	ldr	r3, [pc, #56]	; (8012a74 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8012a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a3e:	4413      	add	r3, r2
 8012a40:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 8012a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a44:	3301      	adds	r3, #1
 8012a46:	647b      	str	r3, [r7, #68]	; 0x44
 8012a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a4a:	2b07      	cmp	r3, #7
 8012a4c:	d99a      	bls.n	8012984 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012a54:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8012a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	f4ff af6d 	bcc.w	801293e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	374c      	adds	r7, #76	; 0x4c
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	2403ca80 	.word	0x2403ca80
 8012a78:	80808081 	.word	0x80808081

08012a7c <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b087      	sub	sp, #28
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	4a7a      	ldr	r2, [pc, #488]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a8e:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	4a78      	ldr	r2, [pc, #480]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a96:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	689b      	ldr	r3, [r3, #8]
 8012a9c:	4a76      	ldr	r2, [pc, #472]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012a9e:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	68fa      	ldr	r2, [r7, #12]
 8012aa6:	6892      	ldr	r2, [r2, #8]
 8012aa8:	fb02 f303 	mul.w	r3, r2, r3
 8012aac:	005b      	lsls	r3, r3, #1
 8012aae:	4a72      	ldr	r2, [pc, #456]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ab0:	6113      	str	r3, [r2, #16]

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	4a70      	ldr	r2, [pc, #448]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ab8:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8012aba:	4b6f      	ldr	r3, [pc, #444]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b10      	cmp	r3, #16
 8012ac0:	d155      	bne.n	8012b6e <TGFX_JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8012ac2:	4b6d      	ldr	r3, [pc, #436]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d119      	bne.n	8012afe <TGFX_JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	4a6b      	ldr	r2, [pc, #428]	; (8012c7c <TGFX_JPEG_GetDecodeColorConvertFunc+0x200>)
 8012ace:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8012ad0:	4b69      	ldr	r3, [pc, #420]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	f003 030f 	and.w	r3, r3, #15
 8012ad8:	4a67      	ldr	r2, [pc, #412]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ada:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8012adc:	4b66      	ldr	r3, [pc, #408]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ade:	695b      	ldr	r3, [r3, #20]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d005      	beq.n	8012af0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8012ae4:	4b64      	ldr	r3, [pc, #400]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ae6:	695b      	ldr	r3, [r3, #20]
 8012ae8:	f1c3 0310 	rsb	r3, r3, #16
 8012aec:	4a62      	ldr	r2, [pc, #392]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012aee:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8012af0:	4b61      	ldr	r3, [pc, #388]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012af2:	2210      	movs	r2, #16
 8012af4:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 8012af6:	4b60      	ldr	r3, [pc, #384]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012af8:	2210      	movs	r2, #16
 8012afa:	621a      	str	r2, [r3, #32]
 8012afc:	e075      	b.n	8012bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8012afe:	4b5e      	ldr	r3, [pc, #376]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	d119      	bne.n	8012b3a <TGFX_JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	4a5d      	ldr	r2, [pc, #372]	; (8012c80 <TGFX_JPEG_GetDecodeColorConvertFunc+0x204>)
 8012b0a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 8012b0c:	4b5a      	ldr	r3, [pc, #360]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	f003 030f 	and.w	r3, r3, #15
 8012b14:	4a58      	ldr	r2, [pc, #352]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b16:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8012b18:	4b57      	ldr	r3, [pc, #348]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d005      	beq.n	8012b2c <TGFX_JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
 8012b20:	4b55      	ldr	r3, [pc, #340]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b22:	695b      	ldr	r3, [r3, #20]
 8012b24:	f1c3 0310 	rsb	r3, r3, #16
 8012b28:	4a53      	ldr	r2, [pc, #332]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b2a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 8012b2c:	4b52      	ldr	r3, [pc, #328]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b2e:	2210      	movs	r2, #16
 8012b30:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8012b32:	4b51      	ldr	r3, [pc, #324]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b34:	2208      	movs	r2, #8
 8012b36:	621a      	str	r2, [r3, #32]
 8012b38:	e057      	b.n	8012bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	4a51      	ldr	r2, [pc, #324]	; (8012c84 <TGFX_JPEG_GetDecodeColorConvertFunc+0x208>)
 8012b3e:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012b40:	4b4d      	ldr	r3, [pc, #308]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b42:	689b      	ldr	r3, [r3, #8]
 8012b44:	f003 0307 	and.w	r3, r3, #7
 8012b48:	4a4b      	ldr	r2, [pc, #300]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b4a:	6153      	str	r3, [r2, #20]

      if(JPEG_ConvertorParams.LineOffset != 0)
 8012b4c:	4b4a      	ldr	r3, [pc, #296]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b4e:	695b      	ldr	r3, [r3, #20]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d005      	beq.n	8012b60 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8012b54:	4b48      	ldr	r3, [pc, #288]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b56:	695b      	ldr	r3, [r3, #20]
 8012b58:	f1c3 0308 	rsb	r3, r3, #8
 8012b5c:	4a46      	ldr	r2, [pc, #280]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b5e:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8012b60:	4b45      	ldr	r3, [pc, #276]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b62:	2208      	movs	r2, #8
 8012b64:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8012b66:	4b44      	ldr	r3, [pc, #272]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b68:	2208      	movs	r2, #8
 8012b6a:	621a      	str	r2, [r3, #32]
 8012b6c:	e03d      	b.n	8012bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8012b6e:	4b42      	ldr	r3, [pc, #264]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d119      	bne.n	8012baa <TGFX_JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	4a43      	ldr	r2, [pc, #268]	; (8012c88 <TGFX_JPEG_GetDecodeColorConvertFunc+0x20c>)
 8012b7a:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012b7c:	4b3e      	ldr	r3, [pc, #248]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	f003 0307 	and.w	r3, r3, #7
 8012b84:	4a3c      	ldr	r2, [pc, #240]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b86:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8012b88:	4b3b      	ldr	r3, [pc, #236]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b8a:	695b      	ldr	r3, [r3, #20]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d005      	beq.n	8012b9c <TGFX_JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8012b90:	4b39      	ldr	r3, [pc, #228]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b92:	695b      	ldr	r3, [r3, #20]
 8012b94:	f1c3 0308 	rsb	r3, r3, #8
 8012b98:	4a37      	ldr	r2, [pc, #220]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b9a:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8012b9c:	4b36      	ldr	r3, [pc, #216]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012b9e:	2208      	movs	r2, #8
 8012ba0:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8012ba2:	4b35      	ldr	r3, [pc, #212]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012ba4:	2208      	movs	r2, #8
 8012ba6:	621a      	str	r2, [r3, #32]
 8012ba8:	e01f      	b.n	8012bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8012baa:	4b33      	ldr	r3, [pc, #204]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b30      	cmp	r3, #48	; 0x30
 8012bb0:	d119      	bne.n	8012be6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	4a35      	ldr	r2, [pc, #212]	; (8012c8c <TGFX_JPEG_GetDecodeColorConvertFunc+0x210>)
 8012bb6:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8012bb8:	4b2f      	ldr	r3, [pc, #188]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	f003 0307 	and.w	r3, r3, #7
 8012bc0:	4a2d      	ldr	r2, [pc, #180]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bc2:	6153      	str	r3, [r2, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
 8012bc4:	4b2c      	ldr	r3, [pc, #176]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bc6:	695b      	ldr	r3, [r3, #20]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d005      	beq.n	8012bd8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
 8012bcc:	4b2a      	ldr	r3, [pc, #168]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bce:	695b      	ldr	r3, [r3, #20]
 8012bd0:	f1c3 0308 	rsb	r3, r3, #8
 8012bd4:	4a28      	ldr	r2, [pc, #160]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bd6:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8012bd8:	4b27      	ldr	r3, [pc, #156]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bda:	2208      	movs	r2, #8
 8012bdc:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8012bde:	4b26      	ldr	r3, [pc, #152]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012be0:	2208      	movs	r2, #8
 8012be2:	621a      	str	r2, [r3, #32]
 8012be4:	e001      	b.n	8012bea <TGFX_JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
 8012be6:	2301      	movs	r3, #1
 8012be8:	e040      	b.n	8012c6c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1f0>
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8012bea:	4b23      	ldr	r3, [pc, #140]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bec:	689a      	ldr	r2, [r3, #8]
 8012bee:	4b22      	ldr	r3, [pc, #136]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bf0:	695b      	ldr	r3, [r3, #20]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	4a20      	ldr	r2, [pc, #128]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bf6:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
 8012bf8:	4b1f      	ldr	r3, [pc, #124]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	4a1e      	ldr	r2, [pc, #120]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c00:	6293      	str	r3, [r2, #40]	; 0x28

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8012c02:	4b1d      	ldr	r3, [pc, #116]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c04:	689a      	ldr	r2, [r3, #8]
 8012c06:	4b1c      	ldr	r3, [pc, #112]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c08:	69db      	ldr	r3, [r3, #28]
 8012c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c0e:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8012c10:	4b19      	ldr	r3, [pc, #100]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c12:	689b      	ldr	r3, [r3, #8]
 8012c14:	4a18      	ldr	r2, [pc, #96]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c16:	69d2      	ldr	r2, [r2, #28]
 8012c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c1c:	fb01 f202 	mul.w	r2, r1, r2
 8012c20:	1a9b      	subs	r3, r3, r2
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <TGFX_JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8012c2c:	4b12      	ldr	r3, [pc, #72]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c2e:	68da      	ldr	r2, [r3, #12]
 8012c30:	4b11      	ldr	r3, [pc, #68]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c32:	6a1b      	ldr	r3, [r3, #32]
 8012c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8012c38:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8012c3a:	4b0f      	ldr	r3, [pc, #60]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	4a0e      	ldr	r2, [pc, #56]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c40:	6a12      	ldr	r2, [r2, #32]
 8012c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c46:	fb01 f202 	mul.w	r2, r1, r2
 8012c4a:	1a9b      	subs	r3, r3, r2
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d002      	beq.n	8012c56 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	3301      	adds	r3, #1
 8012c54:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	693a      	ldr	r2, [r7, #16]
 8012c5a:	fb02 f303 	mul.w	r3, r2, r3
 8012c5e:	4a06      	ldr	r2, [pc, #24]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c60:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8012c62:	4b05      	ldr	r3, [pc, #20]	; (8012c78 <TGFX_JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8012c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012c6a:	2300      	movs	r3, #0
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	371c      	adds	r7, #28
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr
 8012c78:	2403ca80 	.word	0x2403ca80
 8012c7c:	080121a1 	.word	0x080121a1
 8012c80:	08012499 	.word	0x08012499
 8012c84:	0801269d 	.word	0x0801269d
 8012c88:	0801282d 	.word	0x0801282d
 8012c8c:	08012925 	.word	0x08012925

08012c90 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8012c96:	2300      	movs	r3, #0
 8012c98:	607b      	str	r3, [r7, #4]
 8012c9a:	e02e      	b.n	8012cfa <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3b80      	subs	r3, #128	; 0x80
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	f24b 3274 	movw	r2, #45940	; 0xb374
 8012caa:	fb02 f303 	mul.w	r3, r2, r3
 8012cae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012cb2:	141a      	asrs	r2, r3, #16
 8012cb4:	4916      	ldr	r1, [pc, #88]	; (8012d10 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8012cc2:	fb02 f303 	mul.w	r3, r2, r3
 8012cc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012cca:	141a      	asrs	r2, r3, #16
 8012ccc:	4911      	ldr	r1, [pc, #68]	; (8012d14 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	4a10      	ldr	r2, [pc, #64]	; (8012d18 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8012cd8:	fb03 f202 	mul.w	r2, r3, r2
 8012cdc:	490f      	ldr	r1, [pc, #60]	; (8012d1c <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	4a0e      	ldr	r2, [pc, #56]	; (8012d20 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8012ce8:	fb03 f202 	mul.w	r2, r3, r2
 8012cec:	490d      	ldr	r1, [pc, #52]	; (8012d24 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	607b      	str	r3, [r7, #4]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2bff      	cmp	r3, #255	; 0xff
 8012cfe:	ddcd      	ble.n	8012c9c <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8012d00:	bf00      	nop
 8012d02:	bf00      	nop
 8012d04:	370c      	adds	r7, #12
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	2403cac0 	.word	0x2403cac0
 8012d14:	2403cec0 	.word	0x2403cec0
 8012d18:	ffffa498 	.word	0xffffa498
 8012d1c:	2403d2c0 	.word	0x2403d2c0
 8012d20:	ffffd3f4 	.word	0xffffd3f4
 8012d24:	2403d6c0 	.word	0x2403d6c0

08012d28 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8012d2c:	f000 f806 	bl	8012d3c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8012d30:	f000 f888 	bl	8012e44 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8012d34:	f7ff ffac 	bl	8012c90 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8012d38:	bf00      	nop
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8012d42:	2300      	movs	r3, #0
 8012d44:	607b      	str	r3, [r7, #4]
 8012d46:	e05a      	b.n	8012dfe <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8012d4e:	fb02 f303 	mul.w	r3, r2, r3
 8012d52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012d56:	141a      	asrs	r2, r3, #16
 8012d58:	492e      	ldr	r1, [pc, #184]	; (8012e14 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f249 6245 	movw	r2, #38469	; 0x9645
 8012d66:	fb02 f303 	mul.w	r3, r2, r3
 8012d6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012d6e:	141a      	asrs	r2, r3, #16
 8012d70:	4929      	ldr	r1, [pc, #164]	; (8012e18 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8012d7e:	fb02 f303 	mul.w	r3, r2, r3
 8012d82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012d86:	141a      	asrs	r2, r3, #16
 8012d88:	4924      	ldr	r1, [pc, #144]	; (8012e1c <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4a23      	ldr	r2, [pc, #140]	; (8012e20 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8012d94:	fb02 f303 	mul.w	r3, r2, r3
 8012d98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012d9c:	141a      	asrs	r2, r3, #16
 8012d9e:	4921      	ldr	r1, [pc, #132]	; (8012e24 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4a1f      	ldr	r2, [pc, #124]	; (8012e28 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8012daa:	fb02 f303 	mul.w	r3, r2, r3
 8012dae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012db2:	141a      	asrs	r2, r3, #16
 8012db4:	491d      	ldr	r1, [pc, #116]	; (8012e2c <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	03db      	lsls	r3, r3, #15
 8012dc2:	141a      	asrs	r2, r3, #16
 8012dc4:	491a      	ldr	r1, [pc, #104]	; (8012e30 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4a19      	ldr	r2, [pc, #100]	; (8012e34 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8012dd0:	fb02 f303 	mul.w	r3, r2, r3
 8012dd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012dd8:	141a      	asrs	r2, r3, #16
 8012dda:	4917      	ldr	r1, [pc, #92]	; (8012e38 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	4a15      	ldr	r2, [pc, #84]	; (8012e3c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8012de6:	fb02 f303 	mul.w	r3, r2, r3
 8012dea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8012dee:	141a      	asrs	r2, r3, #16
 8012df0:	4913      	ldr	r1, [pc, #76]	; (8012e40 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	607b      	str	r3, [r7, #4]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2bff      	cmp	r3, #255	; 0xff
 8012e02:	dda1      	ble.n	8012d48 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8012e04:	bf00      	nop
 8012e06:	bf00      	nop
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	2403dac0 	.word	0x2403dac0
 8012e18:	2403e6c0 	.word	0x2403e6c0
 8012e1c:	2403f2c0 	.word	0x2403f2c0
 8012e20:	ffffd4d1 	.word	0xffffd4d1
 8012e24:	2403dec0 	.word	0x2403dec0
 8012e28:	ffffab30 	.word	0xffffab30
 8012e2c:	2403eec0 	.word	0x2403eec0
 8012e30:	2403e2c0 	.word	0x2403e2c0
 8012e34:	ffff94d1 	.word	0xffff94d1
 8012e38:	2403eac0 	.word	0x2403eac0
 8012e3c:	ffffeb30 	.word	0xffffeb30
 8012e40:	2403f6c0 	.word	0x2403f6c0

08012e44 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8012e44:	b480      	push	{r7}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	60fb      	str	r3, [r7, #12]
 8012e4e:	e036      	b.n	8012ebe <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8012e50:	2300      	movs	r3, #0
 8012e52:	60bb      	str	r3, [r7, #8]
 8012e54:	e02d      	b.n	8012eb2 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	00db      	lsls	r3, r3, #3
 8012e5a:	68ba      	ldr	r2, [r7, #8]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	2b07      	cmp	r3, #7
 8012e64:	d906      	bls.n	8012e74 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2b07      	cmp	r3, #7
 8012e6a:	d903      	bls.n	8012e74 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	3378      	adds	r3, #120	; 0x78
 8012e70:	607b      	str	r3, [r7, #4]
 8012e72:	e012      	b.n	8012e9a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	2b07      	cmp	r3, #7
 8012e78:	d906      	bls.n	8012e88 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b07      	cmp	r3, #7
 8012e7e:	d803      	bhi.n	8012e88 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	3338      	adds	r3, #56	; 0x38
 8012e84:	607b      	str	r3, [r7, #4]
 8012e86:	e008      	b.n	8012e9a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	2b07      	cmp	r3, #7
 8012e8c:	d805      	bhi.n	8012e9a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2b07      	cmp	r3, #7
 8012e92:	d902      	bls.n	8012e9a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	3340      	adds	r3, #64	; 0x40
 8012e98:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	011a      	lsls	r2, r3, #4
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	b291      	uxth	r1, r2
 8012ea6:	4a62      	ldr	r2, [pc, #392]	; (8013030 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8012ea8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	3301      	adds	r3, #1
 8012eb0:	60bb      	str	r3, [r7, #8]
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	2b0f      	cmp	r3, #15
 8012eb6:	d9ce      	bls.n	8012e56 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	60fb      	str	r3, [r7, #12]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2b0f      	cmp	r3, #15
 8012ec2:	d9c5      	bls.n	8012e50 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	60fb      	str	r3, [r7, #12]
 8012ec8:	e072      	b.n	8012fb0 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8012eca:	2300      	movs	r3, #0
 8012ecc:	60bb      	str	r3, [r7, #8]
 8012ece:	e069      	b.n	8012fa4 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	011b      	lsls	r3, r3, #4
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	4413      	add	r3, r2
 8012ed8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	085b      	lsrs	r3, r3, #1
 8012ede:	b29a      	uxth	r2, r3
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	085b      	lsrs	r3, r3, #1
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	00db      	lsls	r3, r3, #3
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	4413      	add	r3, r2
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012ef2:	b299      	uxth	r1, r3
 8012ef4:	4a4f      	ldr	r2, [pc, #316]	; (8013034 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	085b      	lsrs	r3, r3, #1
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	00db      	lsls	r3, r3, #3
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	4413      	add	r3, r2
 8012f0c:	b29b      	uxth	r3, r3
 8012f0e:	3380      	adds	r3, #128	; 0x80
 8012f10:	b299      	uxth	r1, r3
 8012f12:	4a49      	ldr	r2, [pc, #292]	; (8013038 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	085b      	lsrs	r3, r3, #1
 8012f1e:	b29a      	uxth	r2, r3
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	085b      	lsrs	r3, r3, #1
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	4413      	add	r3, r2
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012f32:	b299      	uxth	r1, r3
 8012f34:	4a41      	ldr	r2, [pc, #260]	; (801303c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	085b      	lsrs	r3, r3, #1
 8012f40:	b29a      	uxth	r2, r3
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	00db      	lsls	r3, r3, #3
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	4413      	add	r3, r2
 8012f4c:	b29b      	uxth	r3, r3
 8012f4e:	33c0      	adds	r3, #192	; 0xc0
 8012f50:	b299      	uxth	r1, r3
 8012f52:	4a3b      	ldr	r2, [pc, #236]	; (8013040 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	085b      	lsrs	r3, r3, #1
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	085b      	lsrs	r3, r3, #1
 8012f64:	b29b      	uxth	r3, r3
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	4413      	add	r3, r2
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012f72:	b299      	uxth	r1, r3
 8012f74:	4a33      	ldr	r2, [pc, #204]	; (8013044 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	085b      	lsrs	r3, r3, #1
 8012f80:	b29a      	uxth	r2, r3
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	085b      	lsrs	r3, r3, #1
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	00db      	lsls	r3, r3, #3
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	4413      	add	r3, r2
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012f94:	b299      	uxth	r1, r3
 8012f96:	4a2c      	ldr	r2, [pc, #176]	; (8013048 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	60bb      	str	r3, [r7, #8]
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	2b0f      	cmp	r3, #15
 8012fa8:	d992      	bls.n	8012ed0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	3301      	adds	r3, #1
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2b0f      	cmp	r3, #15
 8012fb4:	d989      	bls.n	8012eca <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	60fb      	str	r3, [r7, #12]
 8012fba:	e02e      	b.n	801301a <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	60bb      	str	r3, [r7, #8]
 8012fc0:	e025      	b.n	801300e <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	68ba      	ldr	r2, [r7, #8]
 8012fc8:	4413      	add	r3, r2
 8012fca:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	b299      	uxth	r1, r3
 8012fd0:	4a1e      	ldr	r2, [pc, #120]	; (801304c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	3340      	adds	r3, #64	; 0x40
 8012fde:	b299      	uxth	r1, r3
 8012fe0:	4a1b      	ldr	r2, [pc, #108]	; (8013050 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	3380      	adds	r3, #128	; 0x80
 8012fee:	b299      	uxth	r1, r3
 8012ff0:	4a18      	ldr	r2, [pc, #96]	; (8013054 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	33c0      	adds	r3, #192	; 0xc0
 8012ffe:	b299      	uxth	r1, r3
 8013000:	4a15      	ldr	r2, [pc, #84]	; (8013058 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	3301      	adds	r3, #1
 801300c:	60bb      	str	r3, [r7, #8]
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b07      	cmp	r3, #7
 8013012:	d9d6      	bls.n	8012fc2 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	3301      	adds	r3, #1
 8013018:	60fb      	str	r3, [r7, #12]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2b07      	cmp	r3, #7
 801301e:	d9cd      	bls.n	8012fbc <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8013020:	bf00      	nop
 8013022:	bf00      	nop
 8013024:	3714      	adds	r7, #20
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr
 801302e:	bf00      	nop
 8013030:	2403fac0 	.word	0x2403fac0
 8013034:	2403fd40 	.word	0x2403fd40
 8013038:	2403ff40 	.word	0x2403ff40
 801303c:	240401c0 	.word	0x240401c0
 8013040:	240403c0 	.word	0x240403c0
 8013044:	24040640 	.word	0x24040640
 8013048:	24040840 	.word	0x24040840
 801304c:	2403fcc0 	.word	0x2403fcc0
 8013050:	24040140 	.word	0x24040140
 8013054:	240405c0 	.word	0x240405c0
 8013058:	24040a40 	.word	0x24040a40

0801305c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 801305c:	b480      	push	{r7}
 801305e:	b097      	sub	sp, #92	; 0x5c
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	4a24      	ldr	r2, [pc, #144]	; (8013100 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa4>)
 801306e:	fba2 2303 	umull	r2, r3, r2, r3
 8013072:	0a1b      	lsrs	r3, r3, #8
 8013074:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801307a:	e148      	b.n	801330e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
 801307c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801307e:	011a      	lsls	r2, r3, #4
 8013080:	4b20      	ldr	r3, [pc, #128]	; (8013104 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8013082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013084:	fbb2 f3f3 	udiv	r3, r2, r3
 8013088:	011b      	lsls	r3, r3, #4
 801308a:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801308c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801308e:	011b      	lsls	r3, r3, #4
 8013090:	4a1c      	ldr	r2, [pc, #112]	; (8013104 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 8013092:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013094:	fbb3 f1f2 	udiv	r1, r3, r2
 8013098:	fb01 f202 	mul.w	r2, r1, r2
 801309c:	1a9b      	subs	r3, r3, r2
 801309e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 80130a0:	4b18      	ldr	r3, [pc, #96]	; (8013104 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80130a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130a6:	fb03 f202 	mul.w	r2, r3, r2
 80130aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	4413      	add	r3, r2
 80130b0:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 80130b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130b4:	3301      	adds	r3, #1
 80130b6:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80130be:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  16; i+=2)
 80130c4:	2300      	movs	r3, #0
 80130c6:	657b      	str	r3, [r7, #84]	; 0x54
 80130c8:	e119      	b.n	80132fe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2a2>
    {
      if(i == 8)
 80130ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130cc:	2b08      	cmp	r3, #8
 80130ce:	d102      	bne.n	80130d6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7a>
      {
        pLum = pInBuffer + 128;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	3380      	adds	r3, #128	; 0x80
 80130d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80130d6:	4b0b      	ldr	r3, [pc, #44]	; (8013104 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80130dc:	429a      	cmp	r2, r3
 80130de:	f080 810b 	bcs.w	80132f8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x29c>
      {
        pOutAddr = pOutBuffer + refline;
 80130e2:	68ba      	ldr	r2, [r7, #8]
 80130e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130e6:	4413      	add	r3, r2
 80130e8:	643b      	str	r3, [r7, #64]	; 0x40
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
 80130ea:	4b06      	ldr	r3, [pc, #24]	; (8013104 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa8>)
 80130ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130f0:	4413      	add	r3, r2
 80130f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        for(k= 0; k<2; k++)
 80130f4:	2300      	movs	r3, #0
 80130f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80130f8:	e0f1      	b.n	80132de <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x282>
        {
          for(j=0; j < 8; j+=2)
 80130fa:	2300      	movs	r3, #0
 80130fc:	653b      	str	r3, [r7, #80]	; 0x50
 80130fe:	e0e4      	b.n	80132ca <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x26e>
 8013100:	aaaaaaab 	.word	0xaaaaaaab
 8013104:	24040ac0 	.word	0x24040ac0
          {           
            cbcomp = (int32_t)(*(pChrom));
 8013108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 801310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013110:	009b      	lsls	r3, r3, #2
 8013112:	4a86      	ldr	r2, [pc, #536]	; (801332c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d0>)
 8013114:	4413      	add	r3, r2
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 801311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311c:	3340      	adds	r3, #64	; 0x40
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	009b      	lsls	r3, r3, #2
 8013126:	4a82      	ldr	r2, [pc, #520]	; (8013330 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d4>)
 8013128:	4413      	add	r3, r2
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	4a80      	ldr	r2, [pc, #512]	; (8013334 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2d8>)
 8013134:	4413      	add	r3, r2
 8013136:	681a      	ldr	r2, [r3, #0]
 8013138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	497e      	ldr	r1, [pc, #504]	; (8013338 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2dc>)
 801313e:	440b      	add	r3, r1
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4413      	add	r3, r2
 8013144:	141b      	asrs	r3, r3, #16
 8013146:	617b      	str	r3, [r7, #20]
            pOutAddr2[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr2[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
          
            ycomp = (int32_t)(*(pLum +j));
 8013148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801314c:	4413      	add	r3, r2
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013152:	693a      	ldr	r2, [r7, #16]
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	4413      	add	r3, r2
 8013158:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801315c:	4a77      	ldr	r2, [pc, #476]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801315e:	5cd3      	ldrb	r3, [r2, r3]
 8013160:	08db      	lsrs	r3, r3, #3
 8013162:	b2db      	uxtb	r3, r3
 8013164:	02db      	lsls	r3, r3, #11
 8013166:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013168:	6939      	ldr	r1, [r7, #16]
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	440b      	add	r3, r1
 801316e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013172:	4972      	ldr	r1, [pc, #456]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8013174:	5ccb      	ldrb	r3, [r1, r3]
 8013176:	089b      	lsrs	r3, r3, #2
 8013178:	b2db      	uxtb	r3, r3
 801317a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801317c:	b21b      	sxth	r3, r3
 801317e:	4313      	orrs	r3, r2
 8013180:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013182:	6939      	ldr	r1, [r7, #16]
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	440b      	add	r3, r1
 8013188:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801318c:	496b      	ldr	r1, [pc, #428]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801318e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013190:	08db      	lsrs	r3, r3, #3
 8013192:	b2db      	uxtb	r3, r3
 8013194:	b21b      	sxth	r3, r3
 8013196:	4313      	orrs	r3, r2
 8013198:	b21b      	sxth	r3, r3
 801319a:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 801319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801319e:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 80131a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a2:	3301      	adds	r3, #1
 80131a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131a6:	4413      	add	r3, r2
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80131ac:	693a      	ldr	r2, [r7, #16]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	4413      	add	r3, r2
 80131b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131b6:	4a61      	ldr	r2, [pc, #388]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80131b8:	5cd3      	ldrb	r3, [r2, r3]
 80131ba:	08db      	lsrs	r3, r3, #3
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	02db      	lsls	r3, r3, #11
 80131c0:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80131c2:	6939      	ldr	r1, [r7, #16]
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	440b      	add	r3, r1
 80131c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131cc:	495b      	ldr	r1, [pc, #364]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80131ce:	5ccb      	ldrb	r3, [r1, r3]
 80131d0:	089b      	lsrs	r3, r3, #2
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 80131d6:	b21b      	sxth	r3, r3
 80131d8:	4313      	orrs	r3, r2
 80131da:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 80131dc:	6939      	ldr	r1, [r7, #16]
 80131de:	6a3b      	ldr	r3, [r7, #32]
 80131e0:	440b      	add	r3, r1
 80131e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131e6:	4955      	ldr	r1, [pc, #340]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 80131e8:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80131ea:	08db      	lsrs	r3, r3, #3
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	b21b      	sxth	r3, r3
 80131f0:	4313      	orrs	r3, r2
 80131f2:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80131f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f6:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80131f8:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80131fa:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8));
 80131fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131fe:	3308      	adds	r3, #8
 8013200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013202:	4413      	add	r3, r2
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	613b      	str	r3, [r7, #16]
            
            *(__IO uint16_t *)pOutAddr2 = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013208:	693a      	ldr	r2, [r7, #16]
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	4413      	add	r3, r2
 801320e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013212:	4a4a      	ldr	r2, [pc, #296]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8013214:	5cd3      	ldrb	r3, [r2, r3]
 8013216:	08db      	lsrs	r3, r3, #3
 8013218:	b2db      	uxtb	r3, r3
 801321a:	02db      	lsls	r3, r3, #11
 801321c:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801321e:	6939      	ldr	r1, [r7, #16]
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	440b      	add	r3, r1
 8013224:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013228:	4944      	ldr	r1, [pc, #272]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801322a:	5ccb      	ldrb	r3, [r1, r3]
 801322c:	089b      	lsrs	r3, r3, #2
 801322e:	b2db      	uxtb	r3, r3
 8013230:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013232:	b21b      	sxth	r3, r3
 8013234:	4313      	orrs	r3, r2
 8013236:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013238:	6939      	ldr	r1, [r7, #16]
 801323a:	6a3b      	ldr	r3, [r7, #32]
 801323c:	440b      	add	r3, r1
 801323e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013242:	493e      	ldr	r1, [pc, #248]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8013244:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013246:	08db      	lsrs	r3, r3, #3
 8013248:	b2db      	uxtb	r3, r3
 801324a:	b21b      	sxth	r3, r3
 801324c:	4313      	orrs	r3, r2
 801324e:	b21b      	sxth	r3, r3
 8013250:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr2 = 
 8013252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013254:	801a      	strh	r2, [r3, #0]
            
            /**********/
            ycomp = (int32_t)(*(pLum +j +8 +1));
 8013256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013258:	3309      	adds	r3, #9
 801325a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801325c:	4413      	add	r3, r2
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	613b      	str	r3, [r7, #16]
            
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013262:	693a      	ldr	r2, [r7, #16]
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	4413      	add	r3, r2
 8013268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801326c:	4a33      	ldr	r2, [pc, #204]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801326e:	5cd3      	ldrb	r3, [r2, r3]
 8013270:	08db      	lsrs	r3, r3, #3
 8013272:	b2db      	uxtb	r3, r3
 8013274:	02db      	lsls	r3, r3, #11
 8013276:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013278:	6939      	ldr	r1, [r7, #16]
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	440b      	add	r3, r1
 801327e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013282:	492e      	ldr	r1, [pc, #184]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 8013284:	5ccb      	ldrb	r3, [r1, r3]
 8013286:	089b      	lsrs	r3, r3, #2
 8013288:	b2db      	uxtb	r3, r3
 801328a:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801328c:	b21b      	sxth	r3, r3
 801328e:	4313      	orrs	r3, r2
 8013290:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 8013292:	6939      	ldr	r1, [r7, #16]
 8013294:	6a3b      	ldr	r3, [r7, #32]
 8013296:	440b      	add	r3, r1
 8013298:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801329c:	4927      	ldr	r1, [pc, #156]	; (801333c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e0>)
 801329e:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80132a0:	08db      	lsrs	r3, r3, #3
 80132a2:	b2db      	uxtb	r3, r3
 80132a4:	b21b      	sxth	r3, r3
 80132a6:	4313      	orrs	r3, r2
 80132a8:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80132aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ac:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80132ae:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
 80132b0:	801a      	strh	r2, [r3, #0]
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80132b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132b4:	3304      	adds	r3, #4
 80132b6:	643b      	str	r3, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
 80132b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132ba:	3304      	adds	r3, #4
 80132bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 80132be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c0:	3301      	adds	r3, #1
 80132c2:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j+=2)
 80132c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c6:	3302      	adds	r3, #2
 80132c8:	653b      	str	r3, [r7, #80]	; 0x50
 80132ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132cc:	2b07      	cmp	r3, #7
 80132ce:	f67f af1b 	bls.w	8013108 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xac>
          }
          pLum += 64;                      
 80132d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d4:	3340      	adds	r3, #64	; 0x40
 80132d6:	637b      	str	r3, [r7, #52]	; 0x34
        for(k= 0; k<2; k++)
 80132d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132da:	3301      	adds	r3, #1
 80132dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80132de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	f67f af0a 	bls.w	80130fa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x9e>
        }

        pLum = pLum - 128 + 16;
 80132e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132e8:	3b70      	subs	r3, #112	; 0x70
 80132ea:	637b      	str	r3, [r7, #52]	; 0x34
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
 80132ec:	4b14      	ldr	r3, [pc, #80]	; (8013340 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x2e4>)
 80132ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132f0:	005b      	lsls	r3, r3, #1
 80132f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80132f4:	4413      	add	r3, r2
 80132f6:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  16; i+=2)
 80132f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132fa:	3302      	adds	r3, #2
 80132fc:	657b      	str	r3, [r7, #84]	; 0x54
 80132fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013300:	2b0f      	cmp	r3, #15
 8013302:	f67f aee2 	bls.w	80130ca <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801330c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801330e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	4413      	add	r3, r2
 8013314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013316:	429a      	cmp	r2, r3
 8013318:	f4ff aeb0 	bcc.w	801307c <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801331e:	4618      	mov	r0, r3
 8013320:	375c      	adds	r7, #92	; 0x5c
 8013322:	46bd      	mov	sp, r7
 8013324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013328:	4770      	bx	lr
 801332a:	bf00      	nop
 801332c:	24040f00 	.word	0x24040f00
 8013330:	24040b00 	.word	0x24040b00
 8013334:	24041300 	.word	0x24041300
 8013338:	24041700 	.word	0x24041700
 801333c:	0802861c 	.word	0x0802861c
 8013340:	24040ac0 	.word	0x24040ac0

08013344 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8013344:	b480      	push	{r7}
 8013346:	b097      	sub	sp, #92	; 0x5c
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
 8013350:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	0a1b      	lsrs	r3, r3, #8
 8013356:	637b      	str	r3, [r7, #52]	; 0x34
  currentMCU = BlockIndex;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	64bb      	str	r3, [r7, #72]	; 0x48
  

  while(currentMCU < (numberMCU + BlockIndex))
 801335c:	e0d9      	b.n	8013512 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ce>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
 801335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013360:	011a      	lsls	r2, r3, #4
 8013362:	4b73      	ldr	r3, [pc, #460]	; (8013530 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013366:	fbb2 f3f3 	udiv	r3, r2, r3
 801336a:	00db      	lsls	r3, r3, #3
 801336c:	633b      	str	r3, [r7, #48]	; 0x30
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
 801336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013370:	011b      	lsls	r3, r3, #4
 8013372:	4a6f      	ldr	r2, [pc, #444]	; (8013530 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013376:	fbb3 f1f2 	udiv	r1, r3, r2
 801337a:	fb01 f202 	mul.w	r2, r1, r2
 801337e:	1a9b      	subs	r3, r3, r2
 8013380:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013382:	4b6b      	ldr	r3, [pc, #428]	; (8013530 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 8013384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013388:	fb03 f202 	mul.w	r2, r3, r2
 801338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	647b      	str	r3, [r7, #68]	; 0x44

    currentMCU++;
 8013394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013396:	3301      	adds	r3, #1
 8013398:	64bb      	str	r3, [r7, #72]	; 0x48
    
    pChrom = pInBuffer + 128; /* pChroma = pInBuffer + 2*64 */
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	3380      	adds	r3, #128	; 0x80
 801339e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pLum = pInBuffer;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	63bb      	str	r3, [r7, #56]	; 0x38
    
    for(i= 0; i <  8; i++)
 80133a4:	2300      	movs	r3, #0
 80133a6:	657b      	str	r3, [r7, #84]	; 0x54
 80133a8:	e0ab      	b.n	8013502 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1be>
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80133aa:	4b61      	ldr	r3, [pc, #388]	; (8013530 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80133b0:	429a      	cmp	r2, r3
 80133b2:	f080 80a3 	bcs.w	80134fc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1b8>
      {
        pOutAddr = pOutBuffer + refline;
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133ba:	4413      	add	r3, r2
 80133bc:	643b      	str	r3, [r7, #64]	; 0x40
        
        for(k= 0; k<2; k++)
 80133be:	2300      	movs	r3, #0
 80133c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133c2:	e08f      	b.n	80134e4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a0>
        {
          for(j=0; j < 8; j+=2)
 80133c4:	2300      	movs	r3, #0
 80133c6:	653b      	str	r3, [r7, #80]	; 0x50
 80133c8:	e082      	b.n	80134d0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x18c>
          {           
            cbcomp = (int32_t)(*(pChrom));
 80133ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	62bb      	str	r3, [r7, #40]	; 0x28
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80133d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	4a57      	ldr	r2, [pc, #348]	; (8013534 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f0>)
 80133d6:	4413      	add	r3, r2
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	627b      	str	r3, [r7, #36]	; 0x24
            
            crcomp = (int32_t)(*(pChrom + 64));
 80133dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133de:	3340      	adds	r3, #64	; 0x40
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	623b      	str	r3, [r7, #32]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80133e4:	6a3b      	ldr	r3, [r7, #32]
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	4a53      	ldr	r2, [pc, #332]	; (8013538 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f4>)
 80133ea:	4413      	add	r3, r2
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	61fb      	str	r3, [r7, #28]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80133f0:	6a3b      	ldr	r3, [r7, #32]
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	4a51      	ldr	r2, [pc, #324]	; (801353c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1f8>)
 80133f6:	4413      	add	r3, r2
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4950      	ldr	r1, [pc, #320]	; (8013540 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1fc>)
 8013400:	440b      	add	r3, r1
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4413      	add	r3, r2
 8013406:	141b      	asrs	r3, r3, #16
 8013408:	61bb      	str	r3, [r7, #24]
            pOutAddr[3 + JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[3 + JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
          
            ycomp = (int32_t)(*(pLum +j));
 801340a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801340e:	4413      	add	r3, r2
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	617b      	str	r3, [r7, #20]
            
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	4413      	add	r3, r2
 801341a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801341e:	4a49      	ldr	r2, [pc, #292]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013420:	5cd3      	ldrb	r3, [r2, r3]
 8013422:	08db      	lsrs	r3, r3, #3
 8013424:	b2db      	uxtb	r3, r3
 8013426:	02db      	lsls	r3, r3, #11
 8013428:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801342a:	6979      	ldr	r1, [r7, #20]
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	440b      	add	r3, r1
 8013430:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013434:	4943      	ldr	r1, [pc, #268]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013436:	5ccb      	ldrb	r3, [r1, r3]
 8013438:	089b      	lsrs	r3, r3, #2
 801343a:	b2db      	uxtb	r3, r3
 801343c:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801343e:	b21b      	sxth	r3, r3
 8013440:	4313      	orrs	r3, r2
 8013442:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
 8013444:	6979      	ldr	r1, [r7, #20]
 8013446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013448:	440b      	add	r3, r1
 801344a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801344e:	493d      	ldr	r1, [pc, #244]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013450:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013452:	08db      	lsrs	r3, r3, #3
 8013454:	b2db      	uxtb	r3, r3
 8013456:	b21b      	sxth	r3, r3
 8013458:	4313      	orrs	r3, r2
 801345a:	b21b      	sxth	r3, r3
 801345c:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 801345e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013460:	801a      	strh	r2, [r3, #0]
            /**********/
            ycomp = (int32_t)(*(pLum +j +1));
 8013462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013464:	3301      	adds	r3, #1
 8013466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013468:	4413      	add	r3, r2
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	617b      	str	r3, [r7, #20]
            
            *((__IO uint16_t *)(pOutAddr + 2)) = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 801346e:	697a      	ldr	r2, [r7, #20]
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	4413      	add	r3, r2
 8013474:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013478:	4a32      	ldr	r2, [pc, #200]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 801347a:	5cd3      	ldrb	r3, [r2, r3]
 801347c:	08db      	lsrs	r3, r3, #3
 801347e:	b2db      	uxtb	r3, r3
 8013480:	02db      	lsls	r3, r3, #11
 8013482:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013484:	6979      	ldr	r1, [r7, #20]
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	440b      	add	r3, r1
 801348a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801348e:	492d      	ldr	r1, [pc, #180]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 8013490:	5ccb      	ldrb	r3, [r1, r3]
 8013492:	089b      	lsrs	r3, r3, #2
 8013494:	b2db      	uxtb	r3, r3
 8013496:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013498:	b21b      	sxth	r3, r3
 801349a:	4313      	orrs	r3, r2
 801349c:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
 801349e:	6979      	ldr	r1, [r7, #20]
 80134a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a2:	440b      	add	r3, r1
 80134a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80134a8:	4926      	ldr	r1, [pc, #152]	; (8013544 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x200>)
 80134aa:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80134ac:	08db      	lsrs	r3, r3, #3
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	b21b      	sxth	r3, r3
 80134b2:	4313      	orrs	r3, r2
 80134b4:	b21a      	sxth	r2, r3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80134b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134b8:	3302      	adds	r3, #2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 80134ba:	b292      	uxth	r2, r2
            *((__IO uint16_t *)(pOutAddr + 2)) = 
 80134bc:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT*/          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
 80134be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134c0:	3304      	adds	r3, #4
 80134c2:	643b      	str	r3, [r7, #64]	; 0x40
          
            pChrom++;
 80134c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134c6:	3301      	adds	r3, #1
 80134c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          for(j=0; j < 8; j+=2)
 80134ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134cc:	3302      	adds	r3, #2
 80134ce:	653b      	str	r3, [r7, #80]	; 0x50
 80134d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134d2:	2b07      	cmp	r3, #7
 80134d4:	f67f af79 	bls.w	80133ca <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x86>
          }
          pLum += 64;                      
 80134d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134da:	3340      	adds	r3, #64	; 0x40
 80134dc:	63bb      	str	r3, [r7, #56]	; 0x38
        for(k= 0; k<2; k++)
 80134de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e0:	3301      	adds	r3, #1
 80134e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80134e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	f67f af6c 	bls.w	80133c4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
        }
        
        pLum = pLum - 128 + 8;
 80134ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ee:	3b78      	subs	r3, #120	; 0x78
 80134f0:	63bb      	str	r3, [r7, #56]	; 0x38
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
 80134f2:	4b0f      	ldr	r3, [pc, #60]	; (8013530 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1ec>)
 80134f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134f8:	4413      	add	r3, r2
 80134fa:	647b      	str	r3, [r7, #68]	; 0x44
    for(i= 0; i <  8; i++)
 80134fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134fe:	3301      	adds	r3, #1
 8013500:	657b      	str	r3, [r7, #84]	; 0x54
 8013502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013504:	2b07      	cmp	r3, #7
 8013506:	f67f af50 	bls.w	80133aa <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x66>
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013510:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8013512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	4413      	add	r3, r2
 8013518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801351a:	429a      	cmp	r2, r3
 801351c:	f4ff af1f 	bcc.w	801335e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8013520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013522:	4618      	mov	r0, r3
 8013524:	375c      	adds	r7, #92	; 0x5c
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
 801352e:	bf00      	nop
 8013530:	24040ac0 	.word	0x24040ac0
 8013534:	24040f00 	.word	0x24040f00
 8013538:	24040b00 	.word	0x24040b00
 801353c:	24041300 	.word	0x24041300
 8013540:	24041700 	.word	0x24041700
 8013544:	0802861c 	.word	0x0802861c

08013548 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 8013548:	b480      	push	{r7}
 801354a:	b095      	sub	sp, #84	; 0x54
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
 8013554:	603b      	str	r3, [r7, #0]
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	4a58      	ldr	r2, [pc, #352]	; (80136bc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x174>)
 801355a:	fba2 2303 	umull	r2, r3, r2, r3
 801355e:	09db      	lsrs	r3, r3, #7
 8013560:	633b      	str	r3, [r7, #48]	; 0x30
  currentMCU = BlockIndex;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	647b      	str	r3, [r7, #68]	; 0x44
  

  while(currentMCU < (numberMCU + BlockIndex))
 8013566:	e09a      	b.n	801369e <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x156>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 8013568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801356a:	00da      	lsls	r2, r3, #3
 801356c:	4b54      	ldr	r3, [pc, #336]	; (80136c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	fbb2 f3f3 	udiv	r3, r2, r3
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8013578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801357a:	00db      	lsls	r3, r3, #3
 801357c:	4a50      	ldr	r2, [pc, #320]	; (80136c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801357e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013580:	fbb3 f1f2 	udiv	r1, r3, r2
 8013584:	fb01 f202 	mul.w	r2, r1, r2
 8013588:	1a9b      	subs	r3, r3, r2
 801358a:	62bb      	str	r3, [r7, #40]	; 0x28
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801358c:	4b4c      	ldr	r3, [pc, #304]	; (80136c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 801358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013592:	fb03 f202 	mul.w	r2, r3, r2
 8013596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	4413      	add	r3, r2
 801359c:	643b      	str	r3, [r7, #64]	; 0x40

    currentMCU++;   
 801359e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135a0:	3301      	adds	r3, #1
 80135a2:	647b      	str	r3, [r7, #68]	; 0x44
    
    pChrom = pInBuffer + 64; /* pChroma = pInBuffer + 4*64 */
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3340      	adds	r3, #64	; 0x40
 80135a8:	63bb      	str	r3, [r7, #56]	; 0x38
    
    pLum = pInBuffer;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	637b      	str	r3, [r7, #52]	; 0x34
    
    for(i= 0; i <  8; i++)
 80135ae:	2300      	movs	r3, #0
 80135b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80135b2:	e06e      	b.n	8013692 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x14a>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 80135b4:	4b42      	ldr	r3, [pc, #264]	; (80136c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d266      	bcs.n	801368c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x144>
      {
        pOutAddr = pOutBuffer+ refline;
 80135be:	68ba      	ldr	r2, [r7, #8]
 80135c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135c2:	4413      	add	r3, r2
 80135c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        

          for(j=0; j < 8; j++)
 80135c6:	2300      	movs	r3, #0
 80135c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80135ca:	e054      	b.n	8013676 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x12e>
          {           
            cbcomp = (int32_t)(*pChrom);
 80135cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	627b      	str	r3, [r7, #36]	; 0x24
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
 80135d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	4a3b      	ldr	r2, [pc, #236]	; (80136c4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x17c>)
 80135d8:	4413      	add	r3, r2
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	623b      	str	r3, [r7, #32]
            
            crcomp = (int32_t)(*(pChrom + 64));
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	3340      	adds	r3, #64	; 0x40
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	61fb      	str	r3, [r7, #28]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	009b      	lsls	r3, r3, #2
 80135ea:	4a37      	ldr	r2, [pc, #220]	; (80136c8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x180>)
 80135ec:	4413      	add	r3, r2
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	61bb      	str	r3, [r7, #24]
            
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	4a35      	ldr	r2, [pc, #212]	; (80136cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x184>)
 80135f8:	4413      	add	r3, r2
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	4933      	ldr	r1, [pc, #204]	; (80136d0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x188>)
 8013602:	440b      	add	r3, r1
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4413      	add	r3, r2
 8013608:	141b      	asrs	r3, r3, #16
 801360a:	617b      	str	r3, [r7, #20]
            pOutAddr[JPEG_GREEN_OFFSET/8] = CLAMP(ycomp + c_green);
            pOutAddr[JPEG_BLUE_OFFSET/8] = CLAMP(ycomp + c_blue);        

#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
 801360c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013610:	4413      	add	r3, r2
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	613b      	str	r3, [r7, #16]
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013616:	693a      	ldr	r2, [r7, #16]
 8013618:	69bb      	ldr	r3, [r7, #24]
 801361a:	4413      	add	r3, r2
 801361c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013620:	4a2c      	ldr	r2, [pc, #176]	; (80136d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013622:	5cd3      	ldrb	r3, [r2, r3]
 8013624:	08db      	lsrs	r3, r3, #3
 8013626:	b2db      	uxtb	r3, r3
 8013628:	02db      	lsls	r3, r3, #11
 801362a:	b21a      	sxth	r2, r3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 801362c:	6939      	ldr	r1, [r7, #16]
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	440b      	add	r3, r1
 8013632:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013636:	4927      	ldr	r1, [pc, #156]	; (80136d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013638:	5ccb      	ldrb	r3, [r1, r3]
 801363a:	089b      	lsrs	r3, r3, #2
 801363c:	b2db      	uxtb	r3, r3
 801363e:	015b      	lsls	r3, r3, #5
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
 8013640:	b21b      	sxth	r3, r3
 8013642:	4313      	orrs	r3, r2
 8013644:	b21a      	sxth	r2, r3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
 8013646:	6939      	ldr	r1, [r7, #16]
 8013648:	6a3b      	ldr	r3, [r7, #32]
 801364a:	440b      	add	r3, r1
 801364c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013650:	4920      	ldr	r1, [pc, #128]	; (80136d4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x18c>)
 8013652:	5ccb      	ldrb	r3, [r1, r3]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
 8013654:	08db      	lsrs	r3, r3, #3
 8013656:	b2db      	uxtb	r3, r3
 8013658:	b21b      	sxth	r3, r3
 801365a:	4313      	orrs	r3, r2
 801365c:	b21b      	sxth	r3, r3
 801365e:	b29a      	uxth	r2, r3
            *(__IO uint16_t *)pOutAddr = 
 8013660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013662:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 8013664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013666:	3302      	adds	r3, #2
 8013668:	63fb      	str	r3, [r7, #60]	; 0x3c
          
            pChrom++;
 801366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366c:	3301      	adds	r3, #1
 801366e:	63bb      	str	r3, [r7, #56]	; 0x38
          for(j=0; j < 8; j++)
 8013670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013672:	3301      	adds	r3, #1
 8013674:	64bb      	str	r3, [r7, #72]	; 0x48
 8013676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013678:	2b07      	cmp	r3, #7
 801367a:	d9a7      	bls.n	80135cc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x84>
          }
          pLum += 8;
 801367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367e:	3308      	adds	r3, #8
 8013680:	637b      	str	r3, [r7, #52]	; 0x34

        refline += JPEG_ConvertorParams.ScaledWidth;          
 8013682:	4b0f      	ldr	r3, [pc, #60]	; (80136c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x178>)
 8013684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013688:	4413      	add	r3, r2
 801368a:	643b      	str	r3, [r7, #64]	; 0x40
    for(i= 0; i <  8; i++)
 801368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801368e:	3301      	adds	r3, #1
 8013690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013694:	2b07      	cmp	r3, #7
 8013696:	d98d      	bls.n	80135b4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x6c>
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	33c0      	adds	r3, #192	; 0xc0
 801369c:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 801369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	4413      	add	r3, r2
 80136a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136a6:	429a      	cmp	r2, r3
 80136a8:	f4ff af5e 	bcc.w	8013568 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x20>
  }
  return numberMCU;
 80136ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3754      	adds	r7, #84	; 0x54
 80136b2:	46bd      	mov	sp, r7
 80136b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	aaaaaaab 	.word	0xaaaaaaab
 80136c0:	24040ac0 	.word	0x24040ac0
 80136c4:	24040f00 	.word	0x24040f00
 80136c8:	24040b00 	.word	0x24040b00
 80136cc:	24041300 	.word	0x24041300
 80136d0:	24041700 	.word	0x24041700
 80136d4:	0802861c 	.word	0x0802861c

080136d8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
 80136d8:	b480      	push	{r7}
 80136da:	b08f      	sub	sp, #60	; 0x3c
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	607a      	str	r2, [r7, #4]
 80136e4:	603b      	str	r3, [r7, #0]

  uint32_t i,j, ySample;
  uint8_t *pOutAddr,  *pLum;

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	099b      	lsrs	r3, r3, #6
 80136ea:	61fb      	str	r3, [r7, #28]
  currentMCU = BlockIndex;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	637b      	str	r3, [r7, #52]	; 0x34
  
  while(currentMCU < (numberMCU + BlockIndex))
 80136f0:	e05e      	b.n	80137b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xd8>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80136f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136f4:	00da      	lsls	r2, r3, #3
 80136f6:	4b35      	ldr	r3, [pc, #212]	; (80137cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 80136f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80136fe:	00db      	lsls	r3, r3, #3
 8013700:	61bb      	str	r3, [r7, #24]
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 8013702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013704:	00db      	lsls	r3, r3, #3
 8013706:	4a31      	ldr	r2, [pc, #196]	; (80137cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801370a:	fbb3 f1f2 	udiv	r1, r3, r2
 801370e:	fb01 f202 	mul.w	r2, r1, r2
 8013712:	1a9b      	subs	r3, r3, r2
 8013714:	617b      	str	r3, [r7, #20]
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 8013716:	4b2d      	ldr	r3, [pc, #180]	; (80137cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801371a:	69ba      	ldr	r2, [r7, #24]
 801371c:	fb03 f202 	mul.w	r2, r3, r2
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	633b      	str	r3, [r7, #48]	; 0x30
    
    currentMCU++;
 8013728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372a:	3301      	adds	r3, #1
 801372c:	637b      	str	r3, [r7, #52]	; 0x34
  
    pLum = pInBuffer;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	623b      	str	r3, [r7, #32]
    
    for(i= 0; i <  8; i++)
 8013732:	2300      	movs	r3, #0
 8013734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013736:	e035      	b.n	80137a4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xcc>
    { 
      pOutAddr = pOutBuffer + refline;
 8013738:	68ba      	ldr	r2, [r7, #8]
 801373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373c:	4413      	add	r3, r2
 801373e:	627b      	str	r3, [r7, #36]	; 0x24
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013740:	4b22      	ldr	r3, [pc, #136]	; (80137cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013742:	691b      	ldr	r3, [r3, #16]
 8013744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013746:	429a      	cmp	r2, r3
 8013748:	d229      	bcs.n	801379e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xc6>
      {  
        for(j=0; j < 8; j++)
 801374a:	2300      	movs	r3, #0
 801374c:	62bb      	str	r3, [r7, #40]	; 0x28
 801374e:	e01e      	b.n	801378e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xb6>
        { 
          ySample =   (uint32_t)(*pLum);
 8013750:	6a3b      	ldr	r3, [r7, #32]
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	613b      	str	r3, [r7, #16]
          pOutAddr[1] =  ySample;
          pOutAddr[2] =  ySample;     
 
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	08db      	lsrs	r3, r3, #3
 801375a:	b29b      	uxth	r3, r3
 801375c:	02db      	lsls	r3, r3, #11
 801375e:	b29a      	uxth	r2, r3
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	089b      	lsrs	r3, r3, #2
 8013764:	b29b      	uxth	r3, r3
 8013766:	015b      	lsls	r3, r3, #5
 8013768:	b29b      	uxth	r3, r3
 801376a:	4313      	orrs	r3, r2
 801376c:	b29a      	uxth	r2, r3
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	08db      	lsrs	r3, r3, #3
 8013772:	b29b      	uxth	r3, r3
 8013774:	4313      	orrs	r3, r2
 8013776:	b29a      	uxth	r2, r3
 8013778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377a:	801a      	strh	r2, [r3, #0]
          
#endif /* JPEG_RGB_FORMAT */          
          
          pOutAddr += JPEG_BYTES_PER_PIXEL;
 801377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377e:	3302      	adds	r3, #2
 8013780:	627b      	str	r3, [r7, #36]	; 0x24
          pLum++;
 8013782:	6a3b      	ldr	r3, [r7, #32]
 8013784:	3301      	adds	r3, #1
 8013786:	623b      	str	r3, [r7, #32]
        for(j=0; j < 8; j++)
 8013788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378a:	3301      	adds	r3, #1
 801378c:	62bb      	str	r3, [r7, #40]	; 0x28
 801378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013790:	2b07      	cmp	r3, #7
 8013792:	d9dd      	bls.n	8013750 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x78>
        }

        refline += JPEG_ConvertorParams.ScaledWidth;        
 8013794:	4b0d      	ldr	r3, [pc, #52]	; (80137cc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0xf4>)
 8013796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801379a:	4413      	add	r3, r2
 801379c:	633b      	str	r3, [r7, #48]	; 0x30
    for(i= 0; i <  8; i++)
 801379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a0:	3301      	adds	r3, #1
 80137a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a6:	2b07      	cmp	r3, #7
 80137a8:	d9c6      	bls.n	8013738 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x60>
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	3340      	adds	r3, #64	; 0x40
 80137ae:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 80137b0:	69fa      	ldr	r2, [r7, #28]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4413      	add	r3, r2
 80137b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d39a      	bcc.n	80136f2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 80137bc:	69fb      	ldr	r3, [r7, #28]
}
 80137be:	4618      	mov	r0, r3
 80137c0:	373c      	adds	r7, #60	; 0x3c
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr
 80137ca:	bf00      	nop
 80137cc:	24040ac0 	.word	0x24040ac0

080137d0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
 80137d0:	b480      	push	{r7}
 80137d2:	b093      	sub	sp, #76	; 0x4c
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	60f8      	str	r0, [r7, #12]
 80137d8:	60b9      	str	r1, [r7, #8]
 80137da:	607a      	str	r2, [r7, #4]
 80137dc:	603b      	str	r3, [r7, #0]
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	0a1b      	lsrs	r3, r3, #8
 80137e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  currentMCU = BlockIndex;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  

  while(currentMCU < (numberMCU + BlockIndex))
 80137e8:	e08b      	b.n	8013902 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x132>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
 80137ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ec:	00da      	lsls	r2, r3, #3
 80137ee:	4b4c      	ldr	r3, [pc, #304]	; (8013920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80137f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80137f6:	00db      	lsls	r3, r3, #3
 80137f8:	62bb      	str	r3, [r7, #40]	; 0x28
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
 80137fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fc:	00db      	lsls	r3, r3, #3
 80137fe:	4a48      	ldr	r2, [pc, #288]	; (8013920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013802:	fbb3 f1f2 	udiv	r1, r3, r2
 8013806:	fb01 f202 	mul.w	r2, r1, r2
 801380a:	1a9b      	subs	r3, r3, r2
 801380c:	627b      	str	r3, [r7, #36]	; 0x24
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
 801380e:	4b44      	ldr	r3, [pc, #272]	; (8013920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013814:	fb03 f202 	mul.w	r2, r3, r2
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	005b      	lsls	r3, r3, #1
 801381c:	4413      	add	r3, r2
 801381e:	63bb      	str	r3, [r7, #56]	; 0x38

    currentMCU++;
 8013820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013822:	3301      	adds	r3, #1
 8013824:	63fb      	str	r3, [r7, #60]	; 0x3c
    
    pChrom = pInBuffer;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	633b      	str	r3, [r7, #48]	; 0x30
    
    for(i= 0; i <  8; i++)
 801382a:	2300      	movs	r3, #0
 801382c:	647b      	str	r3, [r7, #68]	; 0x44
 801382e:	e061      	b.n	80138f4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x124>
    {
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
 8013830:	4b3b      	ldr	r3, [pc, #236]	; (8013920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 8013832:	691b      	ldr	r3, [r3, #16]
 8013834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013836:	429a      	cmp	r2, r3
 8013838:	d259      	bcs.n	80138ee <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x11e>
      {
        pOutAddr = pOutBuffer+ refline;        
 801383a:	68ba      	ldr	r2, [r7, #8]
 801383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383e:	4413      	add	r3, r2
 8013840:	637b      	str	r3, [r7, #52]	; 0x34

          for(j=0; j < 8; j++)
 8013842:	2300      	movs	r3, #0
 8013844:	643b      	str	r3, [r7, #64]	; 0x40
 8013846:	e04a      	b.n	80138de <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x10e>
          {           
            color_k = (int32_t)(*(pChrom + 192));
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	33c0      	adds	r3, #192	; 0xc0
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	623b      	str	r3, [r7, #32]
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	461a      	mov	r2, r3
 8013856:	6a3b      	ldr	r3, [r7, #32]
 8013858:	fb02 f303 	mul.w	r3, r2, r3
 801385c:	4a31      	ldr	r2, [pc, #196]	; (8013924 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 801385e:	fb82 1203 	smull	r1, r2, r2, r3
 8013862:	441a      	add	r2, r3
 8013864:	11d2      	asrs	r2, r2, #7
 8013866:	17db      	asrs	r3, r3, #31
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	61fb      	str	r3, [r7, #28]
            
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
 801386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386e:	3340      	adds	r3, #64	; 0x40
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	461a      	mov	r2, r3
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	fb02 f303 	mul.w	r3, r2, r3
 801387a:	4a2a      	ldr	r2, [pc, #168]	; (8013924 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 801387c:	fb82 1203 	smull	r1, r2, r2, r3
 8013880:	441a      	add	r2, r3
 8013882:	11d2      	asrs	r2, r2, #7
 8013884:	17db      	asrs	r3, r3, #31
 8013886:	1ad3      	subs	r3, r2, r3
 8013888:	61bb      	str	r3, [r7, #24]
            
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
 801388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388c:	3380      	adds	r3, #128	; 0x80
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	461a      	mov	r2, r3
 8013892:	6a3b      	ldr	r3, [r7, #32]
 8013894:	fb02 f303 	mul.w	r3, r2, r3
 8013898:	4a22      	ldr	r2, [pc, #136]	; (8013924 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x154>)
 801389a:	fb82 1203 	smull	r1, r2, r2, r3
 801389e:	441a      	add	r2, r3
 80138a0:	11d2      	asrs	r2, r2, #7
 80138a2:	17db      	asrs	r3, r3, #31
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	617b      	str	r3, [r7, #20]
          pOutAddr[JPEG_BLUE_OFFSET/8]  =  c_blue;
          
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)
            
          *(__IO uint16_t *)pOutAddr = 
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	10db      	asrs	r3, r3, #3
 80138ac:	02db      	lsls	r3, r3, #11
 80138ae:	b21a      	sxth	r2, r3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	109b      	asrs	r3, r3, #2
 80138b4:	015b      	lsls	r3, r3, #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
 80138b6:	b21b      	sxth	r3, r3
 80138b8:	4313      	orrs	r3, r2
 80138ba:	b21a      	sxth	r2, r3
            ((c_blue >> 3) << JPEG_BLUE_OFFSET);         
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	10db      	asrs	r3, r3, #3
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
 80138c0:	b21b      	sxth	r3, r3
 80138c2:	4313      	orrs	r3, r2
 80138c4:	b21b      	sxth	r3, r3
 80138c6:	b29a      	uxth	r2, r3
          *(__IO uint16_t *)pOutAddr = 
 80138c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ca:	801a      	strh	r2, [r3, #0]
            
#endif /* JPEG_RGB_FORMAT */          
          
            pOutAddr += JPEG_BYTES_PER_PIXEL;
 80138cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ce:	3302      	adds	r3, #2
 80138d0:	637b      	str	r3, [r7, #52]	; 0x34
          
            pChrom++;
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	3301      	adds	r3, #1
 80138d6:	633b      	str	r3, [r7, #48]	; 0x30
          for(j=0; j < 8; j++)
 80138d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138da:	3301      	adds	r3, #1
 80138dc:	643b      	str	r3, [r7, #64]	; 0x40
 80138de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138e0:	2b07      	cmp	r3, #7
 80138e2:	d9b1      	bls.n	8013848 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x78>
          }

        refline += JPEG_ConvertorParams.ScaledWidth;          
 80138e4:	4b0e      	ldr	r3, [pc, #56]	; (8013920 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x150>)
 80138e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138ea:	4413      	add	r3, r2
 80138ec:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i= 0; i <  8; i++)
 80138ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f0:	3301      	adds	r3, #1
 80138f2:	647b      	str	r3, [r7, #68]	; 0x44
 80138f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f6:	2b07      	cmp	r3, #7
 80138f8:	d99a      	bls.n	8013830 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x60>
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013900:	60fb      	str	r3, [r7, #12]
  while(currentMCU < (numberMCU + BlockIndex))
 8013902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4413      	add	r3, r2
 8013908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801390a:	429a      	cmp	r2, r3
 801390c:	f4ff af6d 	bcc.w	80137ea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x1a>
  }
  return numberMCU;
 8013910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013912:	4618      	mov	r0, r3
 8013914:	374c      	adds	r7, #76	; 0x4c
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	24040ac0 	.word	0x24040ac0
 8013924:	80808081 	.word	0x80808081

08013928 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
 8013928:	b480      	push	{r7}
 801392a:	b087      	sub	sp, #28
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4a7a      	ldr	r2, [pc, #488]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801393a:	6013      	str	r3, [r2, #0]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	4a78      	ldr	r2, [pc, #480]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013942:	6093      	str	r3, [r2, #8]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	689b      	ldr	r3, [r3, #8]
 8013948:	4a76      	ldr	r2, [pc, #472]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801394a:	60d3      	str	r3, [r2, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	68fa      	ldr	r2, [r7, #12]
 8013952:	6892      	ldr	r2, [r2, #8]
 8013954:	fb02 f303 	mul.w	r3, r2, r3
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	4a72      	ldr	r2, [pc, #456]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801395c:	6113      	str	r3, [r2, #16]
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	4a70      	ldr	r2, [pc, #448]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013964:	6053      	str	r3, [r2, #4]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8013966:	4b6f      	ldr	r3, [pc, #444]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b10      	cmp	r3, #16
 801396c:	d155      	bne.n	8013a1a <JPEG_GetDecodeColorConvertFunc+0xf2>
  {
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 801396e:	4b6d      	ldr	r3, [pc, #436]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d119      	bne.n	80139aa <JPEG_GetDecodeColorConvertFunc+0x82>
    {
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	4a6b      	ldr	r2, [pc, #428]	; (8013b28 <JPEG_GetDecodeColorConvertFunc+0x200>)
 801397a:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 801397c:	4b69      	ldr	r3, [pc, #420]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801397e:	689b      	ldr	r3, [r3, #8]
 8013980:	f003 030f 	and.w	r3, r3, #15
 8013984:	4a67      	ldr	r2, [pc, #412]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013986:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 8013988:	4b66      	ldr	r3, [pc, #408]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801398a:	695b      	ldr	r3, [r3, #20]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d005      	beq.n	801399c <JPEG_GetDecodeColorConvertFunc+0x74>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 8013990:	4b64      	ldr	r3, [pc, #400]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013992:	695b      	ldr	r3, [r3, #20]
 8013994:	f1c3 0310 	rsb	r3, r3, #16
 8013998:	4a62      	ldr	r2, [pc, #392]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801399a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 801399c:	4b61      	ldr	r3, [pc, #388]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 801399e:	2210      	movs	r2, #16
 80139a0:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 16;
 80139a2:	4b60      	ldr	r3, [pc, #384]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139a4:	2210      	movs	r2, #16
 80139a6:	621a      	str	r2, [r3, #32]
 80139a8:	e075      	b.n	8013a96 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80139aa:	4b5e      	ldr	r3, [pc, #376]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	2b02      	cmp	r3, #2
 80139b0:	d119      	bne.n	80139e6 <JPEG_GetDecodeColorConvertFunc+0xbe>
    {
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	4a5d      	ldr	r2, [pc, #372]	; (8013b2c <JPEG_GetDecodeColorConvertFunc+0x204>)
 80139b6:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
 80139b8:	4b5a      	ldr	r3, [pc, #360]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	f003 030f 	and.w	r3, r3, #15
 80139c0:	4a58      	ldr	r2, [pc, #352]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139c2:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80139c4:	4b57      	ldr	r3, [pc, #348]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139c6:	695b      	ldr	r3, [r3, #20]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d005      	beq.n	80139d8 <JPEG_GetDecodeColorConvertFunc+0xb0>
      {
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
 80139cc:	4b55      	ldr	r3, [pc, #340]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139ce:	695b      	ldr	r3, [r3, #20]
 80139d0:	f1c3 0310 	rsb	r3, r3, #16
 80139d4:	4a53      	ldr	r2, [pc, #332]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139d6:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 16;
 80139d8:	4b52      	ldr	r3, [pc, #328]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139da:	2210      	movs	r2, #16
 80139dc:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 80139de:	4b51      	ldr	r3, [pc, #324]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139e0:	2208      	movs	r2, #8
 80139e2:	621a      	str	r2, [r3, #32]
 80139e4:	e057      	b.n	8013a96 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }
    else /*4:4:4*/
    {
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	4a51      	ldr	r2, [pc, #324]	; (8013b30 <JPEG_GetDecodeColorConvertFunc+0x208>)
 80139ea:	601a      	str	r2, [r3, #0]

      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 80139ec:	4b4d      	ldr	r3, [pc, #308]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139ee:	689b      	ldr	r3, [r3, #8]
 80139f0:	f003 0307 	and.w	r3, r3, #7
 80139f4:	4a4b      	ldr	r2, [pc, #300]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139f6:	6153      	str	r3, [r2, #20]
      
      if(JPEG_ConvertorParams.LineOffset != 0)
 80139f8:	4b4a      	ldr	r3, [pc, #296]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d005      	beq.n	8013a0c <JPEG_GetDecodeColorConvertFunc+0xe4>
      {
        JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8013a00:	4b48      	ldr	r3, [pc, #288]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a02:	695b      	ldr	r3, [r3, #20]
 8013a04:	f1c3 0308 	rsb	r3, r3, #8
 8013a08:	4a46      	ldr	r2, [pc, #280]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a0a:	6153      	str	r3, [r2, #20]
      }
      JPEG_ConvertorParams.H_factor = 8;
 8013a0c:	4b45      	ldr	r3, [pc, #276]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a0e:	2208      	movs	r2, #8
 8013a10:	61da      	str	r2, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
 8013a12:	4b44      	ldr	r3, [pc, #272]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a14:	2208      	movs	r2, #8
 8013a16:	621a      	str	r2, [r3, #32]
 8013a18:	e03d      	b.n	8013a96 <JPEG_GetDecodeColorConvertFunc+0x16e>
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8013a1a:	4b42      	ldr	r3, [pc, #264]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d119      	bne.n	8013a56 <JPEG_GetDecodeColorConvertFunc+0x12e>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	4a43      	ldr	r2, [pc, #268]	; (8013b34 <JPEG_GetDecodeColorConvertFunc+0x20c>)
 8013a26:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013a28:	4b3e      	ldr	r3, [pc, #248]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a2a:	689b      	ldr	r3, [r3, #8]
 8013a2c:	f003 0307 	and.w	r3, r3, #7
 8013a30:	4a3c      	ldr	r2, [pc, #240]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a32:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8013a34:	4b3b      	ldr	r3, [pc, #236]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a36:	695b      	ldr	r3, [r3, #20]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d005      	beq.n	8013a48 <JPEG_GetDecodeColorConvertFunc+0x120>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8013a3c:	4b39      	ldr	r3, [pc, #228]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a3e:	695b      	ldr	r3, [r3, #20]
 8013a40:	f1c3 0308 	rsb	r3, r3, #8
 8013a44:	4a37      	ldr	r2, [pc, #220]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a46:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8013a48:	4b36      	ldr	r3, [pc, #216]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a4a:	2208      	movs	r2, #8
 8013a4c:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8013a4e:	4b35      	ldr	r3, [pc, #212]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a50:	2208      	movs	r2, #8
 8013a52:	621a      	str	r2, [r3, #32]
 8013a54:	e01f      	b.n	8013a96 <JPEG_GetDecodeColorConvertFunc+0x16e>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
 8013a56:	4b33      	ldr	r3, [pc, #204]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b30      	cmp	r3, #48	; 0x30
 8013a5c:	d119      	bne.n	8013a92 <JPEG_GetDecodeColorConvertFunc+0x16a>
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	4a35      	ldr	r2, [pc, #212]	; (8013b38 <JPEG_GetDecodeColorConvertFunc+0x210>)
 8013a62:	601a      	str	r2, [r3, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
 8013a64:	4b2f      	ldr	r3, [pc, #188]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a66:	689b      	ldr	r3, [r3, #8]
 8013a68:	f003 0307 	and.w	r3, r3, #7
 8013a6c:	4a2d      	ldr	r2, [pc, #180]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a6e:	6153      	str	r3, [r2, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
 8013a70:	4b2c      	ldr	r3, [pc, #176]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a72:	695b      	ldr	r3, [r3, #20]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d005      	beq.n	8013a84 <JPEG_GetDecodeColorConvertFunc+0x15c>
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
 8013a78:	4b2a      	ldr	r3, [pc, #168]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	f1c3 0308 	rsb	r3, r3, #8
 8013a80:	4a28      	ldr	r2, [pc, #160]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a82:	6153      	str	r3, [r2, #20]
    }
    JPEG_ConvertorParams.H_factor = 8;
 8013a84:	4b27      	ldr	r3, [pc, #156]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a86:	2208      	movs	r2, #8
 8013a88:	61da      	str	r2, [r3, #28]
    JPEG_ConvertorParams.V_factor  = 8;
 8013a8a:	4b26      	ldr	r3, [pc, #152]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a8c:	2208      	movs	r2, #8
 8013a8e:	621a      	str	r2, [r3, #32]
 8013a90:	e001      	b.n	8013a96 <JPEG_GetDecodeColorConvertFunc+0x16e>
  } 
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
 8013a92:	2301      	movs	r3, #1
 8013a94:	e040      	b.n	8013b18 <JPEG_GetDecodeColorConvertFunc+0x1f0>
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
 8013a96:	4b23      	ldr	r3, [pc, #140]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a98:	689a      	ldr	r2, [r3, #8]
 8013a9a:	4b22      	ldr	r3, [pc, #136]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013a9c:	695b      	ldr	r3, [r3, #20]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	4a20      	ldr	r2, [pc, #128]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013aa2:	6253      	str	r3, [r2, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
 8013aa4:	4b1f      	ldr	r3, [pc, #124]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013aa6:	689b      	ldr	r3, [r3, #8]
 8013aa8:	005b      	lsls	r3, r3, #1
 8013aaa:	4a1e      	ldr	r2, [pc, #120]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013aac:	6293      	str	r3, [r2, #40]	; 0x28
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
 8013aae:	4b1d      	ldr	r3, [pc, #116]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ab0:	689a      	ldr	r2, [r3, #8]
 8013ab2:	4b1c      	ldr	r3, [pc, #112]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ab4:	69db      	ldr	r3, [r3, #28]
 8013ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013aba:	617b      	str	r3, [r7, #20]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
 8013abc:	4b19      	ldr	r3, [pc, #100]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	4a18      	ldr	r2, [pc, #96]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ac2:	69d2      	ldr	r2, [r2, #28]
 8013ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ac8:	fb01 f202 	mul.w	r2, r1, r2
 8013acc:	1a9b      	subs	r3, r3, r2
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d002      	beq.n	8013ad8 <JPEG_GetDecodeColorConvertFunc+0x1b0>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	617b      	str	r3, [r7, #20]
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
 8013ad8:	4b12      	ldr	r3, [pc, #72]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ada:	68da      	ldr	r2, [r3, #12]
 8013adc:	4b11      	ldr	r3, [pc, #68]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ade:	6a1b      	ldr	r3, [r3, #32]
 8013ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ae4:	613b      	str	r3, [r7, #16]
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
 8013ae6:	4b0f      	ldr	r3, [pc, #60]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	4a0e      	ldr	r2, [pc, #56]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013aec:	6a12      	ldr	r2, [r2, #32]
 8013aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8013af2:	fb01 f202 	mul.w	r2, r1, r2
 8013af6:	1a9b      	subs	r3, r3, r2
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d002      	beq.n	8013b02 <JPEG_GetDecodeColorConvertFunc+0x1da>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	3301      	adds	r3, #1
 8013b00:	613b      	str	r3, [r7, #16]
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	693a      	ldr	r2, [r7, #16]
 8013b06:	fb02 f303 	mul.w	r3, r2, r3
 8013b0a:	4a06      	ldr	r2, [pc, #24]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
 8013b0e:	4b05      	ldr	r3, [pc, #20]	; (8013b24 <JPEG_GetDecodeColorConvertFunc+0x1fc>)
 8013b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8013b16:	2300      	movs	r3, #0
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	371c      	adds	r7, #28
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr
 8013b24:	24040ac0 	.word	0x24040ac0
 8013b28:	0801305d 	.word	0x0801305d
 8013b2c:	08013345 	.word	0x08013345
 8013b30:	08013549 	.word	0x08013549
 8013b34:	080136d9 	.word	0x080136d9
 8013b38:	080137d1 	.word	0x080137d1

08013b3c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013b3c:	8880      	ldrh	r0, [r0, #4]
 8013b3e:	4770      	bx	lr

08013b40 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	6803      	ldr	r3, [r0, #0]
 8013b44:	460c      	mov	r4, r1
 8013b46:	2100      	movs	r1, #0
 8013b48:	4605      	mov	r5, r0
 8013b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4c:	4798      	blx	r3
 8013b4e:	4606      	mov	r6, r0
 8013b50:	682b      	ldr	r3, [r5, #0]
 8013b52:	4628      	mov	r0, r5
 8013b54:	1ba4      	subs	r4, r4, r6
 8013b56:	6a1b      	ldr	r3, [r3, #32]
 8013b58:	b2a4      	uxth	r4, r4
 8013b5a:	4798      	blx	r3
 8013b5c:	fbb4 f0f0 	udiv	r0, r4, r0
 8013b60:	bd70      	pop	{r4, r5, r6, pc}

08013b62 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013b62:	2300      	movs	r3, #0
 8013b64:	8083      	strh	r3, [r0, #4]
 8013b66:	4770      	bx	lr

08013b68 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013b68:	b510      	push	{r4, lr}
 8013b6a:	6803      	ldr	r3, [r0, #0]
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	8881      	ldrh	r1, [r0, #4]
 8013b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b72:	4798      	blx	r3
 8013b74:	88a3      	ldrh	r3, [r4, #4]
 8013b76:	3301      	adds	r3, #1
 8013b78:	80a3      	strh	r3, [r4, #4]
 8013b7a:	bd10      	pop	{r4, pc}

08013b7c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013b7c:	6803      	ldr	r3, [r0, #0]
 8013b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b80:	4718      	bx	r3

08013b82 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013b82:	4770      	bx	lr

08013b84 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013b84:	4a02      	ldr	r2, [pc, #8]	; (8013b90 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013b86:	6002      	str	r2, [r0, #0]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	8082      	strh	r2, [r0, #4]
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	08028924 	.word	0x08028924

08013b94 <_ZN8touchgfx9Container13getFirstChildEv>:
 8013b94:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013b96:	4770      	bx	lr

08013b98 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013b98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	b12b      	cbz	r3, 8013baa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013b9e:	b920      	cbnz	r0, 8013baa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013ba0:	1a5a      	subs	r2, r3, r1
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	4250      	negs	r0, r2
 8013ba6:	4150      	adcs	r0, r2
 8013ba8:	e7f8      	b.n	8013b9c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013baa:	4770      	bx	lr

08013bac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013bac:	2300      	movs	r3, #0
 8013bae:	6148      	str	r0, [r1, #20]
 8013bb0:	618b      	str	r3, [r1, #24]
 8013bb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013bb4:	b913      	cbnz	r3, 8013bbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013bb6:	6281      	str	r1, [r0, #40]	; 0x28
 8013bb8:	4770      	bx	lr
 8013bba:	4613      	mov	r3, r2
 8013bbc:	699a      	ldr	r2, [r3, #24]
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	d1fb      	bne.n	8013bba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013bc2:	6199      	str	r1, [r3, #24]
 8013bc4:	4770      	bx	lr

08013bc6 <_ZN8touchgfx9Container9removeAllEv>:
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013bca:	b123      	cbz	r3, 8013bd6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013bcc:	6999      	ldr	r1, [r3, #24]
 8013bce:	6281      	str	r1, [r0, #40]	; 0x28
 8013bd0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013bd4:	e7f8      	b.n	8013bc8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013bd6:	4770      	bx	lr

08013bd8 <_ZN8touchgfx9Container6unlinkEv>:
 8013bd8:	2300      	movs	r3, #0
 8013bda:	6283      	str	r3, [r0, #40]	; 0x28
 8013bdc:	4770      	bx	lr

08013bde <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013bde:	2200      	movs	r2, #0
 8013be0:	8002      	strh	r2, [r0, #0]
 8013be2:	8042      	strh	r2, [r0, #2]
 8013be4:	8082      	strh	r2, [r0, #4]
 8013be6:	80c2      	strh	r2, [r0, #6]
 8013be8:	4770      	bx	lr

08013bea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013bea:	b570      	push	{r4, r5, r6, lr}
 8013bec:	460d      	mov	r5, r1
 8013bee:	4616      	mov	r6, r2
 8013bf0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013bf2:	b13c      	cbz	r4, 8013c04 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bfe:	4798      	blx	r3
 8013c00:	69a4      	ldr	r4, [r4, #24]
 8013c02:	e7f6      	b.n	8013bf2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013c04:	bd70      	pop	{r4, r5, r6, pc}

08013c06 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013c06:	b538      	push	{r3, r4, r5, lr}
 8013c08:	460d      	mov	r5, r1
 8013c0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c0c:	b134      	cbz	r4, 8013c1c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013c0e:	682b      	ldr	r3, [r5, #0]
 8013c10:	4621      	mov	r1, r4
 8013c12:	4628      	mov	r0, r5
 8013c14:	689b      	ldr	r3, [r3, #8]
 8013c16:	4798      	blx	r3
 8013c18:	69a4      	ldr	r4, [r4, #24]
 8013c1a:	e7f7      	b.n	8013c0c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013c1c:	bd38      	pop	{r3, r4, r5, pc}

08013c1e <_ZNK8touchgfx9Container17invalidateContentEv>:
 8013c1e:	b510      	push	{r4, lr}
 8013c20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013c22:	b12c      	cbz	r4, 8013c30 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013c24:	6823      	ldr	r3, [r4, #0]
 8013c26:	4620      	mov	r0, r4
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	4798      	blx	r3
 8013c2c:	69a4      	ldr	r4, [r4, #24]
 8013c2e:	e7f8      	b.n	8013c22 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013c30:	bd10      	pop	{r4, pc}

08013c32 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013c32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c34:	b19b      	cbz	r3, 8013c5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013c36:	428b      	cmp	r3, r1
 8013c38:	d109      	bne.n	8013c4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013c3a:	699a      	ldr	r2, [r3, #24]
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	6159      	str	r1, [r3, #20]
 8013c40:	6282      	str	r2, [r0, #40]	; 0x28
 8013c42:	b902      	cbnz	r2, 8013c46 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013c44:	4770      	bx	lr
 8013c46:	6199      	str	r1, [r3, #24]
 8013c48:	4770      	bx	lr
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	b13a      	cbz	r2, 8013c5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013c4e:	699a      	ldr	r2, [r3, #24]
 8013c50:	428a      	cmp	r2, r1
 8013c52:	d1fa      	bne.n	8013c4a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013c54:	698a      	ldr	r2, [r1, #24]
 8013c56:	619a      	str	r2, [r3, #24]
 8013c58:	2300      	movs	r3, #0
 8013c5a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013c5e:	4770      	bx	lr

08013c60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013c60:	b410      	push	{r4}
 8013c62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013c64:	4604      	mov	r4, r0
 8013c66:	b92b      	cbnz	r3, 8013c74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013c68:	6803      	ldr	r3, [r0, #0]
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c72:	4718      	bx	r3
 8013c74:	b941      	cbnz	r1, 8013c88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013c76:	6193      	str	r3, [r2, #24]
 8013c78:	6282      	str	r2, [r0, #40]	; 0x28
 8013c7a:	6154      	str	r4, [r2, #20]
 8013c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	4603      	mov	r3, r0
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d0f9      	beq.n	8013c7c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013c88:	4299      	cmp	r1, r3
 8013c8a:	6998      	ldr	r0, [r3, #24]
 8013c8c:	d1f9      	bne.n	8013c82 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013c8e:	6190      	str	r0, [r2, #24]
 8013c90:	618a      	str	r2, [r1, #24]
 8013c92:	e7f2      	b.n	8013c7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013c94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c98:	461f      	mov	r7, r3
 8013c9a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013c9e:	460d      	mov	r5, r1
 8013ca0:	4616      	mov	r6, r2
 8013ca2:	b103      	cbz	r3, 8013ca6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013ca4:	6038      	str	r0, [r7, #0]
 8013ca6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013ca8:	b314      	cbz	r4, 8013cf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013caa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013cae:	b1eb      	cbz	r3, 8013cec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013cb0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013cb4:	428d      	cmp	r5, r1
 8013cb6:	db19      	blt.n	8013cec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013cb8:	b289      	uxth	r1, r1
 8013cba:	8923      	ldrh	r3, [r4, #8]
 8013cbc:	440b      	add	r3, r1
 8013cbe:	b21b      	sxth	r3, r3
 8013cc0:	429d      	cmp	r5, r3
 8013cc2:	da13      	bge.n	8013cec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013cc4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013cc8:	4296      	cmp	r6, r2
 8013cca:	db0f      	blt.n	8013cec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013ccc:	b292      	uxth	r2, r2
 8013cce:	8963      	ldrh	r3, [r4, #10]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	b21b      	sxth	r3, r3
 8013cd4:	429e      	cmp	r6, r3
 8013cd6:	da09      	bge.n	8013cec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	1ab2      	subs	r2, r6, r2
 8013cdc:	1a69      	subs	r1, r5, r1
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8013ce4:	b212      	sxth	r2, r2
 8013ce6:	463b      	mov	r3, r7
 8013ce8:	b209      	sxth	r1, r1
 8013cea:	47c0      	blx	r8
 8013cec:	69a4      	ldr	r4, [r4, #24]
 8013cee:	e7db      	b.n	8013ca8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013cf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf8:	4c6d      	ldr	r4, [pc, #436]	; (8013eb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013cfa:	b0a1      	sub	sp, #132	; 0x84
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	6824      	ldr	r4, [r4, #0]
 8013d00:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013d02:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013d06:	2400      	movs	r4, #0
 8013d08:	9303      	str	r3, [sp, #12]
 8013d0a:	802c      	strh	r4, [r5, #0]
 8013d0c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013d0e:	802c      	strh	r4, [r5, #0]
 8013d10:	601c      	str	r4, [r3, #0]
 8013d12:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013d16:	f7ff ffbd 	bl	8013c94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013d1a:	f1b9 0f03 	cmp.w	r9, #3
 8013d1e:	f340 80c1 	ble.w	8013ea4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013d22:	4631      	mov	r1, r6
 8013d24:	a80c      	add	r0, sp, #48	; 0x30
 8013d26:	f003 fb27 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d2a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013d2e:	9306      	str	r3, [sp, #24]
 8013d30:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013d34:	9307      	str	r3, [sp, #28]
 8013d36:	9b03      	ldr	r3, [sp, #12]
 8013d38:	f8d3 a000 	ldr.w	sl, [r3]
 8013d3c:	f1ba 0f00 	cmp.w	sl, #0
 8013d40:	f000 80b3 	beq.w	8013eaa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8013d44:	4651      	mov	r1, sl
 8013d46:	a810      	add	r0, sp, #64	; 0x40
 8013d48:	f003 fb16 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d4c:	2002      	movs	r0, #2
 8013d4e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013d52:	9b01      	ldr	r3, [sp, #4]
 8013d54:	9a06      	ldr	r2, [sp, #24]
 8013d56:	fb91 f1f0 	sdiv	r1, r1, r0
 8013d5a:	189d      	adds	r5, r3, r2
 8013d5c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013d60:	9a07      	ldr	r2, [sp, #28]
 8013d62:	4419      	add	r1, r3
 8013d64:	9b02      	ldr	r3, [sp, #8]
 8013d66:	4413      	add	r3, r2
 8013d68:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013d6c:	1a6d      	subs	r5, r5, r1
 8013d6e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013d72:	fb92 f2f0 	sdiv	r2, r2, r0
 8013d76:	440a      	add	r2, r1
 8013d78:	1a9b      	subs	r3, r3, r2
 8013d7a:	435b      	muls	r3, r3
 8013d7c:	fb05 3505 	mla	r5, r5, r5, r3
 8013d80:	4f4c      	ldr	r7, [pc, #304]	; (8013eb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8013d82:	ac10      	add	r4, sp, #64	; 0x40
 8013d84:	f1b9 0f0c 	cmp.w	r9, #12
 8013d88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d94:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013d9c:	f04f 0303 	mov.w	r3, #3
 8013da0:	bfd8      	it	le
 8013da2:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013da6:	f04f 0400 	mov.w	r4, #0
 8013daa:	f8cd 9000 	str.w	r9, [sp]
 8013dae:	bfcc      	ite	gt
 8013db0:	4698      	movgt	r8, r3
 8013db2:	fb92 f8f3 	sdivle	r8, r2, r3
 8013db6:	1c63      	adds	r3, r4, #1
 8013db8:	aa10      	add	r2, sp, #64	; 0x40
 8013dba:	f004 0401 	and.w	r4, r4, #1
 8013dbe:	f04f 0b00 	mov.w	fp, #0
 8013dc2:	9308      	str	r3, [sp, #32]
 8013dc4:	9b00      	ldr	r3, [sp, #0]
 8013dc6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013dca:	fb93 f3f8 	sdiv	r3, r3, r8
 8013dce:	3404      	adds	r4, #4
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	9304      	str	r3, [sp, #16]
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013dda:	fb13 f302 	smulbb	r3, r3, r2
 8013dde:	9a01      	ldr	r2, [sp, #4]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	1899      	adds	r1, r3, r2
 8013de4:	9305      	str	r3, [sp, #20]
 8013de6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013dea:	b209      	sxth	r1, r1
 8013dec:	4299      	cmp	r1, r3
 8013dee:	db4d      	blt.n	8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013df0:	8932      	ldrh	r2, [r6, #8]
 8013df2:	4413      	add	r3, r2
 8013df4:	b21b      	sxth	r3, r3
 8013df6:	4299      	cmp	r1, r3
 8013df8:	da48      	bge.n	8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013dfa:	9b04      	ldr	r3, [sp, #16]
 8013dfc:	6827      	ldr	r7, [r4, #0]
 8013dfe:	fb17 f703 	smulbb	r7, r7, r3
 8013e02:	9b02      	ldr	r3, [sp, #8]
 8013e04:	b2bf      	uxth	r7, r7
 8013e06:	18fa      	adds	r2, r7, r3
 8013e08:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013e0c:	b212      	sxth	r2, r2
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	db3c      	blt.n	8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013e12:	8970      	ldrh	r0, [r6, #10]
 8013e14:	4403      	add	r3, r0
 8013e16:	b21b      	sxth	r3, r3
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	da37      	bge.n	8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4630      	mov	r0, r6
 8013e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e22:	ab0b      	add	r3, sp, #44	; 0x2c
 8013e24:	f7ff ff36 	bl	8013c94 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e2a:	b37a      	cbz	r2, 8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013e2c:	4552      	cmp	r2, sl
 8013e2e:	d02d      	beq.n	8013e8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013e30:	4611      	mov	r1, r2
 8013e32:	a80e      	add	r0, sp, #56	; 0x38
 8013e34:	9209      	str	r2, [sp, #36]	; 0x24
 8013e36:	f003 fa9f 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e3a:	f04f 0e02 	mov.w	lr, #2
 8013e3e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013e42:	9a06      	ldr	r2, [sp, #24]
 8013e44:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013e48:	9b01      	ldr	r3, [sp, #4]
 8013e4a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8013e4e:	4413      	add	r3, r2
 8013e50:	9a07      	ldr	r2, [sp, #28]
 8013e52:	fb91 f1fe 	sdiv	r1, r1, lr
 8013e56:	fb9c fcfe 	sdiv	ip, ip, lr
 8013e5a:	4401      	add	r1, r0
 8013e5c:	1a58      	subs	r0, r3, r1
 8013e5e:	9b02      	ldr	r3, [sp, #8]
 8013e60:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013e64:	4413      	add	r3, r2
 8013e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e68:	448c      	add	ip, r1
 8013e6a:	eba3 030c 	sub.w	r3, r3, ip
 8013e6e:	435b      	muls	r3, r3
 8013e70:	fb00 3300 	mla	r3, r0, r0, r3
 8013e74:	42ab      	cmp	r3, r5
 8013e76:	d208      	bcs.n	8013e8a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8013e78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e7a:	461d      	mov	r5, r3
 8013e7c:	9803      	ldr	r0, [sp, #12]
 8013e7e:	6001      	str	r1, [r0, #0]
 8013e80:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013e82:	9805      	ldr	r0, [sp, #20]
 8013e84:	8008      	strh	r0, [r1, #0]
 8013e86:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013e88:	800f      	strh	r7, [r1, #0]
 8013e8a:	4692      	mov	sl, r2
 8013e8c:	f10b 0b01 	add.w	fp, fp, #1
 8013e90:	3408      	adds	r4, #8
 8013e92:	f1bb 0f04 	cmp.w	fp, #4
 8013e96:	d19d      	bne.n	8013dd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8013e98:	9b00      	ldr	r3, [sp, #0]
 8013e9a:	9c08      	ldr	r4, [sp, #32]
 8013e9c:	444b      	add	r3, r9
 8013e9e:	4544      	cmp	r4, r8
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	d188      	bne.n	8013db6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8013ea4:	b021      	add	sp, #132	; 0x84
 8013ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eaa:	f04f 35ff 	mov.w	r5, #4294967295
 8013eae:	e767      	b.n	8013d80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013eb0:	24041b0c 	.word	0x24041b0c
 8013eb4:	08027818 	.word	0x08027818

08013eb8 <_ZN8touchgfx4RectaNERKS0_>:
 8013eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ebc:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013ec0:	888c      	ldrh	r4, [r1, #4]
 8013ec2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013ec6:	443c      	add	r4, r7
 8013ec8:	b2a4      	uxth	r4, r4
 8013eca:	fa0f f884 	sxth.w	r8, r4
 8013ece:	45c1      	cmp	r9, r8
 8013ed0:	da2f      	bge.n	8013f32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013ed2:	8882      	ldrh	r2, [r0, #4]
 8013ed4:	444a      	add	r2, r9
 8013ed6:	b292      	uxth	r2, r2
 8013ed8:	fa0f fe82 	sxth.w	lr, r2
 8013edc:	4577      	cmp	r7, lr
 8013ede:	da28      	bge.n	8013f32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013ee0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013ee4:	88cb      	ldrh	r3, [r1, #6]
 8013ee6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013eea:	442b      	add	r3, r5
 8013eec:	b21b      	sxth	r3, r3
 8013eee:	429e      	cmp	r6, r3
 8013ef0:	da1f      	bge.n	8013f32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013ef2:	88c3      	ldrh	r3, [r0, #6]
 8013ef4:	4433      	add	r3, r6
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	fa0f fc83 	sxth.w	ip, r3
 8013efc:	4565      	cmp	r5, ip
 8013efe:	da18      	bge.n	8013f32 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013f00:	454f      	cmp	r7, r9
 8013f02:	bfb8      	it	lt
 8013f04:	464f      	movlt	r7, r9
 8013f06:	42b5      	cmp	r5, r6
 8013f08:	bfb8      	it	lt
 8013f0a:	4635      	movlt	r5, r6
 8013f0c:	45f0      	cmp	r8, lr
 8013f0e:	bfd8      	it	le
 8013f10:	4622      	movle	r2, r4
 8013f12:	1bd2      	subs	r2, r2, r7
 8013f14:	8082      	strh	r2, [r0, #4]
 8013f16:	884a      	ldrh	r2, [r1, #2]
 8013f18:	88c9      	ldrh	r1, [r1, #6]
 8013f1a:	8007      	strh	r7, [r0, #0]
 8013f1c:	440a      	add	r2, r1
 8013f1e:	8045      	strh	r5, [r0, #2]
 8013f20:	b292      	uxth	r2, r2
 8013f22:	b211      	sxth	r1, r2
 8013f24:	458c      	cmp	ip, r1
 8013f26:	bfa8      	it	ge
 8013f28:	4613      	movge	r3, r2
 8013f2a:	1b5b      	subs	r3, r3, r5
 8013f2c:	80c3      	strh	r3, [r0, #6]
 8013f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f32:	2300      	movs	r3, #0
 8013f34:	8003      	strh	r3, [r0, #0]
 8013f36:	8043      	strh	r3, [r0, #2]
 8013f38:	8083      	strh	r3, [r0, #4]
 8013f3a:	80c3      	strh	r3, [r0, #6]
 8013f3c:	e7f7      	b.n	8013f2e <_ZN8touchgfx4RectaNERKS0_+0x76>

08013f3e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8013f3e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	dd06      	ble.n	8013f54 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013f46:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	bfcc      	ite	gt
 8013f4e:	2000      	movgt	r0, #0
 8013f50:	2001      	movle	r0, #1
 8013f52:	4770      	bx	lr
 8013f54:	2001      	movs	r0, #1
 8013f56:	4770      	bx	lr

08013f58 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	4604      	mov	r4, r0
 8013f60:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013f62:	8003      	strh	r3, [r0, #0]
 8013f64:	8043      	strh	r3, [r0, #2]
 8013f66:	8083      	strh	r3, [r0, #4]
 8013f68:	80c3      	strh	r3, [r0, #6]
 8013f6a:	2d00      	cmp	r5, #0
 8013f6c:	d040      	beq.n	8013ff0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013f6e:	1d28      	adds	r0, r5, #4
 8013f70:	f7ff ffe5 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f74:	b988      	cbnz	r0, 8013f9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013f76:	4620      	mov	r0, r4
 8013f78:	f7ff ffe1 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f7c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013f80:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013f84:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013f88:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013f8c:	b138      	cbz	r0, 8013f9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013f8e:	8022      	strh	r2, [r4, #0]
 8013f90:	8063      	strh	r3, [r4, #2]
 8013f92:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013f96:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013f9a:	69ad      	ldr	r5, [r5, #24]
 8013f9c:	e7e5      	b.n	8013f6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013f9e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013fa2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013fa6:	4290      	cmp	r0, r2
 8013fa8:	4607      	mov	r7, r0
 8013faa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013fae:	460e      	mov	r6, r1
 8013fb0:	bfa8      	it	ge
 8013fb2:	4617      	movge	r7, r2
 8013fb4:	4299      	cmp	r1, r3
 8013fb6:	4472      	add	r2, lr
 8013fb8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013fbc:	bfa8      	it	ge
 8013fbe:	461e      	movge	r6, r3
 8013fc0:	4440      	add	r0, r8
 8013fc2:	4471      	add	r1, lr
 8013fc4:	4463      	add	r3, ip
 8013fc6:	b200      	sxth	r0, r0
 8013fc8:	8027      	strh	r7, [r4, #0]
 8013fca:	b212      	sxth	r2, r2
 8013fcc:	8066      	strh	r6, [r4, #2]
 8013fce:	b209      	sxth	r1, r1
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	4290      	cmp	r0, r2
 8013fd4:	bfac      	ite	ge
 8013fd6:	ebc7 0200 	rsbge	r2, r7, r0
 8013fda:	ebc7 0202 	rsblt	r2, r7, r2
 8013fde:	4299      	cmp	r1, r3
 8013fe0:	bfac      	ite	ge
 8013fe2:	ebc6 0301 	rsbge	r3, r6, r1
 8013fe6:	ebc6 0303 	rsblt	r3, r6, r3
 8013fea:	80a2      	strh	r2, [r4, #4]
 8013fec:	80e3      	strh	r3, [r4, #6]
 8013fee:	e7d4      	b.n	8013f9a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ff6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013ff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013ffa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013ffe:	b383      	cbz	r3, 8014062 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014000:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014002:	b374      	cbz	r4, 8014062 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014004:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014008:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801400c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014010:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014014:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014018:	b303      	cbz	r3, 801405c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801401a:	4668      	mov	r0, sp
 801401c:	1d21      	adds	r1, r4, #4
 801401e:	f8ad 5000 	strh.w	r5, [sp]
 8014022:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014026:	f8ad 7004 	strh.w	r7, [sp, #4]
 801402a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801402e:	f7ff ff43 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8014032:	4668      	mov	r0, sp
 8014034:	f7ff ff83 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014038:	b980      	cbnz	r0, 801405c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801403a:	f8bd 3000 	ldrh.w	r3, [sp]
 801403e:	4669      	mov	r1, sp
 8014040:	88a2      	ldrh	r2, [r4, #4]
 8014042:	4620      	mov	r0, r4
 8014044:	1a9b      	subs	r3, r3, r2
 8014046:	88e2      	ldrh	r2, [r4, #6]
 8014048:	f8ad 3000 	strh.w	r3, [sp]
 801404c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014050:	1a9b      	subs	r3, r3, r2
 8014052:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	689b      	ldr	r3, [r3, #8]
 801405a:	4798      	blx	r3
 801405c:	69a4      	ldr	r4, [r4, #24]
 801405e:	2c00      	cmp	r4, #0
 8014060:	d1d8      	bne.n	8014014 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014062:	b002      	add	sp, #8
 8014064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014068 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014068:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801406a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801406e:	460d      	mov	r5, r1
 8014070:	4616      	mov	r6, r2
 8014072:	b323      	cbz	r3, 80140be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014074:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014076:	b314      	cbz	r4, 80140be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014078:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801407c:	b1eb      	cbz	r3, 80140ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801407e:	6828      	ldr	r0, [r5, #0]
 8014080:	466b      	mov	r3, sp
 8014082:	6869      	ldr	r1, [r5, #4]
 8014084:	c303      	stmia	r3!, {r0, r1}
 8014086:	4668      	mov	r0, sp
 8014088:	1d21      	adds	r1, r4, #4
 801408a:	f7ff ff15 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 801408e:	4668      	mov	r0, sp
 8014090:	f7ff ff55 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014094:	b988      	cbnz	r0, 80140ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014096:	f8bd 3000 	ldrh.w	r3, [sp]
 801409a:	4669      	mov	r1, sp
 801409c:	88a2      	ldrh	r2, [r4, #4]
 801409e:	4620      	mov	r0, r4
 80140a0:	1a9b      	subs	r3, r3, r2
 80140a2:	88e2      	ldrh	r2, [r4, #6]
 80140a4:	f8ad 3000 	strh.w	r3, [sp]
 80140a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80140ac:	1a9b      	subs	r3, r3, r2
 80140ae:	4632      	mov	r2, r6
 80140b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140b8:	4798      	blx	r3
 80140ba:	69a4      	ldr	r4, [r4, #24]
 80140bc:	e7db      	b.n	8014076 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80140be:	b002      	add	sp, #8
 80140c0:	bd70      	pop	{r4, r5, r6, pc}

080140c2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80140c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80140c6:	4770      	bx	lr

080140c8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80140c8:	4770      	bx	lr

080140ca <_ZN8touchgfx3HAL10FlushCacheEv>:
 80140ca:	4770      	bx	lr

080140cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80140cc:	6803      	ldr	r3, [r0, #0]
 80140ce:	b513      	push	{r0, r1, r4, lr}
 80140d0:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80140d4:	2300      	movs	r3, #0
 80140d6:	e9cd 3300 	strd	r3, r3, [sp]
 80140da:	466b      	mov	r3, sp
 80140dc:	47a0      	blx	r4
 80140de:	b002      	add	sp, #8
 80140e0:	bd10      	pop	{r4, pc}

080140e2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80140e2:	2301      	movs	r3, #1
 80140e4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80140e8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80140ec:	4770      	bx	lr

080140ee <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80140ee:	2301      	movs	r3, #1
 80140f0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80140f4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80140f8:	4770      	bx	lr

080140fa <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80140fa:	6843      	ldr	r3, [r0, #4]
 80140fc:	2201      	movs	r2, #1
 80140fe:	725a      	strb	r2, [r3, #9]
 8014100:	6840      	ldr	r0, [r0, #4]
 8014102:	6803      	ldr	r3, [r0, #0]
 8014104:	691b      	ldr	r3, [r3, #16]
 8014106:	4718      	bx	r3

08014108 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014108:	6840      	ldr	r0, [r0, #4]
 801410a:	6803      	ldr	r3, [r0, #0]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	4718      	bx	r3

08014110 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014110:	b530      	push	{r4, r5, lr}
 8014112:	b08b      	sub	sp, #44	; 0x2c
 8014114:	6804      	ldr	r4, [r0, #0]
 8014116:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801411a:	9509      	str	r5, [sp, #36]	; 0x24
 801411c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014120:	9508      	str	r5, [sp, #32]
 8014122:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014126:	9507      	str	r5, [sp, #28]
 8014128:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801412c:	9506      	str	r5, [sp, #24]
 801412e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014132:	9505      	str	r5, [sp, #20]
 8014134:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014138:	9504      	str	r5, [sp, #16]
 801413a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801413e:	9503      	str	r5, [sp, #12]
 8014140:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014144:	9502      	str	r5, [sp, #8]
 8014146:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801414a:	e9cd 3500 	strd	r3, r5, [sp]
 801414e:	4613      	mov	r3, r2
 8014150:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8014152:	2200      	movs	r2, #0
 8014154:	47a0      	blx	r4
 8014156:	b00b      	add	sp, #44	; 0x2c
 8014158:	bd30      	pop	{r4, r5, pc}
	...

0801415c <_ZN8touchgfx3HAL10beginFrameEv>:
 801415c:	4b04      	ldr	r3, [pc, #16]	; (8014170 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	b123      	cbz	r3, 801416c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014162:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014166:	f080 0001 	eor.w	r0, r0, #1
 801416a:	4770      	bx	lr
 801416c:	2001      	movs	r0, #1
 801416e:	4770      	bx	lr
 8014170:	24041b0a 	.word	0x24041b0a

08014174 <_ZN8touchgfx3HAL8endFrameEv>:
 8014174:	b510      	push	{r4, lr}
 8014176:	4604      	mov	r4, r0
 8014178:	6840      	ldr	r0, [r0, #4]
 801417a:	6803      	ldr	r3, [r0, #0]
 801417c:	689b      	ldr	r3, [r3, #8]
 801417e:	4798      	blx	r3
 8014180:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014184:	b113      	cbz	r3, 801418c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014186:	2301      	movs	r3, #1
 8014188:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801418c:	bd10      	pop	{r4, pc}

0801418e <_ZN8touchgfx3HAL10initializeEv>:
 801418e:	b510      	push	{r4, lr}
 8014190:	4604      	mov	r4, r0
 8014192:	f7fb fc7b 	bl	800fa8c <_ZN8touchgfx10OSWrappers10initializeEv>
 8014196:	6860      	ldr	r0, [r4, #4]
 8014198:	6803      	ldr	r3, [r0, #0]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	4798      	blx	r3
 801419e:	68e0      	ldr	r0, [r4, #12]
 80141a0:	6803      	ldr	r3, [r0, #0]
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	4798      	blx	r3
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	4620      	mov	r0, r4
 80141aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141b0:	4718      	bx	r3

080141b2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80141b2:	b508      	push	{r3, lr}
 80141b4:	6803      	ldr	r3, [r0, #0]
 80141b6:	4604      	mov	r4, r0
 80141b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141bc:	4798      	blx	r3
 80141be:	6823      	ldr	r3, [r4, #0]
 80141c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80141c2:	4620      	mov	r0, r4
 80141c4:	4798      	blx	r3
 80141c6:	f7fb fcd7 	bl	800fb78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80141ca:	6823      	ldr	r3, [r4, #0]
 80141cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ce:	e7f8      	b.n	80141c2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080141d0 <_ZN8touchgfx3HAL4tickEv>:
 80141d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80141d2:	6803      	ldr	r3, [r0, #0]
 80141d4:	4604      	mov	r4, r0
 80141d6:	4d5b      	ldr	r5, [pc, #364]	; (8014344 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80141d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80141dc:	4798      	blx	r3
 80141de:	2800      	cmp	r0, #0
 80141e0:	f000 8095 	beq.w	801430e <_ZN8touchgfx3HAL4tickEv+0x13e>
 80141e4:	2001      	movs	r0, #1
 80141e6:	2600      	movs	r6, #0
 80141e8:	f7fa f858 	bl	800e29c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80141ec:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80141f0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80141f4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80141f8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80141fc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014200:	b133      	cbz	r3, 8014210 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014202:	6823      	ldr	r3, [r4, #0]
 8014204:	4620      	mov	r0, r4
 8014206:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801420a:	4798      	blx	r3
 801420c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014210:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014214:	2601      	movs	r6, #1
 8014216:	6862      	ldr	r2, [r4, #4]
 8014218:	f083 0301 	eor.w	r3, r3, #1
 801421c:	702e      	strb	r6, [r5, #0]
 801421e:	7253      	strb	r3, [r2, #9]
 8014220:	f002 f83a 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 8014224:	6803      	ldr	r3, [r0, #0]
 8014226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014228:	4798      	blx	r3
 801422a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801422e:	b90b      	cbnz	r3, 8014234 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014230:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014234:	f002 f830 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 8014238:	6803      	ldr	r3, [r0, #0]
 801423a:	695b      	ldr	r3, [r3, #20]
 801423c:	4798      	blx	r3
 801423e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014240:	6803      	ldr	r3, [r0, #0]
 8014242:	691b      	ldr	r3, [r3, #16]
 8014244:	4798      	blx	r3
 8014246:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801424a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801424e:	3b01      	subs	r3, #1
 8014250:	b2db      	uxtb	r3, r3
 8014252:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014256:	b10a      	cbz	r2, 801425c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014258:	2b00      	cmp	r3, #0
 801425a:	d1eb      	bne.n	8014234 <_ZN8touchgfx3HAL4tickEv+0x64>
 801425c:	4a3a      	ldr	r2, [pc, #232]	; (8014348 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801425e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8014262:	7813      	ldrb	r3, [r2, #0]
 8014264:	3301      	adds	r3, #1
 8014266:	b25b      	sxtb	r3, r3
 8014268:	4299      	cmp	r1, r3
 801426a:	7013      	strb	r3, [r2, #0]
 801426c:	dc10      	bgt.n	8014290 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801426e:	2300      	movs	r3, #0
 8014270:	68e0      	ldr	r0, [r4, #12]
 8014272:	a902      	add	r1, sp, #8
 8014274:	7013      	strb	r3, [r2, #0]
 8014276:	aa03      	add	r2, sp, #12
 8014278:	6803      	ldr	r3, [r0, #0]
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	4798      	blx	r3
 801427e:	6823      	ldr	r3, [r4, #0]
 8014280:	2800      	cmp	r0, #0
 8014282:	d050      	beq.n	8014326 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014288:	4620      	mov	r0, r4
 801428a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801428e:	4798      	blx	r3
 8014290:	2300      	movs	r3, #0
 8014292:	6960      	ldr	r0, [r4, #20]
 8014294:	f88d 3007 	strb.w	r3, [sp, #7]
 8014298:	b158      	cbz	r0, 80142b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801429a:	6803      	ldr	r3, [r0, #0]
 801429c:	f10d 0107 	add.w	r1, sp, #7
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	4798      	blx	r3
 80142a4:	b128      	cbz	r0, 80142b2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80142a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80142ac:	6803      	ldr	r3, [r0, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	4798      	blx	r3
 80142b2:	f104 001c 	add.w	r0, r4, #28
 80142b6:	f010 f8e1 	bl	802447c <_ZN8touchgfx8Gestures4tickEv>
 80142ba:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80142be:	b30b      	cbz	r3, 8014304 <_ZN8touchgfx3HAL4tickEv+0x134>
 80142c0:	6920      	ldr	r0, [r4, #16]
 80142c2:	6803      	ldr	r3, [r0, #0]
 80142c4:	691b      	ldr	r3, [r3, #16]
 80142c6:	4798      	blx	r3
 80142c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80142ca:	4606      	mov	r6, r0
 80142cc:	b903      	cbnz	r3, 80142d0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80142ce:	6720      	str	r0, [r4, #112]	; 0x70
 80142d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80142d2:	4a1e      	ldr	r2, [pc, #120]	; (801434c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80142d4:	1af3      	subs	r3, r6, r3
 80142d6:	4293      	cmp	r3, r2
 80142d8:	d914      	bls.n	8014304 <_ZN8touchgfx3HAL4tickEv+0x134>
 80142da:	6920      	ldr	r0, [r4, #16]
 80142dc:	6803      	ldr	r3, [r0, #0]
 80142de:	699b      	ldr	r3, [r3, #24]
 80142e0:	4798      	blx	r3
 80142e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80142e4:	2264      	movs	r2, #100	; 0x64
 80142e6:	1af3      	subs	r3, r6, r3
 80142e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80142ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80142f0:	2800      	cmp	r0, #0
 80142f2:	dc1d      	bgt.n	8014330 <_ZN8touchgfx3HAL4tickEv+0x160>
 80142f4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80142f8:	6920      	ldr	r0, [r4, #16]
 80142fa:	2100      	movs	r1, #0
 80142fc:	6803      	ldr	r3, [r0, #0]
 80142fe:	69db      	ldr	r3, [r3, #28]
 8014300:	4798      	blx	r3
 8014302:	6726      	str	r6, [r4, #112]	; 0x70
 8014304:	f001 ffc8 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 8014308:	6803      	ldr	r3, [r0, #0]
 801430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801430c:	4798      	blx	r3
 801430e:	6823      	ldr	r3, [r4, #0]
 8014310:	4620      	mov	r0, r4
 8014312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014316:	4798      	blx	r3
 8014318:	2001      	movs	r0, #1
 801431a:	f7f9 ffdb 	bl	800e2d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801431e:	2300      	movs	r3, #0
 8014320:	702b      	strb	r3, [r5, #0]
 8014322:	b004      	add	sp, #16
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801432a:	4620      	mov	r0, r4
 801432c:	4798      	blx	r3
 801432e:	e7af      	b.n	8014290 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014330:	2863      	cmp	r0, #99	; 0x63
 8014332:	bfcb      	itete	gt
 8014334:	2300      	movgt	r3, #0
 8014336:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801433a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801433e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014342:	e7d9      	b.n	80142f8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014344:	24041b10 	.word	0x24041b10
 8014348:	24041b11 	.word	0x24041b11
 801434c:	05f5e100 	.word	0x05f5e100

08014350 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014350:	f7fb bbde 	b.w	800fb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014354 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014354:	6581      	str	r1, [r0, #88]	; 0x58
 8014356:	301c      	adds	r0, #28
 8014358:	f010 b88e 	b.w	8024478 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801435c <_ZN8touchgfx3HAL5touchEll>:
 801435c:	b530      	push	{r4, r5, lr}
 801435e:	b087      	sub	sp, #28
 8014360:	4604      	mov	r4, r0
 8014362:	a804      	add	r0, sp, #16
 8014364:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014368:	f001 fd1c 	bl	8015da4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801436c:	9b04      	ldr	r3, [sp, #16]
 801436e:	a906      	add	r1, sp, #24
 8014370:	a803      	add	r0, sp, #12
 8014372:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014376:	9b05      	ldr	r3, [sp, #20]
 8014378:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801437c:	f001 fd64 	bl	8015e48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014380:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014384:	f104 001c 	add.w	r0, r4, #28
 8014388:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801438c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014390:	b189      	cbz	r1, 80143b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014392:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	4613      	mov	r3, r2
 801439a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801439e:	462a      	mov	r2, r5
 80143a0:	f010 f87a 	bl	8024498 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80143a4:	b128      	cbz	r0, 80143b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80143a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80143aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80143ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80143b0:	6623      	str	r3, [r4, #96]	; 0x60
 80143b2:	b007      	add	sp, #28
 80143b4:	bd30      	pop	{r4, r5, pc}
 80143b6:	f010 f8af 	bl	8024518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80143ba:	2301      	movs	r3, #1
 80143bc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80143c0:	e7f1      	b.n	80143a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080143c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80143c2:	b510      	push	{r4, lr}
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d046      	beq.n	8014456 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80143c8:	ea81 0002 	eor.w	r0, r1, r2
 80143cc:	07c4      	lsls	r4, r0, #31
 80143ce:	d508      	bpl.n	80143e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80143d0:	440b      	add	r3, r1
 80143d2:	3a01      	subs	r2, #1
 80143d4:	428b      	cmp	r3, r1
 80143d6:	d93e      	bls.n	8014456 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80143d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80143dc:	f801 0b01 	strb.w	r0, [r1], #1
 80143e0:	e7f8      	b.n	80143d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80143e2:	07d0      	lsls	r0, r2, #31
 80143e4:	bf42      	ittt	mi
 80143e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80143ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80143ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d911      	bls.n	801441a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80143f6:	ea81 0402 	eor.w	r4, r1, r2
 80143fa:	4610      	mov	r0, r2
 80143fc:	07a4      	lsls	r4, r4, #30
 80143fe:	d022      	beq.n	8014446 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014400:	f023 0401 	bic.w	r4, r3, #1
 8014404:	440c      	add	r4, r1
 8014406:	428c      	cmp	r4, r1
 8014408:	4602      	mov	r2, r0
 801440a:	d904      	bls.n	8014416 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801440c:	8812      	ldrh	r2, [r2, #0]
 801440e:	3002      	adds	r0, #2
 8014410:	f821 2b02 	strh.w	r2, [r1], #2
 8014414:	e7f7      	b.n	8014406 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014416:	f003 0301 	and.w	r3, r3, #1
 801441a:	f023 0003 	bic.w	r0, r3, #3
 801441e:	4408      	add	r0, r1
 8014420:	4288      	cmp	r0, r1
 8014422:	4614      	mov	r4, r2
 8014424:	d904      	bls.n	8014430 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014426:	6824      	ldr	r4, [r4, #0]
 8014428:	3204      	adds	r2, #4
 801442a:	f841 4b04 	str.w	r4, [r1], #4
 801442e:	e7f7      	b.n	8014420 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014430:	f003 0303 	and.w	r3, r3, #3
 8014434:	3a01      	subs	r2, #1
 8014436:	440b      	add	r3, r1
 8014438:	428b      	cmp	r3, r1
 801443a:	d90c      	bls.n	8014456 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801443c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014440:	f801 0b01 	strb.w	r0, [r1], #1
 8014444:	e7f8      	b.n	8014438 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014446:	0790      	lsls	r0, r2, #30
 8014448:	d0e7      	beq.n	801441a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801444a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801444e:	3b02      	subs	r3, #2
 8014450:	f821 0b02 	strh.w	r0, [r1], #2
 8014454:	e7e1      	b.n	801441a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014456:	2001      	movs	r0, #1
 8014458:	bd10      	pop	{r4, pc}

0801445a <_ZN8touchgfx3HAL7noTouchEv>:
 801445a:	b510      	push	{r4, lr}
 801445c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014460:	4604      	mov	r4, r0
 8014462:	b153      	cbz	r3, 801447a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014464:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014468:	2101      	movs	r1, #1
 801446a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801446e:	301c      	adds	r0, #28
 8014470:	f010 f852 	bl	8024518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014474:	2300      	movs	r3, #0
 8014476:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801447a:	bd10      	pop	{r4, pc}

0801447c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801447c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014480:	b085      	sub	sp, #20
 8014482:	4604      	mov	r4, r0
 8014484:	2000      	movs	r0, #0
 8014486:	4699      	mov	r9, r3
 8014488:	ad04      	add	r5, sp, #16
 801448a:	460f      	mov	r7, r1
 801448c:	4690      	mov	r8, r2
 801448e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014492:	69a0      	ldr	r0, [r4, #24]
 8014494:	6806      	ldr	r6, [r0, #0]
 8014496:	9501      	str	r5, [sp, #4]
 8014498:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801449c:	9500      	str	r5, [sp, #0]
 801449e:	6835      	ldr	r5, [r6, #0]
 80144a0:	47a8      	blx	r5
 80144a2:	4d10      	ldr	r5, [pc, #64]	; (80144e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80144a4:	4606      	mov	r6, r0
 80144a6:	f8a5 9000 	strh.w	r9, [r5]
 80144aa:	f7f8 faf3 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 80144ae:	6803      	ldr	r3, [r0, #0]
 80144b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b2:	4798      	blx	r3
 80144b4:	b128      	cbz	r0, 80144c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80144b6:	2801      	cmp	r0, #1
 80144b8:	d00b      	beq.n	80144d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80144ba:	4630      	mov	r0, r6
 80144bc:	b005      	add	sp, #20
 80144be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144c2:	882b      	ldrh	r3, [r5, #0]
 80144c4:	fb08 7203 	mla	r2, r8, r3, r7
 80144c8:	9b03      	ldr	r3, [sp, #12]
 80144ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80144ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 80144d0:	e7f3      	b.n	80144ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80144d2:	882a      	ldrh	r2, [r5, #0]
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	fb08 7202 	mla	r2, r8, r2, r7
 80144da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80144de:	1a9a      	subs	r2, r3, r2
 80144e0:	63e2      	str	r2, [r4, #60]	; 0x3c
 80144e2:	e7ea      	b.n	80144ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80144e4:	24041b06 	.word	0x24041b06

080144e8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ea:	b08b      	sub	sp, #44	; 0x2c
 80144ec:	4617      	mov	r7, r2
 80144ee:	4604      	mov	r4, r0
 80144f0:	460e      	mov	r6, r1
 80144f2:	461d      	mov	r5, r3
 80144f4:	f7f8 face 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 80144f8:	6803      	ldr	r3, [r0, #0]
 80144fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144fc:	4798      	blx	r3
 80144fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014502:	9007      	str	r0, [sp, #28]
 8014504:	4631      	mov	r1, r6
 8014506:	6822      	ldr	r2, [r4, #0]
 8014508:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801450c:	4b0c      	ldr	r3, [pc, #48]	; (8014540 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801450e:	4620      	mov	r0, r4
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	9306      	str	r3, [sp, #24]
 8014514:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014518:	9305      	str	r3, [sp, #20]
 801451a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801451e:	9304      	str	r3, [sp, #16]
 8014520:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014524:	9303      	str	r3, [sp, #12]
 8014526:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801452a:	9302      	str	r3, [sp, #8]
 801452c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014530:	e9cd 5300 	strd	r5, r3, [sp]
 8014534:	463b      	mov	r3, r7
 8014536:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014538:	2200      	movs	r2, #0
 801453a:	47a8      	blx	r5
 801453c:	b00b      	add	sp, #44	; 0x2c
 801453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014540:	24041b06 	.word	0x24041b06

08014544 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014548:	4698      	mov	r8, r3
 801454a:	6803      	ldr	r3, [r0, #0]
 801454c:	b08b      	sub	sp, #44	; 0x2c
 801454e:	4617      	mov	r7, r2
 8014550:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014552:	460e      	mov	r6, r1
 8014554:	4b13      	ldr	r3, [pc, #76]	; (80145a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014556:	4604      	mov	r4, r0
 8014558:	f8b3 9000 	ldrh.w	r9, [r3]
 801455c:	f7f8 fa9a 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014560:	6803      	ldr	r3, [r0, #0]
 8014562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014564:	4798      	blx	r3
 8014566:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801456a:	2200      	movs	r2, #0
 801456c:	4631      	mov	r1, r6
 801456e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014572:	2302      	movs	r3, #2
 8014574:	4620      	mov	r0, r4
 8014576:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801457a:	2301      	movs	r3, #1
 801457c:	9305      	str	r3, [sp, #20]
 801457e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014582:	9304      	str	r3, [sp, #16]
 8014584:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014588:	9303      	str	r3, [sp, #12]
 801458a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801458e:	9302      	str	r3, [sp, #8]
 8014590:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014594:	e9cd 8300 	strd	r8, r3, [sp]
 8014598:	463b      	mov	r3, r7
 801459a:	47a8      	blx	r5
 801459c:	b00b      	add	sp, #44	; 0x2c
 801459e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145a2:	bf00      	nop
 80145a4:	24041b06 	.word	0x24041b06

080145a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80145a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145ac:	4698      	mov	r8, r3
 80145ae:	6803      	ldr	r3, [r0, #0]
 80145b0:	b087      	sub	sp, #28
 80145b2:	460e      	mov	r6, r1
 80145b4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80145b6:	4617      	mov	r7, r2
 80145b8:	4b0f      	ldr	r3, [pc, #60]	; (80145f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80145ba:	4604      	mov	r4, r0
 80145bc:	f8b3 9000 	ldrh.w	r9, [r3]
 80145c0:	f7f8 fa68 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 80145c4:	6803      	ldr	r3, [r0, #0]
 80145c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c8:	4798      	blx	r3
 80145ca:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80145ce:	463a      	mov	r2, r7
 80145d0:	4631      	mov	r1, r6
 80145d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80145d6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80145da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80145de:	4620      	mov	r0, r4
 80145e0:	9302      	str	r3, [sp, #8]
 80145e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	4643      	mov	r3, r8
 80145f0:	47a8      	blx	r5
 80145f2:	b007      	add	sp, #28
 80145f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145f8:	24041b06 	.word	0x24041b06

080145fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80145fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014600:	4604      	mov	r4, r0
 8014602:	b08f      	sub	sp, #60	; 0x3c
 8014604:	4610      	mov	r0, r2
 8014606:	460d      	mov	r5, r1
 8014608:	4691      	mov	r9, r2
 801460a:	461e      	mov	r6, r3
 801460c:	f004 f97e 	bl	801890c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014610:	2800      	cmp	r0, #0
 8014612:	f000 809d 	beq.w	8014750 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014616:	6823      	ldr	r3, [r4, #0]
 8014618:	4620      	mov	r0, r4
 801461a:	f8df b198 	ldr.w	fp, [pc, #408]	; 80147b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801461e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014624:	4798      	blx	r3
 8014626:	6823      	ldr	r3, [r4, #0]
 8014628:	4620      	mov	r0, r4
 801462a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80147b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014630:	4798      	blx	r3
 8014632:	f8bb 3000 	ldrh.w	r3, [fp]
 8014636:	4f5c      	ldr	r7, [pc, #368]	; (80147a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014638:	9301      	str	r3, [sp, #4]
 801463a:	f8ba 3000 	ldrh.w	r3, [sl]
 801463e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014642:	4640      	mov	r0, r8
 8014644:	9302      	str	r3, [sp, #8]
 8014646:	883b      	ldrh	r3, [r7, #0]
 8014648:	9303      	str	r3, [sp, #12]
 801464a:	4b58      	ldr	r3, [pc, #352]	; (80147ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801464c:	881a      	ldrh	r2, [r3, #0]
 801464e:	9305      	str	r3, [sp, #20]
 8014650:	9204      	str	r2, [sp, #16]
 8014652:	f004 f9ef 	bl	8018a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014656:	8038      	strh	r0, [r7, #0]
 8014658:	4640      	mov	r0, r8
 801465a:	f004 fa1f 	bl	8018a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801465e:	9b05      	ldr	r3, [sp, #20]
 8014660:	b280      	uxth	r0, r0
 8014662:	8018      	strh	r0, [r3, #0]
 8014664:	4b52      	ldr	r3, [pc, #328]	; (80147b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d174      	bne.n	8014756 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801466c:	883b      	ldrh	r3, [r7, #0]
 801466e:	f8aa 0000 	strh.w	r0, [sl]
 8014672:	f8ab 3000 	strh.w	r3, [fp]
 8014676:	4648      	mov	r0, r9
 8014678:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801467c:	f004 f946 	bl	801890c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014680:	2200      	movs	r2, #0
 8014682:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014686:	4611      	mov	r1, r2
 8014688:	4628      	mov	r0, r5
 801468a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801468e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014692:	f7f8 ff46 	bl	800d522 <_ZN8touchgfx8Drawable5setXYEss>
 8014696:	2301      	movs	r3, #1
 8014698:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801469c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80146a0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	dd5c      	ble.n	8014762 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80146a8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	dd58      	ble.n	8014762 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80146b0:	462a      	mov	r2, r5
 80146b2:	ab0a      	add	r3, sp, #40	; 0x28
 80146b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80146b8:	6851      	ldr	r1, [r2, #4]
 80146ba:	c303      	stmia	r3!, {r0, r1}
 80146bc:	4631      	mov	r1, r6
 80146be:	a80a      	add	r0, sp, #40	; 0x28
 80146c0:	f7ff fbfa 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 80146c4:	4b38      	ldr	r3, [pc, #224]	; (80147a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80146c6:	2100      	movs	r1, #0
 80146c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146cc:	4b37      	ldr	r3, [pc, #220]	; (80147ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80146ce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80146d2:	aa0a      	add	r2, sp, #40	; 0x28
 80146d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146d8:	910c      	str	r1, [sp, #48]	; 0x30
 80146da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80146de:	ab08      	add	r3, sp, #32
 80146e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80146e8:	4618      	mov	r0, r3
 80146ea:	a90c      	add	r1, sp, #48	; 0x30
 80146ec:	f7ff fbe4 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 80146f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d13c      	bne.n	8014770 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80146f6:	2000      	movs	r0, #0
 80146f8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80146fc:	2600      	movs	r6, #0
 80146fe:	696b      	ldr	r3, [r5, #20]
 8014700:	a908      	add	r1, sp, #32
 8014702:	682a      	ldr	r2, [r5, #0]
 8014704:	4628      	mov	r0, r5
 8014706:	9305      	str	r3, [sp, #20]
 8014708:	616e      	str	r6, [r5, #20]
 801470a:	6892      	ldr	r2, [r2, #8]
 801470c:	4790      	blx	r2
 801470e:	9b05      	ldr	r3, [sp, #20]
 8014710:	4652      	mov	r2, sl
 8014712:	4649      	mov	r1, r9
 8014714:	616b      	str	r3, [r5, #20]
 8014716:	4628      	mov	r0, r5
 8014718:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801471c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014720:	f7f8 feff 	bl	800d522 <_ZN8touchgfx8Drawable5setXYEss>
 8014724:	9a01      	ldr	r2, [sp, #4]
 8014726:	4b23      	ldr	r3, [pc, #140]	; (80147b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014728:	4620      	mov	r0, r4
 801472a:	801a      	strh	r2, [r3, #0]
 801472c:	9a02      	ldr	r2, [sp, #8]
 801472e:	4b22      	ldr	r3, [pc, #136]	; (80147b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014730:	801a      	strh	r2, [r3, #0]
 8014732:	9a03      	ldr	r2, [sp, #12]
 8014734:	4b1c      	ldr	r3, [pc, #112]	; (80147a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014736:	801a      	strh	r2, [r3, #0]
 8014738:	4b1c      	ldr	r3, [pc, #112]	; (80147ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801473a:	9a04      	ldr	r2, [sp, #16]
 801473c:	801a      	strh	r2, [r3, #0]
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014746:	4798      	blx	r3
 8014748:	6823      	ldr	r3, [r4, #0]
 801474a:	4620      	mov	r0, r4
 801474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474e:	4798      	blx	r3
 8014750:	b00f      	add	sp, #60	; 0x3c
 8014752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014756:	883b      	ldrh	r3, [r7, #0]
 8014758:	f8ab 0000 	strh.w	r0, [fp]
 801475c:	f8aa 3000 	strh.w	r3, [sl]
 8014760:	e789      	b.n	8014676 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014762:	462a      	mov	r2, r5
 8014764:	ab0a      	add	r3, sp, #40	; 0x28
 8014766:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801476a:	6851      	ldr	r1, [r2, #4]
 801476c:	c303      	stmia	r3!, {r0, r1}
 801476e:	e7a9      	b.n	80146c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014770:	a807      	add	r0, sp, #28
 8014772:	f004 facf 	bl	8018d14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014776:	4606      	mov	r6, r0
 8014778:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801477a:	6803      	ldr	r3, [r0, #0]
 801477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801477e:	4798      	blx	r3
 8014780:	4286      	cmp	r6, r0
 8014782:	d1b8      	bne.n	80146f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014784:	f7f8 f986 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014788:	6803      	ldr	r3, [r0, #0]
 801478a:	4606      	mov	r6, r0
 801478c:	a807      	add	r0, sp, #28
 801478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014790:	9305      	str	r3, [sp, #20]
 8014792:	f004 fabf 	bl	8018d14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014796:	9b05      	ldr	r3, [sp, #20]
 8014798:	4601      	mov	r1, r0
 801479a:	4630      	mov	r0, r6
 801479c:	4798      	blx	r3
 801479e:	f080 0001 	eor.w	r0, r0, #1
 80147a2:	b2c0      	uxtb	r0, r0
 80147a4:	e7a8      	b.n	80146f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80147a6:	bf00      	nop
 80147a8:	24041b00 	.word	0x24041b00
 80147ac:	24041b02 	.word	0x24041b02
 80147b0:	24041b04 	.word	0x24041b04
 80147b4:	24041b06 	.word	0x24041b06
 80147b8:	24041b08 	.word	0x24041b08

080147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80147bc:	4b07      	ldr	r3, [pc, #28]	; (80147dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80147be:	b510      	push	{r4, lr}
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	4604      	mov	r4, r0
 80147c4:	b13b      	cbz	r3, 80147d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80147c6:	6803      	ldr	r3, [r0, #0]
 80147c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ca:	4798      	blx	r3
 80147cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80147ce:	4283      	cmp	r3, r0
 80147d0:	d101      	bne.n	80147d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80147d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80147d4:	bd10      	pop	{r4, pc}
 80147d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80147d8:	e7fc      	b.n	80147d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80147da:	bf00      	nop
 80147dc:	24041b0a 	.word	0x24041b0a

080147e0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80147e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147e4:	461d      	mov	r5, r3
 80147e6:	b08a      	sub	sp, #40	; 0x28
 80147e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147ec:	4690      	mov	r8, r2
 80147ee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80147f2:	2400      	movs	r4, #0
 80147f4:	4607      	mov	r7, r0
 80147f6:	fb06 8505 	mla	r5, r6, r5, r8
 80147fa:	9404      	str	r4, [sp, #16]
 80147fc:	f88d 4020 	strb.w	r4, [sp, #32]
 8014800:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014804:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014808:	f8ad 3018 	strh.w	r3, [sp, #24]
 801480c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014810:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014814:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014818:	f8ad 301c 	strh.w	r3, [sp, #28]
 801481c:	f7ff ffce 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014820:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f8ad 601e 	strh.w	r6, [sp, #30]
 801482a:	a901      	add	r1, sp, #4
 801482c:	9505      	str	r5, [sp, #20]
 801482e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014832:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014836:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801483a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801483e:	6803      	ldr	r3, [r0, #0]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	4798      	blx	r3
 8014844:	b00a      	add	sp, #40	; 0x28
 8014846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801484a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801484a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801484e:	b08b      	sub	sp, #44	; 0x2c
 8014850:	2400      	movs	r4, #0
 8014852:	4691      	mov	r9, r2
 8014854:	461d      	mov	r5, r3
 8014856:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801485a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801485e:	4688      	mov	r8, r1
 8014860:	4607      	mov	r7, r0
 8014862:	9404      	str	r4, [sp, #16]
 8014864:	fb06 9505 	mla	r5, r6, r5, r9
 8014868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801486c:	f7ff ffa6 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014870:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014874:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801487e:	a901      	add	r1, sp, #4
 8014880:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014884:	9505      	str	r5, [sp, #20]
 8014886:	f8ad 301a 	strh.w	r3, [sp, #26]
 801488a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801488e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014892:	f8cd 8010 	str.w	r8, [sp, #16]
 8014896:	f8ad 4020 	strh.w	r4, [sp, #32]
 801489a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801489e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80148a2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80148a6:	6803      	ldr	r3, [r0, #0]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	4798      	blx	r3
 80148ac:	b00b      	add	sp, #44	; 0x2c
 80148ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080148b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80148b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b8:	b08a      	sub	sp, #40	; 0x28
 80148ba:	4698      	mov	r8, r3
 80148bc:	2300      	movs	r3, #0
 80148be:	4606      	mov	r6, r0
 80148c0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80148c4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80148c8:	2d0b      	cmp	r5, #11
 80148ca:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80148ce:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80148d2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80148d6:	9304      	str	r3, [sp, #16]
 80148d8:	d137      	bne.n	801494a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80148da:	2380      	movs	r3, #128	; 0x80
 80148dc:	f88d 0020 	strb.w	r0, [sp, #32]
 80148e0:	4630      	mov	r0, r6
 80148e2:	9203      	str	r2, [sp, #12]
 80148e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80148e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80148ec:	f8ad 3018 	strh.w	r3, [sp, #24]
 80148f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80148f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80148f8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80148fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014900:	f7ff ff5c 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014904:	2c0b      	cmp	r4, #11
 8014906:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801490a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801490e:	bf94      	ite	ls
 8014910:	4b19      	ldrls	r3, [pc, #100]	; (8014978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014912:	2100      	movhi	r1, #0
 8014914:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014918:	bf98      	it	ls
 801491a:	5d19      	ldrbls	r1, [r3, r4]
 801491c:	fb02 8307 	mla	r3, r2, r7, r8
 8014920:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014924:	10c9      	asrs	r1, r1, #3
 8014926:	fb01 0003 	mla	r0, r1, r3, r0
 801492a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801492e:	a901      	add	r1, sp, #4
 8014930:	9005      	str	r0, [sp, #20]
 8014932:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014936:	2300      	movs	r3, #0
 8014938:	6870      	ldr	r0, [r6, #4]
 801493a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801493e:	6803      	ldr	r3, [r0, #0]
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	4798      	blx	r3
 8014944:	b00a      	add	sp, #40	; 0x28
 8014946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801494a:	2d02      	cmp	r5, #2
 801494c:	d109      	bne.n	8014962 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801494e:	28ff      	cmp	r0, #255	; 0xff
 8014950:	d105      	bne.n	801495e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014952:	f1bc 0f00 	cmp.w	ip, #0
 8014956:	bf14      	ite	ne
 8014958:	2340      	movne	r3, #64	; 0x40
 801495a:	2320      	moveq	r3, #32
 801495c:	e7be      	b.n	80148dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801495e:	2340      	movs	r3, #64	; 0x40
 8014960:	e7bc      	b.n	80148dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014962:	28ff      	cmp	r0, #255	; 0xff
 8014964:	d105      	bne.n	8014972 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014966:	f1bc 0f00 	cmp.w	ip, #0
 801496a:	bf14      	ite	ne
 801496c:	2304      	movne	r3, #4
 801496e:	2301      	moveq	r3, #1
 8014970:	e7b4      	b.n	80148dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014972:	2304      	movs	r3, #4
 8014974:	e7b2      	b.n	80148dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014976:	bf00      	nop
 8014978:	080289e0 	.word	0x080289e0

0801497c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	b08b      	sub	sp, #44	; 0x2c
 8014982:	461d      	mov	r5, r3
 8014984:	2400      	movs	r4, #0
 8014986:	4688      	mov	r8, r1
 8014988:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801498c:	4693      	mov	fp, r2
 801498e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8014992:	4607      	mov	r7, r0
 8014994:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014998:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801499c:	9404      	str	r4, [sp, #16]
 801499e:	bf14      	ite	ne
 80149a0:	2308      	movne	r3, #8
 80149a2:	2302      	moveq	r3, #2
 80149a4:	fb05 b50a 	mla	r5, r5, sl, fp
 80149a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149ac:	f7ff ff06 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80149b0:	2e0b      	cmp	r6, #11
 80149b2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80149b6:	a901      	add	r1, sp, #4
 80149b8:	bf98      	it	ls
 80149ba:	4b13      	ldrls	r3, [pc, #76]	; (8014a08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80149bc:	f8ad a01e 	strh.w	sl, [sp, #30]
 80149c0:	bf98      	it	ls
 80149c2:	5d9c      	ldrbls	r4, [r3, r6]
 80149c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80149c8:	10e4      	asrs	r4, r4, #3
 80149ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80149ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80149d2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80149d6:	fb04 0405 	mla	r4, r4, r5, r0
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80149e0:	2300      	movs	r3, #0
 80149e2:	9405      	str	r4, [sp, #20]
 80149e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80149e8:	f88d 9020 	strb.w	r9, [sp, #32]
 80149ec:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80149f0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80149f4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80149f8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80149fc:	6803      	ldr	r3, [r0, #0]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	4798      	blx	r3
 8014a02:	b00b      	add	sp, #44	; 0x2c
 8014a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a08:	080289e0 	.word	0x080289e0

08014a0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a10:	461e      	mov	r6, r3
 8014a12:	4b0a      	ldr	r3, [pc, #40]	; (8014a3c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014a14:	460f      	mov	r7, r1
 8014a16:	4690      	mov	r8, r2
 8014a18:	881d      	ldrh	r5, [r3, #0]
 8014a1a:	f7f8 f83b 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014a1e:	6803      	ldr	r3, [r0, #0]
 8014a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a22:	4798      	blx	r3
 8014a24:	280b      	cmp	r0, #11
 8014a26:	bf96      	itet	ls
 8014a28:	4b05      	ldrls	r3, [pc, #20]	; (8014a40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014a2a:	2400      	movhi	r4, #0
 8014a2c:	5c1c      	ldrbls	r4, [r3, r0]
 8014a2e:	fb08 7005 	mla	r0, r8, r5, r7
 8014a32:	10e4      	asrs	r4, r4, #3
 8014a34:	fb04 6000 	mla	r0, r4, r0, r6
 8014a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3c:	24041b06 	.word	0x24041b06
 8014a40:	080289e0 	.word	0x080289e0

08014a44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a46:	b08b      	sub	sp, #44	; 0x2c
 8014a48:	461f      	mov	r7, r3
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	4616      	mov	r6, r2
 8014a4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014a52:	2500      	movs	r5, #0
 8014a54:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014a58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014a5c:	9504      	str	r5, [sp, #16]
 8014a5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a62:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014a66:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a6a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a72:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014a76:	f88d 3020 	strb.w	r3, [sp, #32]
 8014a7a:	f7ff fe9f 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a7e:	463a      	mov	r2, r7
 8014a80:	4631      	mov	r1, r6
 8014a82:	4603      	mov	r3, r0
 8014a84:	4620      	mov	r0, r4
 8014a86:	f7ff ffc1 	bl	8014a0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014a8a:	4b0e      	ldr	r3, [pc, #56]	; (8014ac4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014a8c:	9005      	str	r0, [sp, #20]
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014a94:	f7f7 fffe 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014a98:	6803      	ldr	r3, [r0, #0]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9c:	4798      	blx	r3
 8014a9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014aa4:	a901      	add	r1, sp, #4
 8014aa6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014aaa:	9304      	str	r3, [sp, #16]
 8014aac:	6860      	ldr	r0, [r4, #4]
 8014aae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014ab2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014ab6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014aba:	6803      	ldr	r3, [r0, #0]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	4798      	blx	r3
 8014ac0:	b00b      	add	sp, #44	; 0x2c
 8014ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ac4:	24041b06 	.word	0x24041b06

08014ac8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aca:	b08d      	sub	sp, #52	; 0x34
 8014acc:	2501      	movs	r5, #1
 8014ace:	4604      	mov	r4, r0
 8014ad0:	466b      	mov	r3, sp
 8014ad2:	9503      	str	r5, [sp, #12]
 8014ad4:	e883 0006 	stmia.w	r3, {r1, r2}
 8014ad8:	2300      	movs	r3, #0
 8014ada:	f8bd 6000 	ldrh.w	r6, [sp]
 8014ade:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014ae2:	9306      	str	r3, [sp, #24]
 8014ae4:	6803      	ldr	r3, [r0, #0]
 8014ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae8:	4798      	blx	r3
 8014aea:	463a      	mov	r2, r7
 8014aec:	4631      	mov	r1, r6
 8014aee:	4603      	mov	r3, r0
 8014af0:	4620      	mov	r0, r4
 8014af2:	f7ff ff8b 	bl	8014a0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014af8:	9004      	str	r0, [sp, #16]
 8014afa:	9307      	str	r3, [sp, #28]
 8014afc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014b00:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014b04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014b0c:	4b0e      	ldr	r3, [pc, #56]	; (8014b48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014b0e:	881b      	ldrh	r3, [r3, #0]
 8014b10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014b14:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014b18:	f7f7 ffbc 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014b1c:	6803      	ldr	r3, [r0, #0]
 8014b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b20:	4798      	blx	r3
 8014b22:	23ff      	movs	r3, #255	; 0xff
 8014b24:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014b28:	a903      	add	r1, sp, #12
 8014b2a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014b2e:	6860      	ldr	r0, [r4, #4]
 8014b30:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014b34:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014b38:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014b3c:	6803      	ldr	r3, [r0, #0]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	4798      	blx	r3
 8014b42:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014b44:	b00d      	add	sp, #52	; 0x34
 8014b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b48:	24041b06 	.word	0x24041b06

08014b4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b50:	b08c      	sub	sp, #48	; 0x30
 8014b52:	461e      	mov	r6, r3
 8014b54:	2300      	movs	r3, #0
 8014b56:	4604      	mov	r4, r0
 8014b58:	466d      	mov	r5, sp
 8014b5a:	9306      	str	r3, [sp, #24]
 8014b5c:	6803      	ldr	r3, [r0, #0]
 8014b5e:	e885 0006 	stmia.w	r5, {r1, r2}
 8014b62:	2501      	movs	r5, #1
 8014b64:	f8bd 7000 	ldrh.w	r7, [sp]
 8014b68:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014b6c:	9503      	str	r5, [sp, #12]
 8014b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b70:	4798      	blx	r3
 8014b72:	4642      	mov	r2, r8
 8014b74:	4639      	mov	r1, r7
 8014b76:	4603      	mov	r3, r0
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f7ff ff47 	bl	8014a0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014b7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014b82:	9004      	str	r0, [sp, #16]
 8014b84:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014b88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b8c:	9607      	str	r6, [sp, #28]
 8014b8e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014b92:	4b10      	ldr	r3, [pc, #64]	; (8014bd4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014b9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014ba0:	f7f7 ff78 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8014ba4:	6803      	ldr	r3, [r0, #0]
 8014ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ba8:	4798      	blx	r3
 8014baa:	23ff      	movs	r3, #255	; 0xff
 8014bac:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014bb0:	a903      	add	r1, sp, #12
 8014bb2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014bb6:	6860      	ldr	r0, [r4, #4]
 8014bb8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014bbc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014bc0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	4798      	blx	r3
 8014bca:	4630      	mov	r0, r6
 8014bcc:	b00c      	add	sp, #48	; 0x30
 8014bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd2:	bf00      	nop
 8014bd4:	24041b06 	.word	0x24041b06

08014bd8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bda:	b085      	sub	sp, #20
 8014bdc:	4605      	mov	r5, r0
 8014bde:	ac02      	add	r4, sp, #8
 8014be0:	e884 0006 	stmia.w	r4, {r1, r2}
 8014be4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014be8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014bec:	f7ff fde6 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014bf0:	4631      	mov	r1, r6
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	463a      	mov	r2, r7
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f7ff ff08 	bl	8014a0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014bfc:	4a05      	ldr	r2, [pc, #20]	; (8014c14 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8014bfe:	682b      	ldr	r3, [r5, #0]
 8014c00:	8812      	ldrh	r2, [r2, #0]
 8014c02:	9200      	str	r2, [sp, #0]
 8014c04:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014c06:	4603      	mov	r3, r0
 8014c08:	4628      	mov	r0, r5
 8014c0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014c0e:	47b0      	blx	r6
 8014c10:	b005      	add	sp, #20
 8014c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c14:	24041b06 	.word	0x24041b06

08014c18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014c18:	b570      	push	{r4, r5, r6, lr}
 8014c1a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014c1e:	4604      	mov	r4, r0
 8014c20:	b19b      	cbz	r3, 8014c4a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014c22:	2002      	movs	r0, #2
 8014c24:	f7f9 fb72 	bl	800e30c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014c30:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014c34:	6823      	ldr	r3, [r4, #0]
 8014c36:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8014c3a:	f7ff fdbf 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c3e:	4601      	mov	r1, r0
 8014c40:	4620      	mov	r0, r4
 8014c42:	462b      	mov	r3, r5
 8014c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c48:	4718      	bx	r3
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}

08014c4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8014c52:	4604      	mov	r4, r0
 8014c54:	460d      	mov	r5, r1
 8014c56:	428b      	cmp	r3, r1
 8014c58:	d006      	beq.n	8014c68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014c5a:	6803      	ldr	r3, [r0, #0]
 8014c5c:	b929      	cbnz	r1, 8014c6a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014c5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014c62:	4798      	blx	r3
 8014c64:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014c68:	bd38      	pop	{r3, r4, r5, pc}
 8014c6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014c6e:	e7f8      	b.n	8014c62 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014c70 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014c70:	4b0d      	ldr	r3, [pc, #52]	; (8014ca8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014c72:	b510      	push	{r4, lr}
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	4604      	mov	r4, r0
 8014c78:	b95b      	cbnz	r3, 8014c92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014c7a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	d007      	beq.n	8014c92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014c82:	6840      	ldr	r0, [r0, #4]
 8014c84:	f000 f90e 	bl	8014ea4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014c88:	b118      	cbz	r0, 8014c92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014c8a:	6862      	ldr	r2, [r4, #4]
 8014c8c:	7a53      	ldrb	r3, [r2, #9]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d0fc      	beq.n	8014c8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014c92:	f7fa ff2f 	bl	800faf4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014c96:	4620      	mov	r0, r4
 8014c98:	2100      	movs	r1, #0
 8014c9a:	f7ff ffd7 	bl	8014c4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7ff fd8c 	bl	80147bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ca4:	bd10      	pop	{r4, pc}
 8014ca6:	bf00      	nop
 8014ca8:	24041b0a 	.word	0x24041b0a

08014cac <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014cac:	4770      	bx	lr

08014cae <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014cae:	2000      	movs	r0, #0
 8014cb0:	4770      	bx	lr

08014cb2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014cb2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014cb6:	1a13      	subs	r3, r2, r0
 8014cb8:	4258      	negs	r0, r3
 8014cba:	4158      	adcs	r0, r3
 8014cbc:	4770      	bx	lr

08014cbe <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014cbe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014cc2:	1a9b      	subs	r3, r3, r2
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	bfdc      	itt	le
 8014cc8:	6882      	ldrle	r2, [r0, #8]
 8014cca:	189b      	addle	r3, r3, r2
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	bfcc      	ite	gt
 8014cd0:	2000      	movgt	r0, #0
 8014cd2:	2001      	movle	r0, #1
 8014cd4:	4770      	bx	lr

08014cd6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014cd6:	6902      	ldr	r2, [r0, #16]
 8014cd8:	6843      	ldr	r3, [r0, #4]
 8014cda:	2024      	movs	r0, #36	; 0x24
 8014cdc:	fb00 3002 	mla	r0, r0, r2, r3
 8014ce0:	4770      	bx	lr

08014ce2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014ce2:	6803      	ldr	r3, [r0, #0]
 8014ce4:	691b      	ldr	r3, [r3, #16]
 8014ce6:	4718      	bx	r3

08014ce8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014ce8:	2301      	movs	r3, #1
 8014cea:	b570      	push	{r4, r5, r6, lr}
 8014cec:	7203      	strb	r3, [r0, #8]
 8014cee:	4604      	mov	r4, r0
 8014cf0:	6840      	ldr	r0, [r0, #4]
 8014cf2:	6803      	ldr	r3, [r0, #0]
 8014cf4:	699b      	ldr	r3, [r3, #24]
 8014cf6:	4798      	blx	r3
 8014cf8:	6803      	ldr	r3, [r0, #0]
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	2b40      	cmp	r3, #64	; 0x40
 8014cfe:	d00c      	beq.n	8014d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d00:	d810      	bhi.n	8014d24 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	d01d      	beq.n	8014d42 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014d06:	d804      	bhi.n	8014d12 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d006      	beq.n	8014d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	d02c      	beq.n	8014d6a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014d10:	bd70      	pop	{r4, r5, r6, pc}
 8014d12:	2b08      	cmp	r3, #8
 8014d14:	d01d      	beq.n	8014d52 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014d16:	2b20      	cmp	r3, #32
 8014d18:	d1fa      	bne.n	8014d10 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014d1a:	6823      	ldr	r3, [r4, #0]
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d20:	4798      	blx	r3
 8014d22:	e013      	b.n	8014d4c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d28:	d0f7      	beq.n	8014d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d2a:	d804      	bhi.n	8014d36 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014d2c:	2b80      	cmp	r3, #128	; 0x80
 8014d2e:	d0f4      	beq.n	8014d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d34:	e7f0      	b.n	8014d18 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d3a:	d0ee      	beq.n	8014d1a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d40:	e7e5      	b.n	8014d0e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014d42:	6823      	ldr	r3, [r4, #0]
 8014d44:	7f01      	ldrb	r1, [r0, #28]
 8014d46:	4620      	mov	r0, r4
 8014d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d4a:	4798      	blx	r3
 8014d4c:	6823      	ldr	r3, [r4, #0]
 8014d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d50:	e006      	b.n	8014d60 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014d52:	6823      	ldr	r3, [r4, #0]
 8014d54:	7f01      	ldrb	r1, [r0, #28]
 8014d56:	4620      	mov	r0, r4
 8014d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d5a:	4798      	blx	r3
 8014d5c:	6823      	ldr	r3, [r4, #0]
 8014d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d60:	4629      	mov	r1, r5
 8014d62:	4620      	mov	r0, r4
 8014d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d68:	4718      	bx	r3
 8014d6a:	6823      	ldr	r3, [r4, #0]
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d70:	4798      	blx	r3
 8014d72:	e7f3      	b.n	8014d5c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014d74 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014d74:	4770      	bx	lr

08014d76 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014d76:	4770      	bx	lr

08014d78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014d78:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014d7c:	b510      	push	{r4, lr}
 8014d7e:	1ad2      	subs	r2, r2, r3
 8014d80:	2a00      	cmp	r2, #0
 8014d82:	bfdc      	itt	le
 8014d84:	6884      	ldrle	r4, [r0, #8]
 8014d86:	1912      	addle	r2, r2, r4
 8014d88:	2a01      	cmp	r2, #1
 8014d8a:	dd16      	ble.n	8014dba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014d8c:	6842      	ldr	r2, [r0, #4]
 8014d8e:	2424      	movs	r4, #36	; 0x24
 8014d90:	fb04 2303 	mla	r3, r4, r3, r2
 8014d94:	f101 0220 	add.w	r2, r1, #32
 8014d98:	f851 4b04 	ldr.w	r4, [r1], #4
 8014d9c:	4291      	cmp	r1, r2
 8014d9e:	f843 4b04 	str.w	r4, [r3], #4
 8014da2:	d1f9      	bne.n	8014d98 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014da4:	780a      	ldrb	r2, [r1, #0]
 8014da6:	701a      	strb	r2, [r3, #0]
 8014da8:	68c3      	ldr	r3, [r0, #12]
 8014daa:	6882      	ldr	r2, [r0, #8]
 8014dac:	f3bf 8f5b 	dmb	ish
 8014db0:	3301      	adds	r3, #1
 8014db2:	429a      	cmp	r2, r3
 8014db4:	bfd8      	it	le
 8014db6:	1a9b      	suble	r3, r3, r2
 8014db8:	60c3      	str	r3, [r0, #12]
 8014dba:	bd10      	pop	{r4, pc}

08014dbc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014dbc:	6903      	ldr	r3, [r0, #16]
 8014dbe:	6882      	ldr	r2, [r0, #8]
 8014dc0:	f3bf 8f5b 	dmb	ish
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	bfd8      	it	le
 8014dca:	1a9b      	suble	r3, r3, r2
 8014dcc:	6103      	str	r3, [r0, #16]
 8014dce:	4770      	bx	lr

08014dd0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014dd0:	b570      	push	{r4, r5, r6, lr}
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	460e      	mov	r6, r1
 8014dd6:	6860      	ldr	r0, [r4, #4]
 8014dd8:	6803      	ldr	r3, [r0, #0]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	4798      	blx	r3
 8014dde:	2800      	cmp	r0, #0
 8014de0:	d1f9      	bne.n	8014dd6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014de2:	4d0d      	ldr	r5, [pc, #52]	; (8014e18 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014de4:	6828      	ldr	r0, [r5, #0]
 8014de6:	6803      	ldr	r3, [r0, #0]
 8014de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dea:	4798      	blx	r3
 8014dec:	f7fa fe9c 	bl	800fb28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014df0:	6828      	ldr	r0, [r5, #0]
 8014df2:	2101      	movs	r1, #1
 8014df4:	f7ff ff2a 	bl	8014c4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014df8:	6860      	ldr	r0, [r4, #4]
 8014dfa:	4631      	mov	r1, r6
 8014dfc:	6803      	ldr	r3, [r0, #0]
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	4798      	blx	r3
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	4620      	mov	r0, r4
 8014e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e08:	4798      	blx	r3
 8014e0a:	6828      	ldr	r0, [r5, #0]
 8014e0c:	6803      	ldr	r3, [r0, #0]
 8014e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e14:	4718      	bx	r3
 8014e16:	bf00      	nop
 8014e18:	24041b0c 	.word	0x24041b0c

08014e1c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014e1c:	b508      	push	{r3, lr}
 8014e1e:	f7fa fe69 	bl	800faf4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e26:	f7fa be73 	b.w	800fb10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014e2a <_ZN8touchgfx13DMA_Interface5startEv>:
 8014e2a:	b510      	push	{r4, lr}
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	6840      	ldr	r0, [r0, #4]
 8014e30:	6803      	ldr	r3, [r0, #0]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4798      	blx	r3
 8014e36:	b948      	cbnz	r0, 8014e4c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014e38:	7a63      	ldrb	r3, [r4, #9]
 8014e3a:	b13b      	cbz	r3, 8014e4c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014e3c:	7a23      	ldrb	r3, [r4, #8]
 8014e3e:	b92b      	cbnz	r3, 8014e4c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	4620      	mov	r0, r4
 8014e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4a:	4718      	bx	r3
 8014e4c:	bd10      	pop	{r4, pc}

08014e4e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014e4e:	b570      	push	{r4, r5, r6, lr}
 8014e50:	4604      	mov	r4, r0
 8014e52:	6840      	ldr	r0, [r0, #4]
 8014e54:	6803      	ldr	r3, [r0, #0]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	4798      	blx	r3
 8014e5a:	4605      	mov	r5, r0
 8014e5c:	b930      	cbnz	r0, 8014e6c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014e5e:	7a23      	ldrb	r3, [r4, #8]
 8014e60:	b123      	cbz	r3, 8014e6c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014e62:	6860      	ldr	r0, [r4, #4]
 8014e64:	6803      	ldr	r3, [r0, #0]
 8014e66:	695b      	ldr	r3, [r3, #20]
 8014e68:	4798      	blx	r3
 8014e6a:	7225      	strb	r5, [r4, #8]
 8014e6c:	6860      	ldr	r0, [r4, #4]
 8014e6e:	6803      	ldr	r3, [r0, #0]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	4798      	blx	r3
 8014e74:	b928      	cbnz	r0, 8014e82 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	4620      	mov	r0, r4
 8014e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e80:	4718      	bx	r3
 8014e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e86:	f7fa be5b 	b.w	800fb40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08014e8c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	6082      	str	r2, [r0, #8]
 8014e90:	2200      	movs	r2, #0
 8014e92:	4c03      	ldr	r4, [pc, #12]	; (8014ea0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014e94:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014e98:	e9c0 4100 	strd	r4, r1, [r0]
 8014e9c:	bd10      	pop	{r4, pc}
 8014e9e:	bf00      	nop
 8014ea0:	08028b1c 	.word	0x08028b1c

08014ea4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014ea4:	6840      	ldr	r0, [r0, #4]
 8014ea6:	6803      	ldr	r3, [r0, #0]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	4718      	bx	r3

08014eac <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014eac:	2300      	movs	r3, #0
 8014eae:	8083      	strh	r3, [r0, #4]
 8014eb0:	80c3      	strh	r3, [r0, #6]
 8014eb2:	8003      	strh	r3, [r0, #0]
 8014eb4:	8043      	strh	r3, [r0, #2]
 8014eb6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014eba:	2bff      	cmp	r3, #255	; 0xff
 8014ebc:	bf01      	itttt	eq
 8014ebe:	890b      	ldrheq	r3, [r1, #8]
 8014ec0:	8083      	strheq	r3, [r0, #4]
 8014ec2:	894b      	ldrheq	r3, [r1, #10]
 8014ec4:	80c3      	strheq	r3, [r0, #6]
 8014ec6:	4770      	bx	lr

08014ec8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8014ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014eca:	4604      	mov	r4, r0
 8014ecc:	466b      	mov	r3, sp
 8014ece:	6808      	ldr	r0, [r1, #0]
 8014ed0:	6849      	ldr	r1, [r1, #4]
 8014ed2:	c303      	stmia	r3!, {r0, r1}
 8014ed4:	6823      	ldr	r3, [r4, #0]
 8014ed6:	4669      	mov	r1, sp
 8014ed8:	4620      	mov	r0, r4
 8014eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014edc:	4798      	blx	r3
 8014ede:	4b08      	ldr	r3, [pc, #32]	; (8014f00 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014ee6:	b10a      	cbz	r2, 8014eec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8014ee8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014eea:	b900      	cbnz	r0, 8014eee <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014eec:	6898      	ldr	r0, [r3, #8]
 8014eee:	6803      	ldr	r3, [r0, #0]
 8014ef0:	4669      	mov	r1, sp
 8014ef2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014ef4:	6a1d      	ldr	r5, [r3, #32]
 8014ef6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014efa:	47a8      	blx	r5
 8014efc:	b003      	add	sp, #12
 8014efe:	bd30      	pop	{r4, r5, pc}
 8014f00:	24041b0c 	.word	0x24041b0c

08014f04 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014f04:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8014f08:	b12a      	cbz	r2, 8014f16 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014f0a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014f0e:	b112      	cbz	r2, 8014f16 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014f10:	6803      	ldr	r3, [r0, #0]
 8014f12:	695b      	ldr	r3, [r3, #20]
 8014f14:	4718      	bx	r3
 8014f16:	4770      	bx	lr

08014f18 <_ZN8touchgfx11VideoWidgetD1Ev>:
 8014f18:	4b08      	ldr	r3, [pc, #32]	; (8014f3c <_ZN8touchgfx11VideoWidgetD1Ev+0x24>)
 8014f1a:	b510      	push	{r4, lr}
 8014f1c:	6003      	str	r3, [r0, #0]
 8014f1e:	4604      	mov	r4, r0
 8014f20:	f7fc f97a 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8014f24:	6803      	ldr	r3, [r0, #0]
 8014f26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	4798      	blx	r3
 8014f2c:	f001 f9b4 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 8014f30:	4621      	mov	r1, r4
 8014f32:	f001 f9dc 	bl	80162ee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8014f36:	4620      	mov	r0, r4
 8014f38:	bd10      	pop	{r4, pc}
 8014f3a:	bf00      	nop
 8014f3c:	08028ba8 	.word	0x08028ba8

08014f40 <_ZN8touchgfx11VideoWidgetD0Ev>:
 8014f40:	b510      	push	{r4, lr}
 8014f42:	4604      	mov	r4, r0
 8014f44:	f7ff ffe8 	bl	8014f18 <_ZN8touchgfx11VideoWidgetD1Ev>
 8014f48:	2140      	movs	r1, #64	; 0x40
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	f00f fb4b 	bl	80245e6 <_ZdlPvj>
 8014f50:	4620      	mov	r0, r4
 8014f52:	bd10      	pop	{r4, pc}

08014f54 <_ZN8touchgfx11VideoWidget15handleTickEventEv>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	4604      	mov	r4, r0
 8014f58:	f7fc f95e 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8014f5c:	6803      	ldr	r3, [r0, #0]
 8014f5e:	4622      	mov	r2, r4
 8014f60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014f62:	695b      	ldr	r3, [r3, #20]
 8014f64:	4798      	blx	r3
 8014f66:	b960      	cbnz	r0, 8014f82 <_ZN8touchgfx11VideoWidget15handleTickEventEv+0x2e>
 8014f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014f6a:	b150      	cbz	r0, 8014f82 <_ZN8touchgfx11VideoWidget15handleTickEventEv+0x2e>
 8014f6c:	6803      	ldr	r3, [r0, #0]
 8014f6e:	68db      	ldr	r3, [r3, #12]
 8014f70:	4798      	blx	r3
 8014f72:	b130      	cbz	r0, 8014f82 <_ZN8touchgfx11VideoWidget15handleTickEventEv+0x2e>
 8014f74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014f76:	4621      	mov	r1, r4
 8014f78:	6803      	ldr	r3, [r0, #0]
 8014f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f7e:	689b      	ldr	r3, [r3, #8]
 8014f80:	4718      	bx	r3
 8014f82:	bd10      	pop	{r4, pc}

08014f84 <_ZNK8touchgfx11VideoWidget12getSolidRectEv>:
 8014f84:	b510      	push	{r4, lr}
 8014f86:	f9b1 4036 	ldrsh.w	r4, [r1, #54]	; 0x36
 8014f8a:	2c00      	cmp	r4, #0
 8014f8c:	dd17      	ble.n	8014fbe <_ZNK8touchgfx11VideoWidget12getSolidRectEv+0x3a>
 8014f8e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8014f90:	b18b      	cbz	r3, 8014fb6 <_ZNK8touchgfx11VideoWidget12getSolidRectEv+0x32>
 8014f92:	f9b1 203a 	ldrsh.w	r2, [r1, #58]	; 0x3a
 8014f96:	f9b1 303c 	ldrsh.w	r3, [r1, #60]	; 0x3c
 8014f9a:	42a2      	cmp	r2, r4
 8014f9c:	f9b1 1038 	ldrsh.w	r1, [r1, #56]	; 0x38
 8014fa0:	bfa8      	it	ge
 8014fa2:	4622      	movge	r2, r4
 8014fa4:	428b      	cmp	r3, r1
 8014fa6:	bfa8      	it	ge
 8014fa8:	460b      	movge	r3, r1
 8014faa:	2100      	movs	r1, #0
 8014fac:	8082      	strh	r2, [r0, #4]
 8014fae:	8001      	strh	r1, [r0, #0]
 8014fb0:	8041      	strh	r1, [r0, #2]
 8014fb2:	80c3      	strh	r3, [r0, #6]
 8014fb4:	bd10      	pop	{r4, pc}
 8014fb6:	8003      	strh	r3, [r0, #0]
 8014fb8:	8043      	strh	r3, [r0, #2]
 8014fba:	8083      	strh	r3, [r0, #4]
 8014fbc:	e7f9      	b.n	8014fb2 <_ZNK8touchgfx11VideoWidget12getSolidRectEv+0x2e>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	f9b1 403a 	ldrsh.w	r4, [r1, #58]	; 0x3a
 8014fc4:	f9b1 203c 	ldrsh.w	r2, [r1, #60]	; 0x3c
 8014fc8:	8003      	strh	r3, [r0, #0]
 8014fca:	8043      	strh	r3, [r0, #2]
 8014fcc:	8084      	strh	r4, [r0, #4]
 8014fce:	80c2      	strh	r2, [r0, #6]
 8014fd0:	e7f0      	b.n	8014fb4 <_ZNK8touchgfx11VideoWidget12getSolidRectEv+0x30>
	...

08014fd4 <_ZNK8touchgfx11VideoWidget4drawERKNS_4RectE>:
 8014fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fd6:	b089      	sub	sp, #36	; 0x24
 8014fd8:	f9b0 203a 	ldrsh.w	r2, [r0, #58]	; 0x3a
 8014fdc:	f9b0 303c 	ldrsh.w	r3, [r0, #60]	; 0x3c
 8014fe0:	2600      	movs	r6, #0
 8014fe2:	ad04      	add	r5, sp, #16
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014fea:	4628      	mov	r0, r5
 8014fec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ff0:	9604      	str	r6, [sp, #16]
 8014ff2:	f7fe ff61 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8014ff6:	f7fc f90f 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8014ffa:	6803      	ldr	r3, [r0, #0]
 8014ffc:	462a      	mov	r2, r5
 8014ffe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015000:	699f      	ldr	r7, [r3, #24]
 8015002:	4623      	mov	r3, r4
 8015004:	47b8      	blx	r7
 8015006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015008:	b33b      	cbz	r3, 801505a <_ZNK8touchgfx11VideoWidget4drawERKNS_4RectE+0x86>
 801500a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 801500e:	a906      	add	r1, sp, #24
 8015010:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8015014:	4628      	mov	r0, r5
 8015016:	f8ad 201c 	strh.w	r2, [sp, #28]
 801501a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801501e:	9606      	str	r6, [sp, #24]
 8015020:	f7fe ff4a 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8015024:	4621      	mov	r1, r4
 8015026:	a806      	add	r0, sp, #24
 8015028:	f002 f9a6 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801502c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801502e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015032:	4b0b      	ldr	r3, [pc, #44]	; (8015060 <_ZNK8touchgfx11VideoWidget4drawERKNS_4RectE+0x8c>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801503a:	b10a      	cbz	r2, 8015040 <_ZNK8touchgfx11VideoWidget4drawERKNS_4RectE+0x6c>
 801503c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801503e:	b900      	cbnz	r0, 8015042 <_ZNK8touchgfx11VideoWidget4drawERKNS_4RectE+0x6e>
 8015040:	6898      	ldr	r0, [r3, #8]
 8015042:	6803      	ldr	r3, [r0, #0]
 8015044:	21ff      	movs	r1, #255	; 0xff
 8015046:	2600      	movs	r6, #0
 8015048:	9500      	str	r5, [sp, #0]
 801504a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 801504e:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8015052:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015054:	691d      	ldr	r5, [r3, #16]
 8015056:	ab06      	add	r3, sp, #24
 8015058:	47a8      	blx	r5
 801505a:	b009      	add	sp, #36	; 0x24
 801505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801505e:	bf00      	nop
 8015060:	24041b0c 	.word	0x24041b0c

08015064 <_ZN8touchgfx11VideoWidgetC1Ev>:
 8015064:	2300      	movs	r3, #0
 8015066:	2201      	movs	r2, #1
 8015068:	4915      	ldr	r1, [pc, #84]	; (80150c0 <_ZN8touchgfx11VideoWidgetC1Ev+0x5c>)
 801506a:	b510      	push	{r4, lr}
 801506c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8015070:	4604      	mov	r4, r0
 8015072:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 8015076:	8083      	strh	r3, [r0, #4]
 8015078:	80c3      	strh	r3, [r0, #6]
 801507a:	8103      	strh	r3, [r0, #8]
 801507c:	8143      	strh	r3, [r0, #10]
 801507e:	8183      	strh	r3, [r0, #12]
 8015080:	81c3      	strh	r3, [r0, #14]
 8015082:	8203      	strh	r3, [r0, #16]
 8015084:	8243      	strh	r3, [r0, #18]
 8015086:	61c3      	str	r3, [r0, #28]
 8015088:	8403      	strh	r3, [r0, #32]
 801508a:	8443      	strh	r3, [r0, #34]	; 0x22
 801508c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8015090:	6001      	str	r1, [r0, #0]
 8015092:	86c3      	strh	r3, [r0, #54]	; 0x36
 8015094:	8703      	strh	r3, [r0, #56]	; 0x38
 8015096:	8743      	strh	r3, [r0, #58]	; 0x3a
 8015098:	8783      	strh	r3, [r0, #60]	; 0x3c
 801509a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801509e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80150a2:	f7fc f8b9 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 80150a6:	6803      	ldr	r3, [r0, #0]
 80150a8:	4621      	mov	r1, r4
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	4798      	blx	r3
 80150ae:	62a0      	str	r0, [r4, #40]	; 0x28
 80150b0:	f001 f8f2 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 80150b4:	4621      	mov	r1, r4
 80150b6:	f001 f8f5 	bl	80162a4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 80150ba:	4620      	mov	r0, r4
 80150bc:	bd10      	pop	{r4, pc}
 80150be:	bf00      	nop
 80150c0:	08028ba8 	.word	0x08028ba8

080150c4 <_ZNK8touchgfx11VideoWidget4playEv>:
 80150c4:	b570      	push	{r4, r5, r6, lr}
 80150c6:	4605      	mov	r5, r0
 80150c8:	f7fc f8a6 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 80150cc:	6803      	ldr	r3, [r0, #0]
 80150ce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80150d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80150d2:	2300      	movs	r3, #0
 80150d4:	46a4      	mov	ip, r4
 80150d6:	461a      	mov	r2, r3
 80150d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150dc:	4760      	bx	ip

080150de <_ZNK8touchgfx11VideoWidget9setRepeatEb>:
 80150de:	b570      	push	{r4, r5, r6, lr}
 80150e0:	460e      	mov	r6, r1
 80150e2:	4605      	mov	r5, r0
 80150e4:	f7fc f898 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 80150e8:	6803      	ldr	r3, [r0, #0]
 80150ea:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80150ec:	2205      	movs	r2, #5
 80150ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80150f0:	4633      	mov	r3, r6
 80150f2:	46a4      	mov	ip, r4
 80150f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150f8:	4760      	bx	ip

080150fa <_ZNK8touchgfx11VideoWidget12setFrameRateEmm>:
 80150fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150fe:	460e      	mov	r6, r1
 8015100:	4617      	mov	r7, r2
 8015102:	4605      	mov	r5, r0
 8015104:	f7fc f888 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8015108:	6803      	ldr	r3, [r0, #0]
 801510a:	4632      	mov	r2, r6
 801510c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801510e:	691c      	ldr	r4, [r3, #16]
 8015110:	463b      	mov	r3, r7
 8015112:	46a4      	mov	ip, r4
 8015114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015118:	4760      	bx	ip

0801511a <_ZN8touchgfx11VideoWidget20readVideoInformationEv>:
 801511a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801511c:	4604      	mov	r4, r0
 801511e:	f7fc f87b 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8015122:	6803      	ldr	r3, [r0, #0]
 8015124:	466a      	mov	r2, sp
 8015126:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801512a:	4798      	blx	r3
 801512c:	9b02      	ldr	r3, [sp, #8]
 801512e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015132:	213c      	movs	r1, #60	; 0x3c
 8015134:	8763      	strh	r3, [r4, #58]	; 0x3a
 8015136:	4620      	mov	r0, r4
 8015138:	9b03      	ldr	r3, [sp, #12]
 801513a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801513c:	9b00      	ldr	r3, [sp, #0]
 801513e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015142:	f7ff ffda 	bl	80150fa <_ZNK8touchgfx11VideoWidget12setFrameRateEmm>
 8015146:	b004      	add	sp, #16
 8015148:	bd10      	pop	{r4, pc}

0801514a <_ZN8touchgfx11VideoWidget12setVideoDataEPKhm>:
 801514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801514c:	4604      	mov	r4, r0
 801514e:	460e      	mov	r6, r1
 8015150:	4617      	mov	r7, r2
 8015152:	f7fc f861 	bl	8011218 <_ZN8touchgfx15VideoController11getInstanceEv>
 8015156:	6803      	ldr	r3, [r0, #0]
 8015158:	4632      	mov	r2, r6
 801515a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801515c:	69dd      	ldr	r5, [r3, #28]
 801515e:	463b      	mov	r3, r7
 8015160:	47a8      	blx	r5
 8015162:	4620      	mov	r0, r4
 8015164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015168:	f7ff bfd7 	b.w	801511a <_ZN8touchgfx11VideoWidget20readVideoInformationEv>

0801516c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801516c:	b510      	push	{r4, lr}
 801516e:	6803      	ldr	r3, [r0, #0]
 8015170:	460c      	mov	r4, r1
 8015172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015174:	4798      	blx	r3
 8015176:	1b03      	subs	r3, r0, r4
 8015178:	4258      	negs	r0, r3
 801517a:	4158      	adcs	r0, r3
 801517c:	bd10      	pop	{r4, pc}
	...

08015180 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015180:	4b01      	ldr	r3, [pc, #4]	; (8015188 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8015182:	6019      	str	r1, [r3, #0]
 8015184:	4770      	bx	lr
 8015186:	bf00      	nop
 8015188:	24041b14 	.word	0x24041b14

0801518c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015190:	4696      	mov	lr, r2
 8015192:	b097      	sub	sp, #92	; 0x5c
 8015194:	4605      	mov	r5, r0
 8015196:	4614      	mov	r4, r2
 8015198:	460e      	mov	r6, r1
 801519a:	461f      	mov	r7, r3
 801519c:	f10d 0c1c 	add.w	ip, sp, #28
 80151a0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80151a4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80151a8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80151ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151b4:	f8de 3000 	ldr.w	r3, [lr]
 80151b8:	f104 0e14 	add.w	lr, r4, #20
 80151bc:	f8cc 3000 	str.w	r3, [ip]
 80151c0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80151c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151cc:	f8de 3000 	ldr.w	r3, [lr]
 80151d0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80151d4:	f8cc 3000 	str.w	r3, [ip]
 80151d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80151dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151e4:	f8de 3000 	ldr.w	r3, [lr]
 80151e8:	4631      	mov	r1, r6
 80151ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80151ec:	4628      	mov	r0, r5
 80151ee:	f8cc 3000 	str.w	r3, [ip]
 80151f2:	682b      	ldr	r3, [r5, #0]
 80151f4:	9201      	str	r2, [sp, #4]
 80151f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80151f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80151fc:	9200      	str	r2, [sp, #0]
 80151fe:	aa07      	add	r2, sp, #28
 8015200:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015204:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8015208:	463b      	mov	r3, r7
 801520a:	47d8      	blx	fp
 801520c:	46a6      	mov	lr, r4
 801520e:	f10d 0c1c 	add.w	ip, sp, #28
 8015212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801521a:	f8de 3000 	ldr.w	r3, [lr]
 801521e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8015222:	343c      	adds	r4, #60	; 0x3c
 8015224:	f8cc 3000 	str.w	r3, [ip]
 8015228:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801522c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015234:	f8de 3000 	ldr.w	r3, [lr]
 8015238:	f8cc 3000 	str.w	r3, [ip]
 801523c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	4631      	mov	r1, r6
 801524a:	4628      	mov	r0, r5
 801524c:	f8cc 3000 	str.w	r3, [ip]
 8015250:	682b      	ldr	r3, [r5, #0]
 8015252:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015256:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015258:	f8cd 8008 	str.w	r8, [sp, #8]
 801525c:	9201      	str	r2, [sp, #4]
 801525e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015260:	9200      	str	r2, [sp, #0]
 8015262:	aa07      	add	r2, sp, #28
 8015264:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8015266:	463b      	mov	r3, r7
 8015268:	47a0      	blx	r4
 801526a:	b017      	add	sp, #92	; 0x5c
 801526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015270 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015270:	2000      	movs	r0, #0
 8015272:	4770      	bx	lr

08015274 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015278:	b08d      	sub	sp, #52	; 0x34
 801527a:	4688      	mov	r8, r1
 801527c:	f8d3 c000 	ldr.w	ip, [r3]
 8015280:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015282:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8015286:	680f      	ldr	r7, [r1, #0]
 8015288:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801528c:	eba7 070c 	sub.w	r7, r7, ip
 8015290:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8015294:	edd3 6a07 	vldr	s13, [r3, #28]
 8015298:	42bc      	cmp	r4, r7
 801529a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801529c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80152a0:	bfa8      	it	ge
 80152a2:	463c      	movge	r4, r7
 80152a4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80152a8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80152ac:	ee07 4a90 	vmov	s15, r4
 80152b0:	eb09 0e0c 	add.w	lr, r9, ip
 80152b4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80152b8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80152bc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80152c0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80152c4:	4571      	cmp	r1, lr
 80152c6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80152ca:	ee65 4a24 	vmul.f32	s9, s10, s9
 80152ce:	ee25 5a27 	vmul.f32	s10, s10, s15
 80152d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80152d6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80152da:	ee32 1a05 	vadd.f32	s2, s4, s10
 80152de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80152e2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80152e6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80152ea:	ee22 2a07 	vmul.f32	s4, s4, s14
 80152ee:	f340 808c 	ble.w	801540a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80152f2:	eba1 060e 	sub.w	r6, r1, lr
 80152f6:	fb96 f5f4 	sdiv	r5, r6, r4
 80152fa:	ee07 5a10 	vmov	s14, r5
 80152fe:	2d00      	cmp	r5, #0
 8015300:	fb04 6615 	mls	r6, r4, r5, r6
 8015304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015308:	eea7 0a04 	vfma.f32	s0, s14, s8
 801530c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015310:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015314:	dd12      	ble.n	801533c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015316:	ee70 6a44 	vsub.f32	s13, s0, s8
 801531a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801531e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015322:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801532a:	bf14      	ite	ne
 801532c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015330:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015334:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015338:	ee22 2a07 	vmul.f32	s4, s4, s14
 801533c:	fb05 f204 	mul.w	r2, r5, r4
 8015340:	1abf      	subs	r7, r7, r2
 8015342:	4494      	add	ip, r2
 8015344:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015348:	4411      	add	r1, r2
 801534a:	eb09 020c 	add.w	r2, r9, ip
 801534e:	b209      	sxth	r1, r1
 8015350:	443a      	add	r2, r7
 8015352:	428a      	cmp	r2, r1
 8015354:	bfc4      	itt	gt
 8015356:	eba1 0209 	subgt.w	r2, r1, r9
 801535a:	eba2 070c 	subgt.w	r7, r2, ip
 801535e:	2f00      	cmp	r7, #0
 8015360:	dd50      	ble.n	8015404 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015362:	fb97 f1f4 	sdiv	r1, r7, r4
 8015366:	fb04 7211 	mls	r2, r4, r1, r7
 801536a:	b90a      	cbnz	r2, 8015370 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801536c:	3901      	subs	r1, #1
 801536e:	4622      	mov	r2, r4
 8015370:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015374:	6840      	ldr	r0, [r0, #4]
 8015376:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801537a:	44b6      	add	lr, r6
 801537c:	f8d0 a000 	ldr.w	sl, [r0]
 8015380:	2900      	cmp	r1, #0
 8015382:	bfcc      	ite	gt
 8015384:	46a1      	movgt	r9, r4
 8015386:	4691      	movle	r9, r2
 8015388:	900b      	str	r0, [sp, #44]	; 0x2c
 801538a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801538c:	fb04 e505 	mla	r5, r4, r5, lr
 8015390:	eef0 6a42 	vmov.f32	s13, s4
 8015394:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015398:	9008      	str	r0, [sp, #32]
 801539a:	eeb0 7a61 	vmov.f32	s14, s3
 801539e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80153a6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80153aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80153ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80153b0:	445b      	add	r3, fp
 80153b2:	9307      	str	r3, [sp, #28]
 80153b4:	ee16 3a90 	vmov	r3, s13
 80153b8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80153bc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80153c0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80153c4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80153c8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80153cc:	ee17 7a90 	vmov	r7, s15
 80153d0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80153d4:	fb97 f7f4 	sdiv	r7, r7, r4
 80153d8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80153dc:	ee17 ca90 	vmov	ip, s15
 80153e0:	fb9c fcf4 	sdiv	ip, ip, r4
 80153e4:	fb0c 3306 	mla	r3, ip, r6, r3
 80153e8:	9302      	str	r3, [sp, #8]
 80153ea:	ee17 3a10 	vmov	r3, s14
 80153ee:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80153f2:	fb07 3706 	mla	r7, r7, r6, r3
 80153f6:	eba9 0306 	sub.w	r3, r9, r6
 80153fa:	e9cd 4700 	strd	r4, r7, [sp]
 80153fe:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015402:	47a0      	blx	r4
 8015404:	b00d      	add	sp, #52	; 0x34
 8015406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540a:	2500      	movs	r5, #0
 801540c:	462e      	mov	r6, r5
 801540e:	e799      	b.n	8015344 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015414:	b0db      	sub	sp, #364	; 0x16c
 8015416:	461d      	mov	r5, r3
 8015418:	4614      	mov	r4, r2
 801541a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801541e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015420:	4629      	mov	r1, r5
 8015422:	930a      	str	r3, [sp, #40]	; 0x28
 8015424:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015428:	9009      	str	r0, [sp, #36]	; 0x24
 801542a:	930b      	str	r3, [sp, #44]	; 0x2c
 801542c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015430:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015434:	9310      	str	r3, [sp, #64]	; 0x40
 8015436:	6803      	ldr	r3, [r0, #0]
 8015438:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801543a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801543e:	47b8      	blx	r7
 8015440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015442:	6058      	str	r0, [r3, #4]
 8015444:	2800      	cmp	r0, #0
 8015446:	f000 83a1 	beq.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801544a:	682b      	ldr	r3, [r5, #0]
 801544c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015450:	ed94 7a02 	vldr	s14, [r4, #8]
 8015454:	9314      	str	r3, [sp, #80]	; 0x50
 8015456:	686b      	ldr	r3, [r5, #4]
 8015458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801545c:	9315      	str	r3, [sp, #84]	; 0x54
 801545e:	4bc1      	ldr	r3, [pc, #772]	; (8015764 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015460:	7819      	ldrb	r1, [r3, #0]
 8015462:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015466:	2900      	cmp	r1, #0
 8015468:	bf16      	itet	ne
 801546a:	4619      	movne	r1, r3
 801546c:	4611      	moveq	r1, r2
 801546e:	4613      	movne	r3, r2
 8015470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015474:	9116      	str	r1, [sp, #88]	; 0x58
 8015476:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801547a:	f240 8387 	bls.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801547e:	ed94 7a07 	vldr	s14, [r4, #28]
 8015482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548a:	f240 837f 	bls.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801548e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801549a:	f240 8377 	bls.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801549e:	6822      	ldr	r2, [r4, #0]
 80154a0:	4bb1      	ldr	r3, [pc, #708]	; (8015768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80154a2:	429a      	cmp	r2, r3
 80154a4:	f2c0 8372 	blt.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154a8:	49b0      	ldr	r1, [pc, #704]	; (801576c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80154aa:	6963      	ldr	r3, [r4, #20]
 80154ac:	428a      	cmp	r2, r1
 80154ae:	f300 836d 	bgt.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154b2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80154b6:	48ae      	ldr	r0, [pc, #696]	; (8015770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80154b8:	33ff      	adds	r3, #255	; 0xff
 80154ba:	4283      	cmp	r3, r0
 80154bc:	f200 8366 	bhi.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80154c2:	4dac      	ldr	r5, [pc, #688]	; (8015774 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80154c4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80154c8:	33ff      	adds	r3, #255	; 0xff
 80154ca:	42ab      	cmp	r3, r5
 80154cc:	f200 835e 	bhi.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154d0:	6862      	ldr	r2, [r4, #4]
 80154d2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80154d6:	33ff      	adds	r3, #255	; 0xff
 80154d8:	4283      	cmp	r3, r0
 80154da:	f200 8357 	bhi.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154de:	69a1      	ldr	r1, [r4, #24]
 80154e0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80154e4:	33ff      	adds	r3, #255	; 0xff
 80154e6:	4283      	cmp	r3, r0
 80154e8:	f200 8350 	bhi.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80154ee:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80154f2:	30ff      	adds	r0, #255	; 0xff
 80154f4:	42a8      	cmp	r0, r5
 80154f6:	f200 8349 	bhi.w	8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80154fa:	428a      	cmp	r2, r1
 80154fc:	f280 8110 	bge.w	8015720 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015500:	429a      	cmp	r2, r3
 8015502:	f300 8119 	bgt.w	8015738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015506:	4299      	cmp	r1, r3
 8015508:	f280 811d 	bge.w	8015746 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801550c:	2502      	movs	r5, #2
 801550e:	2701      	movs	r7, #1
 8015510:	46a9      	mov	r9, r5
 8015512:	46b8      	mov	r8, r7
 8015514:	f04f 0a00 	mov.w	sl, #0
 8015518:	4621      	mov	r1, r4
 801551a:	a849      	add	r0, sp, #292	; 0x124
 801551c:	f002 ffc2 	bl	80184a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015520:	4622      	mov	r2, r4
 8015522:	4653      	mov	r3, sl
 8015524:	a949      	add	r1, sp, #292	; 0x124
 8015526:	f8cd 9000 	str.w	r9, [sp]
 801552a:	a819      	add	r0, sp, #100	; 0x64
 801552c:	f003 f8ea 	bl	8018704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015530:	4622      	mov	r2, r4
 8015532:	4653      	mov	r3, sl
 8015534:	a949      	add	r1, sp, #292	; 0x124
 8015536:	f8cd 8000 	str.w	r8, [sp]
 801553a:	a829      	add	r0, sp, #164	; 0xa4
 801553c:	f003 f8e2 	bl	8018704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015540:	4643      	mov	r3, r8
 8015542:	4622      	mov	r2, r4
 8015544:	a949      	add	r1, sp, #292	; 0x124
 8015546:	f8cd 9000 	str.w	r9, [sp]
 801554a:	a839      	add	r0, sp, #228	; 0xe4
 801554c:	f003 f8da 	bl	8018704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015550:	42af      	cmp	r7, r5
 8015552:	af12      	add	r7, sp, #72	; 0x48
 8015554:	bfb7      	itett	lt
 8015556:	2300      	movlt	r3, #0
 8015558:	2301      	movge	r3, #1
 801555a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801555c:	ac19      	addlt	r4, sp, #100	; 0x64
 801555e:	bfb1      	iteee	lt
 8015560:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015562:	ad19      	addge	r5, sp, #100	; 0x64
 8015564:	930e      	strge	r3, [sp, #56]	; 0x38
 8015566:	ac29      	addge	r4, sp, #164	; 0xa4
 8015568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801556a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801556e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015572:	b928      	cbnz	r0, 8015580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015574:	4b80      	ldr	r3, [pc, #512]	; (8015778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015576:	6818      	ldr	r0, [r3, #0]
 8015578:	6803      	ldr	r3, [r0, #0]
 801557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801557c:	4798      	blx	r3
 801557e:	6038      	str	r0, [r7, #0]
 8015580:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015582:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015586:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801558a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801558c:	930c      	str	r3, [sp, #48]	; 0x30
 801558e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015590:	6963      	ldr	r3, [r4, #20]
 8015592:	440b      	add	r3, r1
 8015594:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015598:	4408      	add	r0, r1
 801559a:	b200      	sxth	r0, r0
 801559c:	4283      	cmp	r3, r0
 801559e:	900d      	str	r0, [sp, #52]	; 0x34
 80155a0:	f280 80dd 	bge.w	801575e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80155a4:	428b      	cmp	r3, r1
 80155a6:	da08      	bge.n	80155ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80155a8:	2a00      	cmp	r2, #0
 80155aa:	dd06      	ble.n	80155ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80155ac:	1acb      	subs	r3, r1, r3
 80155ae:	429a      	cmp	r2, r3
 80155b0:	f2c0 80e4 	blt.w	801577c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	f300 80e2 	bgt.w	801577e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80155ba:	6967      	ldr	r7, [r4, #20]
 80155bc:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80155c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155c2:	443b      	add	r3, r7
 80155c4:	461f      	mov	r7, r3
 80155c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155c8:	1bdf      	subs	r7, r3, r7
 80155ca:	4297      	cmp	r7, r2
 80155cc:	bfa8      	it	ge
 80155ce:	4617      	movge	r7, r2
 80155d0:	2f00      	cmp	r7, #0
 80155d2:	f340 8166 	ble.w	80158a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80155d6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80155d8:	6829      	ldr	r1, [r5, #0]
 80155da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80155de:	f9bb 3000 	ldrsh.w	r3, [fp]
 80155e2:	4411      	add	r1, r2
 80155e4:	6820      	ldr	r0, [r4, #0]
 80155e6:	4299      	cmp	r1, r3
 80155e8:	dd1a      	ble.n	8015620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80155ea:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80155ee:	4402      	add	r2, r0
 80155f0:	440b      	add	r3, r1
 80155f2:	b21b      	sxth	r3, r3
 80155f4:	429a      	cmp	r2, r3
 80155f6:	dc13      	bgt.n	8015620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80155f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155fa:	a912      	add	r1, sp, #72	; 0x48
 80155fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	9206      	str	r2, [sp, #24]
 8015604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015606:	9500      	str	r5, [sp, #0]
 8015608:	9205      	str	r2, [sp, #20]
 801560a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801560c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015610:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015612:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015616:	aa49      	add	r2, sp, #292	; 0x124
 8015618:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801561c:	4623      	mov	r3, r4
 801561e:	47c8      	blx	r9
 8015620:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015624:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015628:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801562c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015630:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015634:	68a1      	ldr	r1, [r4, #8]
 8015636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801563a:	ed94 6a08 	vldr	s12, [r4, #32]
 801563e:	edd4 6a07 	vldr	s13, [r4, #28]
 8015642:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015646:	ee76 6a86 	vadd.f32	s13, s13, s12
 801564a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801564e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015652:	edc4 6a07 	vstr	s13, [r4, #28]
 8015656:	441a      	add	r2, r3
 8015658:	6963      	ldr	r3, [r4, #20]
 801565a:	3301      	adds	r3, #1
 801565c:	6022      	str	r2, [r4, #0]
 801565e:	6163      	str	r3, [r4, #20]
 8015660:	69a3      	ldr	r3, [r4, #24]
 8015662:	3b01      	subs	r3, #1
 8015664:	61a3      	str	r3, [r4, #24]
 8015666:	6923      	ldr	r3, [r4, #16]
 8015668:	440b      	add	r3, r1
 801566a:	68e1      	ldr	r1, [r4, #12]
 801566c:	428b      	cmp	r3, r1
 801566e:	6123      	str	r3, [r4, #16]
 8015670:	db15      	blt.n	801569e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015672:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015676:	3201      	adds	r2, #1
 8015678:	1a5b      	subs	r3, r3, r1
 801567a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801567e:	6022      	str	r2, [r4, #0]
 8015680:	6123      	str	r3, [r4, #16]
 8015682:	edc4 6a07 	vstr	s13, [r4, #28]
 8015686:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801568a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801568e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015692:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801569a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801569e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80156a2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80156a6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80156aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156ae:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80156b2:	68a9      	ldr	r1, [r5, #8]
 80156b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80156b8:	ed95 6a08 	vldr	s12, [r5, #32]
 80156bc:	edd5 6a07 	vldr	s13, [r5, #28]
 80156c0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80156c4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80156c8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80156cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156d0:	edc5 6a07 	vstr	s13, [r5, #28]
 80156d4:	441a      	add	r2, r3
 80156d6:	696b      	ldr	r3, [r5, #20]
 80156d8:	3301      	adds	r3, #1
 80156da:	602a      	str	r2, [r5, #0]
 80156dc:	616b      	str	r3, [r5, #20]
 80156de:	69ab      	ldr	r3, [r5, #24]
 80156e0:	3b01      	subs	r3, #1
 80156e2:	61ab      	str	r3, [r5, #24]
 80156e4:	692b      	ldr	r3, [r5, #16]
 80156e6:	440b      	add	r3, r1
 80156e8:	68e9      	ldr	r1, [r5, #12]
 80156ea:	428b      	cmp	r3, r1
 80156ec:	612b      	str	r3, [r5, #16]
 80156ee:	db15      	blt.n	801571c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80156f0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80156f4:	3201      	adds	r2, #1
 80156f6:	1a5b      	subs	r3, r3, r1
 80156f8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80156fc:	602a      	str	r2, [r5, #0]
 80156fe:	612b      	str	r3, [r5, #16]
 8015700:	edc5 6a07 	vstr	s13, [r5, #28]
 8015704:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015708:	ee36 7a87 	vadd.f32	s14, s13, s14
 801570c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015710:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015718:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801571c:	3f01      	subs	r7, #1
 801571e:	e757      	b.n	80155d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015720:	4299      	cmp	r1, r3
 8015722:	dc13      	bgt.n	801574c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015724:	429a      	cmp	r2, r3
 8015726:	da14      	bge.n	8015752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015728:	2502      	movs	r5, #2
 801572a:	2703      	movs	r7, #3
 801572c:	f04f 0800 	mov.w	r8, #0
 8015730:	46a9      	mov	r9, r5
 8015732:	f04f 0a01 	mov.w	sl, #1
 8015736:	e6ef      	b.n	8015518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015738:	2501      	movs	r5, #1
 801573a:	2700      	movs	r7, #0
 801573c:	46a9      	mov	r9, r5
 801573e:	46b8      	mov	r8, r7
 8015740:	f04f 0a02 	mov.w	sl, #2
 8015744:	e6e8      	b.n	8015518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015746:	2501      	movs	r5, #1
 8015748:	2702      	movs	r7, #2
 801574a:	e6e1      	b.n	8015510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801574c:	2500      	movs	r5, #0
 801574e:	2701      	movs	r7, #1
 8015750:	e7f4      	b.n	801573c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015752:	2702      	movs	r7, #2
 8015754:	2503      	movs	r5, #3
 8015756:	f04f 0900 	mov.w	r9, #0
 801575a:	46b8      	mov	r8, r7
 801575c:	e7e9      	b.n	8015732 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801575e:	4613      	mov	r3, r2
 8015760:	e728      	b.n	80155b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015762:	bf00      	nop
 8015764:	24041b04 	.word	0x24041b04
 8015768:	fffd8f01 	.word	0xfffd8f01
 801576c:	00027100 	.word	0x00027100
 8015770:	0004e1ff 	.word	0x0004e1ff
 8015774:	0004e1fe 	.word	0x0004e1fe
 8015778:	24041b0c 	.word	0x24041b0c
 801577c:	4613      	mov	r3, r2
 801577e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015780:	469e      	mov	lr, r3
 8015782:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015784:	469c      	mov	ip, r3
 8015786:	9111      	str	r1, [sp, #68]	; 0x44
 8015788:	f04f 0900 	mov.w	r9, #0
 801578c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015790:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015794:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015798:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801579c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80157a0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80157a4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80157a8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80157ac:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80157b0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80157b4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80157b8:	f1bc 0f00 	cmp.w	ip, #0
 80157bc:	d147      	bne.n	801584e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80157be:	eb03 0c07 	add.w	ip, r3, r7
 80157c2:	1ad7      	subs	r7, r2, r3
 80157c4:	f1b9 0f00 	cmp.w	r9, #0
 80157c8:	d009      	beq.n	80157de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80157ca:	9029      	str	r0, [sp, #164]	; 0xa4
 80157cc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80157d0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80157d4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80157d8:	912d      	str	r1, [sp, #180]	; 0xb4
 80157da:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80157de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80157e0:	f04f 0800 	mov.w	r8, #0
 80157e4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80157e8:	9111      	str	r1, [sp, #68]	; 0x44
 80157ea:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80157ee:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80157f2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80157f6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80157fa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80157fe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015802:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015806:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801580a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801580e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015812:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015816:	f1be 0f00 	cmp.w	lr, #0
 801581a:	d031      	beq.n	8015880 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801581c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801581e:	4450      	add	r0, sl
 8015820:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015824:	4431      	add	r1, r6
 8015826:	ee37 7a04 	vadd.f32	s14, s14, s8
 801582a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801582e:	4549      	cmp	r1, r9
 8015830:	db08      	blt.n	8015844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015832:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015836:	3001      	adds	r0, #1
 8015838:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801583c:	eba1 0109 	sub.w	r1, r1, r9
 8015840:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015844:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015848:	f04f 0801 	mov.w	r8, #1
 801584c:	e7e3      	b.n	8015816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801584e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015850:	4450      	add	r0, sl
 8015852:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015856:	4431      	add	r1, r6
 8015858:	ee77 7a84 	vadd.f32	s15, s15, s8
 801585c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015860:	4541      	cmp	r1, r8
 8015862:	db08      	blt.n	8015876 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015864:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015868:	3001      	adds	r0, #1
 801586a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801586e:	eba1 0108 	sub.w	r1, r1, r8
 8015872:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015876:	f10c 3cff 	add.w	ip, ip, #4294967295
 801587a:	f04f 0901 	mov.w	r9, #1
 801587e:	e79b      	b.n	80157b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015880:	449c      	add	ip, r3
 8015882:	1aff      	subs	r7, r7, r3
 8015884:	f1b8 0f00 	cmp.w	r8, #0
 8015888:	d009      	beq.n	801589e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801588a:	9019      	str	r0, [sp, #100]	; 0x64
 801588c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015890:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015894:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015898:	911d      	str	r1, [sp, #116]	; 0x74
 801589a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801589e:	1ad2      	subs	r2, r2, r3
 80158a0:	e68b      	b.n	80155ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80158a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 80d1 	beq.w	8015a4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80158ac:	ad19      	add	r5, sp, #100	; 0x64
 80158ae:	ac39      	add	r4, sp, #228	; 0xe4
 80158b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80158b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80158b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158ba:	930c      	str	r3, [sp, #48]	; 0x30
 80158bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158be:	6963      	ldr	r3, [r4, #20]
 80158c0:	440b      	add	r3, r1
 80158c2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80158c6:	4408      	add	r0, r1
 80158c8:	b200      	sxth	r0, r0
 80158ca:	4283      	cmp	r3, r0
 80158cc:	900d      	str	r0, [sp, #52]	; 0x34
 80158ce:	f280 80c1 	bge.w	8015a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80158d2:	428b      	cmp	r3, r1
 80158d4:	da08      	bge.n	80158e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80158d6:	2a00      	cmp	r2, #0
 80158d8:	dd06      	ble.n	80158e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80158da:	1acb      	subs	r3, r1, r3
 80158dc:	429a      	cmp	r2, r3
 80158de:	f2c0 80bb 	blt.w	8015a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	f300 80b9 	bgt.w	8015a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80158e8:	6967      	ldr	r7, [r4, #20]
 80158ea:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80158ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158f0:	443b      	add	r3, r7
 80158f2:	461f      	mov	r7, r3
 80158f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158f6:	1bdf      	subs	r7, r3, r7
 80158f8:	4297      	cmp	r7, r2
 80158fa:	bfa8      	it	ge
 80158fc:	4617      	movge	r7, r2
 80158fe:	2f00      	cmp	r7, #0
 8015900:	f340 813c 	ble.w	8015b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015904:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015906:	6829      	ldr	r1, [r5, #0]
 8015908:	f9b3 2000 	ldrsh.w	r2, [r3]
 801590c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015910:	4411      	add	r1, r2
 8015912:	6820      	ldr	r0, [r4, #0]
 8015914:	4299      	cmp	r1, r3
 8015916:	dd1a      	ble.n	801594e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015918:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801591c:	4402      	add	r2, r0
 801591e:	440b      	add	r3, r1
 8015920:	b21b      	sxth	r3, r3
 8015922:	429a      	cmp	r2, r3
 8015924:	dc13      	bgt.n	801594e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015926:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015928:	a912      	add	r1, sp, #72	; 0x48
 801592a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	9206      	str	r2, [sp, #24]
 8015932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015934:	9500      	str	r5, [sp, #0]
 8015936:	9205      	str	r2, [sp, #20]
 8015938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801593a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801593e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015940:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015944:	aa49      	add	r2, sp, #292	; 0x124
 8015946:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801594a:	4623      	mov	r3, r4
 801594c:	47c8      	blx	r9
 801594e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015952:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015956:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801595a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801595e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015962:	68a1      	ldr	r1, [r4, #8]
 8015964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015968:	ed94 6a08 	vldr	s12, [r4, #32]
 801596c:	edd4 6a07 	vldr	s13, [r4, #28]
 8015970:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015974:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015978:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801597c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015980:	edc4 6a07 	vstr	s13, [r4, #28]
 8015984:	441a      	add	r2, r3
 8015986:	6963      	ldr	r3, [r4, #20]
 8015988:	3301      	adds	r3, #1
 801598a:	6022      	str	r2, [r4, #0]
 801598c:	6163      	str	r3, [r4, #20]
 801598e:	69a3      	ldr	r3, [r4, #24]
 8015990:	3b01      	subs	r3, #1
 8015992:	61a3      	str	r3, [r4, #24]
 8015994:	6923      	ldr	r3, [r4, #16]
 8015996:	440b      	add	r3, r1
 8015998:	68e1      	ldr	r1, [r4, #12]
 801599a:	428b      	cmp	r3, r1
 801599c:	6123      	str	r3, [r4, #16]
 801599e:	db15      	blt.n	80159cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80159a0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80159a4:	3201      	adds	r2, #1
 80159a6:	1a5b      	subs	r3, r3, r1
 80159a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80159ac:	6022      	str	r2, [r4, #0]
 80159ae:	6123      	str	r3, [r4, #16]
 80159b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80159b4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80159b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80159bc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80159c0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80159c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159c8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80159cc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80159d0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80159d4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80159d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80159dc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80159e0:	68a9      	ldr	r1, [r5, #8]
 80159e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80159e6:	ed95 6a08 	vldr	s12, [r5, #32]
 80159ea:	edd5 6a07 	vldr	s13, [r5, #28]
 80159ee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80159f2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80159f6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80159fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80159fe:	edc5 6a07 	vstr	s13, [r5, #28]
 8015a02:	441a      	add	r2, r3
 8015a04:	696b      	ldr	r3, [r5, #20]
 8015a06:	3301      	adds	r3, #1
 8015a08:	602a      	str	r2, [r5, #0]
 8015a0a:	616b      	str	r3, [r5, #20]
 8015a0c:	69ab      	ldr	r3, [r5, #24]
 8015a0e:	3b01      	subs	r3, #1
 8015a10:	61ab      	str	r3, [r5, #24]
 8015a12:	692b      	ldr	r3, [r5, #16]
 8015a14:	440b      	add	r3, r1
 8015a16:	68e9      	ldr	r1, [r5, #12]
 8015a18:	428b      	cmp	r3, r1
 8015a1a:	612b      	str	r3, [r5, #16]
 8015a1c:	db15      	blt.n	8015a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015a1e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015a22:	3201      	adds	r2, #1
 8015a24:	1a5b      	subs	r3, r3, r1
 8015a26:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015a2a:	602a      	str	r2, [r5, #0]
 8015a2c:	612b      	str	r3, [r5, #16]
 8015a2e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015a32:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015a36:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015a3a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015a3e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a46:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015a4a:	3f01      	subs	r7, #1
 8015a4c:	e757      	b.n	80158fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015a4e:	ad39      	add	r5, sp, #228	; 0xe4
 8015a50:	ac19      	add	r4, sp, #100	; 0x64
 8015a52:	e72d      	b.n	80158b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015a54:	4613      	mov	r3, r2
 8015a56:	e744      	b.n	80158e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015a58:	4613      	mov	r3, r2
 8015a5a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015a5c:	469e      	mov	lr, r3
 8015a5e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015a62:	461f      	mov	r7, r3
 8015a64:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8015a68:	f04f 0900 	mov.w	r9, #0
 8015a6c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015a70:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015a74:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015a78:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015a7c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015a80:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015a82:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015a86:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8015a8a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015a8e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015a92:	960e      	str	r6, [sp, #56]	; 0x38
 8015a94:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015a98:	2f00      	cmp	r7, #0
 8015a9a:	d146      	bne.n	8015b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015a9c:	449c      	add	ip, r3
 8015a9e:	1ad7      	subs	r7, r2, r3
 8015aa0:	f1b9 0f00 	cmp.w	r9, #0
 8015aa4:	d009      	beq.n	8015aba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015aa6:	9039      	str	r0, [sp, #228]	; 0xe4
 8015aa8:	913d      	str	r1, [sp, #244]	; 0xf4
 8015aaa:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015aae:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015ab2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8015ab6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8015aba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015abc:	f04f 0800 	mov.w	r8, #0
 8015ac0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015ac4:	910e      	str	r1, [sp, #56]	; 0x38
 8015ac6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015aca:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015ace:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015ad2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015ad6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015ada:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015ade:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015ae2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015ae6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015aea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015aee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015af2:	f1be 0f00 	cmp.w	lr, #0
 8015af6:	d030      	beq.n	8015b5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015af8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015afa:	4450      	add	r0, sl
 8015afc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015b00:	4431      	add	r1, r6
 8015b02:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015b06:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015b0a:	4549      	cmp	r1, r9
 8015b0c:	db08      	blt.n	8015b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015b0e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015b12:	3001      	adds	r0, #1
 8015b14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015b18:	eba1 0109 	sub.w	r1, r1, r9
 8015b1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015b20:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015b24:	f04f 0801 	mov.w	r8, #1
 8015b28:	e7e3      	b.n	8015af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015b2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015b2c:	4450      	add	r0, sl
 8015b2e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015b32:	4431      	add	r1, r6
 8015b34:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015b38:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015b3c:	4541      	cmp	r1, r8
 8015b3e:	db08      	blt.n	8015b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015b40:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015b44:	3001      	adds	r0, #1
 8015b46:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015b4a:	eba1 0108 	sub.w	r1, r1, r8
 8015b4e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015b52:	3f01      	subs	r7, #1
 8015b54:	f04f 0901 	mov.w	r9, #1
 8015b58:	e79e      	b.n	8015a98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015b5a:	449c      	add	ip, r3
 8015b5c:	1aff      	subs	r7, r7, r3
 8015b5e:	f1b8 0f00 	cmp.w	r8, #0
 8015b62:	d009      	beq.n	8015b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015b64:	9019      	str	r0, [sp, #100]	; 0x64
 8015b66:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015b6a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015b6e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015b72:	911d      	str	r1, [sp, #116]	; 0x74
 8015b74:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015b78:	1ad2      	subs	r2, r2, r3
 8015b7a:	e6b5      	b.n	80158e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	b923      	cbnz	r3, 8015b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b82:	4b04      	ldr	r3, [pc, #16]	; (8015b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015b84:	6818      	ldr	r0, [r3, #0]
 8015b86:	6803      	ldr	r3, [r0, #0]
 8015b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b8a:	4798      	blx	r3
 8015b8c:	b05b      	add	sp, #364	; 0x16c
 8015b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b92:	bf00      	nop
 8015b94:	24041b0c 	.word	0x24041b0c

08015b98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015b98:	2b03      	cmp	r3, #3
 8015b9a:	d818      	bhi.n	8015bce <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015b9c:	e8df f003 	tbb	[pc, r3]
 8015ba0:	130d0602 	.word	0x130d0602
 8015ba4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015ba8:	1850      	adds	r0, r2, r1
 8015baa:	4770      	bx	lr
 8015bac:	8803      	ldrh	r3, [r0, #0]
 8015bae:	8880      	ldrh	r0, [r0, #4]
 8015bb0:	4418      	add	r0, r3
 8015bb2:	b200      	sxth	r0, r0
 8015bb4:	1a80      	subs	r0, r0, r2
 8015bb6:	3801      	subs	r0, #1
 8015bb8:	4770      	bx	lr
 8015bba:	8803      	ldrh	r3, [r0, #0]
 8015bbc:	8880      	ldrh	r0, [r0, #4]
 8015bbe:	4418      	add	r0, r3
 8015bc0:	b200      	sxth	r0, r0
 8015bc2:	1a40      	subs	r0, r0, r1
 8015bc4:	e7f7      	b.n	8015bb6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015bc6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015bca:	4410      	add	r0, r2
 8015bcc:	4770      	bx	lr
 8015bce:	2000      	movs	r0, #0
 8015bd0:	4770      	bx	lr

08015bd2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015bd2:	2b03      	cmp	r3, #3
 8015bd4:	d817      	bhi.n	8015c06 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015bd6:	e8df f003 	tbb	[pc, r3]
 8015bda:	0602      	.short	0x0602
 8015bdc:	1009      	.short	0x1009
 8015bde:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015be2:	1850      	adds	r0, r2, r1
 8015be4:	4770      	bx	lr
 8015be6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015bea:	e7fa      	b.n	8015be2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015bec:	8843      	ldrh	r3, [r0, #2]
 8015bee:	88c0      	ldrh	r0, [r0, #6]
 8015bf0:	4418      	add	r0, r3
 8015bf2:	b200      	sxth	r0, r0
 8015bf4:	1a80      	subs	r0, r0, r2
 8015bf6:	3801      	subs	r0, #1
 8015bf8:	4770      	bx	lr
 8015bfa:	8843      	ldrh	r3, [r0, #2]
 8015bfc:	88c0      	ldrh	r0, [r0, #6]
 8015bfe:	4418      	add	r0, r3
 8015c00:	b200      	sxth	r0, r0
 8015c02:	1a40      	subs	r0, r0, r1
 8015c04:	e7f7      	b.n	8015bf6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015c06:	2000      	movs	r0, #0
 8015c08:	4770      	bx	lr
	...

08015c0c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015c0c:	4b01      	ldr	r3, [pc, #4]	; (8015c14 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015c0e:	2200      	movs	r2, #0
 8015c10:	601a      	str	r2, [r3, #0]
 8015c12:	4770      	bx	lr
 8015c14:	24041b14 	.word	0x24041b14

08015c18 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015c18:	4603      	mov	r3, r0
 8015c1a:	b1c8      	cbz	r0, 8015c50 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015c1c:	0c02      	lsrs	r2, r0, #16
 8015c1e:	0412      	lsls	r2, r2, #16
 8015c20:	b9a2      	cbnz	r2, 8015c4c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8015c22:	0403      	lsls	r3, r0, #16
 8015c24:	2010      	movs	r0, #16
 8015c26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015c2a:	bf04      	itt	eq
 8015c2c:	021b      	lsleq	r3, r3, #8
 8015c2e:	3008      	addeq	r0, #8
 8015c30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015c34:	bf04      	itt	eq
 8015c36:	011b      	lsleq	r3, r3, #4
 8015c38:	3004      	addeq	r0, #4
 8015c3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015c3e:	bf04      	itt	eq
 8015c40:	009b      	lsleq	r3, r3, #2
 8015c42:	3002      	addeq	r0, #2
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	db04      	blt.n	8015c52 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015c48:	3001      	adds	r0, #1
 8015c4a:	4770      	bx	lr
 8015c4c:	2000      	movs	r0, #0
 8015c4e:	e7ea      	b.n	8015c26 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015c50:	2020      	movs	r0, #32
 8015c52:	4770      	bx	lr

08015c54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8015c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c58:	b087      	sub	sp, #28
 8015c5a:	4681      	mov	r9, r0
 8015c5c:	4698      	mov	r8, r3
 8015c5e:	4610      	mov	r0, r2
 8015c60:	460d      	mov	r5, r1
 8015c62:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8015c66:	b981      	cbnz	r1, 8015c8a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8015c68:	b14b      	cbz	r3, 8015c7e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8015c6a:	460b      	mov	r3, r1
 8015c6c:	464a      	mov	r2, r9
 8015c6e:	4641      	mov	r1, r8
 8015c70:	e9cd 4700 	strd	r4, r7, [sp]
 8015c74:	f7ff ffee 	bl	8015c54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015c78:	b007      	add	sp, #28
 8015c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8015c86:	603b      	str	r3, [r7, #0]
 8015c88:	e7f6      	b.n	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015c8a:	fa32 fa01 	lsrs.w	sl, r2, r1
 8015c8e:	d107      	bne.n	8015ca0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8015c90:	fb09 f602 	mul.w	r6, r9, r2
 8015c94:	fbb6 f0f4 	udiv	r0, r6, r4
 8015c98:	fb04 6610 	mls	r6, r4, r0, r6
 8015c9c:	603e      	str	r6, [r7, #0]
 8015c9e:	e7eb      	b.n	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8015ca0:	2601      	movs	r6, #1
 8015ca2:	fa09 fb01 	lsl.w	fp, r9, r1
 8015ca6:	408e      	lsls	r6, r1
 8015ca8:	fbbb f3f4 	udiv	r3, fp, r4
 8015cac:	3e01      	subs	r6, #1
 8015cae:	9302      	str	r3, [sp, #8]
 8015cb0:	fb0a f303 	mul.w	r3, sl, r3
 8015cb4:	4016      	ands	r6, r2
 8015cb6:	9303      	str	r3, [sp, #12]
 8015cb8:	4630      	mov	r0, r6
 8015cba:	f7ff ffad 	bl	8015c18 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015cbe:	464a      	mov	r2, r9
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	4601      	mov	r1, r0
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	e9cd 4700 	strd	r4, r7, [sp]
 8015cca:	f7ff ffc3 	bl	8015c54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015cce:	9b02      	ldr	r3, [sp, #8]
 8015cd0:	4606      	mov	r6, r0
 8015cd2:	eb05 0108 	add.w	r1, r5, r8
 8015cd6:	fb04 bb13 	mls	fp, r4, r3, fp
 8015cda:	4658      	mov	r0, fp
 8015cdc:	f7ff ff9c 	bl	8015c18 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015ce0:	ab05      	add	r3, sp, #20
 8015ce2:	465a      	mov	r2, fp
 8015ce4:	e9cd 4300 	strd	r4, r3, [sp]
 8015ce8:	4603      	mov	r3, r0
 8015cea:	4650      	mov	r0, sl
 8015cec:	f7ff ffb2 	bl	8015c54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	9a05      	ldr	r2, [sp, #20]
 8015cf4:	9b03      	ldr	r3, [sp, #12]
 8015cf6:	4411      	add	r1, r2
 8015cf8:	fbb1 f2f4 	udiv	r2, r1, r4
 8015cfc:	18d3      	adds	r3, r2, r3
 8015cfe:	fb04 1412 	mls	r4, r4, r2, r1
 8015d02:	441e      	add	r6, r3
 8015d04:	603c      	str	r4, [r7, #0]
 8015d06:	4430      	add	r0, r6
 8015d08:	e7b6      	b.n	8015c78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08015d0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015d0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d0e:	b085      	sub	sp, #20
 8015d10:	f1b0 0900 	subs.w	r9, r0, #0
 8015d14:	461d      	mov	r5, r3
 8015d16:	4617      	mov	r7, r2
 8015d18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015d1a:	bfbb      	ittet	lt
 8015d1c:	f1c9 0900 	rsblt	r9, r9, #0
 8015d20:	f04f 36ff 	movlt.w	r6, #4294967295
 8015d24:	2601      	movge	r6, #1
 8015d26:	6823      	ldrlt	r3, [r4, #0]
 8015d28:	bfbc      	itt	lt
 8015d2a:	425b      	neglt	r3, r3
 8015d2c:	6023      	strlt	r3, [r4, #0]
 8015d2e:	2a00      	cmp	r2, #0
 8015d30:	da04      	bge.n	8015d3c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	4257      	negs	r7, r2
 8015d36:	4276      	negs	r6, r6
 8015d38:	425b      	negs	r3, r3
 8015d3a:	6023      	str	r3, [r4, #0]
 8015d3c:	2d00      	cmp	r5, #0
 8015d3e:	4638      	mov	r0, r7
 8015d40:	bfba      	itte	lt
 8015d42:	426d      	neglt	r5, r5
 8015d44:	f04f 38ff 	movlt.w	r8, #4294967295
 8015d48:	f04f 0801 	movge.w	r8, #1
 8015d4c:	f7ff ff64 	bl	8015c18 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015d50:	ab03      	add	r3, sp, #12
 8015d52:	463a      	mov	r2, r7
 8015d54:	e9cd 5300 	strd	r5, r3, [sp]
 8015d58:	4603      	mov	r3, r0
 8015d5a:	4648      	mov	r0, r9
 8015d5c:	f7ff ff7a 	bl	8015c54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015d60:	6823      	ldr	r3, [r4, #0]
 8015d62:	9a03      	ldr	r2, [sp, #12]
 8015d64:	4546      	cmp	r6, r8
 8015d66:	441a      	add	r2, r3
 8015d68:	fb92 f3f5 	sdiv	r3, r2, r5
 8015d6c:	4418      	add	r0, r3
 8015d6e:	fb05 2313 	mls	r3, r5, r3, r2
 8015d72:	bf18      	it	ne
 8015d74:	4240      	negne	r0, r0
 8015d76:	1c72      	adds	r2, r6, #1
 8015d78:	6023      	str	r3, [r4, #0]
 8015d7a:	d105      	bne.n	8015d88 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	f1c3 0200 	rsb	r2, r3, #0
 8015d82:	db0b      	blt.n	8015d9c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8015d84:	6022      	str	r2, [r4, #0]
 8015d86:	e006      	b.n	8015d96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015d88:	2e01      	cmp	r6, #1
 8015d8a:	d104      	bne.n	8015d96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	da02      	bge.n	8015d96 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8015d90:	442b      	add	r3, r5
 8015d92:	3801      	subs	r0, #1
 8015d94:	6023      	str	r3, [r4, #0]
 8015d96:	b005      	add	sp, #20
 8015d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d9c:	3801      	subs	r0, #1
 8015d9e:	1b52      	subs	r2, r2, r5
 8015da0:	e7f0      	b.n	8015d84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08015da4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015da4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015da8:	4c1c      	ldr	r4, [pc, #112]	; (8015e1c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015daa:	4605      	mov	r5, r0
 8015dac:	6807      	ldr	r7, [r0, #0]
 8015dae:	69a3      	ldr	r3, [r4, #24]
 8015db0:	b92b      	cbnz	r3, 8015dbe <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015db2:	6840      	ldr	r0, [r0, #4]
 8015db4:	e9c5 7000 	strd	r7, r0, [r5]
 8015db8:	b004      	add	sp, #16
 8015dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dbe:	f04f 0802 	mov.w	r8, #2
 8015dc2:	68a2      	ldr	r2, [r4, #8]
 8015dc4:	ae04      	add	r6, sp, #16
 8015dc6:	6820      	ldr	r0, [r4, #0]
 8015dc8:	fb93 f1f8 	sdiv	r1, r3, r8
 8015dcc:	440a      	add	r2, r1
 8015dce:	69e1      	ldr	r1, [r4, #28]
 8015dd0:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015dd4:	463a      	mov	r2, r7
 8015dd6:	9600      	str	r6, [sp, #0]
 8015dd8:	f7ff ff97 	bl	8015d0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015ddc:	69a3      	ldr	r3, [r4, #24]
 8015dde:	4607      	mov	r7, r0
 8015de0:	686a      	ldr	r2, [r5, #4]
 8015de2:	6a21      	ldr	r1, [r4, #32]
 8015de4:	9600      	str	r6, [sp, #0]
 8015de6:	6860      	ldr	r0, [r4, #4]
 8015de8:	f7ff ff8f 	bl	8015d0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015dec:	69a3      	ldr	r3, [r4, #24]
 8015dee:	6962      	ldr	r2, [r4, #20]
 8015df0:	4407      	add	r7, r0
 8015df2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015df4:	9600      	str	r6, [sp, #0]
 8015df6:	68e0      	ldr	r0, [r4, #12]
 8015df8:	fb93 f8f8 	sdiv	r8, r3, r8
 8015dfc:	4442      	add	r2, r8
 8015dfe:	9203      	str	r2, [sp, #12]
 8015e00:	682a      	ldr	r2, [r5, #0]
 8015e02:	f7ff ff82 	bl	8015d0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e06:	4680      	mov	r8, r0
 8015e08:	9600      	str	r6, [sp, #0]
 8015e0a:	69a3      	ldr	r3, [r4, #24]
 8015e0c:	686a      	ldr	r2, [r5, #4]
 8015e0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015e10:	6920      	ldr	r0, [r4, #16]
 8015e12:	f7ff ff7a 	bl	8015d0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015e16:	4440      	add	r0, r8
 8015e18:	e7cc      	b.n	8015db4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015e1a:	bf00      	nop
 8015e1c:	24041b18 	.word	0x24041b18

08015e20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015e20:	4b07      	ldr	r3, [pc, #28]	; (8015e40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	2b01      	cmp	r3, #1
 8015e26:	d109      	bne.n	8015e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015e28:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015e2c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015e30:	8003      	strh	r3, [r0, #0]
 8015e32:	4b04      	ldr	r3, [pc, #16]	; (8015e44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015e34:	881b      	ldrh	r3, [r3, #0]
 8015e36:	3b01      	subs	r3, #1
 8015e38:	1a9b      	subs	r3, r3, r2
 8015e3a:	800b      	strh	r3, [r1, #0]
 8015e3c:	4770      	bx	lr
 8015e3e:	bf00      	nop
 8015e40:	24041b04 	.word	0x24041b04
 8015e44:	24041b00 	.word	0x24041b00

08015e48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8015e48:	4b07      	ldr	r3, [pc, #28]	; (8015e68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8015e4a:	b510      	push	{r4, lr}
 8015e4c:	781b      	ldrb	r3, [r3, #0]
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	d108      	bne.n	8015e64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8015e52:	4b06      	ldr	r3, [pc, #24]	; (8015e6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8015e54:	880c      	ldrh	r4, [r1, #0]
 8015e56:	881b      	ldrh	r3, [r3, #0]
 8015e58:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	1b1b      	subs	r3, r3, r4
 8015e60:	8003      	strh	r3, [r0, #0]
 8015e62:	800a      	strh	r2, [r1, #0]
 8015e64:	bd10      	pop	{r4, pc}
 8015e66:	bf00      	nop
 8015e68:	24041b04 	.word	0x24041b04
 8015e6c:	24041b00 	.word	0x24041b00

08015e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015e70:	4b0a      	ldr	r3, [pc, #40]	; (8015e9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015e72:	b510      	push	{r4, lr}
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	2b01      	cmp	r3, #1
 8015e78:	d10e      	bne.n	8015e98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8015e7a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015e7e:	8843      	ldrh	r3, [r0, #2]
 8015e80:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015e84:	18ca      	adds	r2, r1, r3
 8015e86:	4b06      	ldr	r3, [pc, #24]	; (8015ea0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8015e88:	8044      	strh	r4, [r0, #2]
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	1a9b      	subs	r3, r3, r2
 8015e8e:	8003      	strh	r3, [r0, #0]
 8015e90:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015e94:	8081      	strh	r1, [r0, #4]
 8015e96:	80c3      	strh	r3, [r0, #6]
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	24041b04 	.word	0x24041b04
 8015ea0:	24041b00 	.word	0x24041b00

08015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8015ea4:	4b08      	ldr	r3, [pc, #32]	; (8015ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	d10c      	bne.n	8015ec6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015eac:	8803      	ldrh	r3, [r0, #0]
 8015eae:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015eb2:	8842      	ldrh	r2, [r0, #2]
 8015eb4:	8002      	strh	r2, [r0, #0]
 8015eb6:	185a      	adds	r2, r3, r1
 8015eb8:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015eba:	881b      	ldrh	r3, [r3, #0]
 8015ebc:	1a9b      	subs	r3, r3, r2
 8015ebe:	8043      	strh	r3, [r0, #2]
 8015ec0:	88c3      	ldrh	r3, [r0, #6]
 8015ec2:	80c1      	strh	r1, [r0, #6]
 8015ec4:	8083      	strh	r3, [r0, #4]
 8015ec6:	4770      	bx	lr
 8015ec8:	24041b04 	.word	0x24041b04
 8015ecc:	24041b00 	.word	0x24041b00

08015ed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015ed0:	4b07      	ldr	r3, [pc, #28]	; (8015ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015ed2:	b510      	push	{r4, lr}
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2b01      	cmp	r3, #1
 8015ed8:	d108      	bne.n	8015eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015eda:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015ede:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015ee2:	8003      	strh	r3, [r0, #0]
 8015ee4:	8893      	ldrh	r3, [r2, #4]
 8015ee6:	3b01      	subs	r3, #1
 8015ee8:	1b1b      	subs	r3, r3, r4
 8015eea:	800b      	strh	r3, [r1, #0]
 8015eec:	bd10      	pop	{r4, pc}
 8015eee:	bf00      	nop
 8015ef0:	24041b04 	.word	0x24041b04

08015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015ef4:	4b0a      	ldr	r3, [pc, #40]	; (8015f20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8015ef6:	460a      	mov	r2, r1
 8015ef8:	b510      	push	{r4, lr}
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d10d      	bne.n	8015f1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015f00:	8881      	ldrh	r1, [r0, #4]
 8015f02:	8803      	ldrh	r3, [r0, #0]
 8015f04:	440b      	add	r3, r1
 8015f06:	4601      	mov	r1, r0
 8015f08:	3b01      	subs	r3, #1
 8015f0a:	f821 3b02 	strh.w	r3, [r1], #2
 8015f0e:	f7ff ffdf 	bl	8015ed0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015f12:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015f16:	88c2      	ldrh	r2, [r0, #6]
 8015f18:	80c3      	strh	r3, [r0, #6]
 8015f1a:	8082      	strh	r2, [r0, #4]
 8015f1c:	bd10      	pop	{r4, pc}
 8015f1e:	bf00      	nop
 8015f20:	24041b04 	.word	0x24041b04

08015f24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015f24:	b570      	push	{r4, r5, r6, lr}
 8015f26:	2300      	movs	r3, #0
 8015f28:	4c0a      	ldr	r4, [pc, #40]	; (8015f54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	460e      	mov	r6, r1
 8015f2e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8015f32:	6820      	ldr	r0, [r4, #0]
 8015f34:	b110      	cbz	r0, 8015f3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8015f36:	6803      	ldr	r3, [r0, #0]
 8015f38:	695b      	ldr	r3, [r3, #20]
 8015f3a:	4798      	blx	r3
 8015f3c:	6026      	str	r6, [r4, #0]
 8015f3e:	4630      	mov	r0, r6
 8015f40:	6833      	ldr	r3, [r6, #0]
 8015f42:	68db      	ldr	r3, [r3, #12]
 8015f44:	4798      	blx	r3
 8015f46:	682b      	ldr	r3, [r5, #0]
 8015f48:	4628      	mov	r0, r5
 8015f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f50:	4718      	bx	r3
 8015f52:	bf00      	nop
 8015f54:	24041b48 	.word	0x24041b48

08015f58 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015f58:	4b06      	ldr	r3, [pc, #24]	; (8015f74 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f60:	4b05      	ldr	r3, [pc, #20]	; (8015f78 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015f62:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8015f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f6a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8015f6e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8015f72:	4770      	bx	lr
 8015f74:	24041b00 	.word	0x24041b00
 8015f78:	24041b02 	.word	0x24041b02

08015f7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8015f7c:	4b03      	ldr	r3, [pc, #12]	; (8015f8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8015f7e:	6818      	ldr	r0, [r3, #0]
 8015f80:	b110      	cbz	r0, 8015f88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8015f82:	6803      	ldr	r3, [r0, #0]
 8015f84:	699b      	ldr	r3, [r3, #24]
 8015f86:	4718      	bx	r3
 8015f88:	4770      	bx	lr
 8015f8a:	bf00      	nop
 8015f8c:	24041b48 	.word	0x24041b48

08015f90 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8015f90:	4770      	bx	lr
	...

08015f94 <_ZN8touchgfx11Application4drawEv>:
 8015f94:	4b09      	ldr	r3, [pc, #36]	; (8015fbc <_ZN8touchgfx11Application4drawEv+0x28>)
 8015f96:	b507      	push	{r0, r1, r2, lr}
 8015f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f9c:	2100      	movs	r1, #0
 8015f9e:	4b08      	ldr	r3, [pc, #32]	; (8015fc0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8015fa0:	9100      	str	r1, [sp, #0]
 8015fa2:	4669      	mov	r1, sp
 8015fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fa8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015fac:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015fb0:	6803      	ldr	r3, [r0, #0]
 8015fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb4:	4798      	blx	r3
 8015fb6:	b003      	add	sp, #12
 8015fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015fbc:	24041b00 	.word	0x24041b00
 8015fc0:	24041b02 	.word	0x24041b02

08015fc4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015fc4:	4b03      	ldr	r3, [pc, #12]	; (8015fd4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015fc6:	6818      	ldr	r0, [r3, #0]
 8015fc8:	b110      	cbz	r0, 8015fd0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015fca:	6803      	ldr	r3, [r0, #0]
 8015fcc:	69db      	ldr	r3, [r3, #28]
 8015fce:	4718      	bx	r3
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	24041b48 	.word	0x24041b48

08015fd8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015fd8:	4b03      	ldr	r3, [pc, #12]	; (8015fe8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015fda:	6818      	ldr	r0, [r3, #0]
 8015fdc:	b110      	cbz	r0, 8015fe4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	6a1b      	ldr	r3, [r3, #32]
 8015fe2:	4718      	bx	r3
 8015fe4:	4770      	bx	lr
 8015fe6:	bf00      	nop
 8015fe8:	24041b48 	.word	0x24041b48

08015fec <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8015fec:	2300      	movs	r3, #0
 8015fee:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8015ff2:	4770      	bx	lr

08015ff4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015ff4:	4b03      	ldr	r3, [pc, #12]	; (8016004 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015ff6:	6818      	ldr	r0, [r3, #0]
 8015ff8:	b110      	cbz	r0, 8016000 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8015ffa:	6803      	ldr	r3, [r0, #0]
 8015ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ffe:	4718      	bx	r3
 8016000:	4770      	bx	lr
 8016002:	bf00      	nop
 8016004:	24041b48 	.word	0x24041b48

08016008 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016008:	b570      	push	{r4, r5, r6, lr}
 801600a:	4d32      	ldr	r5, [pc, #200]	; (80160d4 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801600c:	4604      	mov	r4, r0
 801600e:	6828      	ldr	r0, [r5, #0]
 8016010:	b140      	cbz	r0, 8016024 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016012:	7a03      	ldrb	r3, [r0, #8]
 8016014:	b933      	cbnz	r3, 8016024 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016016:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801601a:	6803      	ldr	r3, [r0, #0]
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016022:	4718      	bx	r3
 8016024:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8016028:	b97b      	cbnz	r3, 801604a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801602a:	b170      	cbz	r0, 801604a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801602c:	7a03      	ldrb	r3, [r0, #8]
 801602e:	b163      	cbz	r3, 801604a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016030:	4b29      	ldr	r3, [pc, #164]	; (80160d8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8016032:	6818      	ldr	r0, [r3, #0]
 8016034:	b110      	cbz	r0, 801603c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016036:	6803      	ldr	r3, [r0, #0]
 8016038:	691b      	ldr	r3, [r3, #16]
 801603a:	4798      	blx	r3
 801603c:	6828      	ldr	r0, [r5, #0]
 801603e:	6803      	ldr	r3, [r0, #0]
 8016040:	68db      	ldr	r3, [r3, #12]
 8016042:	4798      	blx	r3
 8016044:	2301      	movs	r3, #1
 8016046:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801604a:	2500      	movs	r5, #0
 801604c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016050:	42a8      	cmp	r0, r5
 8016052:	dd0c      	ble.n	801606e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8016054:	1963      	adds	r3, r4, r5
 8016056:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801605a:	b132      	cbz	r2, 801606a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801605c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016060:	4413      	add	r3, r2
 8016062:	6858      	ldr	r0, [r3, #4]
 8016064:	6803      	ldr	r3, [r0, #0]
 8016066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016068:	4798      	blx	r3
 801606a:	3501      	adds	r5, #1
 801606c:	e7ee      	b.n	801604c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801606e:	2300      	movs	r3, #0
 8016070:	461a      	mov	r2, r3
 8016072:	4298      	cmp	r0, r3
 8016074:	d015      	beq.n	80160a2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8016076:	18e1      	adds	r1, r4, r3
 8016078:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801607c:	b16d      	cbz	r5, 801609a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801607e:	429a      	cmp	r2, r3
 8016080:	d00a      	beq.n	8016098 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8016082:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8016086:	4431      	add	r1, r6
 8016088:	684e      	ldr	r6, [r1, #4]
 801608a:	b291      	uxth	r1, r2
 801608c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016090:	604e      	str	r6, [r1, #4]
 8016092:	18a1      	adds	r1, r4, r2
 8016094:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8016098:	3201      	adds	r2, #1
 801609a:	3301      	adds	r3, #1
 801609c:	e7e9      	b.n	8016072 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801609e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80160a2:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 80160a6:	4295      	cmp	r5, r2
 80160a8:	dd0d      	ble.n	80160c6 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 80160aa:	1e6b      	subs	r3, r5, #1
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80160b2:	4618      	mov	r0, r3
 80160b4:	3104      	adds	r1, #4
 80160b6:	4285      	cmp	r5, r0
 80160b8:	ddf1      	ble.n	801609e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 80160ba:	f851 6f04 	ldr.w	r6, [r1, #4]!
 80160be:	3001      	adds	r0, #1
 80160c0:	f841 6c04 	str.w	r6, [r1, #-4]
 80160c4:	e7f7      	b.n	80160b6 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 80160c6:	4b04      	ldr	r3, [pc, #16]	; (80160d8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80160c8:	6818      	ldr	r0, [r3, #0]
 80160ca:	b110      	cbz	r0, 80160d2 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80160cc:	6803      	ldr	r3, [r0, #0]
 80160ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160d0:	e7a5      	b.n	801601e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80160d2:	bd70      	pop	{r4, r5, r6, pc}
 80160d4:	24041b4c 	.word	0x24041b4c
 80160d8:	24041b48 	.word	0x24041b48

080160dc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80160dc:	b510      	push	{r4, lr}
 80160de:	f9b1 4000 	ldrsh.w	r4, [r1]
 80160e2:	888a      	ldrh	r2, [r1, #4]
 80160e4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80160e8:	4422      	add	r2, r4
 80160ea:	b212      	sxth	r2, r2
 80160ec:	4293      	cmp	r3, r2
 80160ee:	da15      	bge.n	801611c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80160f0:	8882      	ldrh	r2, [r0, #4]
 80160f2:	4413      	add	r3, r2
 80160f4:	b21b      	sxth	r3, r3
 80160f6:	429c      	cmp	r4, r3
 80160f8:	da10      	bge.n	801611c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80160fa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80160fe:	88c9      	ldrh	r1, [r1, #6]
 8016100:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016104:	4419      	add	r1, r3
 8016106:	b209      	sxth	r1, r1
 8016108:	428a      	cmp	r2, r1
 801610a:	da07      	bge.n	801611c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801610c:	88c0      	ldrh	r0, [r0, #6]
 801610e:	4410      	add	r0, r2
 8016110:	b200      	sxth	r0, r0
 8016112:	4283      	cmp	r3, r0
 8016114:	bfac      	ite	ge
 8016116:	2000      	movge	r0, #0
 8016118:	2001      	movlt	r0, #1
 801611a:	bd10      	pop	{r4, pc}
 801611c:	2000      	movs	r0, #0
 801611e:	e7fc      	b.n	801611a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016120 <_ZN8touchgfx4Rect10restrictToEss>:
 8016120:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	b510      	push	{r4, lr}
 8016128:	da04      	bge.n	8016134 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801612a:	8884      	ldrh	r4, [r0, #4]
 801612c:	4423      	add	r3, r4
 801612e:	8083      	strh	r3, [r0, #4]
 8016130:	2300      	movs	r3, #0
 8016132:	8003      	strh	r3, [r0, #0]
 8016134:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016138:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801613c:	1b09      	subs	r1, r1, r4
 801613e:	428b      	cmp	r3, r1
 8016140:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016144:	bfc8      	it	gt
 8016146:	8081      	strhgt	r1, [r0, #4]
 8016148:	2b00      	cmp	r3, #0
 801614a:	da04      	bge.n	8016156 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801614c:	88c1      	ldrh	r1, [r0, #6]
 801614e:	440b      	add	r3, r1
 8016150:	80c3      	strh	r3, [r0, #6]
 8016152:	2300      	movs	r3, #0
 8016154:	8043      	strh	r3, [r0, #2]
 8016156:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801615a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801615e:	1a52      	subs	r2, r2, r1
 8016160:	4293      	cmp	r3, r2
 8016162:	bfc8      	it	gt
 8016164:	80c2      	strhgt	r2, [r0, #6]
 8016166:	bd10      	pop	{r4, pc}

08016168 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016168:	4b10      	ldr	r3, [pc, #64]	; (80161ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801616a:	b510      	push	{r4, lr}
 801616c:	460c      	mov	r4, r1
 801616e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016172:	4b0f      	ldr	r3, [pc, #60]	; (80161b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016174:	4620      	mov	r0, r4
 8016176:	f9b3 1000 	ldrsh.w	r1, [r3]
 801617a:	f7ff ffd1 	bl	8016120 <_ZN8touchgfx4Rect10restrictToEss>
 801617e:	4b0d      	ldr	r3, [pc, #52]	; (80161b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016180:	6818      	ldr	r0, [r3, #0]
 8016182:	b190      	cbz	r0, 80161aa <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016184:	6803      	ldr	r3, [r0, #0]
 8016186:	4621      	mov	r1, r4
 8016188:	689b      	ldr	r3, [r3, #8]
 801618a:	4798      	blx	r3
 801618c:	4b0a      	ldr	r3, [pc, #40]	; (80161b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801618e:	6818      	ldr	r0, [r3, #0]
 8016190:	b118      	cbz	r0, 801619a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016192:	6803      	ldr	r3, [r0, #0]
 8016194:	4621      	mov	r1, r4
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	4798      	blx	r3
 801619a:	4b08      	ldr	r3, [pc, #32]	; (80161bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801619c:	4621      	mov	r1, r4
 801619e:	6818      	ldr	r0, [r3, #0]
 80161a0:	6803      	ldr	r3, [r0, #0]
 80161a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161a6:	69db      	ldr	r3, [r3, #28]
 80161a8:	4718      	bx	r3
 80161aa:	bd10      	pop	{r4, pc}
 80161ac:	24041b02 	.word	0x24041b02
 80161b0:	24041b00 	.word	0x24041b00
 80161b4:	24041b48 	.word	0x24041b48
 80161b8:	24041b44 	.word	0x24041b44
 80161bc:	24041b0c 	.word	0x24041b0c

080161c0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80161c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c2:	4606      	mov	r6, r0
 80161c4:	4608      	mov	r0, r1
 80161c6:	460f      	mov	r7, r1
 80161c8:	f7fd feb9 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 80161cc:	b9e8      	cbnz	r0, 801620a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80161ce:	f9b7 5000 	ldrsh.w	r5, [r7]
 80161d2:	f9b6 4000 	ldrsh.w	r4, [r6]
 80161d6:	42a5      	cmp	r5, r4
 80161d8:	db17      	blt.n	801620a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80161da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80161de:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	db11      	blt.n	801620a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80161e6:	88b9      	ldrh	r1, [r7, #4]
 80161e8:	440d      	add	r5, r1
 80161ea:	88b1      	ldrh	r1, [r6, #4]
 80161ec:	440c      	add	r4, r1
 80161ee:	b22d      	sxth	r5, r5
 80161f0:	b224      	sxth	r4, r4
 80161f2:	42a5      	cmp	r5, r4
 80161f4:	dc09      	bgt.n	801620a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80161f6:	88f8      	ldrh	r0, [r7, #6]
 80161f8:	4410      	add	r0, r2
 80161fa:	88f2      	ldrh	r2, [r6, #6]
 80161fc:	4413      	add	r3, r2
 80161fe:	b200      	sxth	r0, r0
 8016200:	b21b      	sxth	r3, r3
 8016202:	4298      	cmp	r0, r3
 8016204:	bfcc      	ite	gt
 8016206:	2000      	movgt	r0, #0
 8016208:	2001      	movle	r0, #1
 801620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801620c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801620e:	4604      	mov	r4, r0
 8016210:	4608      	mov	r0, r1
 8016212:	460d      	mov	r5, r1
 8016214:	f7fd fe93 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016218:	b978      	cbnz	r0, 801623a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801621a:	4620      	mov	r0, r4
 801621c:	f7fd fe8f 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016220:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016224:	b150      	cbz	r0, 801623c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016226:	8026      	strh	r6, [r4, #0]
 8016228:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801622c:	8063      	strh	r3, [r4, #2]
 801622e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016232:	80a3      	strh	r3, [r4, #4]
 8016234:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016238:	80e3      	strh	r3, [r4, #6]
 801623a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801623c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016240:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016244:	42b1      	cmp	r1, r6
 8016246:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801624a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801624e:	460f      	mov	r7, r1
 8016250:	88ed      	ldrh	r5, [r5, #6]
 8016252:	bfa8      	it	ge
 8016254:	4637      	movge	r7, r6
 8016256:	4293      	cmp	r3, r2
 8016258:	4618      	mov	r0, r3
 801625a:	4466      	add	r6, ip
 801625c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016260:	bfa8      	it	ge
 8016262:	4610      	movge	r0, r2
 8016264:	442a      	add	r2, r5
 8016266:	88e5      	ldrh	r5, [r4, #6]
 8016268:	4461      	add	r1, ip
 801626a:	b236      	sxth	r6, r6
 801626c:	8027      	strh	r7, [r4, #0]
 801626e:	442b      	add	r3, r5
 8016270:	b209      	sxth	r1, r1
 8016272:	b212      	sxth	r2, r2
 8016274:	8060      	strh	r0, [r4, #2]
 8016276:	b21b      	sxth	r3, r3
 8016278:	428e      	cmp	r6, r1
 801627a:	bfac      	ite	ge
 801627c:	ebc7 0106 	rsbge	r1, r7, r6
 8016280:	ebc7 0101 	rsblt	r1, r7, r1
 8016284:	429a      	cmp	r2, r3
 8016286:	bfac      	ite	ge
 8016288:	ebc0 0202 	rsbge	r2, r0, r2
 801628c:	ebc0 0203 	rsblt	r2, r0, r3
 8016290:	80a1      	strh	r1, [r4, #4]
 8016292:	80e2      	strh	r2, [r4, #6]
 8016294:	e7d1      	b.n	801623a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016298 <_ZN8touchgfx11Application11getInstanceEv>:
 8016298:	4b01      	ldr	r3, [pc, #4]	; (80162a0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801629a:	6818      	ldr	r0, [r3, #0]
 801629c:	4770      	bx	lr
 801629e:	bf00      	nop
 80162a0:	24041b58 	.word	0x24041b58

080162a4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80162a4:	b570      	push	{r4, r5, r6, lr}
 80162a6:	2200      	movs	r2, #0
 80162a8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80162ac:	1d04      	adds	r4, r0, #4
 80162ae:	b295      	uxth	r5, r2
 80162b0:	429d      	cmp	r5, r3
 80162b2:	d20e      	bcs.n	80162d2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80162b4:	f854 6b04 	ldr.w	r6, [r4], #4
 80162b8:	4615      	mov	r5, r2
 80162ba:	3201      	adds	r2, #1
 80162bc:	428e      	cmp	r6, r1
 80162be:	d1f6      	bne.n	80162ae <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 80162c0:	4428      	add	r0, r5
 80162c2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80162c6:	2bff      	cmp	r3, #255	; 0xff
 80162c8:	d002      	beq.n	80162d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80162ca:	3301      	adds	r3, #1
 80162cc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80162d0:	bd70      	pop	{r4, r5, r6, pc}
 80162d2:	18c2      	adds	r2, r0, r3
 80162d4:	2b20      	cmp	r3, #32
 80162d6:	f04f 0401 	mov.w	r4, #1
 80162da:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 80162de:	bf1f      	itttt	ne
 80162e0:	191a      	addne	r2, r3, r4
 80162e2:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 80162e6:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 80162ea:	6041      	strne	r1, [r0, #4]
 80162ec:	e7f0      	b.n	80162d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

080162ee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 80162ee:	b570      	push	{r4, r5, r6, lr}
 80162f0:	2300      	movs	r3, #0
 80162f2:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 80162f6:	1d04      	adds	r4, r0, #4
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	4296      	cmp	r6, r2
 80162fc:	d90a      	bls.n	8016314 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 80162fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8016302:	428a      	cmp	r2, r1
 8016304:	d107      	bne.n	8016316 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8016306:	18c5      	adds	r5, r0, r3
 8016308:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801630c:	b11a      	cbz	r2, 8016316 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801630e:	3a01      	subs	r2, #1
 8016310:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8016314:	bd70      	pop	{r4, r5, r6, pc}
 8016316:	3301      	adds	r3, #1
 8016318:	e7ee      	b.n	80162f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801631a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801631a:	2300      	movs	r3, #0
 801631c:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8016320:	30a8      	adds	r0, #168	; 0xa8
 8016322:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016326:	f802 3b01 	strb.w	r3, [r2], #1
 801632a:	4282      	cmp	r2, r0
 801632c:	d1fb      	bne.n	8016326 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801632e:	4770      	bx	lr

08016330 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016330:	4603      	mov	r3, r0
 8016332:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016336:	2200      	movs	r2, #0
 8016338:	801a      	strh	r2, [r3, #0]
 801633a:	3308      	adds	r3, #8
 801633c:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016340:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016344:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016348:	428b      	cmp	r3, r1
 801634a:	d1f5      	bne.n	8016338 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801634c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016350:	4770      	bx	lr
	...

08016354 <_ZN8touchgfx11ApplicationC1Ev>:
 8016354:	b570      	push	{r4, r5, r6, lr}
 8016356:	4b19      	ldr	r3, [pc, #100]	; (80163bc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8016358:	2500      	movs	r5, #0
 801635a:	4604      	mov	r4, r0
 801635c:	30a8      	adds	r0, #168	; 0xa8
 801635e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8016362:	f820 5c24 	strh.w	r5, [r0, #-36]
 8016366:	f7ff ffe3 	bl	8016330 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801636a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801636e:	f7ff ffdf 	bl	8016330 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016372:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8016376:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801637a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801637e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016382:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8016386:	490e      	ldr	r1, [pc, #56]	; (80163c0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8016388:	480e      	ldr	r0, [pc, #56]	; (80163c4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801638a:	f00e f823 	bl	80243d4 <CRC_Lock>
 801638e:	4e0e      	ldr	r6, [pc, #56]	; (80163c8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8016390:	4b0e      	ldr	r3, [pc, #56]	; (80163cc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016392:	b158      	cbz	r0, 80163ac <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8016394:	801d      	strh	r5, [r3, #0]
 8016396:	2300      	movs	r3, #0
 8016398:	4a0d      	ldr	r2, [pc, #52]	; (80163d0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801639a:	4620      	mov	r0, r4
 801639c:	6013      	str	r3, [r2, #0]
 801639e:	4a0d      	ldr	r2, [pc, #52]	; (80163d4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80163a0:	6033      	str	r3, [r6, #0]
 80163a2:	6013      	str	r3, [r2, #0]
 80163a4:	f7ff ffb9 	bl	801631a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80163a8:	4620      	mov	r0, r4
 80163aa:	bd70      	pop	{r4, r5, r6, pc}
 80163ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80163b0:	2002      	movs	r0, #2
 80163b2:	801a      	strh	r2, [r3, #0]
 80163b4:	6030      	str	r0, [r6, #0]
 80163b6:	f001 fa15 	bl	80177e4 <_ZN8touchgfx6Screen4drawEv>
 80163ba:	e7ec      	b.n	8016396 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80163bc:	08028c68 	.word	0x08028c68
 80163c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80163c4:	f407a5c2 	.word	0xf407a5c2
 80163c8:	24041b48 	.word	0x24041b48
 80163cc:	24000038 	.word	0x24000038
 80163d0:	24041b58 	.word	0x24041b58
 80163d4:	24041b4c 	.word	0x24041b4c

080163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80163d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80163dc:	3b01      	subs	r3, #1
 80163de:	b29b      	uxth	r3, r3
 80163e0:	428b      	cmp	r3, r1
 80163e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80163e6:	b510      	push	{r4, lr}
 80163e8:	d908      	bls.n	80163fc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80163ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80163ee:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80163f2:	681a      	ldr	r2, [r3, #0]
 80163f4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80163f8:	685a      	ldr	r2, [r3, #4]
 80163fa:	6062      	str	r2, [r4, #4]
 80163fc:	bd10      	pop	{r4, pc}
	...

08016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	b08f      	sub	sp, #60	; 0x3c
 8016406:	4b94      	ldr	r3, [pc, #592]	; (8016658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8016408:	4683      	mov	fp, r0
 801640a:	ac0a      	add	r4, sp, #40	; 0x28
 801640c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016410:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016414:	4620      	mov	r0, r4
 8016416:	4b91      	ldr	r3, [pc, #580]	; (801665c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8016418:	f9b3 1000 	ldrsh.w	r1, [r3]
 801641c:	f7ff fe80 	bl	8016120 <_ZN8touchgfx4Rect10restrictToEss>
 8016420:	4620      	mov	r0, r4
 8016422:	f7fd fd8c 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016426:	2800      	cmp	r0, #0
 8016428:	d16a      	bne.n	8016500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801642a:	9403      	str	r4, [sp, #12]
 801642c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8016430:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016434:	2400      	movs	r4, #0
 8016436:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801643a:	9301      	str	r3, [sp, #4]
 801643c:	36a0      	adds	r6, #160	; 0xa0
 801643e:	42a5      	cmp	r5, r4
 8016440:	d00d      	beq.n	801645e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8016442:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8016446:	9803      	ldr	r0, [sp, #12]
 8016448:	f7ff feba 	bl	80161c0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801644c:	b128      	cbz	r0, 801645a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801644e:	1e69      	subs	r1, r5, #1
 8016450:	9801      	ldr	r0, [sp, #4]
 8016452:	1b09      	subs	r1, r1, r4
 8016454:	b289      	uxth	r1, r1
 8016456:	f7ff ffbf 	bl	80163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801645a:	3401      	adds	r4, #1
 801645c:	e7ef      	b.n	801643e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801645e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8016462:	1e7b      	subs	r3, r7, #1
 8016464:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8016468:	9704      	str	r7, [sp, #16]
 801646a:	9302      	str	r3, [sp, #8]
 801646c:	2400      	movs	r4, #0
 801646e:	4655      	mov	r5, sl
 8016470:	9705      	str	r7, [sp, #20]
 8016472:	4626      	mov	r6, r4
 8016474:	9b05      	ldr	r3, [sp, #20]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d078      	beq.n	801656c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801647a:	9903      	ldr	r1, [sp, #12]
 801647c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8016480:	f7ff fe2c 	bl	80160dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016484:	b360      	cbz	r0, 80164e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016486:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801648a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801648e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8016492:	45e6      	cmp	lr, ip
 8016494:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8016498:	db35      	blt.n	8016506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801649a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801649e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80164a2:	4472      	add	r2, lr
 80164a4:	4463      	add	r3, ip
 80164a6:	b212      	sxth	r2, r2
 80164a8:	b21b      	sxth	r3, r3
 80164aa:	429a      	cmp	r2, r3
 80164ac:	dc2b      	bgt.n	8016506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80164ae:	fa1f f288 	uxth.w	r2, r8
 80164b2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80164b6:	45c1      	cmp	r9, r8
 80164b8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80164bc:	4413      	add	r3, r2
 80164be:	fa1f fc89 	uxth.w	ip, r9
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	fa0f fe83 	sxth.w	lr, r3
 80164c8:	db0f      	blt.n	80164ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80164ca:	eba3 030c 	sub.w	r3, r3, ip
 80164ce:	1ac9      	subs	r1, r1, r3
 80164d0:	b209      	sxth	r1, r1
 80164d2:	2900      	cmp	r1, #0
 80164d4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80164d8:	dd12      	ble.n	8016500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80164da:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80164de:	4604      	mov	r4, r0
 80164e0:	9b05      	ldr	r3, [sp, #20]
 80164e2:	3d08      	subs	r5, #8
 80164e4:	3b01      	subs	r3, #1
 80164e6:	9305      	str	r3, [sp, #20]
 80164e8:	e7c4      	b.n	8016474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 80164ea:	4461      	add	r1, ip
 80164ec:	b209      	sxth	r1, r1
 80164ee:	4571      	cmp	r1, lr
 80164f0:	dc3a      	bgt.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80164f2:	eba2 020c 	sub.w	r2, r2, ip
 80164f6:	b212      	sxth	r2, r2
 80164f8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80164fc:	2a00      	cmp	r2, #0
 80164fe:	dcee      	bgt.n	80164de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016500:	b00f      	add	sp, #60	; 0x3c
 8016502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016506:	45c1      	cmp	r9, r8
 8016508:	db2e      	blt.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801650a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801650e:	4499      	add	r9, r3
 8016510:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8016514:	4498      	add	r8, r3
 8016516:	fa0f f989 	sxth.w	r9, r9
 801651a:	fa0f f888 	sxth.w	r8, r8
 801651e:	45c1      	cmp	r9, r8
 8016520:	dc22      	bgt.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016522:	fa1f f28c 	uxth.w	r2, ip
 8016526:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801652a:	45e6      	cmp	lr, ip
 801652c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016530:	4413      	add	r3, r2
 8016532:	fa1f f88e 	uxth.w	r8, lr
 8016536:	b29b      	uxth	r3, r3
 8016538:	fa0f f983 	sxth.w	r9, r3
 801653c:	db0a      	blt.n	8016554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801653e:	eba3 0308 	sub.w	r3, r3, r8
 8016542:	1ac9      	subs	r1, r1, r3
 8016544:	b209      	sxth	r1, r1
 8016546:	2900      	cmp	r1, #0
 8016548:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801654c:	ddd8      	ble.n	8016500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801654e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016552:	e7c4      	b.n	80164de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016554:	4441      	add	r1, r8
 8016556:	b209      	sxth	r1, r1
 8016558:	4549      	cmp	r1, r9
 801655a:	dc05      	bgt.n	8016568 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801655c:	eba2 0208 	sub.w	r2, r2, r8
 8016560:	b212      	sxth	r2, r2
 8016562:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016566:	e7c9      	b.n	80164fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016568:	4606      	mov	r6, r0
 801656a:	e7b9      	b.n	80164e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801656c:	2c00      	cmp	r4, #0
 801656e:	f47f af7d 	bne.w	801646c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8016572:	2e00      	cmp	r6, #0
 8016574:	f000 81e1 	beq.w	801693a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016578:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801657c:	4655      	mov	r5, sl
 801657e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8016582:	b2b9      	uxth	r1, r7
 8016584:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016588:	b2b3      	uxth	r3, r6
 801658a:	9105      	str	r1, [sp, #20]
 801658c:	9805      	ldr	r0, [sp, #20]
 801658e:	441a      	add	r2, r3
 8016590:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016594:	b292      	uxth	r2, r2
 8016596:	4401      	add	r1, r0
 8016598:	fa0f f882 	sxth.w	r8, r2
 801659c:	b289      	uxth	r1, r1
 801659e:	9106      	str	r1, [sp, #24]
 80165a0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80165a4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80165a8:	9b04      	ldr	r3, [sp, #16]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d058      	beq.n	8016660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80165ae:	9903      	ldr	r1, [sp, #12]
 80165b0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80165b4:	f7ff fd92 	bl	80160dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 80165b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80165bc:	b1d8      	cbz	r0, 80165f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80165be:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80165c2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80165c6:	4576      	cmp	r6, lr
 80165c8:	dc26      	bgt.n	8016618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80165ca:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80165ce:	44f4      	add	ip, lr
 80165d0:	fa0f fc8c 	sxth.w	ip, ip
 80165d4:	45e0      	cmp	r8, ip
 80165d6:	db1f      	blt.n	8016618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80165d8:	428f      	cmp	r7, r1
 80165da:	fa1f fc81 	uxth.w	ip, r1
 80165de:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 80165e2:	dc0f      	bgt.n	8016604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 80165e4:	9806      	ldr	r0, [sp, #24]
 80165e6:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 80165ea:	eba0 0c0c 	sub.w	ip, r0, ip
 80165ee:	eba1 010c 	sub.w	r1, r1, ip
 80165f2:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 80165f6:	4620      	mov	r0, r4
 80165f8:	9904      	ldr	r1, [sp, #16]
 80165fa:	3d08      	subs	r5, #8
 80165fc:	4604      	mov	r4, r0
 80165fe:	3901      	subs	r1, #1
 8016600:	9104      	str	r1, [sp, #16]
 8016602:	e7cf      	b.n	80165a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8016604:	4461      	add	r1, ip
 8016606:	b209      	sxth	r1, r1
 8016608:	4549      	cmp	r1, r9
 801660a:	dcf5      	bgt.n	80165f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801660c:	9905      	ldr	r1, [sp, #20]
 801660e:	eba1 0c0c 	sub.w	ip, r1, ip
 8016612:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8016616:	e7ee      	b.n	80165f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016618:	428f      	cmp	r7, r1
 801661a:	dced      	bgt.n	80165f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801661c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8016620:	4461      	add	r1, ip
 8016622:	b209      	sxth	r1, r1
 8016624:	4589      	cmp	r9, r1
 8016626:	dbe7      	blt.n	80165f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8016628:	4576      	cmp	r6, lr
 801662a:	fa1f fc8e 	uxth.w	ip, lr
 801662e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8016632:	dc08      	bgt.n	8016646 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8016634:	eba2 0c0c 	sub.w	ip, r2, ip
 8016638:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801663c:	eba1 010c 	sub.w	r1, r1, ip
 8016640:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8016644:	e7d7      	b.n	80165f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016646:	4461      	add	r1, ip
 8016648:	b209      	sxth	r1, r1
 801664a:	4588      	cmp	r8, r1
 801664c:	dbd4      	blt.n	80165f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801664e:	eba3 0c0c 	sub.w	ip, r3, ip
 8016652:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8016656:	e7ce      	b.n	80165f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8016658:	24041b02 	.word	0x24041b02
 801665c:	24041b00 	.word	0x24041b00
 8016660:	2c00      	cmp	r4, #0
 8016662:	f000 816a 	beq.w	801693a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8016666:	9b02      	ldr	r3, [sp, #8]
 8016668:	3301      	adds	r3, #1
 801666a:	f000 8166 	beq.w	801693a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801666e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8016672:	9803      	ldr	r0, [sp, #12]
 8016674:	4621      	mov	r1, r4
 8016676:	f7ff fda3 	bl	80161c0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801667a:	b120      	cbz	r0, 8016686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801667c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016680:	9801      	ldr	r0, [sp, #4]
 8016682:	f7ff fea9 	bl	80163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016686:	9903      	ldr	r1, [sp, #12]
 8016688:	4620      	mov	r0, r4
 801668a:	f7ff fd27 	bl	80160dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801668e:	2800      	cmp	r0, #0
 8016690:	f000 809b 	beq.w	80167ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8016694:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8016698:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801669c:	b281      	uxth	r1, r0
 801669e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80166a2:	9309      	str	r3, [sp, #36]	; 0x24
 80166a4:	eb01 0c03 	add.w	ip, r1, r3
 80166a8:	b2ab      	uxth	r3, r5
 80166aa:	4285      	cmp	r5, r0
 80166ac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80166b0:	fa1f f98c 	uxth.w	r9, ip
 80166b4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80166b8:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80166bc:	eb03 040c 	add.w	r4, r3, ip
 80166c0:	b2a4      	uxth	r4, r4
 80166c2:	9405      	str	r4, [sp, #20]
 80166c4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80166c8:	9404      	str	r4, [sp, #16]
 80166ca:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 80166ce:	f340 809a 	ble.w	8016806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 80166d2:	1a5b      	subs	r3, r3, r1
 80166d4:	4596      	cmp	lr, r2
 80166d6:	fa0f f589 	sxth.w	r5, r9
 80166da:	b29b      	uxth	r3, r3
 80166dc:	b21e      	sxth	r6, r3
 80166de:	dd2e      	ble.n	801673e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 80166e0:	9f02      	ldr	r7, [sp, #8]
 80166e2:	fa1f fe8e 	uxth.w	lr, lr
 80166e6:	b292      	uxth	r2, r2
 80166e8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80166ec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80166f0:	9f04      	ldr	r7, [sp, #16]
 80166f2:	ebae 0102 	sub.w	r1, lr, r2
 80166f6:	4486      	add	lr, r0
 80166f8:	1b7f      	subs	r7, r7, r5
 80166fa:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 80166fe:	b289      	uxth	r1, r1
 8016700:	442a      	add	r2, r5
 8016702:	fa0f fe8e 	sxth.w	lr, lr
 8016706:	b20c      	sxth	r4, r1
 8016708:	b212      	sxth	r2, r2
 801670a:	4367      	muls	r7, r4
 801670c:	ebae 0202 	sub.w	r2, lr, r2
 8016710:	4372      	muls	r2, r6
 8016712:	4297      	cmp	r7, r2
 8016714:	db09      	blt.n	801672a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8016716:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801671a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801671e:	449c      	add	ip, r3
 8016720:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016724:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016728:	e680      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801672a:	4401      	add	r1, r0
 801672c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8016730:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8016734:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016738:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801673c:	e676      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801673e:	9f04      	ldr	r7, [sp, #16]
 8016740:	42bd      	cmp	r5, r7
 8016742:	da27      	bge.n	8016794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8016744:	9902      	ldr	r1, [sp, #8]
 8016746:	1b7f      	subs	r7, r7, r5
 8016748:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801674c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8016750:	eb04 010e 	add.w	r1, r4, lr
 8016754:	fa1f f881 	uxth.w	r8, r1
 8016758:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801675c:	4411      	add	r1, r2
 801675e:	fa0f f988 	sxth.w	r9, r8
 8016762:	eba2 020e 	sub.w	r2, r2, lr
 8016766:	eba1 0108 	sub.w	r1, r1, r8
 801676a:	4372      	muls	r2, r6
 801676c:	b289      	uxth	r1, r1
 801676e:	fa0f f881 	sxth.w	r8, r1
 8016772:	fb08 f707 	mul.w	r7, r8, r7
 8016776:	42ba      	cmp	r2, r7
 8016778:	dc06      	bgt.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801677a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801677e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8016782:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8016786:	e7ca      	b.n	801671e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016788:	4421      	add	r1, r4
 801678a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801678e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016792:	e64b      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016794:	9d05      	ldr	r5, [sp, #20]
 8016796:	2c06      	cmp	r4, #6
 8016798:	eba9 0505 	sub.w	r5, r9, r5
 801679c:	b2ad      	uxth	r5, r5
 801679e:	fa0f fe85 	sxth.w	lr, r5
 80167a2:	d818      	bhi.n	80167d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80167a4:	9b04      	ldr	r3, [sp, #16]
 80167a6:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80167aa:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80167ae:	1c63      	adds	r3, r4, #1
 80167b0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80167b4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80167b8:	9b01      	ldr	r3, [sp, #4]
 80167ba:	9d01      	ldr	r5, [sp, #4]
 80167bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80167c0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80167c4:	805a      	strh	r2, [r3, #2]
 80167c6:	809e      	strh	r6, [r3, #4]
 80167c8:	80d9      	strh	r1, [r3, #6]
 80167ca:	9b02      	ldr	r3, [sp, #8]
 80167cc:	f1aa 0a08 	sub.w	sl, sl, #8
 80167d0:	3b01      	subs	r3, #1
 80167d2:	9302      	str	r3, [sp, #8]
 80167d4:	e747      	b.n	8016666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 80167d6:	9a02      	ldr	r2, [sp, #8]
 80167d8:	45b6      	cmp	lr, r6
 80167da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80167de:	db0d      	blt.n	80167fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 80167e0:	449c      	add	ip, r3
 80167e2:	445a      	add	r2, fp
 80167e4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 80167e8:	fa1f fc8c 	uxth.w	ip, ip
 80167ec:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 80167f0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80167f4:	448c      	add	ip, r1
 80167f6:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 80167fa:	e617      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80167fc:	445a      	add	r2, fp
 80167fe:	44ac      	add	ip, r5
 8016800:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8016804:	e78e      	b.n	8016724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8016806:	fa1f f18e 	uxth.w	r1, lr
 801680a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801680e:	b293      	uxth	r3, r2
 8016810:	4596      	cmp	lr, r2
 8016812:	eb01 0806 	add.w	r8, r1, r6
 8016816:	9306      	str	r3, [sp, #24]
 8016818:	fa1f f888 	uxth.w	r8, r8
 801681c:	9f06      	ldr	r7, [sp, #24]
 801681e:	fa0f f388 	sxth.w	r3, r8
 8016822:	9307      	str	r3, [sp, #28]
 8016824:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8016828:	443b      	add	r3, r7
 801682a:	b29b      	uxth	r3, r3
 801682c:	9308      	str	r3, [sp, #32]
 801682e:	da25      	bge.n	801687c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8016830:	9905      	ldr	r1, [sp, #20]
 8016832:	eba3 0308 	sub.w	r3, r3, r8
 8016836:	eba2 020e 	sub.w	r2, r2, lr
 801683a:	1b40      	subs	r0, r0, r5
 801683c:	eba9 0401 	sub.w	r4, r9, r1
 8016840:	b29b      	uxth	r3, r3
 8016842:	b2a4      	uxth	r4, r4
 8016844:	b219      	sxth	r1, r3
 8016846:	fa0f f984 	sxth.w	r9, r4
 801684a:	4348      	muls	r0, r1
 801684c:	fb09 f202 	mul.w	r2, r9, r2
 8016850:	4282      	cmp	r2, r0
 8016852:	9a02      	ldr	r2, [sp, #8]
 8016854:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016858:	445a      	add	r2, fp
 801685a:	dc06      	bgt.n	801686a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801685c:	9b07      	ldr	r3, [sp, #28]
 801685e:	44a4      	add	ip, r4
 8016860:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8016864:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8016868:	e75c      	b.n	8016724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801686a:	9904      	ldr	r1, [sp, #16]
 801686c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8016870:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8016874:	4433      	add	r3, r6
 8016876:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801687a:	e5d7      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801687c:	9f06      	ldr	r7, [sp, #24]
 801687e:	9b04      	ldr	r3, [sp, #16]
 8016880:	1bc9      	subs	r1, r1, r7
 8016882:	fa0f f789 	sxth.w	r7, r9
 8016886:	b289      	uxth	r1, r1
 8016888:	429f      	cmp	r7, r3
 801688a:	fa0f fe81 	sxth.w	lr, r1
 801688e:	dd22      	ble.n	80168d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8016890:	9a05      	ldr	r2, [sp, #20]
 8016892:	1b40      	subs	r0, r0, r5
 8016894:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016898:	eba9 0202 	sub.w	r2, r9, r2
 801689c:	9d07      	ldr	r5, [sp, #28]
 801689e:	fb0e f000 	mul.w	r0, lr, r0
 80168a2:	b292      	uxth	r2, r2
 80168a4:	eba5 0a03 	sub.w	sl, r5, r3
 80168a8:	9b02      	ldr	r3, [sp, #8]
 80168aa:	b214      	sxth	r4, r2
 80168ac:	00db      	lsls	r3, r3, #3
 80168ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80168b2:	445b      	add	r3, fp
 80168b4:	4550      	cmp	r0, sl
 80168b6:	db03      	blt.n	80168c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80168b8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80168bc:	4494      	add	ip, r2
 80168be:	e731      	b.n	8016724 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80168c0:	9a04      	ldr	r2, [sp, #16]
 80168c2:	4431      	add	r1, r6
 80168c4:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80168c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80168cc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80168d0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80168d4:	e75b      	b.n	801678e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80168d6:	9b08      	ldr	r3, [sp, #32]
 80168d8:	2c06      	cmp	r4, #6
 80168da:	eba3 0308 	sub.w	r3, r3, r8
 80168de:	b29b      	uxth	r3, r3
 80168e0:	b21d      	sxth	r5, r3
 80168e2:	d813      	bhi.n	801690c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 80168e4:	9b07      	ldr	r3, [sp, #28]
 80168e6:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 80168ea:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80168ee:	1c63      	adds	r3, r4, #1
 80168f0:	9901      	ldr	r1, [sp, #4]
 80168f2:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80168f6:	9b01      	ldr	r3, [sp, #4]
 80168f8:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 80168fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016900:	805a      	strh	r2, [r3, #2]
 8016902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016904:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016908:	809a      	strh	r2, [r3, #4]
 801690a:	e75e      	b.n	80167ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801690c:	9802      	ldr	r0, [sp, #8]
 801690e:	4575      	cmp	r5, lr
 8016910:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8016914:	db0d      	blt.n	8016932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8016916:	4431      	add	r1, r6
 8016918:	9b06      	ldr	r3, [sp, #24]
 801691a:	4458      	add	r0, fp
 801691c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016920:	b289      	uxth	r1, r1
 8016922:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8016926:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801692a:	4419      	add	r1, r3
 801692c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8016930:	e57c      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016932:	4458      	add	r0, fp
 8016934:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8016938:	e79c      	b.n	8016874 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801693a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801693e:	2e07      	cmp	r6, #7
 8016940:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016944:	d812      	bhi.n	801696c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8016946:	1c75      	adds	r5, r6, #1
 8016948:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801694c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016950:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8016954:	9d01      	ldr	r5, [sp, #4]
 8016956:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801695a:	442c      	add	r4, r5
 801695c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016960:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016964:	8061      	strh	r1, [r4, #2]
 8016966:	80a2      	strh	r2, [r4, #4]
 8016968:	80e3      	strh	r3, [r4, #6]
 801696a:	e5c9      	b.n	8016500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801696c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8016970:	3e01      	subs	r6, #1
 8016972:	445c      	add	r4, fp
 8016974:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016978:	f04f 37ff 	mov.w	r7, #4294967295
 801697c:	2500      	movs	r5, #0
 801697e:	9305      	str	r3, [sp, #20]
 8016980:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8016984:	1e72      	subs	r2, r6, #1
 8016986:	9302      	str	r3, [sp, #8]
 8016988:	4691      	mov	r9, r2
 801698a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801698e:	9304      	str	r3, [sp, #16]
 8016990:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8016994:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016998:	6818      	ldr	r0, [r3, #0]
 801699a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801699e:	9207      	str	r2, [sp, #28]
 80169a0:	bf16      	itet	ne
 80169a2:	9905      	ldrne	r1, [sp, #20]
 80169a4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80169a8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80169ac:	9306      	str	r3, [sp, #24]
 80169ae:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80169b2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80169b6:	fb18 f801 	smulbb	r8, r8, r1
 80169ba:	6859      	ldr	r1, [r3, #4]
 80169bc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80169c0:	4671      	mov	r1, lr
 80169c2:	a80c      	add	r0, sp, #48	; 0x30
 80169c4:	f7ff fc22 	bl	801620c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80169c8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80169cc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80169d0:	f04f 0c08 	mov.w	ip, #8
 80169d4:	9b04      	ldr	r3, [sp, #16]
 80169d6:	9a02      	ldr	r2, [sp, #8]
 80169d8:	fb10 f001 	smulbb	r0, r0, r1
 80169dc:	fb02 8803 	mla	r8, r2, r3, r8
 80169e0:	eba0 0108 	sub.w	r1, r0, r8
 80169e4:	fb90 f0fc 	sdiv	r0, r0, ip
 80169e8:	4288      	cmp	r0, r1
 80169ea:	dc20      	bgt.n	8016a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80169ec:	4551      	cmp	r1, sl
 80169ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80169f2:	da03      	bge.n	80169fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80169f4:	b1d9      	cbz	r1, 8016a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80169f6:	468a      	mov	sl, r1
 80169f8:	464f      	mov	r7, r9
 80169fa:	4635      	mov	r5, r6
 80169fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a00:	f119 0f02 	cmn.w	r9, #2
 8016a04:	d1c6      	bne.n	8016994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016a06:	4616      	mov	r6, r2
 8016a08:	3201      	adds	r2, #1
 8016a0a:	f1a4 0408 	sub.w	r4, r4, #8
 8016a0e:	d1b7      	bne.n	8016980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8016a10:	9b01      	ldr	r3, [sp, #4]
 8016a12:	b2ac      	uxth	r4, r5
 8016a14:	00ed      	lsls	r5, r5, #3
 8016a16:	1958      	adds	r0, r3, r5
 8016a18:	1c7b      	adds	r3, r7, #1
 8016a1a:	d10b      	bne.n	8016a34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8016a1c:	4601      	mov	r1, r0
 8016a1e:	9803      	ldr	r0, [sp, #12]
 8016a20:	f7ff fbf4 	bl	801620c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a24:	4621      	mov	r1, r4
 8016a26:	9801      	ldr	r0, [sp, #4]
 8016a28:	f7ff fcd6 	bl	80163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016a2c:	e4fe      	b.n	801642c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016a2e:	464f      	mov	r7, r9
 8016a30:	4635      	mov	r5, r6
 8016a32:	e7ed      	b.n	8016a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8016a34:	9b01      	ldr	r3, [sp, #4]
 8016a36:	00ff      	lsls	r7, r7, #3
 8016a38:	445d      	add	r5, fp
 8016a3a:	19d9      	adds	r1, r3, r7
 8016a3c:	445f      	add	r7, fp
 8016a3e:	f7ff fbe5 	bl	801620c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016a42:	9b03      	ldr	r3, [sp, #12]
 8016a44:	cb03      	ldmia	r3!, {r0, r1}
 8016a46:	9b03      	ldr	r3, [sp, #12]
 8016a48:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8016a4c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8016a50:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8016a54:	6869      	ldr	r1, [r5, #4]
 8016a56:	c303      	stmia	r3!, {r0, r1}
 8016a58:	e7e4      	b.n	8016a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016a5a:	bf00      	nop

08016a5c <_ZN8touchgfx11Application10invalidateEv>:
 8016a5c:	4b09      	ldr	r3, [pc, #36]	; (8016a84 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016a5e:	b082      	sub	sp, #8
 8016a60:	2100      	movs	r1, #0
 8016a62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a66:	4b08      	ldr	r3, [pc, #32]	; (8016a88 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016a68:	9100      	str	r1, [sp, #0]
 8016a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a6e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016a72:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a76:	ab02      	add	r3, sp, #8
 8016a78:	e913 0006 	ldmdb	r3, {r1, r2}
 8016a7c:	b002      	add	sp, #8
 8016a7e:	f7ff bcbf 	b.w	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016a82:	bf00      	nop
 8016a84:	24041b00 	.word	0x24041b00
 8016a88:	24041b02 	.word	0x24041b02

08016a8c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a90:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8016a94:	b09b      	sub	sp, #108	; 0x6c
 8016a96:	4604      	mov	r4, r0
 8016a98:	4630      	mov	r0, r6
 8016a9a:	f7fd fa50 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a9e:	4605      	mov	r5, r0
 8016aa0:	b940      	cbnz	r0, 8016ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016aa8:	f7ff fcaa 	bl	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016aac:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8016ab0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016ab4:	4bc8      	ldr	r3, [pc, #800]	; (8016dd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d03e      	beq.n	8016b3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016abc:	4dc7      	ldr	r5, [pc, #796]	; (8016ddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016abe:	4628      	mov	r0, r5
 8016ac0:	f7fd fa3d 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ac4:	4606      	mov	r6, r0
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	d137      	bne.n	8016b3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7ff f9d0 	bl	8015e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016ad0:	6829      	ldr	r1, [r5, #0]
 8016ad2:	686a      	ldr	r2, [r5, #4]
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	f7ff fc93 	bl	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016ada:	802e      	strh	r6, [r5, #0]
 8016adc:	806e      	strh	r6, [r5, #2]
 8016ade:	80ae      	strh	r6, [r5, #4]
 8016ae0:	80ee      	strh	r6, [r5, #6]
 8016ae2:	ae09      	add	r6, sp, #36	; 0x24
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	f7ff fc23 	bl	8016330 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016aea:	4abd      	ldr	r2, [pc, #756]	; (8016de0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016aec:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016af0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8016af4:	8815      	ldrh	r5, [r2, #0]
 8016af6:	9202      	str	r2, [sp, #8]
 8016af8:	462b      	mov	r3, r5
 8016afa:	429f      	cmp	r7, r3
 8016afc:	d924      	bls.n	8016b48 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016afe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016b02:	2907      	cmp	r1, #7
 8016b04:	d816      	bhi.n	8016b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8016b06:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016b0a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016b0e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016b12:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016b16:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016b1a:	1c4a      	adds	r2, r1, #1
 8016b1c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016b20:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016b24:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016b28:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016b2c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016b30:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016b34:	3301      	adds	r3, #1
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	e7df      	b.n	8016afa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016b3a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1cf      	bne.n	8016ae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016b42:	b01b      	add	sp, #108	; 0x6c
 8016b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b48:	462f      	mov	r7, r5
 8016b4a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8016b4e:	42bb      	cmp	r3, r7
 8016b50:	d90b      	bls.n	8016b6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016b52:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016b56:	3701      	adds	r7, #1
 8016b58:	4620      	mov	r0, r4
 8016b5a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8016b5e:	b2bf      	uxth	r7, r7
 8016b60:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8016b64:	f7ff fc4c 	bl	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016b68:	e7ef      	b.n	8016b4a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016b6a:	4a9e      	ldr	r2, [pc, #632]	; (8016de4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016b6c:	6813      	ldr	r3, [r2, #0]
 8016b6e:	4690      	mov	r8, r2
 8016b70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	f040 80e4 	bne.w	8016d42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016b7a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016b7e:	4629      	mov	r1, r5
 8016b80:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8016b84:	2500      	movs	r5, #0
 8016b86:	33aa      	adds	r3, #170	; 0xaa
 8016b88:	428f      	cmp	r7, r1
 8016b8a:	f103 0308 	add.w	r3, r3, #8
 8016b8e:	dd0a      	ble.n	8016ba6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016b90:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016b94:	3101      	adds	r1, #1
 8016b96:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016b9a:	4402      	add	r2, r0
 8016b9c:	b212      	sxth	r2, r2
 8016b9e:	4295      	cmp	r5, r2
 8016ba0:	bfb8      	it	lt
 8016ba2:	4615      	movlt	r5, r2
 8016ba4:	e7f0      	b.n	8016b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016ba6:	4b90      	ldr	r3, [pc, #576]	; (8016de8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016ba8:	f8df b238 	ldr.w	fp, [pc, #568]	; 8016de4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016bac:	881b      	ldrh	r3, [r3, #0]
 8016bae:	46d8      	mov	r8, fp
 8016bb0:	2b0f      	cmp	r3, #15
 8016bb2:	bf8c      	ite	hi
 8016bb4:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016bb8:	f04f 0a01 	movls.w	sl, #1
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016bc2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016bc6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016bca:	4438      	add	r0, r7
 8016bcc:	b207      	sxth	r7, r0
 8016bce:	f8db 0000 	ldr.w	r0, [fp]
 8016bd2:	42bd      	cmp	r5, r7
 8016bd4:	6803      	ldr	r3, [r0, #0]
 8016bd6:	f340 8084 	ble.w	8016ce2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016bde:	4798      	blx	r3
 8016be0:	eb07 030a 	add.w	r3, r7, sl
 8016be4:	4298      	cmp	r0, r3
 8016be6:	da07      	bge.n	8016bf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016be8:	4285      	cmp	r5, r0
 8016bea:	dd05      	ble.n	8016bf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016bec:	4287      	cmp	r7, r0
 8016bee:	dd6d      	ble.n	8016ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016bf0:	2f00      	cmp	r7, #0
 8016bf2:	dd6b      	ble.n	8016ccc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016bf4:	4628      	mov	r0, r5
 8016bf6:	e004      	b.n	8016c02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016bf8:	4287      	cmp	r7, r0
 8016bfa:	dcfb      	bgt.n	8016bf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016bfc:	42a8      	cmp	r0, r5
 8016bfe:	bfa8      	it	ge
 8016c00:	4628      	movge	r0, r5
 8016c02:	4b7a      	ldr	r3, [pc, #488]	; (8016dec <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016c04:	1bc0      	subs	r0, r0, r7
 8016c06:	2200      	movs	r2, #0
 8016c08:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c10:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016c14:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016c18:	9b02      	ldr	r3, [sp, #8]
 8016c1a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016c1e:	881f      	ldrh	r7, [r3, #0]
 8016c20:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016c24:	42bb      	cmp	r3, r7
 8016c26:	d9cc      	bls.n	8016bc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016c28:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016c2c:	ab07      	add	r3, sp, #28
 8016c2e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016c32:	6851      	ldr	r1, [r2, #4]
 8016c34:	c303      	stmia	r3!, {r0, r1}
 8016c36:	a905      	add	r1, sp, #20
 8016c38:	a807      	add	r0, sp, #28
 8016c3a:	f7ff fa4f 	bl	80160dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	d04c      	beq.n	8016cdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016c42:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016c46:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016c4a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016c4e:	4686      	mov	lr, r0
 8016c50:	4290      	cmp	r0, r2
 8016c52:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016c56:	4448      	add	r0, r9
 8016c58:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016c5c:	bfb8      	it	lt
 8016c5e:	4696      	movlt	lr, r2
 8016c60:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016c64:	444a      	add	r2, r9
 8016c66:	b280      	uxth	r0, r0
 8016c68:	4299      	cmp	r1, r3
 8016c6a:	468c      	mov	ip, r1
 8016c6c:	b292      	uxth	r2, r2
 8016c6e:	9303      	str	r3, [sp, #12]
 8016c70:	bfb8      	it	lt
 8016c72:	469c      	movlt	ip, r3
 8016c74:	b203      	sxth	r3, r0
 8016c76:	fa0f f982 	sxth.w	r9, r2
 8016c7a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016c7e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016c82:	454b      	cmp	r3, r9
 8016c84:	bfb8      	it	lt
 8016c86:	4602      	movlt	r2, r0
 8016c88:	9b03      	ldr	r3, [sp, #12]
 8016c8a:	eba2 020e 	sub.w	r2, r2, lr
 8016c8e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016c92:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016c96:	4411      	add	r1, r2
 8016c98:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016c9c:	4413      	add	r3, r2
 8016c9e:	b289      	uxth	r1, r1
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	b208      	sxth	r0, r1
 8016ca4:	b21a      	sxth	r2, r3
 8016ca6:	4290      	cmp	r0, r2
 8016ca8:	bfb8      	it	lt
 8016caa:	460b      	movlt	r3, r1
 8016cac:	eba3 030c 	sub.w	r3, r3, ip
 8016cb0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016cb4:	a807      	add	r0, sp, #28
 8016cb6:	f7fd f942 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016cba:	b920      	cbnz	r0, 8016cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8016cbc:	6823      	ldr	r3, [r4, #0]
 8016cbe:	a907      	add	r1, sp, #28
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cc4:	4798      	blx	r3
 8016cc6:	3701      	adds	r7, #1
 8016cc8:	b2bf      	uxth	r7, r7
 8016cca:	e7a9      	b.n	8016c20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8016ccc:	f8d8 0000 	ldr.w	r0, [r8]
 8016cd0:	2101      	movs	r1, #1
 8016cd2:	6803      	ldr	r3, [r0, #0]
 8016cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016cd8:	4798      	blx	r3
 8016cda:	e772      	b.n	8016bc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016cdc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016ce0:	e7e8      	b.n	8016cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8016ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce4:	4798      	blx	r3
 8016ce6:	4b42      	ldr	r3, [pc, #264]	; (8016df0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f43f af29 	beq.w	8016b42 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016cf6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8016cfa:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8016cfe:	9b02      	ldr	r3, [sp, #8]
 8016d00:	881b      	ldrh	r3, [r3, #0]
 8016d02:	429d      	cmp	r5, r3
 8016d04:	f67f af1d 	bls.w	8016b42 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8016d08:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8016d0c:	2907      	cmp	r1, #7
 8016d0e:	d815      	bhi.n	8016d3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8016d10:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8016d14:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8016d18:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016d1c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016d20:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8016d24:	1c4a      	adds	r2, r1, #1
 8016d26:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8016d2a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8016d2e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8016d32:	f8a2 e002 	strh.w	lr, [r2, #2]
 8016d36:	f8a2 c004 	strh.w	ip, [r2, #4]
 8016d3a:	80d7      	strh	r7, [r2, #6]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	e7df      	b.n	8016d02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8016d42:	2b02      	cmp	r3, #2
 8016d44:	f040 8135 	bne.w	8016fb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016d48:	4b2a      	ldr	r3, [pc, #168]	; (8016df4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8016d4a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	f000 809c 	beq.w	8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016d56:	9b02      	ldr	r3, [sp, #8]
 8016d58:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8016d5c:	f8b3 b000 	ldrh.w	fp, [r3]
 8016d60:	f10b 0b01 	add.w	fp, fp, #1
 8016d64:	fa1f fb8b 	uxth.w	fp, fp
 8016d68:	2a00      	cmp	r2, #0
 8016d6a:	d0bc      	beq.n	8016ce6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016d6c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8016d70:	4659      	mov	r1, fp
 8016d72:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8016d76:	f04f 0800 	mov.w	r8, #0
 8016d7a:	441d      	add	r5, r3
 8016d7c:	b22d      	sxth	r5, r5
 8016d7e:	b28b      	uxth	r3, r1
 8016d80:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8016d84:	429a      	cmp	r2, r3
 8016d86:	f240 80c0 	bls.w	8016f0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8016d8a:	4427      	add	r7, r4
 8016d8c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8016d90:	4608      	mov	r0, r1
 8016d92:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8016d96:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8016d9a:	4563      	cmp	r3, ip
 8016d9c:	f340 80a2 	ble.w	8016ee4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8016da0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8016da4:	4465      	add	r5, ip
 8016da6:	b22d      	sxth	r5, r5
 8016da8:	429d      	cmp	r5, r3
 8016daa:	bfa8      	it	ge
 8016dac:	461d      	movge	r5, r3
 8016dae:	3101      	adds	r1, #1
 8016db0:	4680      	mov	r8, r0
 8016db2:	e7e4      	b.n	8016d7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8016db4:	d10b      	bne.n	8016dce <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8016db6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8016dba:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8016dbe:	458c      	cmp	ip, r1
 8016dc0:	bfb4      	ite	lt
 8016dc2:	469c      	movlt	ip, r3
 8016dc4:	46bc      	movge	ip, r7
 8016dc6:	4572      	cmp	r2, lr
 8016dc8:	bfb8      	it	lt
 8016dca:	4672      	movlt	r2, lr
 8016dcc:	e087      	b.n	8016ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016dce:	428a      	cmp	r2, r1
 8016dd0:	46bc      	mov	ip, r7
 8016dd2:	bfb8      	it	lt
 8016dd4:	460a      	movlt	r2, r1
 8016dd6:	e082      	b.n	8016ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8016dd8:	24041b44 	.word	0x24041b44
 8016ddc:	24041b50 	.word	0x24041b50
 8016de0:	24000038 	.word	0x24000038
 8016de4:	24041b0c 	.word	0x24041b0c
 8016de8:	24041b02 	.word	0x24041b02
 8016dec:	24041b00 	.word	0x24041b00
 8016df0:	24041b0a 	.word	0x24041b0a
 8016df4:	24041b04 	.word	0x24041b04
 8016df8:	1961      	adds	r1, r4, r5
 8016dfa:	ab07      	add	r3, sp, #28
 8016dfc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8016e00:	6849      	ldr	r1, [r1, #4]
 8016e02:	c303      	stmia	r3!, {r0, r1}
 8016e04:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016e08:	a807      	add	r0, sp, #28
 8016e0a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016e0e:	2b13      	cmp	r3, #19
 8016e10:	440b      	add	r3, r1
 8016e12:	bfd8      	it	le
 8016e14:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8016e18:	1a9b      	subs	r3, r3, r2
 8016e1a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016e1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016e22:	f7ff f83f 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016e26:	a807      	add	r0, sp, #28
 8016e28:	f7fd f889 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e2c:	bb78      	cbnz	r0, 8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016e2e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8016e32:	4425      	add	r5, r4
 8016e34:	f8d8 0000 	ldr.w	r0, [r8]
 8016e38:	f1bc 0f14 	cmp.w	ip, #20
 8016e3c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016e40:	f8d0 e000 	ldr.w	lr, [r0]
 8016e44:	bfa8      	it	ge
 8016e46:	f04f 0c14 	movge.w	ip, #20
 8016e4a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016e4e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016e52:	fa1f fc8c 	uxth.w	ip, ip
 8016e56:	f8cd c000 	str.w	ip, [sp]
 8016e5a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8016e5e:	47d0      	blx	sl
 8016e60:	4682      	mov	sl, r0
 8016e62:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016e66:	a807      	add	r0, sp, #28
 8016e68:	f7ff f802 	bl	8015e70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	4620      	mov	r0, r4
 8016e70:	a907      	add	r1, sp, #28
 8016e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e74:	4798      	blx	r3
 8016e76:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8016e7a:	eba0 000a 	sub.w	r0, r0, sl
 8016e7e:	b200      	sxth	r0, r0
 8016e80:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8016e84:	b918      	cbnz	r0, 8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8016e86:	b2b9      	uxth	r1, r7
 8016e88:	4648      	mov	r0, r9
 8016e8a:	f7ff faa5 	bl	80163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016e8e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8016e92:	f1bb 0f00 	cmp.w	fp, #0
 8016e96:	f43f af26 	beq.w	8016ce6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016e9a:	9b02      	ldr	r3, [sp, #8]
 8016e9c:	2700      	movs	r7, #0
 8016e9e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8016ea2:	881b      	ldrh	r3, [r3, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	b29b      	uxth	r3, r3
 8016ea8:	b299      	uxth	r1, r3
 8016eaa:	00fd      	lsls	r5, r7, #3
 8016eac:	458b      	cmp	fp, r1
 8016eae:	d9a3      	bls.n	8016df8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8016eb0:	4425      	add	r5, r4
 8016eb2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8016eb6:	469c      	mov	ip, r3
 8016eb8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8016ebc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8016ec0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8016ec4:	4408      	add	r0, r1
 8016ec6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8016eca:	4471      	add	r1, lr
 8016ecc:	b200      	sxth	r0, r0
 8016ece:	b209      	sxth	r1, r1
 8016ed0:	4288      	cmp	r0, r1
 8016ed2:	f6bf af6f 	bge.w	8016db4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8016ed6:	4586      	cmp	lr, r0
 8016ed8:	4672      	mov	r2, lr
 8016eda:	bfb8      	it	lt
 8016edc:	4602      	movlt	r2, r0
 8016ede:	3301      	adds	r3, #1
 8016ee0:	4667      	mov	r7, ip
 8016ee2:	e7e1      	b.n	8016ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8016ee4:	d10c      	bne.n	8016f00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8016ee6:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8016eea:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8016eee:	4287      	cmp	r7, r0
 8016ef0:	bfb4      	ite	lt
 8016ef2:	4608      	movlt	r0, r1
 8016ef4:	4640      	movge	r0, r8
 8016ef6:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8016efa:	443b      	add	r3, r7
 8016efc:	b21b      	sxth	r3, r3
 8016efe:	e753      	b.n	8016da8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8016f00:	4565      	cmp	r5, ip
 8016f02:	4640      	mov	r0, r8
 8016f04:	bfa8      	it	ge
 8016f06:	4665      	movge	r5, ip
 8016f08:	e751      	b.n	8016dae <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016f0a:	eb09 0007 	add.w	r0, r9, r7
 8016f0e:	4427      	add	r7, r4
 8016f10:	9203      	str	r2, [sp, #12]
 8016f12:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8016f16:	f1ba 0f13 	cmp.w	sl, #19
 8016f1a:	bfde      	ittt	le
 8016f1c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8016f20:	4455      	addle	r5, sl
 8016f22:	b22d      	sxthle	r5, r5
 8016f24:	f7fd f80b 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016f28:	9a03      	ldr	r2, [sp, #12]
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	f47f af1c 	bne.w	8016d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8016f30:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8016f34:	fa1f fa8a 	uxth.w	sl, sl
 8016f38:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016f3c:	1aad      	subs	r5, r5, r2
 8016f3e:	4829      	ldr	r0, [pc, #164]	; (8016fe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8016f40:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8016f44:	2d14      	cmp	r5, #20
 8016f46:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8016f4a:	6800      	ldr	r0, [r0, #0]
 8016f4c:	bfa8      	it	ge
 8016f4e:	2514      	movge	r5, #20
 8016f50:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016f54:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016f58:	b289      	uxth	r1, r1
 8016f5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016f5e:	b2ad      	uxth	r5, r5
 8016f60:	f8d0 c000 	ldr.w	ip, [r0]
 8016f64:	b292      	uxth	r2, r2
 8016f66:	4555      	cmp	r5, sl
 8016f68:	bf94      	ite	ls
 8016f6a:	9500      	strls	r5, [sp, #0]
 8016f6c:	f8cd a000 	strhi.w	sl, [sp]
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8016f76:	47a8      	blx	r5
 8016f78:	6823      	ldr	r3, [r4, #0]
 8016f7a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8016f7e:	a907      	add	r1, sp, #28
 8016f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f82:	4620      	mov	r0, r4
 8016f84:	4798      	blx	r3
 8016f86:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8016f8a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016f8e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8016f92:	1a5b      	subs	r3, r3, r1
 8016f94:	440a      	add	r2, r1
 8016f96:	b21b      	sxth	r3, r3
 8016f98:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8016f9c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	f47f aed8 	bne.w	8016d56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016fa6:	fa1f f188 	uxth.w	r1, r8
 8016faa:	4648      	mov	r0, r9
 8016fac:	f7ff fa14 	bl	80163d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fb0:	e6d1      	b.n	8016d56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016fb2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8016fb6:	42ab      	cmp	r3, r5
 8016fb8:	f67f ae95 	bls.w	8016ce6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016fbc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016fc0:	ab07      	add	r3, sp, #28
 8016fc2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8016fc6:	6851      	ldr	r1, [r2, #4]
 8016fc8:	c303      	stmia	r3!, {r0, r1}
 8016fca:	a807      	add	r0, sp, #28
 8016fcc:	f7fc ffb7 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fd0:	b920      	cbnz	r0, 8016fdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8016fd2:	6823      	ldr	r3, [r4, #0]
 8016fd4:	a907      	add	r1, sp, #28
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fda:	4798      	blx	r3
 8016fdc:	3501      	adds	r5, #1
 8016fde:	b2ad      	uxth	r5, r5
 8016fe0:	e7e7      	b.n	8016fb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8016fe2:	bf00      	nop
 8016fe4:	24041b0c 	.word	0x24041b0c

08016fe8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016fe8:	4b03      	ldr	r3, [pc, #12]	; (8016ff8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016fea:	2200      	movs	r2, #0
 8016fec:	801a      	strh	r2, [r3, #0]
 8016fee:	805a      	strh	r2, [r3, #2]
 8016ff0:	809a      	strh	r2, [r3, #4]
 8016ff2:	80da      	strh	r2, [r3, #6]
 8016ff4:	4770      	bx	lr
 8016ff6:	bf00      	nop
 8016ff8:	24041b50 	.word	0x24041b50

08016ffc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017000:	b09d      	sub	sp, #116	; 0x74
 8017002:	4606      	mov	r6, r0
 8017004:	4614      	mov	r4, r2
 8017006:	468a      	mov	sl, r1
 8017008:	a803      	add	r0, sp, #12
 801700a:	461d      	mov	r5, r3
 801700c:	f000 fd64 	bl	8017ad8 <_ZN8touchgfx12TextProviderC1Ev>
 8017010:	6833      	ldr	r3, [r6, #0]
 8017012:	4630      	mov	r0, r6
 8017014:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801701a:	4798      	blx	r3
 801701c:	6833      	ldr	r3, [r6, #0]
 801701e:	4607      	mov	r7, r0
 8017020:	4630      	mov	r0, r6
 8017022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017024:	4798      	blx	r3
 8017026:	462a      	mov	r2, r5
 8017028:	2500      	movs	r5, #0
 801702a:	4621      	mov	r1, r4
 801702c:	9000      	str	r0, [sp, #0]
 801702e:	463b      	mov	r3, r7
 8017030:	462c      	mov	r4, r5
 8017032:	46a9      	mov	r9, r5
 8017034:	46a8      	mov	r8, r5
 8017036:	a803      	add	r0, sp, #12
 8017038:	f000 fda1 	bl	8017b7e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801703c:	2300      	movs	r3, #0
 801703e:	9302      	str	r3, [sp, #8]
 8017040:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017044:	429c      	cmp	r4, r3
 8017046:	d002      	beq.n	801704e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017048:	455c      	cmp	r4, fp
 801704a:	bf18      	it	ne
 801704c:	4625      	movne	r5, r4
 801704e:	ab02      	add	r3, sp, #8
 8017050:	4632      	mov	r2, r6
 8017052:	4651      	mov	r1, sl
 8017054:	a803      	add	r0, sp, #12
 8017056:	f001 f887 	bl	8018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801705a:	4604      	mov	r4, r0
 801705c:	b108      	cbz	r0, 8017062 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801705e:	280a      	cmp	r0, #10
 8017060:	d10a      	bne.n	8017078 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017062:	45c1      	cmp	r9, r8
 8017064:	bf38      	it	cc
 8017066:	46c1      	movcc	r9, r8
 8017068:	f04f 0800 	mov.w	r8, #0
 801706c:	2c00      	cmp	r4, #0
 801706e:	d1e5      	bne.n	801703c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017070:	4648      	mov	r0, r9
 8017072:	b01d      	add	sp, #116	; 0x74
 8017074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017078:	9a02      	ldr	r2, [sp, #8]
 801707a:	2a00      	cmp	r2, #0
 801707c:	d0de      	beq.n	801703c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801707e:	7b57      	ldrb	r7, [r2, #13]
 8017080:	4629      	mov	r1, r5
 8017082:	6833      	ldr	r3, [r6, #0]
 8017084:	007f      	lsls	r7, r7, #1
 8017086:	8894      	ldrh	r4, [r2, #4]
 8017088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801708a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801708e:	7a97      	ldrb	r7, [r2, #10]
 8017090:	4307      	orrs	r7, r0
 8017092:	4630      	mov	r0, r6
 8017094:	4798      	blx	r3
 8017096:	4438      	add	r0, r7
 8017098:	4480      	add	r8, r0
 801709a:	fa1f f888 	uxth.w	r8, r8
 801709e:	e7e5      	b.n	801706c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080170a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80170a0:	b508      	push	{r3, lr}
 80170a2:	6803      	ldr	r3, [r0, #0]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	4798      	blx	r3
 80170a8:	b128      	cbz	r0, 80170b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80170aa:	7b43      	ldrb	r3, [r0, #13]
 80170ac:	7a80      	ldrb	r0, [r0, #10]
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80170b4:	4318      	orrs	r0, r3
 80170b6:	bd08      	pop	{r3, pc}

080170b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80170b8:	b40e      	push	{r1, r2, r3}
 80170ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170bc:	b09e      	sub	sp, #120	; 0x78
 80170be:	4605      	mov	r5, r0
 80170c0:	ab23      	add	r3, sp, #140	; 0x8c
 80170c2:	a805      	add	r0, sp, #20
 80170c4:	f853 4b04 	ldr.w	r4, [r3], #4
 80170c8:	9303      	str	r3, [sp, #12]
 80170ca:	f000 fd05 	bl	8017ad8 <_ZN8touchgfx12TextProviderC1Ev>
 80170ce:	682b      	ldr	r3, [r5, #0]
 80170d0:	4628      	mov	r0, r5
 80170d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d4:	4798      	blx	r3
 80170d6:	682b      	ldr	r3, [r5, #0]
 80170d8:	4606      	mov	r6, r0
 80170da:	4628      	mov	r0, r5
 80170dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170de:	4798      	blx	r3
 80170e0:	4633      	mov	r3, r6
 80170e2:	4621      	mov	r1, r4
 80170e4:	ae1e      	add	r6, sp, #120	; 0x78
 80170e6:	2400      	movs	r4, #0
 80170e8:	9000      	str	r0, [sp, #0]
 80170ea:	9a03      	ldr	r2, [sp, #12]
 80170ec:	a805      	add	r0, sp, #20
 80170ee:	f000 fd46 	bl	8017b7e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170f2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80170f6:	462a      	mov	r2, r5
 80170f8:	4633      	mov	r3, r6
 80170fa:	4621      	mov	r1, r4
 80170fc:	a805      	add	r0, sp, #20
 80170fe:	f001 f833 	bl	8018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017102:	b300      	cbz	r0, 8017146 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017104:	280a      	cmp	r0, #10
 8017106:	d01a      	beq.n	801713e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017108:	9f04      	ldr	r7, [sp, #16]
 801710a:	b1c7      	cbz	r7, 801713e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801710c:	7b78      	ldrb	r0, [r7, #13]
 801710e:	7a3b      	ldrb	r3, [r7, #8]
 8017110:	00c1      	lsls	r1, r0, #3
 8017112:	88aa      	ldrh	r2, [r5, #4]
 8017114:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017118:	4319      	orrs	r1, r3
 801711a:	0643      	lsls	r3, r0, #25
 801711c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017120:	bf48      	it	mi
 8017122:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017126:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801712a:	bf48      	it	mi
 801712c:	b219      	sxthmi	r1, r3
 801712e:	79fb      	ldrb	r3, [r7, #7]
 8017130:	4303      	orrs	r3, r0
 8017132:	4413      	add	r3, r2
 8017134:	1a5b      	subs	r3, r3, r1
 8017136:	b29b      	uxth	r3, r3
 8017138:	42a3      	cmp	r3, r4
 801713a:	bfc8      	it	gt
 801713c:	b21c      	sxthgt	r4, r3
 801713e:	4633      	mov	r3, r6
 8017140:	462a      	mov	r2, r5
 8017142:	2100      	movs	r1, #0
 8017144:	e7da      	b.n	80170fc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017146:	b2a0      	uxth	r0, r4
 8017148:	b01e      	add	sp, #120	; 0x78
 801714a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801714e:	b003      	add	sp, #12
 8017150:	4770      	bx	lr

08017152 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017152:	b40e      	push	{r1, r2, r3}
 8017154:	b570      	push	{r4, r5, r6, lr}
 8017156:	b09d      	sub	sp, #116	; 0x74
 8017158:	4604      	mov	r4, r0
 801715a:	ab21      	add	r3, sp, #132	; 0x84
 801715c:	a803      	add	r0, sp, #12
 801715e:	f853 5b04 	ldr.w	r5, [r3], #4
 8017162:	9302      	str	r3, [sp, #8]
 8017164:	f000 fcb8 	bl	8017ad8 <_ZN8touchgfx12TextProviderC1Ev>
 8017168:	6823      	ldr	r3, [r4, #0]
 801716a:	4620      	mov	r0, r4
 801716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801716e:	4798      	blx	r3
 8017170:	6823      	ldr	r3, [r4, #0]
 8017172:	4606      	mov	r6, r0
 8017174:	4620      	mov	r0, r4
 8017176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017178:	2401      	movs	r4, #1
 801717a:	4798      	blx	r3
 801717c:	4633      	mov	r3, r6
 801717e:	9000      	str	r0, [sp, #0]
 8017180:	4629      	mov	r1, r5
 8017182:	9a02      	ldr	r2, [sp, #8]
 8017184:	a803      	add	r0, sp, #12
 8017186:	f000 fcfa 	bl	8017b7e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801718a:	a803      	add	r0, sp, #12
 801718c:	f001 f86c 	bl	8018268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017190:	b2a3      	uxth	r3, r4
 8017192:	b138      	cbz	r0, 80171a4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017194:	280a      	cmp	r0, #10
 8017196:	a803      	add	r0, sp, #12
 8017198:	bf04      	itt	eq
 801719a:	3301      	addeq	r3, #1
 801719c:	b21c      	sxtheq	r4, r3
 801719e:	f001 f863 	bl	8018268 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171a2:	e7f5      	b.n	8017190 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80171a4:	4618      	mov	r0, r3
 80171a6:	b01d      	add	sp, #116	; 0x74
 80171a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171ac:	b003      	add	sp, #12
 80171ae:	4770      	bx	lr

080171b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80171b0:	b40e      	push	{r1, r2, r3}
 80171b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171b4:	b09e      	sub	sp, #120	; 0x78
 80171b6:	4604      	mov	r4, r0
 80171b8:	ab23      	add	r3, sp, #140	; 0x8c
 80171ba:	a805      	add	r0, sp, #20
 80171bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80171c0:	9303      	str	r3, [sp, #12]
 80171c2:	f000 fc89 	bl	8017ad8 <_ZN8touchgfx12TextProviderC1Ev>
 80171c6:	6823      	ldr	r3, [r4, #0]
 80171c8:	4620      	mov	r0, r4
 80171ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171cc:	4798      	blx	r3
 80171ce:	6823      	ldr	r3, [r4, #0]
 80171d0:	4606      	mov	r6, r0
 80171d2:	4620      	mov	r0, r4
 80171d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171d6:	4798      	blx	r3
 80171d8:	4633      	mov	r3, r6
 80171da:	4629      	mov	r1, r5
 80171dc:	9000      	str	r0, [sp, #0]
 80171de:	9a03      	ldr	r2, [sp, #12]
 80171e0:	a805      	add	r0, sp, #20
 80171e2:	f000 fccc 	bl	8017b7e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80171e6:	ad1e      	add	r5, sp, #120	; 0x78
 80171e8:	2100      	movs	r1, #0
 80171ea:	26ff      	movs	r6, #255	; 0xff
 80171ec:	4622      	mov	r2, r4
 80171ee:	a805      	add	r0, sp, #20
 80171f0:	f845 1d68 	str.w	r1, [r5, #-104]!
 80171f4:	462b      	mov	r3, r5
 80171f6:	f000 ffb7 	bl	8018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171fa:	b1d8      	cbz	r0, 8017234 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80171fc:	280a      	cmp	r0, #10
 80171fe:	d012      	beq.n	8017226 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017200:	9804      	ldr	r0, [sp, #16]
 8017202:	b180      	cbz	r0, 8017226 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8017204:	7b47      	ldrb	r7, [r0, #13]
 8017206:	7922      	ldrb	r2, [r4, #4]
 8017208:	00fb      	lsls	r3, r7, #3
 801720a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801720e:	7a03      	ldrb	r3, [r0, #8]
 8017210:	430b      	orrs	r3, r1
 8017212:	0679      	lsls	r1, r7, #25
 8017214:	bf44      	itt	mi
 8017216:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801721a:	b21b      	sxthmi	r3, r3
 801721c:	1ad3      	subs	r3, r2, r3
 801721e:	b2db      	uxtb	r3, r3
 8017220:	429e      	cmp	r6, r3
 8017222:	bf28      	it	cs
 8017224:	461e      	movcs	r6, r3
 8017226:	462b      	mov	r3, r5
 8017228:	4622      	mov	r2, r4
 801722a:	2100      	movs	r1, #0
 801722c:	a805      	add	r0, sp, #20
 801722e:	f000 ff9b 	bl	8018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017232:	e7e2      	b.n	80171fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8017234:	4630      	mov	r0, r6
 8017236:	b01e      	add	sp, #120	; 0x78
 8017238:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801723c:	b003      	add	sp, #12
 801723e:	4770      	bx	lr

08017240 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017240:	b513      	push	{r0, r1, r4, lr}
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	2400      	movs	r4, #0
 8017246:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801724a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801724e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017252:	4669      	mov	r1, sp
 8017254:	691b      	ldr	r3, [r3, #16]
 8017256:	9400      	str	r4, [sp, #0]
 8017258:	f8ad 2006 	strh.w	r2, [sp, #6]
 801725c:	4798      	blx	r3
 801725e:	b002      	add	sp, #8
 8017260:	bd10      	pop	{r4, pc}

08017262 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017262:	b538      	push	{r3, r4, r5, lr}
 8017264:	680b      	ldr	r3, [r1, #0]
 8017266:	460c      	mov	r4, r1
 8017268:	4605      	mov	r5, r0
 801726a:	68db      	ldr	r3, [r3, #12]
 801726c:	4798      	blx	r3
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	4620      	mov	r0, r4
 8017272:	4629      	mov	r1, r5
 8017274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017276:	4798      	blx	r3
 8017278:	4628      	mov	r0, r5
 801727a:	bd38      	pop	{r3, r4, r5, pc}

0801727c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801727c:	b410      	push	{r4}
 801727e:	880a      	ldrh	r2, [r1, #0]
 8017280:	8884      	ldrh	r4, [r0, #4]
 8017282:	4422      	add	r2, r4
 8017284:	800a      	strh	r2, [r1, #0]
 8017286:	884a      	ldrh	r2, [r1, #2]
 8017288:	88c4      	ldrh	r4, [r0, #6]
 801728a:	4422      	add	r2, r4
 801728c:	804a      	strh	r2, [r1, #2]
 801728e:	6940      	ldr	r0, [r0, #20]
 8017290:	b120      	cbz	r0, 801729c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017292:	6803      	ldr	r3, [r0, #0]
 8017294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801729a:	4718      	bx	r3
 801729c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172a0:	4770      	bx	lr

080172a2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80172a2:	b570      	push	{r4, r5, r6, lr}
 80172a4:	8882      	ldrh	r2, [r0, #4]
 80172a6:	460c      	mov	r4, r1
 80172a8:	880b      	ldrh	r3, [r1, #0]
 80172aa:	4605      	mov	r5, r0
 80172ac:	4413      	add	r3, r2
 80172ae:	800b      	strh	r3, [r1, #0]
 80172b0:	884b      	ldrh	r3, [r1, #2]
 80172b2:	88c2      	ldrh	r2, [r0, #6]
 80172b4:	4413      	add	r3, r2
 80172b6:	804b      	strh	r3, [r1, #2]
 80172b8:	1d01      	adds	r1, r0, #4
 80172ba:	4620      	mov	r0, r4
 80172bc:	f7fc fdfc 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 80172c0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	dd0b      	ble.n	80172e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80172c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	dd07      	ble.n	80172e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80172d0:	6968      	ldr	r0, [r5, #20]
 80172d2:	b128      	cbz	r0, 80172e0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80172d4:	6803      	ldr	r3, [r0, #0]
 80172d6:	4621      	mov	r1, r4
 80172d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172de:	4718      	bx	r3
 80172e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080172e4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80172e4:	b570      	push	{r4, r5, r6, lr}
 80172e6:	8882      	ldrh	r2, [r0, #4]
 80172e8:	460c      	mov	r4, r1
 80172ea:	880b      	ldrh	r3, [r1, #0]
 80172ec:	4605      	mov	r5, r0
 80172ee:	4413      	add	r3, r2
 80172f0:	800b      	strh	r3, [r1, #0]
 80172f2:	884b      	ldrh	r3, [r1, #2]
 80172f4:	88c2      	ldrh	r2, [r0, #6]
 80172f6:	4413      	add	r3, r2
 80172f8:	804b      	strh	r3, [r1, #2]
 80172fa:	1d01      	adds	r1, r0, #4
 80172fc:	4620      	mov	r0, r4
 80172fe:	f7fc fddb 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8017302:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	dd18      	ble.n	801733c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801730a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801730e:	2b00      	cmp	r3, #0
 8017310:	dd14      	ble.n	801733c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017312:	6968      	ldr	r0, [r5, #20]
 8017314:	b128      	cbz	r0, 8017322 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017316:	6803      	ldr	r3, [r0, #0]
 8017318:	4621      	mov	r1, r4
 801731a:	691b      	ldr	r3, [r3, #16]
 801731c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017320:	4718      	bx	r3
 8017322:	4b07      	ldr	r3, [pc, #28]	; (8017340 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	3304      	adds	r3, #4
 8017328:	429d      	cmp	r5, r3
 801732a:	d107      	bne.n	801733c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801732c:	f7fe ffb4 	bl	8016298 <_ZN8touchgfx11Application11getInstanceEv>
 8017330:	6821      	ldr	r1, [r4, #0]
 8017332:	6862      	ldr	r2, [r4, #4]
 8017334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017338:	f7ff b862 	b.w	8016400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801733c:	bd70      	pop	{r4, r5, r6, pc}
 801733e:	bf00      	nop
 8017340:	24041b48 	.word	0x24041b48

08017344 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017344:	b570      	push	{r4, r5, r6, lr}
 8017346:	4604      	mov	r4, r0
 8017348:	4616      	mov	r6, r2
 801734a:	460d      	mov	r5, r1
 801734c:	b901      	cbnz	r1, 8017350 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801734e:	b192      	cbz	r2, 8017376 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017350:	6823      	ldr	r3, [r4, #0]
 8017352:	4620      	mov	r0, r4
 8017354:	699b      	ldr	r3, [r3, #24]
 8017356:	4798      	blx	r3
 8017358:	88e2      	ldrh	r2, [r4, #6]
 801735a:	88a1      	ldrh	r1, [r4, #4]
 801735c:	4620      	mov	r0, r4
 801735e:	4432      	add	r2, r6
 8017360:	4429      	add	r1, r5
 8017362:	b212      	sxth	r2, r2
 8017364:	b209      	sxth	r1, r1
 8017366:	f7f6 f8dc 	bl	800d522 <_ZN8touchgfx8Drawable5setXYEss>
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	4620      	mov	r0, r4
 801736e:	699b      	ldr	r3, [r3, #24]
 8017370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017374:	4718      	bx	r3
 8017376:	bd70      	pop	{r4, r5, r6, pc}

08017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017378:	b510      	push	{r4, lr}
 801737a:	2300      	movs	r3, #0
 801737c:	4604      	mov	r4, r0
 801737e:	4608      	mov	r0, r1
 8017380:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017384:	8023      	strh	r3, [r4, #0]
 8017386:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801738a:	8063      	strh	r3, [r4, #2]
 801738c:	6803      	ldr	r3, [r0, #0]
 801738e:	80a1      	strh	r1, [r4, #4]
 8017390:	4621      	mov	r1, r4
 8017392:	80e2      	strh	r2, [r4, #6]
 8017394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017396:	4798      	blx	r3
 8017398:	4620      	mov	r0, r4
 801739a:	bd10      	pop	{r4, pc}

0801739c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801739c:	b530      	push	{r4, r5, lr}
 801739e:	8083      	strh	r3, [r0, #4]
 80173a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80173a4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80173a8:	7183      	strb	r3, [r0, #6]
 80173aa:	79c3      	ldrb	r3, [r0, #7]
 80173ac:	6101      	str	r1, [r0, #16]
 80173ae:	f365 0306 	bfi	r3, r5, #0, #7
 80173b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80173b6:	8282      	strh	r2, [r0, #20]
 80173b8:	f365 13c7 	bfi	r3, r5, #7, #1
 80173bc:	71c3      	strb	r3, [r0, #7]
 80173be:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80173c2:	7203      	strb	r3, [r0, #8]
 80173c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80173c8:	7243      	strb	r3, [r0, #9]
 80173ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80173ce:	8143      	strh	r3, [r0, #10]
 80173d0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80173d4:	8183      	strh	r3, [r0, #12]
 80173d6:	4b01      	ldr	r3, [pc, #4]	; (80173dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80173d8:	6003      	str	r3, [r0, #0]
 80173da:	bd30      	pop	{r4, r5, pc}
 80173dc:	08028d1c 	.word	0x08028d1c

080173e0 <_ZNK8touchgfx9ConstFont4findEt>:
 80173e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173e2:	6904      	ldr	r4, [r0, #16]
 80173e4:	b3bc      	cbz	r4, 8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173e6:	88a3      	ldrh	r3, [r4, #4]
 80173e8:	8a82      	ldrh	r2, [r0, #20]
 80173ea:	1acb      	subs	r3, r1, r3
 80173ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80173f0:	d431      	bmi.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80173f2:	4293      	cmp	r3, r2
 80173f4:	dd0c      	ble.n	8017410 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80173f6:	230e      	movs	r3, #14
 80173f8:	fb03 4302 	mla	r3, r3, r2, r4
 80173fc:	889b      	ldrh	r3, [r3, #4]
 80173fe:	1a5b      	subs	r3, r3, r1
 8017400:	1ad3      	subs	r3, r2, r3
 8017402:	429a      	cmp	r2, r3
 8017404:	db27      	blt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017406:	2b00      	cmp	r3, #0
 8017408:	bfbc      	itt	lt
 801740a:	2302      	movlt	r3, #2
 801740c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017410:	2500      	movs	r5, #0
 8017412:	260e      	movs	r6, #14
 8017414:	4295      	cmp	r5, r2
 8017416:	dc1e      	bgt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017418:	fb06 4003 	mla	r0, r6, r3, r4
 801741c:	8887      	ldrh	r7, [r0, #4]
 801741e:	42b9      	cmp	r1, r7
 8017420:	d01a      	beq.n	8017458 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017422:	d20d      	bcs.n	8017440 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017424:	1e5a      	subs	r2, r3, #1
 8017426:	4295      	cmp	r5, r2
 8017428:	dc15      	bgt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801742a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801742e:	1a5b      	subs	r3, r3, r1
 8017430:	1ad3      	subs	r3, r2, r3
 8017432:	429a      	cmp	r2, r3
 8017434:	db0f      	blt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017436:	429d      	cmp	r5, r3
 8017438:	ddec      	ble.n	8017414 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801743a:	1953      	adds	r3, r2, r5
 801743c:	105b      	asrs	r3, r3, #1
 801743e:	e7e9      	b.n	8017414 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017440:	1c5d      	adds	r5, r3, #1
 8017442:	42aa      	cmp	r2, r5
 8017444:	db07      	blt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017446:	8a43      	ldrh	r3, [r0, #18]
 8017448:	1acb      	subs	r3, r1, r3
 801744a:	442b      	add	r3, r5
 801744c:	429d      	cmp	r5, r3
 801744e:	dc02      	bgt.n	8017456 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017450:	429a      	cmp	r2, r3
 8017452:	dadf      	bge.n	8017414 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017454:	e7f1      	b.n	801743a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017456:	2000      	movs	r0, #0
 8017458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801745a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801745a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801745c:	4604      	mov	r4, r0
 801745e:	4617      	mov	r7, r2
 8017460:	461e      	mov	r6, r3
 8017462:	b911      	cbnz	r1, 801746a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017464:	2500      	movs	r5, #0
 8017466:	4628      	mov	r0, r5
 8017468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801746a:	290a      	cmp	r1, #10
 801746c:	d0fa      	beq.n	8017464 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801746e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017472:	4291      	cmp	r1, r2
 8017474:	d0f6      	beq.n	8017464 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017476:	f242 020b 	movw	r2, #8203	; 0x200b
 801747a:	4291      	cmp	r1, r2
 801747c:	d0f2      	beq.n	8017464 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801747e:	f7ff ffaf 	bl	80173e0 <_ZNK8touchgfx9ConstFont4findEt>
 8017482:	4605      	mov	r5, r0
 8017484:	b950      	cbnz	r0, 801749c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017486:	6823      	ldr	r3, [r4, #0]
 8017488:	4620      	mov	r0, r4
 801748a:	691b      	ldr	r3, [r3, #16]
 801748c:	4798      	blx	r3
 801748e:	4601      	mov	r1, r0
 8017490:	4620      	mov	r0, r4
 8017492:	f7ff ffa5 	bl	80173e0 <_ZNK8touchgfx9ConstFont4findEt>
 8017496:	4605      	mov	r5, r0
 8017498:	2800      	cmp	r0, #0
 801749a:	d0e3      	beq.n	8017464 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801749c:	6823      	ldr	r3, [r4, #0]
 801749e:	4629      	mov	r1, r5
 80174a0:	4620      	mov	r0, r4
 80174a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174a4:	4798      	blx	r3
 80174a6:	6038      	str	r0, [r7, #0]
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	4620      	mov	r0, r4
 80174ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174ae:	4798      	blx	r3
 80174b0:	7030      	strb	r0, [r6, #0]
 80174b2:	e7d8      	b.n	8017466 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080174b4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80174b4:	2000      	movs	r0, #0
 80174b6:	4770      	bx	lr

080174b8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80174b8:	2001      	movs	r0, #1
 80174ba:	4770      	bx	lr

080174bc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80174bc:	2002      	movs	r0, #2
 80174be:	4770      	bx	lr

080174c0 <_ZN8touchgfx12GestureEventD1Ev>:
 80174c0:	4770      	bx	lr

080174c2 <_ZN8touchgfx9DragEventD1Ev>:
 80174c2:	4770      	bx	lr

080174c4 <_ZN8touchgfx10ClickEventD1Ev>:
 80174c4:	4770      	bx	lr

080174c6 <_ZN8touchgfx10ClickEventD0Ev>:
 80174c6:	b510      	push	{r4, lr}
 80174c8:	4604      	mov	r4, r0
 80174ca:	210c      	movs	r1, #12
 80174cc:	f00d f88b 	bl	80245e6 <_ZdlPvj>
 80174d0:	4620      	mov	r0, r4
 80174d2:	bd10      	pop	{r4, pc}

080174d4 <_ZN8touchgfx9DragEventD0Ev>:
 80174d4:	b510      	push	{r4, lr}
 80174d6:	4604      	mov	r4, r0
 80174d8:	2110      	movs	r1, #16
 80174da:	f00d f884 	bl	80245e6 <_ZdlPvj>
 80174de:	4620      	mov	r0, r4
 80174e0:	bd10      	pop	{r4, pc}

080174e2 <_ZN8touchgfx12GestureEventD0Ev>:
 80174e2:	b510      	push	{r4, lr}
 80174e4:	4604      	mov	r4, r0
 80174e6:	210c      	movs	r1, #12
 80174e8:	f00d f87d 	bl	80245e6 <_ZdlPvj>
 80174ec:	4620      	mov	r0, r4
 80174ee:	bd10      	pop	{r4, pc}

080174f0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80174f0:	b530      	push	{r4, r5, lr}
 80174f2:	460d      	mov	r5, r1
 80174f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80174f6:	b087      	sub	sp, #28
 80174f8:	4604      	mov	r4, r0
 80174fa:	b301      	cbz	r1, 801753e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80174fc:	a801      	add	r0, sp, #4
 80174fe:	f7ff ff3b 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017502:	892a      	ldrh	r2, [r5, #8]
 8017504:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017508:	7928      	ldrb	r0, [r5, #4]
 801750a:	1ad2      	subs	r2, r2, r3
 801750c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801750e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017512:	441a      	add	r2, r3
 8017514:	896b      	ldrh	r3, [r5, #10]
 8017516:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801751a:	f88d 0010 	strb.w	r0, [sp, #16]
 801751e:	1b5b      	subs	r3, r3, r5
 8017520:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017522:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017524:	442b      	add	r3, r5
 8017526:	4d07      	ldr	r5, [pc, #28]	; (8017544 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017528:	f8ad 1012 	strh.w	r1, [sp, #18]
 801752c:	a903      	add	r1, sp, #12
 801752e:	9503      	str	r5, [sp, #12]
 8017530:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017534:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017538:	6803      	ldr	r3, [r0, #0]
 801753a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801753c:	4798      	blx	r3
 801753e:	b007      	add	sp, #28
 8017540:	bd30      	pop	{r4, r5, pc}
 8017542:	bf00      	nop
 8017544:	08028d9c 	.word	0x08028d9c

08017548 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801754c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801754e:	b08a      	sub	sp, #40	; 0x28
 8017550:	4604      	mov	r4, r0
 8017552:	460d      	mov	r5, r1
 8017554:	b113      	cbz	r3, 801755c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017556:	790b      	ldrb	r3, [r1, #4]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d044      	beq.n	80175e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801755c:	f104 0804 	add.w	r8, r4, #4
 8017560:	a803      	add	r0, sp, #12
 8017562:	4641      	mov	r1, r8
 8017564:	f7ff ff08 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017568:	792b      	ldrb	r3, [r5, #4]
 801756a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801756e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017572:	b983      	cbnz	r3, 8017596 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017574:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017578:	892a      	ldrh	r2, [r5, #8]
 801757a:	88e9      	ldrh	r1, [r5, #6]
 801757c:	4640      	mov	r0, r8
 801757e:	1b92      	subs	r2, r2, r6
 8017580:	9301      	str	r3, [sp, #4]
 8017582:	1bc9      	subs	r1, r1, r7
 8017584:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8017588:	b212      	sxth	r2, r2
 801758a:	9300      	str	r3, [sp, #0]
 801758c:	b209      	sxth	r1, r1
 801758e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8017592:	f7fc fbaf 	bl	8013cf4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8017596:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017598:	b329      	cbz	r1, 80175e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801759a:	a805      	add	r0, sp, #20
 801759c:	f7ff feec 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80175a4:	792b      	ldrb	r3, [r5, #4]
 80175a6:	a907      	add	r1, sp, #28
 80175a8:	1abf      	subs	r7, r7, r2
 80175aa:	88ea      	ldrh	r2, [r5, #6]
 80175ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80175ae:	4417      	add	r7, r2
 80175b0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80175b2:	f88d 3020 	strb.w	r3, [sp, #32]
 80175b6:	4417      	add	r7, r2
 80175b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80175bc:	1ab6      	subs	r6, r6, r2
 80175be:	892a      	ldrh	r2, [r5, #8]
 80175c0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80175c4:	4416      	add	r6, r2
 80175c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80175c8:	4416      	add	r6, r2
 80175ca:	4a08      	ldr	r2, [pc, #32]	; (80175ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80175cc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80175d0:	2600      	movs	r6, #0
 80175d2:	9207      	str	r2, [sp, #28]
 80175d4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80175d8:	6803      	ldr	r3, [r0, #0]
 80175da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175dc:	4798      	blx	r3
 80175de:	792b      	ldrb	r3, [r5, #4]
 80175e0:	b10b      	cbz	r3, 80175e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80175e2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80175e6:	b00a      	add	sp, #40	; 0x28
 80175e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ec:	08028d74 	.word	0x08028d74

080175f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80175f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f4:	460c      	mov	r4, r1
 80175f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80175f8:	b088      	sub	sp, #32
 80175fa:	4605      	mov	r5, r0
 80175fc:	2900      	cmp	r1, #0
 80175fe:	d06d      	beq.n	80176dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017600:	4668      	mov	r0, sp
 8017602:	f7ff feb9 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017606:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017608:	88e3      	ldrh	r3, [r4, #6]
 801760a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801760e:	440b      	add	r3, r1
 8017610:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017614:	b21b      	sxth	r3, r3
 8017616:	4543      	cmp	r3, r8
 8017618:	db31      	blt.n	801767e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801761a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801761e:	44c4      	add	ip, r8
 8017620:	fa0f fc8c 	sxth.w	ip, ip
 8017624:	4563      	cmp	r3, ip
 8017626:	da2a      	bge.n	801767e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017628:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801762a:	8926      	ldrh	r6, [r4, #8]
 801762c:	4416      	add	r6, r2
 801762e:	b236      	sxth	r6, r6
 8017630:	42be      	cmp	r6, r7
 8017632:	db24      	blt.n	801767e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017634:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017638:	4438      	add	r0, r7
 801763a:	b200      	sxth	r0, r0
 801763c:	4286      	cmp	r6, r0
 801763e:	da1e      	bge.n	801767e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017640:	8963      	ldrh	r3, [r4, #10]
 8017642:	4419      	add	r1, r3
 8017644:	b209      	sxth	r1, r1
 8017646:	4541      	cmp	r1, r8
 8017648:	db08      	blt.n	801765c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801764a:	4561      	cmp	r1, ip
 801764c:	da06      	bge.n	801765c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801764e:	89a3      	ldrh	r3, [r4, #12]
 8017650:	441a      	add	r2, r3
 8017652:	b212      	sxth	r2, r2
 8017654:	42ba      	cmp	r2, r7
 8017656:	db01      	blt.n	801765c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017658:	4282      	cmp	r2, r0
 801765a:	db10      	blt.n	801767e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801765c:	4b21      	ldr	r3, [pc, #132]	; (80176e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801765e:	a904      	add	r1, sp, #16
 8017660:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017662:	9304      	str	r3, [sp, #16]
 8017664:	2302      	movs	r3, #2
 8017666:	f88d 3014 	strb.w	r3, [sp, #20]
 801766a:	2300      	movs	r3, #0
 801766c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017670:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017674:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017678:	6803      	ldr	r3, [r0, #0]
 801767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801767c:	4798      	blx	r3
 801767e:	1d29      	adds	r1, r5, #4
 8017680:	a802      	add	r0, sp, #8
 8017682:	f7ff fe79 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017686:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801768a:	88e0      	ldrh	r0, [r4, #6]
 801768c:	eba3 0808 	sub.w	r8, r3, r8
 8017690:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017694:	7921      	ldrb	r1, [r4, #4]
 8017696:	fa1f f888 	uxth.w	r8, r8
 801769a:	1bdf      	subs	r7, r3, r7
 801769c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80176a0:	b2bb      	uxth	r3, r7
 80176a2:	4440      	add	r0, r8
 80176a4:	8922      	ldrh	r2, [r4, #8]
 80176a6:	8967      	ldrh	r7, [r4, #10]
 80176a8:	4460      	add	r0, ip
 80176aa:	89a4      	ldrh	r4, [r4, #12]
 80176ac:	441a      	add	r2, r3
 80176ae:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80176b0:	44b8      	add	r8, r7
 80176b2:	4423      	add	r3, r4
 80176b4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80176b8:	4432      	add	r2, r6
 80176ba:	44e0      	add	r8, ip
 80176bc:	4433      	add	r3, r6
 80176be:	4c0a      	ldr	r4, [pc, #40]	; (80176e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80176c0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80176c2:	f88d 1014 	strb.w	r1, [sp, #20]
 80176c6:	a904      	add	r1, sp, #16
 80176c8:	9404      	str	r4, [sp, #16]
 80176ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 80176ce:	f8ad 801a 	strh.w	r8, [sp, #26]
 80176d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80176d6:	6803      	ldr	r3, [r0, #0]
 80176d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176da:	4798      	blx	r3
 80176dc:	b008      	add	sp, #32
 80176de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176e2:	bf00      	nop
 80176e4:	08028d74 	.word	0x08028d74
 80176e8:	08028d88 	.word	0x08028d88

080176ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80176ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ee:	4604      	mov	r4, r0
 80176f0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80176f4:	3201      	adds	r2, #1
 80176f6:	d112      	bne.n	801771e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80176f8:	2500      	movs	r5, #0
 80176fa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80176fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	9500      	str	r5, [sp, #0]
 8017706:	466d      	mov	r5, sp
 8017708:	f8ad 1004 	strh.w	r1, [sp, #4]
 801770c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017710:	4629      	mov	r1, r5
 8017712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017714:	4798      	blx	r3
 8017716:	e895 0003 	ldmia.w	r5, {r0, r1}
 801771a:	e884 0003 	stmia.w	r4, {r0, r1}
 801771e:	4620      	mov	r0, r4
 8017720:	b003      	add	sp, #12
 8017722:	bd30      	pop	{r4, r5, pc}

08017724 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017724:	b513      	push	{r0, r1, r4, lr}
 8017726:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801772a:	4604      	mov	r4, r0
 801772c:	3301      	adds	r3, #1
 801772e:	d109      	bne.n	8017744 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017730:	4601      	mov	r1, r0
 8017732:	4668      	mov	r0, sp
 8017734:	f7ff fe20 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017738:	f8bd 3000 	ldrh.w	r3, [sp]
 801773c:	8423      	strh	r3, [r4, #32]
 801773e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017742:	8463      	strh	r3, [r4, #34]	; 0x22
 8017744:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017748:	b002      	add	sp, #8
 801774a:	bd10      	pop	{r4, pc}

0801774c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801774c:	b513      	push	{r0, r1, r4, lr}
 801774e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017752:	4604      	mov	r4, r0
 8017754:	3301      	adds	r3, #1
 8017756:	d109      	bne.n	801776c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017758:	4601      	mov	r1, r0
 801775a:	4668      	mov	r0, sp
 801775c:	f7ff fe0c 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017760:	f8bd 3000 	ldrh.w	r3, [sp]
 8017764:	8423      	strh	r3, [r4, #32]
 8017766:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801776a:	8463      	strh	r3, [r4, #34]	; 0x22
 801776c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017770:	b002      	add	sp, #8
 8017772:	bd10      	pop	{r4, pc}

08017774 <_ZN8touchgfx6ScreenC1Ev>:
 8017774:	b570      	push	{r4, r5, r6, lr}
 8017776:	4b17      	ldr	r3, [pc, #92]	; (80177d4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017778:	4605      	mov	r5, r0
 801777a:	4a17      	ldr	r2, [pc, #92]	; (80177d8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801777c:	2101      	movs	r1, #1
 801777e:	f845 3b04 	str.w	r3, [r5], #4
 8017782:	2300      	movs	r3, #0
 8017784:	6042      	str	r2, [r0, #4]
 8017786:	4604      	mov	r4, r0
 8017788:	8103      	strh	r3, [r0, #8]
 801778a:	8143      	strh	r3, [r0, #10]
 801778c:	8183      	strh	r3, [r0, #12]
 801778e:	81c3      	strh	r3, [r0, #14]
 8017790:	8203      	strh	r3, [r0, #16]
 8017792:	8243      	strh	r3, [r0, #18]
 8017794:	8283      	strh	r3, [r0, #20]
 8017796:	82c3      	strh	r3, [r0, #22]
 8017798:	6203      	str	r3, [r0, #32]
 801779a:	8483      	strh	r3, [r0, #36]	; 0x24
 801779c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801779e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80177a2:	6343      	str	r3, [r0, #52]	; 0x34
 80177a4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80177a8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80177ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80177b0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80177b4:	4b09      	ldr	r3, [pc, #36]	; (80177dc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80177b6:	4628      	mov	r0, r5
 80177b8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80177bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80177be:	4a08      	ldr	r2, [pc, #32]	; (80177e0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80177c0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80177c4:	4798      	blx	r3
 80177c6:	6863      	ldr	r3, [r4, #4]
 80177c8:	4628      	mov	r0, r5
 80177ca:	4631      	mov	r1, r6
 80177cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177ce:	4798      	blx	r3
 80177d0:	4620      	mov	r0, r4
 80177d2:	bd70      	pop	{r4, r5, r6, pc}
 80177d4:	08028db0 	.word	0x08028db0
 80177d8:	08028958 	.word	0x08028958
 80177dc:	24041b02 	.word	0x24041b02
 80177e0:	24041b00 	.word	0x24041b00

080177e4 <_ZN8touchgfx6Screen4drawEv>:
 80177e4:	4b09      	ldr	r3, [pc, #36]	; (801780c <_ZN8touchgfx6Screen4drawEv+0x28>)
 80177e6:	b507      	push	{r0, r1, r2, lr}
 80177e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177ec:	2100      	movs	r1, #0
 80177ee:	4b08      	ldr	r3, [pc, #32]	; (8017810 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80177f0:	9100      	str	r1, [sp, #0]
 80177f2:	4669      	mov	r1, sp
 80177f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177f8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80177fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017800:	6803      	ldr	r3, [r0, #0]
 8017802:	689b      	ldr	r3, [r3, #8]
 8017804:	4798      	blx	r3
 8017806:	b003      	add	sp, #12
 8017808:	f85d fb04 	ldr.w	pc, [sp], #4
 801780c:	24041b00 	.word	0x24041b00
 8017810:	24041b02 	.word	0x24041b02

08017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017818:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801781c:	b089      	sub	sp, #36	; 0x24
 801781e:	4680      	mov	r8, r0
 8017820:	460c      	mov	r4, r1
 8017822:	2b00      	cmp	r3, #0
 8017824:	4615      	mov	r5, r2
 8017826:	dd0e      	ble.n	8017846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017828:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801782c:	2b00      	cmp	r3, #0
 801782e:	dd0a      	ble.n	8017846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017830:	4628      	mov	r0, r5
 8017832:	f7ff ff5b 	bl	80176ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017836:	4621      	mov	r1, r4
 8017838:	f7fe fc50 	bl	80160dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801783c:	69eb      	ldr	r3, [r5, #28]
 801783e:	b928      	cbnz	r0, 801784c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017840:	461d      	mov	r5, r3
 8017842:	2b00      	cmp	r3, #0
 8017844:	d1f4      	bne.n	8017830 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017846:	b009      	add	sp, #36	; 0x24
 8017848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784c:	ae04      	add	r6, sp, #16
 801784e:	2b00      	cmp	r3, #0
 8017850:	f000 80b5 	beq.w	80179be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017854:	682b      	ldr	r3, [r5, #0]
 8017856:	4629      	mov	r1, r5
 8017858:	a802      	add	r0, sp, #8
 801785a:	68db      	ldr	r3, [r3, #12]
 801785c:	4798      	blx	r3
 801785e:	4628      	mov	r0, r5
 8017860:	f7ff ff60 	bl	8017724 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017864:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017868:	4407      	add	r7, r0
 801786a:	4628      	mov	r0, r5
 801786c:	f7ff ff6e 	bl	801774c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017870:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017874:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017878:	b23f      	sxth	r7, r7
 801787a:	4418      	add	r0, r3
 801787c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017880:	4621      	mov	r1, r4
 8017882:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017886:	f8ad 0012 	strh.w	r0, [sp, #18]
 801788a:	4630      	mov	r0, r6
 801788c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017890:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017894:	f7fc fb10 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8017898:	4628      	mov	r0, r5
 801789a:	f7ff ff27 	bl	80176ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801789e:	ab06      	add	r3, sp, #24
 80178a0:	4602      	mov	r2, r0
 80178a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80178a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80178aa:	4611      	mov	r1, r2
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7fc fb03 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 80178b2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80178b6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80178ba:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80178be:	4299      	cmp	r1, r3
 80178c0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80178c4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80178c8:	d10b      	bne.n	80178e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80178ca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80178ce:	4552      	cmp	r2, sl
 80178d0:	d107      	bne.n	80178e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80178d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80178d6:	455a      	cmp	r2, fp
 80178d8:	d103      	bne.n	80178e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80178da:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80178de:	454a      	cmp	r2, r9
 80178e0:	d06d      	beq.n	80179be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80178e2:	f1bb 0f00 	cmp.w	fp, #0
 80178e6:	dd65      	ble.n	80179b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80178e8:	f1b9 0f00 	cmp.w	r9, #0
 80178ec:	dd62      	ble.n	80179b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80178ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80178f2:	fa1f f08a 	uxth.w	r0, sl
 80178f6:	4552      	cmp	r2, sl
 80178f8:	9000      	str	r0, [sp, #0]
 80178fa:	da12      	bge.n	8017922 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80178fc:	9301      	str	r3, [sp, #4]
 80178fe:	9b00      	ldr	r3, [sp, #0]
 8017900:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017904:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017908:	1a9a      	subs	r2, r3, r2
 801790a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801790e:	4631      	mov	r1, r6
 8017910:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017914:	4640      	mov	r0, r8
 8017916:	f8ad 2016 	strh.w	r2, [sp, #22]
 801791a:	69ea      	ldr	r2, [r5, #28]
 801791c:	f7ff ff7a 	bl	8017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017920:	9b01      	ldr	r3, [sp, #4]
 8017922:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017926:	b29f      	uxth	r7, r3
 8017928:	429a      	cmp	r2, r3
 801792a:	da0d      	bge.n	8017948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801792c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017930:	1aba      	subs	r2, r7, r2
 8017932:	f8ad a012 	strh.w	sl, [sp, #18]
 8017936:	4631      	mov	r1, r6
 8017938:	f8ad 2014 	strh.w	r2, [sp, #20]
 801793c:	4640      	mov	r0, r8
 801793e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017942:	69ea      	ldr	r2, [r5, #28]
 8017944:	f7ff ff66 	bl	8017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017948:	8822      	ldrh	r2, [r4, #0]
 801794a:	445f      	add	r7, fp
 801794c:	88a3      	ldrh	r3, [r4, #4]
 801794e:	b2bf      	uxth	r7, r7
 8017950:	4413      	add	r3, r2
 8017952:	b23a      	sxth	r2, r7
 8017954:	b29b      	uxth	r3, r3
 8017956:	b219      	sxth	r1, r3
 8017958:	4291      	cmp	r1, r2
 801795a:	dd0d      	ble.n	8017978 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801795c:	1bdb      	subs	r3, r3, r7
 801795e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017962:	f8ad a012 	strh.w	sl, [sp, #18]
 8017966:	4631      	mov	r1, r6
 8017968:	f8ad 3014 	strh.w	r3, [sp, #20]
 801796c:	4640      	mov	r0, r8
 801796e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017972:	69ea      	ldr	r2, [r5, #28]
 8017974:	f7ff ff4e 	bl	8017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017978:	88e2      	ldrh	r2, [r4, #6]
 801797a:	8863      	ldrh	r3, [r4, #2]
 801797c:	4413      	add	r3, r2
 801797e:	9a00      	ldr	r2, [sp, #0]
 8017980:	444a      	add	r2, r9
 8017982:	b29b      	uxth	r3, r3
 8017984:	fa1f f982 	uxth.w	r9, r2
 8017988:	b219      	sxth	r1, r3
 801798a:	fa0f f289 	sxth.w	r2, r9
 801798e:	428a      	cmp	r2, r1
 8017990:	da15      	bge.n	80179be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017992:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017996:	eba3 0309 	sub.w	r3, r3, r9
 801799a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801799e:	f8ad 1014 	strh.w	r1, [sp, #20]
 80179a2:	4631      	mov	r1, r6
 80179a4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80179a8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80179ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80179b0:	69ea      	ldr	r2, [r5, #28]
 80179b2:	e001      	b.n	80179b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80179b4:	69ea      	ldr	r2, [r5, #28]
 80179b6:	4621      	mov	r1, r4
 80179b8:	4640      	mov	r0, r8
 80179ba:	f7ff ff2b 	bl	8017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80179be:	4628      	mov	r0, r5
 80179c0:	f7ff fe94 	bl	80176ec <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80179c4:	6861      	ldr	r1, [r4, #4]
 80179c6:	4602      	mov	r2, r0
 80179c8:	4633      	mov	r3, r6
 80179ca:	6820      	ldr	r0, [r4, #0]
 80179cc:	c303      	stmia	r3!, {r0, r1}
 80179ce:	4611      	mov	r1, r2
 80179d0:	4630      	mov	r0, r6
 80179d2:	f7fc fa71 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 80179d6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	f77f af33 	ble.w	8017846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80179e0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	f77f af2e 	ble.w	8017846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80179ea:	4628      	mov	r0, r5
 80179ec:	f7ff fe9a 	bl	8017724 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80179f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80179f4:	1a18      	subs	r0, r3, r0
 80179f6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80179fa:	4628      	mov	r0, r5
 80179fc:	f7ff fea6 	bl	801774c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017a00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017a04:	4631      	mov	r1, r6
 8017a06:	1a18      	subs	r0, r3, r0
 8017a08:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	682b      	ldr	r3, [r5, #0]
 8017a10:	689b      	ldr	r3, [r3, #8]
 8017a12:	4798      	blx	r3
 8017a14:	e717      	b.n	8017846 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017a16 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017a16:	b570      	push	{r4, r5, r6, lr}
 8017a18:	1d06      	adds	r6, r0, #4
 8017a1a:	b086      	sub	sp, #24
 8017a1c:	460c      	mov	r4, r1
 8017a1e:	2300      	movs	r3, #0
 8017a20:	4631      	mov	r1, r6
 8017a22:	4605      	mov	r5, r0
 8017a24:	a802      	add	r0, sp, #8
 8017a26:	9301      	str	r3, [sp, #4]
 8017a28:	f7ff fca6 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017a30:	8822      	ldrh	r2, [r4, #0]
 8017a32:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017a36:	1ad2      	subs	r2, r2, r3
 8017a38:	8863      	ldrh	r3, [r4, #2]
 8017a3a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017a3e:	1a5b      	subs	r3, r3, r1
 8017a40:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017a44:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017a48:	aa01      	add	r2, sp, #4
 8017a4a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017a54:	a904      	add	r1, sp, #16
 8017a56:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017a5a:	f7fc fb05 	bl	8014068 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017a5e:	9a01      	ldr	r2, [sp, #4]
 8017a60:	b11a      	cbz	r2, 8017a6a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017a62:	4621      	mov	r1, r4
 8017a64:	4628      	mov	r0, r5
 8017a66:	f7ff fed5 	bl	8017814 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017a6a:	b006      	add	sp, #24
 8017a6c:	bd70      	pop	{r4, r5, r6, pc}

08017a6e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017a6e:	4602      	mov	r2, r0
 8017a70:	b530      	push	{r4, r5, lr}
 8017a72:	4604      	mov	r4, r0
 8017a74:	b085      	sub	sp, #20
 8017a76:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	466b      	mov	r3, sp
 8017a7e:	6851      	ldr	r1, [r2, #4]
 8017a80:	c303      	stmia	r3!, {r0, r1}
 8017a82:	4629      	mov	r1, r5
 8017a84:	4668      	mov	r0, sp
 8017a86:	f7fc fa17 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 8017a8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017a8e:	b12b      	cbz	r3, 8017a9c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017a90:	4669      	mov	r1, sp
 8017a92:	4620      	mov	r0, r4
 8017a94:	f7ff ffbf 	bl	8017a16 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017a98:	b005      	add	sp, #20
 8017a9a:	bd30      	pop	{r4, r5, pc}
 8017a9c:	3404      	adds	r4, #4
 8017a9e:	a802      	add	r0, sp, #8
 8017aa0:	4621      	mov	r1, r4
 8017aa2:	f7ff fc69 	bl	8017378 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017aa6:	f8bd 3000 	ldrh.w	r3, [sp]
 8017aaa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017aae:	4669      	mov	r1, sp
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	1a9b      	subs	r3, r3, r2
 8017ab4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017ab8:	f8ad 3000 	strh.w	r3, [sp]
 8017abc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017ac0:	1a9b      	subs	r3, r3, r2
 8017ac2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017ac6:	f7fc fa96 	bl	8013ff6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017aca:	e7e5      	b.n	8017a98 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017acc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017acc:	460b      	mov	r3, r1
 8017ace:	680a      	ldr	r2, [r1, #0]
 8017ad0:	1d01      	adds	r1, r0, #4
 8017ad2:	6992      	ldr	r2, [r2, #24]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	4710      	bx	r2

08017ad8 <_ZN8touchgfx12TextProviderC1Ev>:
 8017ad8:	b538      	push	{r3, r4, r5, lr}
 8017ada:	2500      	movs	r5, #0
 8017adc:	2302      	movs	r3, #2
 8017ade:	4604      	mov	r4, r0
 8017ae0:	220e      	movs	r2, #14
 8017ae2:	7403      	strb	r3, [r0, #16]
 8017ae4:	4629      	mov	r1, r5
 8017ae6:	6145      	str	r5, [r0, #20]
 8017ae8:	7605      	strb	r5, [r0, #24]
 8017aea:	83c5      	strh	r5, [r0, #30]
 8017aec:	8405      	strh	r5, [r0, #32]
 8017aee:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017af0:	8705      	strh	r5, [r0, #56]	; 0x38
 8017af2:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8017af4:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8017af8:	e9c0 5500 	strd	r5, r5, [r0]
 8017afc:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8017b00:	304c      	adds	r0, #76	; 0x4c
 8017b02:	f00c ff25 	bl	8024950 <memset>
 8017b06:	2301      	movs	r3, #1
 8017b08:	4620      	mov	r0, r4
 8017b0a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8017b0e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017b12:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8017b16:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8017b1a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8017b1e:	f7f6 f935 	bl	800dd8c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017b22:	4620      	mov	r0, r4
 8017b24:	bd38      	pop	{r3, r4, r5, pc}

08017b26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017b26:	b530      	push	{r4, r5, lr}
 8017b28:	2500      	movs	r5, #0
 8017b2a:	2401      	movs	r4, #1
 8017b2c:	6843      	ldr	r3, [r0, #4]
 8017b2e:	b913      	cbnz	r3, 8017b36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017b30:	6803      	ldr	r3, [r0, #0]
 8017b32:	b313      	cbz	r3, 8017b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017b34:	6043      	str	r3, [r0, #4]
 8017b36:	7e03      	ldrb	r3, [r0, #24]
 8017b38:	b143      	cbz	r3, 8017b4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017b3a:	6943      	ldr	r3, [r0, #20]
 8017b3c:	b12b      	cbz	r3, 8017b4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b3e:	881a      	ldrh	r2, [r3, #0]
 8017b40:	b11a      	cbz	r2, 8017b4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017b42:	1c9a      	adds	r2, r3, #2
 8017b44:	6142      	str	r2, [r0, #20]
 8017b46:	8818      	ldrh	r0, [r3, #0]
 8017b48:	bd30      	pop	{r4, r5, pc}
 8017b4a:	7605      	strb	r5, [r0, #24]
 8017b4c:	6843      	ldr	r3, [r0, #4]
 8017b4e:	8819      	ldrh	r1, [r3, #0]
 8017b50:	b199      	cbz	r1, 8017b7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017b52:	1c9a      	adds	r2, r3, #2
 8017b54:	2902      	cmp	r1, #2
 8017b56:	6042      	str	r2, [r0, #4]
 8017b58:	d1f5      	bne.n	8017b46 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017b5a:	7c03      	ldrb	r3, [r0, #16]
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d8e5      	bhi.n	8017b2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b60:	1c5a      	adds	r2, r3, #1
 8017b62:	3302      	adds	r3, #2
 8017b64:	7402      	strb	r2, [r0, #16]
 8017b66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017b6a:	6143      	str	r3, [r0, #20]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d0dd      	beq.n	8017b2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b70:	881b      	ldrh	r3, [r3, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d0da      	beq.n	8017b2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b76:	7604      	strb	r4, [r0, #24]
 8017b78:	e7d8      	b.n	8017b2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	e7e4      	b.n	8017b48 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017b7e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017b7e:	6001      	str	r1, [r0, #0]
 8017b80:	2100      	movs	r1, #0
 8017b82:	b430      	push	{r4, r5}
 8017b84:	6041      	str	r1, [r0, #4]
 8017b86:	6815      	ldr	r5, [r2, #0]
 8017b88:	6085      	str	r5, [r0, #8]
 8017b8a:	6852      	ldr	r2, [r2, #4]
 8017b8c:	6443      	str	r3, [r0, #68]	; 0x44
 8017b8e:	9b02      	ldr	r3, [sp, #8]
 8017b90:	60c2      	str	r2, [r0, #12]
 8017b92:	7401      	strb	r1, [r0, #16]
 8017b94:	6141      	str	r1, [r0, #20]
 8017b96:	7601      	strb	r1, [r0, #24]
 8017b98:	8701      	strh	r1, [r0, #56]	; 0x38
 8017b9a:	8401      	strh	r1, [r0, #32]
 8017b9c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8017ba0:	6483      	str	r3, [r0, #72]	; 0x48
 8017ba2:	bc30      	pop	{r4, r5}
 8017ba4:	f7f6 b8f2 	b.w	800dd8c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017ba8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017baa:	4605      	mov	r5, r0
 8017bac:	4608      	mov	r0, r1
 8017bae:	b1f1      	cbz	r1, 8017bee <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017bb0:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	f101 0708 	add.w	r7, r1, #8
 8017bba:	4622      	mov	r2, r4
 8017bbc:	6818      	ldr	r0, [r3, #0]
 8017bbe:	3308      	adds	r3, #8
 8017bc0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017bc4:	4626      	mov	r6, r4
 8017bc6:	42bb      	cmp	r3, r7
 8017bc8:	c603      	stmia	r6!, {r0, r1}
 8017bca:	4634      	mov	r4, r6
 8017bcc:	d1f6      	bne.n	8017bbc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	6030      	str	r0, [r6, #0]
 8017bd2:	4610      	mov	r0, r2
 8017bd4:	889b      	ldrh	r3, [r3, #4]
 8017bd6:	80b3      	strh	r3, [r6, #4]
 8017bd8:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8017bdc:	015b      	lsls	r3, r3, #5
 8017bde:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017be2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8017be6:	430b      	orrs	r3, r1
 8017be8:	425b      	negs	r3, r3
 8017bea:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8017bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017bf0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	460c      	mov	r4, r1
 8017bf4:	6811      	ldr	r1, [r2, #0]
 8017bf6:	4610      	mov	r0, r2
 8017bf8:	68cd      	ldr	r5, [r1, #12]
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	47a8      	blx	r5
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	bf08      	it	eq
 8017c02:	4620      	moveq	r0, r4
 8017c04:	bd38      	pop	{r3, r4, r5, pc}
	...

08017c08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0a:	4604      	mov	r4, r0
 8017c0c:	4615      	mov	r5, r2
 8017c0e:	4608      	mov	r0, r1
 8017c10:	b93a      	cbnz	r2, 8017c22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8017c12:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017c16:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8017c1a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017c1e:	4628      	mov	r0, r5
 8017c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c22:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8017c26:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8017c2a:	8893      	ldrh	r3, [r2, #4]
 8017c2c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8017c30:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017c34:	79ee      	ldrb	r6, [r5, #7]
 8017c36:	4316      	orrs	r6, r2
 8017c38:	19da      	adds	r2, r3, r7
 8017c3a:	b291      	uxth	r1, r2
 8017c3c:	b2b7      	uxth	r7, r6
 8017c3e:	291d      	cmp	r1, #29
 8017c40:	d87b      	bhi.n	8017d3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017c42:	2201      	movs	r2, #1
 8017c44:	10f6      	asrs	r6, r6, #3
 8017c46:	408a      	lsls	r2, r1
 8017c48:	4974      	ldr	r1, [pc, #464]	; (8017e1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8017c4a:	420a      	tst	r2, r1
 8017c4c:	d12e      	bne.n	8017cac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017c4e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8017c52:	d072      	beq.n	8017d3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8017c54:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8017c58:	462b      	mov	r3, r5
 8017c5a:	f105 0e08 	add.w	lr, r5, #8
 8017c5e:	4615      	mov	r5, r2
 8017c60:	6818      	ldr	r0, [r3, #0]
 8017c62:	3308      	adds	r3, #8
 8017c64:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017c68:	4694      	mov	ip, r2
 8017c6a:	4573      	cmp	r3, lr
 8017c6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017c70:	4662      	mov	r2, ip
 8017c72:	d1f5      	bne.n	8017c60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017c74:	6818      	ldr	r0, [r3, #0]
 8017c76:	f8cc 0000 	str.w	r0, [ip]
 8017c7a:	889b      	ldrh	r3, [r3, #4]
 8017c7c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017c80:	b2b3      	uxth	r3, r6
 8017c82:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017c86:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8017c8a:	1aca      	subs	r2, r1, r3
 8017c8c:	1bcf      	subs	r7, r1, r7
 8017c8e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8017c92:	b292      	uxth	r2, r2
 8017c94:	1afb      	subs	r3, r7, r3
 8017c96:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8017c9a:	10d2      	asrs	r2, r2, #3
 8017c9c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8017ca0:	4302      	orrs	r2, r0
 8017ca2:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8017ca6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8017caa:	e7b8      	b.n	8017c1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017cac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017cae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017cb2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8017cb4:	f640 6333 	movw	r3, #3635	; 0xe33
 8017cb8:	4299      	cmp	r1, r3
 8017cba:	d110      	bne.n	8017cde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8017cbc:	6803      	ldr	r3, [r0, #0]
 8017cbe:	68db      	ldr	r3, [r3, #12]
 8017cc0:	4798      	blx	r3
 8017cc2:	7b41      	ldrb	r1, [r0, #13]
 8017cc4:	00cb      	lsls	r3, r1, #3
 8017cc6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017cca:	7a03      	ldrb	r3, [r0, #8]
 8017ccc:	0648      	lsls	r0, r1, #25
 8017cce:	ea43 0302 	orr.w	r3, r3, r2
 8017cd2:	bf44      	itt	mi
 8017cd4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017cd8:	b21b      	sxthmi	r3, r3
 8017cda:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017cde:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8017ce2:	462a      	mov	r2, r5
 8017ce4:	f105 0c08 	add.w	ip, r5, #8
 8017ce8:	443b      	add	r3, r7
 8017cea:	4433      	add	r3, r6
 8017cec:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	4635      	mov	r5, r6
 8017cf4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017cf8:	6810      	ldr	r0, [r2, #0]
 8017cfa:	3208      	adds	r2, #8
 8017cfc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8017d00:	4637      	mov	r7, r6
 8017d02:	4562      	cmp	r2, ip
 8017d04:	c703      	stmia	r7!, {r0, r1}
 8017d06:	463e      	mov	r6, r7
 8017d08:	d1f6      	bne.n	8017cf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8017d0a:	6810      	ldr	r0, [r2, #0]
 8017d0c:	6038      	str	r0, [r7, #0]
 8017d0e:	8892      	ldrh	r2, [r2, #4]
 8017d10:	80ba      	strh	r2, [r7, #4]
 8017d12:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8017d16:	10db      	asrs	r3, r3, #3
 8017d18:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8017d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8017d24:	4313      	orrs	r3, r2
 8017d26:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8017d2a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8017d2e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8017d32:	1a9b      	subs	r3, r3, r2
 8017d34:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8017d38:	e771      	b.n	8017c1e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017d3a:	f023 0204 	bic.w	r2, r3, #4
 8017d3e:	f640 611b 	movw	r1, #3611	; 0xe1b
 8017d42:	428a      	cmp	r2, r1
 8017d44:	d003      	beq.n	8017d4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8017d46:	f640 621d 	movw	r2, #3613	; 0xe1d
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d120      	bne.n	8017d90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8017d4e:	3b01      	subs	r3, #1
 8017d50:	4602      	mov	r2, r0
 8017d52:	4629      	mov	r1, r5
 8017d54:	4620      	mov	r0, r4
 8017d56:	b29b      	uxth	r3, r3
 8017d58:	f7ff ff4a 	bl	8017bf0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017d5c:	7b41      	ldrb	r1, [r0, #13]
 8017d5e:	00cb      	lsls	r3, r1, #3
 8017d60:	0649      	lsls	r1, r1, #25
 8017d62:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017d66:	7a03      	ldrb	r3, [r0, #8]
 8017d68:	ea43 0302 	orr.w	r3, r3, r2
 8017d6c:	bf44      	itt	mi
 8017d6e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017d72:	b21b      	sxthmi	r3, r3
 8017d74:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017d78:	7b6b      	ldrb	r3, [r5, #13]
 8017d7a:	7aaa      	ldrb	r2, [r5, #10]
 8017d7c:	005b      	lsls	r3, r3, #1
 8017d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d82:	4313      	orrs	r3, r2
 8017d84:	115a      	asrs	r2, r3, #5
 8017d86:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017d8a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017d8e:	e035      	b.n	8017dfc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8017d90:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017d94:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8017d98:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8017d9c:	7a2a      	ldrb	r2, [r5, #8]
 8017d9e:	ea42 0201 	orr.w	r2, r2, r1
 8017da2:	f640 6109 	movw	r1, #3593	; 0xe09
 8017da6:	bf1c      	itt	ne
 8017da8:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8017dac:	b212      	sxthne	r2, r2
 8017dae:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8017db2:	f023 0210 	bic.w	r2, r3, #16
 8017db6:	428a      	cmp	r2, r1
 8017db8:	d003      	beq.n	8017dc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8017dba:	f640 6213 	movw	r2, #3603	; 0xe13
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d129      	bne.n	8017e16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8017dc2:	7b6e      	ldrb	r6, [r5, #13]
 8017dc4:	4629      	mov	r1, r5
 8017dc6:	0076      	lsls	r6, r6, #1
 8017dc8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8017dcc:	7aae      	ldrb	r6, [r5, #10]
 8017dce:	4316      	orrs	r6, r2
 8017dd0:	f640 6213 	movw	r2, #3603	; 0xe13
 8017dd4:	4293      	cmp	r3, r2
 8017dd6:	4602      	mov	r2, r0
 8017dd8:	4620      	mov	r0, r4
 8017dda:	bf16      	itet	ne
 8017ddc:	f103 33ff 	addne.w	r3, r3, #4294967295
 8017de0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8017de4:	b29b      	uxthne	r3, r3
 8017de6:	f7ff ff03 	bl	8017bf0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017dea:	7b43      	ldrb	r3, [r0, #13]
 8017dec:	7a82      	ldrb	r2, [r0, #10]
 8017dee:	005b      	lsls	r3, r3, #1
 8017df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017df4:	4313      	orrs	r3, r2
 8017df6:	1af6      	subs	r6, r6, r3
 8017df8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8017dfc:	7b69      	ldrb	r1, [r5, #13]
 8017dfe:	00cb      	lsls	r3, r1, #3
 8017e00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017e04:	7a2b      	ldrb	r3, [r5, #8]
 8017e06:	4313      	orrs	r3, r2
 8017e08:	064a      	lsls	r2, r1, #25
 8017e0a:	bf44      	itt	mi
 8017e0c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017e10:	b21b      	sxthmi	r3, r3
 8017e12:	1bdb      	subs	r3, r3, r7
 8017e14:	e747      	b.n	8017ca6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8017e16:	2300      	movs	r3, #0
 8017e18:	e7b7      	b.n	8017d8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8017e1a:	bf00      	nop
 8017e1c:	3fc00079 	.word	0x3fc00079

08017e20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8017e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e24:	4604      	mov	r4, r0
 8017e26:	b942      	cbnz	r2, 8017e3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8017e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017e2c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8017e30:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8017e34:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8017e38:	e047      	b.n	8017eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017e3a:	7b51      	ldrb	r1, [r2, #13]
 8017e3c:	8893      	ldrh	r3, [r2, #4]
 8017e3e:	010d      	lsls	r5, r1, #4
 8017e40:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8017e44:	79d5      	ldrb	r5, [r2, #7]
 8017e46:	4305      	orrs	r5, r0
 8017e48:	2d04      	cmp	r5, #4
 8017e4a:	bfcc      	ite	gt
 8017e4c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017e50:	f04f 0e01 	movle.w	lr, #1
 8017e54:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8017e58:	f200 80ab 	bhi.w	8017fb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017e5c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8017e60:	4283      	cmp	r3, r0
 8017e62:	d216      	bcs.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017e64:	f240 605b 	movw	r0, #1627	; 0x65b
 8017e68:	4283      	cmp	r3, r0
 8017e6a:	d859      	bhi.n	8017f20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017e6c:	f240 6057 	movw	r0, #1623	; 0x657
 8017e70:	4283      	cmp	r3, r0
 8017e72:	d20e      	bcs.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017e74:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017e78:	d24a      	bcs.n	8017f10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8017e7a:	f240 604e 	movw	r0, #1614	; 0x64e
 8017e7e:	4283      	cmp	r3, r0
 8017e80:	d207      	bcs.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017e82:	f240 601a 	movw	r0, #1562	; 0x61a
 8017e86:	4283      	cmp	r3, r0
 8017e88:	d02a      	beq.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017e8a:	d821      	bhi.n	8017ed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017e8c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8017e90:	d35b      	bcc.n	8017f4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017e92:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8017e96:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017e9a:	f040 80d0 	bne.w	801803e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017e9e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8017ea2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017ea6:	f040 80ca 	bne.w	801803e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017eaa:	00cb      	lsls	r3, r1, #3
 8017eac:	0649      	lsls	r1, r1, #25
 8017eae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017eb2:	7a13      	ldrb	r3, [r2, #8]
 8017eb4:	ea43 0300 	orr.w	r3, r3, r0
 8017eb8:	bf44      	itt	mi
 8017eba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017ebe:	b21b      	sxthmi	r3, r3
 8017ec0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017ec4:	1b5d      	subs	r5, r3, r5
 8017ec6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017eca:	4610      	mov	r0, r2
 8017ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ed0:	f240 604b 	movw	r0, #1611	; 0x64b
 8017ed4:	4283      	cmp	r3, r0
 8017ed6:	d338      	bcc.n	8017f4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017ed8:	f240 604c 	movw	r0, #1612	; 0x64c
 8017edc:	4283      	cmp	r3, r0
 8017ede:	d9d8      	bls.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017ee0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8017ee4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8017ee8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8017eec:	f040 80f3 	bne.w	80180d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8017ef0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8017ef4:	f040 80ef 	bne.w	80180d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8017ef8:	00cb      	lsls	r3, r1, #3
 8017efa:	064e      	lsls	r6, r1, #25
 8017efc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017f00:	7a13      	ldrb	r3, [r2, #8]
 8017f02:	ea43 0300 	orr.w	r3, r3, r0
 8017f06:	bf44      	itt	mi
 8017f08:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017f0c:	b21b      	sxthmi	r3, r3
 8017f0e:	e7d9      	b.n	8017ec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8017f10:	f240 6054 	movw	r0, #1620	; 0x654
 8017f14:	4283      	cmp	r3, r0
 8017f16:	d8e3      	bhi.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017f18:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8017f1c:	d9e0      	bls.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017f1e:	e7b8      	b.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017f20:	f240 6074 	movw	r0, #1652	; 0x674
 8017f24:	4283      	cmp	r3, r0
 8017f26:	d0b4      	beq.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017f28:	d82d      	bhi.n	8017f86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8017f2a:	f240 605e 	movw	r0, #1630	; 0x65e
 8017f2e:	4283      	cmp	r3, r0
 8017f30:	d804      	bhi.n	8017f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8017f32:	f240 605d 	movw	r0, #1629	; 0x65d
 8017f36:	4283      	cmp	r3, r0
 8017f38:	d3d2      	bcc.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017f3a:	e7aa      	b.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017f3c:	f240 605f 	movw	r0, #1631	; 0x65f
 8017f40:	4283      	cmp	r3, r0
 8017f42:	d0cd      	beq.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017f44:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8017f48:	d0a3      	beq.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017f4a:	00cb      	lsls	r3, r1, #3
 8017f4c:	0649      	lsls	r1, r1, #25
 8017f4e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8017f52:	7a13      	ldrb	r3, [r2, #8]
 8017f54:	ea43 0300 	orr.w	r3, r3, r0
 8017f58:	bf44      	itt	mi
 8017f5a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017f5e:	b21b      	sxthmi	r3, r3
 8017f60:	1b5d      	subs	r5, r3, r5
 8017f62:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8017f66:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8017f6a:	7b53      	ldrb	r3, [r2, #13]
 8017f6c:	015b      	lsls	r3, r3, #5
 8017f6e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017f72:	7993      	ldrb	r3, [r2, #6]
 8017f74:	430b      	orrs	r3, r1
 8017f76:	2105      	movs	r1, #5
 8017f78:	005b      	lsls	r3, r3, #1
 8017f7a:	fb93 f3f1 	sdiv	r3, r3, r1
 8017f7e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017f82:	440b      	add	r3, r1
 8017f84:	e756      	b.n	8017e34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8017f86:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8017f8a:	4283      	cmp	r3, r0
 8017f8c:	d809      	bhi.n	8017fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8017f8e:	f240 60df 	movw	r0, #1759	; 0x6df
 8017f92:	4283      	cmp	r3, r0
 8017f94:	f4bf af7d 	bcs.w	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017f98:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8017f9c:	2b05      	cmp	r3, #5
 8017f9e:	d8d4      	bhi.n	8017f4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017fa0:	e777      	b.n	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fa2:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8017fa6:	4283      	cmp	r3, r0
 8017fa8:	d09a      	beq.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017faa:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8017fae:	4283      	cmp	r3, r0
 8017fb0:	e7ca      	b.n	8017f48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017fb2:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8017fb6:	d22b      	bcs.n	8018010 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8017fb8:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8017fbc:	4283      	cmp	r3, r0
 8017fbe:	d28f      	bcs.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017fc0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017fc4:	4283      	cmp	r3, r0
 8017fc6:	d816      	bhi.n	8017ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8017fc8:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8017fcc:	4283      	cmp	r3, r0
 8017fce:	f4bf af60 	bcs.w	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fd2:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8017fd6:	4283      	cmp	r3, r0
 8017fd8:	d80a      	bhi.n	8017ff0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8017fda:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8017fde:	4283      	cmp	r3, r0
 8017fe0:	f4bf af57 	bcs.w	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017fe4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8017fe8:	4283      	cmp	r3, r0
 8017fea:	f43f af79 	beq.w	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017fee:	e7ac      	b.n	8017f4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017ff0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8017ff4:	e7f8      	b.n	8017fe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8017ff6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8017ffa:	4283      	cmp	r3, r0
 8017ffc:	d802      	bhi.n	8018004 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8017ffe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018002:	e798      	b.n	8017f36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018004:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018008:	4283      	cmp	r3, r0
 801800a:	f47f af42 	bne.w	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801800e:	e767      	b.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018010:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018014:	4283      	cmp	r3, r0
 8018016:	f43f af63 	beq.w	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801801a:	d802      	bhi.n	8018022 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801801c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018020:	e7f2      	b.n	8018008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018022:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018026:	4283      	cmp	r3, r0
 8018028:	d805      	bhi.n	8018036 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801802a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801802e:	4283      	cmp	r3, r0
 8018030:	f4ff af2f 	bcc.w	8017e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018034:	e754      	b.n	8017ee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018036:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801803a:	4283      	cmp	r3, r0
 801803c:	e7af      	b.n	8017f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801803e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018042:	4617      	mov	r7, r2
 8018044:	f102 0808 	add.w	r8, r2, #8
 8018048:	4666      	mov	r6, ip
 801804a:	6838      	ldr	r0, [r7, #0]
 801804c:	3708      	adds	r7, #8
 801804e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018052:	46e6      	mov	lr, ip
 8018054:	4547      	cmp	r7, r8
 8018056:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801805a:	46f4      	mov	ip, lr
 801805c:	d1f5      	bne.n	801804a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801805e:	6838      	ldr	r0, [r7, #0]
 8018060:	f8ce 0000 	str.w	r0, [lr]
 8018064:	88b9      	ldrh	r1, [r7, #4]
 8018066:	f8ae 1004 	strh.w	r1, [lr, #4]
 801806a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801806e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018072:	d009      	beq.n	8018088 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8018074:	7b51      	ldrb	r1, [r2, #13]
 8018076:	7992      	ldrb	r2, [r2, #6]
 8018078:	0149      	lsls	r1, r1, #5
 801807a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801807e:	4311      	orrs	r1, r2
 8018080:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018084:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018088:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801808c:	b2ad      	uxth	r5, r5
 801808e:	d00d      	beq.n	80180ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018090:	442b      	add	r3, r5
 8018092:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018096:	b29b      	uxth	r3, r3
 8018098:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801809c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80180a0:	10db      	asrs	r3, r3, #3
 80180a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80180a6:	4313      	orrs	r3, r2
 80180a8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80180ac:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80180b0:	00cb      	lsls	r3, r1, #3
 80180b2:	064f      	lsls	r7, r1, #25
 80180b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80180b8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80180bc:	ea43 0302 	orr.w	r3, r3, r2
 80180c0:	bf44      	itt	mi
 80180c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80180c6:	b21b      	sxthmi	r3, r3
 80180c8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80180cc:	1b5b      	subs	r3, r3, r5
 80180ce:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80180d2:	4632      	mov	r2, r6
 80180d4:	e6f9      	b.n	8017eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80180d6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80180da:	4617      	mov	r7, r2
 80180dc:	f102 0908 	add.w	r9, r2, #8
 80180e0:	4666      	mov	r6, ip
 80180e2:	6838      	ldr	r0, [r7, #0]
 80180e4:	3708      	adds	r7, #8
 80180e6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80180ea:	46e0      	mov	r8, ip
 80180ec:	454f      	cmp	r7, r9
 80180ee:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80180f2:	46c4      	mov	ip, r8
 80180f4:	d1f5      	bne.n	80180e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80180f6:	6838      	ldr	r0, [r7, #0]
 80180f8:	f8c8 0000 	str.w	r0, [r8]
 80180fc:	88b9      	ldrh	r1, [r7, #4]
 80180fe:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018102:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018106:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801810a:	d009      	beq.n	8018120 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801810c:	7b51      	ldrb	r1, [r2, #13]
 801810e:	7992      	ldrb	r2, [r2, #6]
 8018110:	0149      	lsls	r1, r1, #5
 8018112:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018116:	4311      	orrs	r1, r2
 8018118:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801811c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018120:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018124:	d00e      	beq.n	8018144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018126:	eba3 030e 	sub.w	r3, r3, lr
 801812a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801812e:	b29b      	uxth	r3, r3
 8018130:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018134:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018138:	10db      	asrs	r3, r3, #3
 801813a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801813e:	4313      	orrs	r3, r2
 8018140:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018144:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018148:	00cb      	lsls	r3, r1, #3
 801814a:	0648      	lsls	r0, r1, #25
 801814c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018150:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018154:	ea43 0302 	orr.w	r3, r3, r2
 8018158:	bf44      	itt	mi
 801815a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801815e:	b21b      	sxthmi	r3, r3
 8018160:	1b5d      	subs	r5, r3, r5
 8018162:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018166:	e7b4      	b.n	80180d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018168 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801816c:	461e      	mov	r6, r3
 801816e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018170:	4604      	mov	r4, r0
 8018172:	4617      	mov	r7, r2
 8018174:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018178:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801817c:	f7f5 fd60 	bl	800dc40 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018180:	4605      	mov	r5, r0
 8018182:	b918      	cbnz	r0, 801818c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018184:	6030      	str	r0, [r6, #0]
 8018186:	4628      	mov	r0, r5
 8018188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	4601      	mov	r1, r0
 8018190:	4638      	mov	r0, r7
 8018192:	68db      	ldr	r3, [r3, #12]
 8018194:	4798      	blx	r3
 8018196:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801819a:	4602      	mov	r2, r0
 801819c:	6030      	str	r0, [r6, #0]
 801819e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80181a2:	d213      	bcs.n	80181cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80181a4:	4643      	mov	r3, r8
 80181a6:	4639      	mov	r1, r7
 80181a8:	4620      	mov	r0, r4
 80181aa:	f7ff fe39 	bl	8017e20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80181ae:	6030      	str	r0, [r6, #0]
 80181b0:	6833      	ldr	r3, [r6, #0]
 80181b2:	b143      	cbz	r3, 80181c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80181b4:	7b5a      	ldrb	r2, [r3, #13]
 80181b6:	7a9b      	ldrb	r3, [r3, #10]
 80181b8:	0052      	lsls	r2, r2, #1
 80181ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80181be:	4313      	orrs	r3, r2
 80181c0:	bf0c      	ite	eq
 80181c2:	2301      	moveq	r3, #1
 80181c4:	2300      	movne	r3, #0
 80181c6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80181ca:	e7dc      	b.n	8018186 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80181cc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	2b7f      	cmp	r3, #127	; 0x7f
 80181d4:	d804      	bhi.n	80181e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80181d6:	4639      	mov	r1, r7
 80181d8:	4620      	mov	r0, r4
 80181da:	f7ff fd15 	bl	8017c08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80181de:	e7e6      	b.n	80181ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80181e0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d0e3      	beq.n	80181b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80181e8:	f640 1302 	movw	r3, #2306	; 0x902
 80181ec:	429d      	cmp	r5, r3
 80181ee:	d1df      	bne.n	80181b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80181f0:	4601      	mov	r1, r0
 80181f2:	4620      	mov	r0, r4
 80181f4:	f7ff fcd8 	bl	8017ba8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80181f8:	e7d9      	b.n	80181ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080181fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80181fa:	b510      	push	{r4, lr}
 80181fc:	4604      	mov	r4, r0
 80181fe:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018202:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018204:	b1e1      	cbz	r1, 8018240 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018206:	2b0a      	cmp	r3, #10
 8018208:	d02d      	beq.n	8018266 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801820a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801820c:	3901      	subs	r1, #1
 801820e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018212:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8018214:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8018218:	1c51      	adds	r1, r2, #1
 801821a:	b289      	uxth	r1, r1
 801821c:	2901      	cmp	r1, #1
 801821e:	bf8a      	itet	hi
 8018220:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018224:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8018226:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8018228:	1c5a      	adds	r2, r3, #1
 801822a:	8722      	strh	r2, [r4, #56]	; 0x38
 801822c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801822e:	4413      	add	r3, r2
 8018230:	b29b      	uxth	r3, r3
 8018232:	2b09      	cmp	r3, #9
 8018234:	bf88      	it	hi
 8018236:	3b0a      	subhi	r3, #10
 8018238:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801823c:	8458      	strh	r0, [r3, #34]	; 0x22
 801823e:	e7de      	b.n	80181fe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018240:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018242:	2b0a      	cmp	r3, #10
 8018244:	d00f      	beq.n	8018266 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8018246:	4620      	mov	r0, r4
 8018248:	f7ff fc6d 	bl	8017b26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801824c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801824e:	1c5a      	adds	r2, r3, #1
 8018250:	8722      	strh	r2, [r4, #56]	; 0x38
 8018252:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018254:	4413      	add	r3, r2
 8018256:	b29b      	uxth	r3, r3
 8018258:	2b09      	cmp	r3, #9
 801825a:	bf88      	it	hi
 801825c:	3b0a      	subhi	r3, #10
 801825e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018262:	8458      	strh	r0, [r3, #34]	; 0x22
 8018264:	e7ec      	b.n	8018240 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018266:	bd10      	pop	{r4, pc}

08018268 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018268:	b538      	push	{r3, r4, r5, lr}
 801826a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801826c:	4604      	mov	r4, r0
 801826e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018272:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018274:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018276:	3a01      	subs	r2, #1
 8018278:	8702      	strh	r2, [r0, #56]	; 0x38
 801827a:	1c5a      	adds	r2, r3, #1
 801827c:	b292      	uxth	r2, r2
 801827e:	2a09      	cmp	r2, #9
 8018280:	bf8a      	itet	hi
 8018282:	3b09      	subhi	r3, #9
 8018284:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018286:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018288:	f7ff ffb7 	bl	80181fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801828c:	8c23      	ldrh	r3, [r4, #32]
 801828e:	2b01      	cmp	r3, #1
 8018290:	bf9c      	itt	ls
 8018292:	3301      	addls	r3, #1
 8018294:	8423      	strhls	r3, [r4, #32]
 8018296:	8be3      	ldrh	r3, [r4, #30]
 8018298:	b90b      	cbnz	r3, 801829e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801829a:	2302      	movs	r3, #2
 801829c:	83e3      	strh	r3, [r4, #30]
 801829e:	8be3      	ldrh	r3, [r4, #30]
 80182a0:	4628      	mov	r0, r5
 80182a2:	3b01      	subs	r3, #1
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	83e3      	strh	r3, [r4, #30]
 80182a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80182ac:	8365      	strh	r5, [r4, #26]
 80182ae:	bd38      	pop	{r3, r4, r5, pc}

080182b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80182b0:	428a      	cmp	r2, r1
 80182b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182b6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80182b8:	d932      	bls.n	8018320 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80182ba:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80182bc:	1a54      	subs	r4, r2, r1
 80182be:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80182c2:	19ee      	adds	r6, r5, r7
 80182c4:	fa1f fe84 	uxth.w	lr, r4
 80182c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80182cc:	3e01      	subs	r6, #1
 80182ce:	b2b4      	uxth	r4, r6
 80182d0:	eba4 090e 	sub.w	r9, r4, lr
 80182d4:	fa1f f989 	uxth.w	r9, r9
 80182d8:	2c09      	cmp	r4, #9
 80182da:	4626      	mov	r6, r4
 80182dc:	bf88      	it	hi
 80182de:	f1a4 060a 	subhi.w	r6, r4, #10
 80182e2:	f1bc 0f00 	cmp.w	ip, #0
 80182e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80182ea:	bf08      	it	eq
 80182ec:	f04f 0c02 	moveq.w	ip, #2
 80182f0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80182f4:	b2a4      	uxth	r4, r4
 80182f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80182fa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80182fe:	454c      	cmp	r4, r9
 8018300:	fa1f fc8c 	uxth.w	ip, ip
 8018304:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018308:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801830c:	d1e4      	bne.n	80182d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801830e:	eba5 050e 	sub.w	r5, r5, lr
 8018312:	eb0e 0408 	add.w	r4, lr, r8
 8018316:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801831a:	8705      	strh	r5, [r0, #56]	; 0x38
 801831c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018320:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018322:	250a      	movs	r5, #10
 8018324:	1a64      	subs	r4, r4, r1
 8018326:	4439      	add	r1, r7
 8018328:	b289      	uxth	r1, r1
 801832a:	8704      	strh	r4, [r0, #56]	; 0x38
 801832c:	2909      	cmp	r1, #9
 801832e:	bf88      	it	hi
 8018330:	390a      	subhi	r1, #10
 8018332:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018334:	b18a      	cbz	r2, 801835a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018336:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018338:	3a01      	subs	r2, #1
 801833a:	3101      	adds	r1, #1
 801833c:	b292      	uxth	r2, r2
 801833e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018342:	8701      	strh	r1, [r0, #56]	; 0x38
 8018344:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018346:	b901      	cbnz	r1, 801834a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8018348:	86c5      	strh	r5, [r0, #54]	; 0x36
 801834a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801834c:	3901      	subs	r1, #1
 801834e:	b289      	uxth	r1, r1
 8018350:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018352:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018356:	844c      	strh	r4, [r1, #34]	; 0x22
 8018358:	e7ec      	b.n	8018334 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801835a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801835e:	f7ff bf4c 	b.w	80181fa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018362 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018362:	b570      	push	{r4, r5, r6, lr}
 8018364:	2500      	movs	r5, #0
 8018366:	4295      	cmp	r5, r2
 8018368:	d011      	beq.n	801838e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801836a:	8bc4      	ldrh	r4, [r0, #30]
 801836c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018370:	4414      	add	r4, r2
 8018372:	3c01      	subs	r4, #1
 8018374:	1b64      	subs	r4, r4, r5
 8018376:	b2a4      	uxth	r4, r4
 8018378:	2c01      	cmp	r4, #1
 801837a:	bf88      	it	hi
 801837c:	3c02      	subhi	r4, #2
 801837e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018382:	8b64      	ldrh	r4, [r4, #26]
 8018384:	42b4      	cmp	r4, r6
 8018386:	d117      	bne.n	80183b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018388:	3501      	adds	r5, #1
 801838a:	b2ad      	uxth	r5, r5
 801838c:	e7eb      	b.n	8018366 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801838e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018392:	2400      	movs	r4, #0
 8018394:	4413      	add	r3, r2
 8018396:	b2a2      	uxth	r2, r4
 8018398:	429a      	cmp	r2, r3
 801839a:	da0f      	bge.n	80183bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801839c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801839e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80183a2:	3401      	adds	r4, #1
 80183a4:	4432      	add	r2, r6
 80183a6:	b292      	uxth	r2, r2
 80183a8:	2a09      	cmp	r2, #9
 80183aa:	bf88      	it	hi
 80183ac:	3a0a      	subhi	r2, #10
 80183ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80183b2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80183b4:	42aa      	cmp	r2, r5
 80183b6:	d0ee      	beq.n	8018396 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80183b8:	2000      	movs	r0, #0
 80183ba:	bd70      	pop	{r4, r5, r6, pc}
 80183bc:	2001      	movs	r0, #1
 80183be:	e7fc      	b.n	80183ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080183c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80183c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183c4:	4605      	mov	r5, r0
 80183c6:	4616      	mov	r6, r2
 80183c8:	1c8c      	adds	r4, r1, #2
 80183ca:	8809      	ldrh	r1, [r1, #0]
 80183cc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80183d0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80183d4:	42b3      	cmp	r3, r6
 80183d6:	d124      	bne.n	8018422 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80183d8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80183dc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80183e0:	f001 070f 	and.w	r7, r1, #15
 80183e4:	4652      	mov	r2, sl
 80183e6:	f8cd 8000 	str.w	r8, [sp]
 80183ea:	464b      	mov	r3, r9
 80183ec:	4621      	mov	r1, r4
 80183ee:	4628      	mov	r0, r5
 80183f0:	f7ff ffb7 	bl	8018362 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80183f4:	4683      	mov	fp, r0
 80183f6:	b168      	cbz	r0, 8018414 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80183f8:	eb0a 0109 	add.w	r1, sl, r9
 80183fc:	463a      	mov	r2, r7
 80183fe:	4628      	mov	r0, r5
 8018400:	4441      	add	r1, r8
 8018402:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018406:	4649      	mov	r1, r9
 8018408:	f7ff ff52 	bl	80182b0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801840c:	4658      	mov	r0, fp
 801840e:	b003      	add	sp, #12
 8018410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018414:	eb07 010a 	add.w	r1, r7, sl
 8018418:	4449      	add	r1, r9
 801841a:	4441      	add	r1, r8
 801841c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018420:	e7d2      	b.n	80183c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018422:	f04f 0b00 	mov.w	fp, #0
 8018426:	e7f1      	b.n	801840c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018428 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018428:	b570      	push	{r4, r5, r6, lr}
 801842a:	8810      	ldrh	r0, [r2, #0]
 801842c:	4298      	cmp	r0, r3
 801842e:	d817      	bhi.n	8018460 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018430:	1e48      	subs	r0, r1, #1
 8018432:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018436:	4298      	cmp	r0, r3
 8018438:	d312      	bcc.n	8018460 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801843a:	2400      	movs	r4, #0
 801843c:	428c      	cmp	r4, r1
 801843e:	d20f      	bcs.n	8018460 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018440:	1860      	adds	r0, r4, r1
 8018442:	1040      	asrs	r0, r0, #1
 8018444:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018448:	0085      	lsls	r5, r0, #2
 801844a:	42b3      	cmp	r3, r6
 801844c:	d902      	bls.n	8018454 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801844e:	3001      	adds	r0, #1
 8018450:	b284      	uxth	r4, r0
 8018452:	e7f3      	b.n	801843c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018454:	d201      	bcs.n	801845a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018456:	b281      	uxth	r1, r0
 8018458:	e7f0      	b.n	801843c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801845a:	442a      	add	r2, r5
 801845c:	8850      	ldrh	r0, [r2, #2]
 801845e:	bd70      	pop	{r4, r5, r6, pc}
 8018460:	2000      	movs	r0, #0
 8018462:	e7fc      	b.n	801845e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018464 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018468:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801846a:	4604      	mov	r4, r0
 801846c:	260b      	movs	r6, #11
 801846e:	886f      	ldrh	r7, [r5, #2]
 8018470:	087f      	lsrs	r7, r7, #1
 8018472:	3e01      	subs	r6, #1
 8018474:	d013      	beq.n	801849e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018476:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018478:	462a      	mov	r2, r5
 801847a:	4639      	mov	r1, r7
 801847c:	4620      	mov	r0, r4
 801847e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018482:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018486:	4643      	mov	r3, r8
 8018488:	f7ff ffce 	bl	8018428 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801848c:	b138      	cbz	r0, 801849e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801848e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018492:	4642      	mov	r2, r8
 8018494:	4620      	mov	r0, r4
 8018496:	f7ff ff93 	bl	80183c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801849a:	2800      	cmp	r0, #0
 801849c:	d1e9      	bne.n	8018472 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801849e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080184a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80184a4:	b570      	push	{r4, r5, r6, lr}
 80184a6:	694a      	ldr	r2, [r1, #20]
 80184a8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80184aa:	684b      	ldr	r3, [r1, #4]
 80184ac:	1b54      	subs	r4, r2, r5
 80184ae:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80184b0:	f000 8106 	beq.w	80186c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80184b4:	1b9b      	subs	r3, r3, r6
 80184b6:	d003      	beq.n	80184c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80184b8:	4363      	muls	r3, r4
 80184ba:	2210      	movs	r2, #16
 80184bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80184c0:	680c      	ldr	r4, [r1, #0]
 80184c2:	698a      	ldr	r2, [r1, #24]
 80184c4:	1b65      	subs	r5, r4, r5
 80184c6:	f000 80fd 	beq.w	80186c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80184ca:	1b92      	subs	r2, r2, r6
 80184cc:	d003      	beq.n	80184d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80184ce:	436a      	muls	r2, r5
 80184d0:	2410      	movs	r4, #16
 80184d2:	fb92 f2f4 	sdiv	r2, r2, r4
 80184d6:	1a9b      	subs	r3, r3, r2
 80184d8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018700 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80184dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80184e0:	460a      	mov	r2, r1
 80184e2:	ee07 3a90 	vmov	s15, r3
 80184e6:	f100 040c 	add.w	r4, r0, #12
 80184ea:	4603      	mov	r3, r0
 80184ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80184f0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80184f4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80184f8:	eeb1 6a43 	vneg.f32	s12, s6
 80184fc:	edd2 7a02 	vldr	s15, [r2, #8]
 8018500:	3214      	adds	r2, #20
 8018502:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018506:	ece3 6a01 	vstmia	r3!, {s13}
 801850a:	429c      	cmp	r4, r3
 801850c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018510:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018514:	edc3 7a02 	vstr	s15, [r3, #8]
 8018518:	ed52 7a01 	vldr	s15, [r2, #-4]
 801851c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018520:	edc3 7a05 	vstr	s15, [r3, #20]
 8018524:	d1ea      	bne.n	80184fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018526:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018528:	698b      	ldr	r3, [r1, #24]
 801852a:	edd0 4a02 	vldr	s9, [r0, #8]
 801852e:	1a9b      	subs	r3, r3, r2
 8018530:	edd0 3a00 	vldr	s7, [r0]
 8018534:	edd0 6a01 	vldr	s13, [r0, #4]
 8018538:	ee07 3a90 	vmov	s15, r3
 801853c:	684b      	ldr	r3, [r1, #4]
 801853e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018542:	ed90 5a05 	vldr	s10, [r0, #20]
 8018546:	1a9b      	subs	r3, r3, r2
 8018548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801854c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018550:	ed90 2a03 	vldr	s4, [r0, #12]
 8018554:	ee07 3a10 	vmov	s14, r3
 8018558:	edd0 5a04 	vldr	s11, [r0, #16]
 801855c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018560:	ed90 1a07 	vldr	s2, [r0, #28]
 8018564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018568:	edd0 2a06 	vldr	s5, [r0, #24]
 801856c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018570:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018574:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018578:	ee32 5a45 	vsub.f32	s10, s4, s10
 801857c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018580:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018584:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018588:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801858a:	694a      	ldr	r2, [r1, #20]
 801858c:	1b13      	subs	r3, r2, r4
 801858e:	ee07 3a10 	vmov	s14, r3
 8018592:	680b      	ldr	r3, [r1, #0]
 8018594:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018598:	1b1b      	subs	r3, r3, r4
 801859a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801859e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80185a2:	ee07 3a10 	vmov	s14, r3
 80185a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 80185ae:	eee6 4a87 	vfma.f32	s9, s13, s14
 80185b2:	ee64 4a86 	vmul.f32	s9, s9, s12
 80185b6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80185ba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80185bc:	698b      	ldr	r3, [r1, #24]
 80185be:	1a9b      	subs	r3, r3, r2
 80185c0:	ee06 3a90 	vmov	s13, r3
 80185c4:	684b      	ldr	r3, [r1, #4]
 80185c6:	1a9b      	subs	r3, r3, r2
 80185c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80185cc:	ee07 3a10 	vmov	s14, r3
 80185d0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80185d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185d8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80185dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80185e0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80185e4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80185e8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80185ec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80185ee:	694a      	ldr	r2, [r1, #20]
 80185f0:	1b13      	subs	r3, r2, r4
 80185f2:	ee07 3a10 	vmov	s14, r3
 80185f6:	680b      	ldr	r3, [r1, #0]
 80185f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185fc:	1b1b      	subs	r3, r3, r4
 80185fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018602:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018606:	ee07 3a10 	vmov	s14, r3
 801860a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801860e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018612:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018616:	edd0 5a08 	vldr	s11, [r0, #32]
 801861a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801861e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018622:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018626:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801862a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801862c:	698b      	ldr	r3, [r1, #24]
 801862e:	1a9b      	subs	r3, r3, r2
 8018630:	ee07 3a10 	vmov	s14, r3
 8018634:	684b      	ldr	r3, [r1, #4]
 8018636:	1a9b      	subs	r3, r3, r2
 8018638:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801863c:	ee01 3a90 	vmov	s3, r3
 8018640:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018644:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018648:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801864c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018650:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018654:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018658:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801865c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801865e:	694a      	ldr	r2, [r1, #20]
 8018660:	1b13      	subs	r3, r2, r4
 8018662:	ee03 3a10 	vmov	s6, r3
 8018666:	680b      	ldr	r3, [r1, #0]
 8018668:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801866c:	1b1b      	subs	r3, r3, r4
 801866e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018672:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018676:	ee03 3a10 	vmov	s6, r3
 801867a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801867e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018682:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018686:	ee25 6a86 	vmul.f32	s12, s11, s12
 801868a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801868e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018692:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018696:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869e:	dd13      	ble.n	80186c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80186a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80186a4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80186a8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80186aa:	eee3 7a87 	vfma.f32	s15, s7, s14
 80186ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80186b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186b6:	dd15      	ble.n	80186e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80186b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80186bc:	6403      	str	r3, [r0, #64]	; 0x40
 80186be:	bd70      	pop	{r4, r5, r6, pc}
 80186c0:	4623      	mov	r3, r4
 80186c2:	e6fd      	b.n	80184c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80186c4:	462a      	mov	r2, r5
 80186c6:	e706      	b.n	80184d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80186c8:	d502      	bpl.n	80186d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80186ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80186ce:	e7e9      	b.n	80186a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80186d0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80186d4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80186d8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80186dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e0:	dade      	bge.n	80186a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80186e2:	e7f2      	b.n	80186ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80186e4:	d502      	bpl.n	80186ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80186e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80186ea:	e7e7      	b.n	80186bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80186ec:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80186f0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80186f4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80186f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186fc:	dadc      	bge.n	80186b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80186fe:	e7f2      	b.n	80186e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018700:	3d800000 	.word	0x3d800000

08018704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018708:	2714      	movs	r7, #20
 801870a:	435f      	muls	r7, r3
 801870c:	eb02 0c07 	add.w	ip, r2, r7
 8018710:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018714:	f115 0e0f 	adds.w	lr, r5, #15
 8018718:	f100 80a2 	bmi.w	8018860 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801871c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018720:	9c08      	ldr	r4, [sp, #32]
 8018722:	2614      	movs	r6, #20
 8018724:	f8c0 e014 	str.w	lr, [r0, #20]
 8018728:	4366      	muls	r6, r4
 801872a:	eb02 0806 	add.w	r8, r2, r6
 801872e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018732:	f115 040f 	adds.w	r4, r5, #15
 8018736:	f100 809f 	bmi.w	8018878 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801873a:	1124      	asrs	r4, r4, #4
 801873c:	eba4 040e 	sub.w	r4, r4, lr
 8018740:	6184      	str	r4, [r0, #24]
 8018742:	2c00      	cmp	r4, #0
 8018744:	f000 808a 	beq.w	801885c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018748:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801874c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018750:	5995      	ldr	r5, [r2, r6]
 8018752:	eba4 0809 	sub.w	r8, r4, r9
 8018756:	59d4      	ldr	r4, [r2, r7]
 8018758:	eba5 0a04 	sub.w	sl, r5, r4
 801875c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018760:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018764:	fb0e fe05 	mul.w	lr, lr, r5
 8018768:	fb0a ee19 	mls	lr, sl, r9, lr
 801876c:	fb08 e404 	mla	r4, r8, r4, lr
 8018770:	3c01      	subs	r4, #1
 8018772:	19a4      	adds	r4, r4, r6
 8018774:	f100 808c 	bmi.w	8018890 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018778:	fb94 fef6 	sdiv	lr, r4, r6
 801877c:	fb06 441e 	mls	r4, r6, lr, r4
 8018780:	f8c0 e000 	str.w	lr, [r0]
 8018784:	6104      	str	r4, [r0, #16]
 8018786:	2d00      	cmp	r5, #0
 8018788:	f2c0 8095 	blt.w	80188b6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801878c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018790:	fb06 5514 	mls	r5, r6, r4, r5
 8018794:	6044      	str	r4, [r0, #4]
 8018796:	6085      	str	r5, [r0, #8]
 8018798:	60c6      	str	r6, [r0, #12]
 801879a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801879e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80187a2:	6945      	ldr	r5, [r0, #20]
 80187a4:	59d2      	ldr	r2, [r2, r7]
 80187a6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80187aa:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80188d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80187ae:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80187b2:	ee07 4a10 	vmov	s14, r4
 80187b6:	6804      	ldr	r4, [r0, #0]
 80187b8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80187bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187c0:	ee07 2a90 	vmov	s15, r2
 80187c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80187c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80187d0:	edd3 6a00 	vldr	s13, [r3]
 80187d4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80187d8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80187dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80187e0:	edc0 6a07 	vstr	s13, [r0, #28]
 80187e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80187e8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80187ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80187f0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80187f4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80187f8:	ed80 6a08 	vstr	s12, [r0, #32]
 80187fc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80187fe:	6242      	str	r2, [r0, #36]	; 0x24
 8018800:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018804:	ed93 6a03 	vldr	s12, [r3, #12]
 8018808:	eea5 6a87 	vfma.f32	s12, s11, s14
 801880c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018810:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018814:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018818:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801881c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018820:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018824:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018828:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801882a:	6302      	str	r2, [r0, #48]	; 0x30
 801882c:	ed93 6a06 	vldr	s12, [r3, #24]
 8018830:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018834:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018838:	eeb0 7a46 	vmov.f32	s14, s12
 801883c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018840:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018844:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018848:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801884c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018850:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018854:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018858:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801885a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018860:	2410      	movs	r4, #16
 8018862:	f1c5 0501 	rsb	r5, r5, #1
 8018866:	fb9e fef4 	sdiv	lr, lr, r4
 801886a:	f015 050f 	ands.w	r5, r5, #15
 801886e:	bf18      	it	ne
 8018870:	2501      	movne	r5, #1
 8018872:	ebae 0e05 	sub.w	lr, lr, r5
 8018876:	e753      	b.n	8018720 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018878:	f04f 0910 	mov.w	r9, #16
 801887c:	f1c5 0501 	rsb	r5, r5, #1
 8018880:	fb94 f4f9 	sdiv	r4, r4, r9
 8018884:	f015 050f 	ands.w	r5, r5, #15
 8018888:	bf18      	it	ne
 801888a:	2501      	movne	r5, #1
 801888c:	1b64      	subs	r4, r4, r5
 801888e:	e755      	b.n	801873c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018890:	4264      	negs	r4, r4
 8018892:	fb94 fef6 	sdiv	lr, r4, r6
 8018896:	f1ce 0800 	rsb	r8, lr, #0
 801889a:	fb06 441e 	mls	r4, r6, lr, r4
 801889e:	f8c0 8000 	str.w	r8, [r0]
 80188a2:	6104      	str	r4, [r0, #16]
 80188a4:	2c00      	cmp	r4, #0
 80188a6:	f43f af6e 	beq.w	8018786 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80188aa:	ea6f 0e0e 	mvn.w	lr, lr
 80188ae:	1b34      	subs	r4, r6, r4
 80188b0:	f8c0 e000 	str.w	lr, [r0]
 80188b4:	e766      	b.n	8018784 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80188b6:	426d      	negs	r5, r5
 80188b8:	fb95 f4f6 	sdiv	r4, r5, r6
 80188bc:	f1c4 0e00 	rsb	lr, r4, #0
 80188c0:	fb06 5514 	mls	r5, r6, r4, r5
 80188c4:	f8c0 e004 	str.w	lr, [r0, #4]
 80188c8:	6085      	str	r5, [r0, #8]
 80188ca:	2d00      	cmp	r5, #0
 80188cc:	f43f af64 	beq.w	8018798 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80188d0:	43e4      	mvns	r4, r4
 80188d2:	1b75      	subs	r5, r6, r5
 80188d4:	6044      	str	r4, [r0, #4]
 80188d6:	e75e      	b.n	8018796 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80188d8:	3d800000 	.word	0x3d800000

080188dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80188dc:	4b01      	ldr	r3, [pc, #4]	; (80188e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80188de:	6018      	str	r0, [r3, #0]
 80188e0:	4770      	bx	lr
 80188e2:	bf00      	nop
 80188e4:	24041b6c 	.word	0x24041b6c

080188e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80188e8:	4b06      	ldr	r3, [pc, #24]	; (8018904 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80188ea:	881a      	ldrh	r2, [r3, #0]
 80188ec:	4282      	cmp	r2, r0
 80188ee:	d807      	bhi.n	8018900 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80188f0:	4b05      	ldr	r3, [pc, #20]	; (8018908 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80188f2:	881b      	ldrh	r3, [r3, #0]
 80188f4:	4413      	add	r3, r2
 80188f6:	4298      	cmp	r0, r3
 80188f8:	bfac      	ite	ge
 80188fa:	2000      	movge	r0, #0
 80188fc:	2001      	movlt	r0, #1
 80188fe:	4770      	bx	lr
 8018900:	2000      	movs	r0, #0
 8018902:	4770      	bx	lr
 8018904:	24041b8c 	.word	0x24041b8c
 8018908:	24041b90 	.word	0x24041b90

0801890c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801890c:	b508      	push	{r3, lr}
 801890e:	4601      	mov	r1, r0
 8018910:	f7ff ffea 	bl	80188e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8018914:	b118      	cbz	r0, 801891e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8018916:	4b02      	ldr	r3, [pc, #8]	; (8018920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801891e:	bd08      	pop	{r3, pc}
 8018920:	24041b70 	.word	0x24041b70

08018924 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8018924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018926:	4c24      	ldr	r4, [pc, #144]	; (80189b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8018928:	6823      	ldr	r3, [r4, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d042      	beq.n	80189b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801892e:	4a23      	ldr	r2, [pc, #140]	; (80189bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8018930:	4d23      	ldr	r5, [pc, #140]	; (80189c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8018932:	8811      	ldrh	r1, [r2, #0]
 8018934:	f8b5 c000 	ldrh.w	ip, [r5]
 8018938:	4822      	ldr	r0, [pc, #136]	; (80189c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801893a:	4461      	add	r1, ip
 801893c:	1c4a      	adds	r2, r1, #1
 801893e:	008f      	lsls	r7, r1, #2
 8018940:	f022 0201 	bic.w	r2, r2, #1
 8018944:	19de      	adds	r6, r3, r7
 8018946:	0412      	lsls	r2, r2, #16
 8018948:	6006      	str	r6, [r0, #0]
 801894a:	4e1f      	ldr	r6, [pc, #124]	; (80189c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801894c:	0c12      	lsrs	r2, r2, #16
 801894e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018952:	19da      	adds	r2, r3, r7
 8018954:	6032      	str	r2, [r6, #0]
 8018956:	220e      	movs	r2, #14
 8018958:	fb02 f20c 	mul.w	r2, r2, ip
 801895c:	3203      	adds	r2, #3
 801895e:	f022 0203 	bic.w	r2, r2, #3
 8018962:	443a      	add	r2, r7
 8018964:	4f19      	ldr	r7, [pc, #100]	; (80189cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8018966:	4413      	add	r3, r2
 8018968:	603b      	str	r3, [r7, #0]
 801896a:	2300      	movs	r3, #0
 801896c:	4f18      	ldr	r7, [pc, #96]	; (80189d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801896e:	469c      	mov	ip, r3
 8018970:	803b      	strh	r3, [r7, #0]
 8018972:	4f18      	ldr	r7, [pc, #96]	; (80189d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018974:	683f      	ldr	r7, [r7, #0]
 8018976:	1aba      	subs	r2, r7, r2
 8018978:	4f17      	ldr	r7, [pc, #92]	; (80189d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801897a:	603a      	str	r2, [r7, #0]
 801897c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8018980:	4a16      	ldr	r2, [pc, #88]	; (80189dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018982:	8013      	strh	r3, [r2, #0]
 8018984:	428b      	cmp	r3, r1
 8018986:	d10d      	bne.n	80189a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8018988:	882d      	ldrh	r5, [r5, #0]
 801898a:	2300      	movs	r3, #0
 801898c:	6830      	ldr	r0, [r6, #0]
 801898e:	240e      	movs	r4, #14
 8018990:	429d      	cmp	r5, r3
 8018992:	d90f      	bls.n	80189b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018994:	fb04 0203 	mla	r2, r4, r3, r0
 8018998:	3301      	adds	r3, #1
 801899a:	7b11      	ldrb	r1, [r2, #12]
 801899c:	f36f 1145 	bfc	r1, #5, #1
 80189a0:	7311      	strb	r1, [r2, #12]
 80189a2:	e7f5      	b.n	8018990 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80189a4:	6822      	ldr	r2, [r4, #0]
 80189a6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80189aa:	6802      	ldr	r2, [r0, #0]
 80189ac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80189b0:	3301      	adds	r3, #1
 80189b2:	e7e7      	b.n	8018984 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80189b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189b6:	bf00      	nop
 80189b8:	24041b70 	.word	0x24041b70
 80189bc:	24041b8c 	.word	0x24041b8c
 80189c0:	24041b90 	.word	0x24041b90
 80189c4:	24041b84 	.word	0x24041b84
 80189c8:	24041b74 	.word	0x24041b74
 80189cc:	24041b7c 	.word	0x24041b7c
 80189d0:	24041b8e 	.word	0x24041b8e
 80189d4:	24041b78 	.word	0x24041b78
 80189d8:	24041b88 	.word	0x24041b88
 80189dc:	24041b80 	.word	0x24041b80

080189e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80189e0:	4b06      	ldr	r3, [pc, #24]	; (80189fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	b943      	cbnz	r3, 80189f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80189e6:	b139      	cbz	r1, 80189f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80189e8:	4b05      	ldr	r3, [pc, #20]	; (8018a00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80189ea:	801a      	strh	r2, [r3, #0]
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80189ee:	6019      	str	r1, [r3, #0]
 80189f0:	4b05      	ldr	r3, [pc, #20]	; (8018a08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80189f2:	6018      	str	r0, [r3, #0]
 80189f4:	f7ff bf96 	b.w	8018924 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop
 80189fc:	24041b7c 	.word	0x24041b7c
 8018a00:	24041b90 	.word	0x24041b90
 8018a04:	24041b78 	.word	0x24041b78
 8018a08:	24041b70 	.word	0x24041b70

08018a0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8018a0c:	b470      	push	{r4, r5, r6}
 8018a0e:	4c07      	ldr	r4, [pc, #28]	; (8018a2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8018a10:	4605      	mov	r5, r0
 8018a12:	4610      	mov	r0, r2
 8018a14:	9a03      	ldr	r2, [sp, #12]
 8018a16:	6826      	ldr	r6, [r4, #0]
 8018a18:	b936      	cbnz	r6, 8018a28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8018a1a:	6025      	str	r5, [r4, #0]
 8018a1c:	4c04      	ldr	r4, [pc, #16]	; (8018a30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8018a1e:	8021      	strh	r1, [r4, #0]
 8018a20:	4619      	mov	r1, r3
 8018a22:	bc70      	pop	{r4, r5, r6}
 8018a24:	f7ff bfdc 	b.w	80189e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8018a28:	bc70      	pop	{r4, r5, r6}
 8018a2a:	4770      	bx	lr
 8018a2c:	24041b94 	.word	0x24041b94
 8018a30:	24041b8c 	.word	0x24041b8c

08018a34 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8018a34:	4a12      	ldr	r2, [pc, #72]	; (8018a80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8018a36:	8803      	ldrh	r3, [r0, #0]
 8018a38:	8812      	ldrh	r2, [r2, #0]
 8018a3a:	4293      	cmp	r3, r2
 8018a3c:	d207      	bcs.n	8018a4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018a3e:	4a11      	ldr	r2, [pc, #68]	; (8018a84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018a40:	2114      	movs	r1, #20
 8018a42:	6812      	ldr	r2, [r2, #0]
 8018a44:	fb01 2303 	mla	r3, r1, r3, r2
 8018a48:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018a4c:	4770      	bx	lr
 8018a4e:	490e      	ldr	r1, [pc, #56]	; (8018a88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018a50:	8809      	ldrh	r1, [r1, #0]
 8018a52:	4411      	add	r1, r2
 8018a54:	428b      	cmp	r3, r1
 8018a56:	da04      	bge.n	8018a62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8018a58:	1a9b      	subs	r3, r3, r2
 8018a5a:	4a0c      	ldr	r2, [pc, #48]	; (8018a8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018a5c:	210e      	movs	r1, #14
 8018a5e:	6812      	ldr	r2, [r2, #0]
 8018a60:	e7f0      	b.n	8018a44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018a62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d108      	bne.n	8018a7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8018a6a:	4b09      	ldr	r3, [pc, #36]	; (8018a90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	b91b      	cbnz	r3, 8018a78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018a70:	4b08      	ldr	r3, [pc, #32]	; (8018a94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018a72:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018a76:	4770      	bx	lr
 8018a78:	4b07      	ldr	r3, [pc, #28]	; (8018a98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8018a7a:	e7fa      	b.n	8018a72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	4770      	bx	lr
 8018a80:	24041b8c 	.word	0x24041b8c
 8018a84:	24041b94 	.word	0x24041b94
 8018a88:	24041b90 	.word	0x24041b90
 8018a8c:	24041b74 	.word	0x24041b74
 8018a90:	24041b04 	.word	0x24041b04
 8018a94:	24041b06 	.word	0x24041b06
 8018a98:	24041b08 	.word	0x24041b08

08018a9c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018a9c:	4a12      	ldr	r2, [pc, #72]	; (8018ae8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018a9e:	8803      	ldrh	r3, [r0, #0]
 8018aa0:	8812      	ldrh	r2, [r2, #0]
 8018aa2:	4293      	cmp	r3, r2
 8018aa4:	d207      	bcs.n	8018ab6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8018aa6:	4a11      	ldr	r2, [pc, #68]	; (8018aec <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8018aa8:	2114      	movs	r1, #20
 8018aaa:	6812      	ldr	r2, [r2, #0]
 8018aac:	fb01 2303 	mla	r3, r1, r3, r2
 8018ab0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018ab4:	4770      	bx	lr
 8018ab6:	490e      	ldr	r1, [pc, #56]	; (8018af0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8018ab8:	8809      	ldrh	r1, [r1, #0]
 8018aba:	4411      	add	r1, r2
 8018abc:	428b      	cmp	r3, r1
 8018abe:	da04      	bge.n	8018aca <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018ac0:	1a9b      	subs	r3, r3, r2
 8018ac2:	4a0c      	ldr	r2, [pc, #48]	; (8018af4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018ac4:	210e      	movs	r1, #14
 8018ac6:	6812      	ldr	r2, [r2, #0]
 8018ac8:	e7f0      	b.n	8018aac <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8018aca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d108      	bne.n	8018ae4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018ad2:	4b09      	ldr	r3, [pc, #36]	; (8018af8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	b91b      	cbnz	r3, 8018ae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8018ad8:	4b08      	ldr	r3, [pc, #32]	; (8018afc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8018ada:	f9b3 0000 	ldrsh.w	r0, [r3]
 8018ade:	4770      	bx	lr
 8018ae0:	4b07      	ldr	r3, [pc, #28]	; (8018b00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8018ae2:	e7fa      	b.n	8018ada <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8018ae4:	2000      	movs	r0, #0
 8018ae6:	4770      	bx	lr
 8018ae8:	24041b8c 	.word	0x24041b8c
 8018aec:	24041b94 	.word	0x24041b94
 8018af0:	24041b90 	.word	0x24041b90
 8018af4:	24041b74 	.word	0x24041b74
 8018af8:	24041b04 	.word	0x24041b04
 8018afc:	24041b08 	.word	0x24041b08
 8018b00:	24041b06 	.word	0x24041b06

08018b04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8018b04:	4a1f      	ldr	r2, [pc, #124]	; (8018b84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8018b06:	b510      	push	{r4, lr}
 8018b08:	880b      	ldrh	r3, [r1, #0]
 8018b0a:	8812      	ldrh	r2, [r2, #0]
 8018b0c:	4293      	cmp	r3, r2
 8018b0e:	d213      	bcs.n	8018b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8018b10:	4a1d      	ldr	r2, [pc, #116]	; (8018b88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8018b12:	2114      	movs	r1, #20
 8018b14:	6812      	ldr	r2, [r2, #0]
 8018b16:	fb01 2303 	mla	r3, r1, r3, r2
 8018b1a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8018b1e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8018b22:	8a1a      	ldrh	r2, [r3, #16]
 8018b24:	8a5b      	ldrh	r3, [r3, #18]
 8018b26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018b2a:	8004      	strh	r4, [r0, #0]
 8018b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b30:	8041      	strh	r1, [r0, #2]
 8018b32:	8082      	strh	r2, [r0, #4]
 8018b34:	80c3      	strh	r3, [r0, #6]
 8018b36:	e00e      	b.n	8018b56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018b38:	4914      	ldr	r1, [pc, #80]	; (8018b8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8018b3a:	8809      	ldrh	r1, [r1, #0]
 8018b3c:	4411      	add	r1, r2
 8018b3e:	428b      	cmp	r3, r1
 8018b40:	da0a      	bge.n	8018b58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8018b42:	1a9b      	subs	r3, r3, r2
 8018b44:	4a12      	ldr	r2, [pc, #72]	; (8018b90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8018b46:	210e      	movs	r1, #14
 8018b48:	6812      	ldr	r2, [r2, #0]
 8018b4a:	fb01 2303 	mla	r3, r1, r3, r2
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	6002      	str	r2, [r0, #0]
 8018b52:	685a      	ldr	r2, [r3, #4]
 8018b54:	6042      	str	r2, [r0, #4]
 8018b56:	bd10      	pop	{r4, pc}
 8018b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018b5c:	4293      	cmp	r3, r2
 8018b5e:	d10b      	bne.n	8018b78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8018b60:	4b0c      	ldr	r3, [pc, #48]	; (8018b94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8018b62:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018b66:	4b0c      	ldr	r3, [pc, #48]	; (8018b98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8018b68:	8081      	strh	r1, [r0, #4]
 8018b6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b6e:	2300      	movs	r3, #0
 8018b70:	80c2      	strh	r2, [r0, #6]
 8018b72:	8003      	strh	r3, [r0, #0]
 8018b74:	8043      	strh	r3, [r0, #2]
 8018b76:	e7ee      	b.n	8018b56 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8018b78:	2300      	movs	r3, #0
 8018b7a:	8003      	strh	r3, [r0, #0]
 8018b7c:	8043      	strh	r3, [r0, #2]
 8018b7e:	8083      	strh	r3, [r0, #4]
 8018b80:	e7d8      	b.n	8018b34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018b82:	bf00      	nop
 8018b84:	24041b8c 	.word	0x24041b8c
 8018b88:	24041b94 	.word	0x24041b94
 8018b8c:	24041b90 	.word	0x24041b90
 8018b90:	24041b74 	.word	0x24041b74
 8018b94:	24041b00 	.word	0x24041b00
 8018b98:	24041b02 	.word	0x24041b02

08018b9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8018b9c:	4a17      	ldr	r2, [pc, #92]	; (8018bfc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8018b9e:	8803      	ldrh	r3, [r0, #0]
 8018ba0:	8812      	ldrh	r2, [r2, #0]
 8018ba2:	4293      	cmp	r3, r2
 8018ba4:	d213      	bcs.n	8018bce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8018ba6:	4a16      	ldr	r2, [pc, #88]	; (8018c00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8018ba8:	2114      	movs	r1, #20
 8018baa:	6812      	ldr	r2, [r2, #0]
 8018bac:	fb01 2303 	mla	r3, r1, r3, r2
 8018bb0:	8a1a      	ldrh	r2, [r3, #16]
 8018bb2:	8919      	ldrh	r1, [r3, #8]
 8018bb4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8018bb8:	428a      	cmp	r2, r1
 8018bba:	db1d      	blt.n	8018bf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018bbc:	8a58      	ldrh	r0, [r3, #18]
 8018bbe:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8018bc2:	895b      	ldrh	r3, [r3, #10]
 8018bc4:	4298      	cmp	r0, r3
 8018bc6:	bfac      	ite	ge
 8018bc8:	2000      	movge	r0, #0
 8018bca:	2001      	movlt	r0, #1
 8018bcc:	4770      	bx	lr
 8018bce:	490d      	ldr	r1, [pc, #52]	; (8018c04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8018bd0:	8809      	ldrh	r1, [r1, #0]
 8018bd2:	4411      	add	r1, r2
 8018bd4:	428b      	cmp	r3, r1
 8018bd6:	da0d      	bge.n	8018bf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8018bd8:	1a9b      	subs	r3, r3, r2
 8018bda:	4a0b      	ldr	r2, [pc, #44]	; (8018c08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8018bdc:	210e      	movs	r1, #14
 8018bde:	6812      	ldr	r2, [r2, #0]
 8018be0:	fb01 2303 	mla	r3, r1, r3, r2
 8018be4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018be8:	891a      	ldrh	r2, [r3, #8]
 8018bea:	4291      	cmp	r1, r2
 8018bec:	db04      	blt.n	8018bf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8018bee:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8018bf2:	e7e6      	b.n	8018bc2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	4770      	bx	lr
 8018bf8:	2001      	movs	r0, #1
 8018bfa:	4770      	bx	lr
 8018bfc:	24041b8c 	.word	0x24041b8c
 8018c00:	24041b94 	.word	0x24041b94
 8018c04:	24041b90 	.word	0x24041b90
 8018c08:	24041b74 	.word	0x24041b74

08018c0c <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018c0c:	4a12      	ldr	r2, [pc, #72]	; (8018c58 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018c0e:	8803      	ldrh	r3, [r0, #0]
 8018c10:	8811      	ldrh	r1, [r2, #0]
 8018c12:	428b      	cmp	r3, r1
 8018c14:	d20b      	bcs.n	8018c2e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018c16:	4a11      	ldr	r2, [pc, #68]	; (8018c5c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018c18:	6812      	ldr	r2, [r2, #0]
 8018c1a:	b112      	cbz	r2, 8018c22 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018c1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018c20:	b9c0      	cbnz	r0, 8018c54 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018c22:	4a0f      	ldr	r2, [pc, #60]	; (8018c60 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018c24:	6811      	ldr	r1, [r2, #0]
 8018c26:	2214      	movs	r2, #20
 8018c28:	4353      	muls	r3, r2
 8018c2a:	58c8      	ldr	r0, [r1, r3]
 8018c2c:	4770      	bx	lr
 8018c2e:	4a0d      	ldr	r2, [pc, #52]	; (8018c64 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018c30:	8812      	ldrh	r2, [r2, #0]
 8018c32:	440a      	add	r2, r1
 8018c34:	4293      	cmp	r3, r2
 8018c36:	da04      	bge.n	8018c42 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018c38:	4a08      	ldr	r2, [pc, #32]	; (8018c5c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018c3a:	6812      	ldr	r2, [r2, #0]
 8018c3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018c40:	4770      	bx	lr
 8018c42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018c46:	4293      	cmp	r3, r2
 8018c48:	d103      	bne.n	8018c52 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018c4a:	4b07      	ldr	r3, [pc, #28]	; (8018c68 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018c50:	4770      	bx	lr
 8018c52:	2000      	movs	r0, #0
 8018c54:	4770      	bx	lr
 8018c56:	bf00      	nop
 8018c58:	24041b8c 	.word	0x24041b8c
 8018c5c:	24041b70 	.word	0x24041b70
 8018c60:	24041b94 	.word	0x24041b94
 8018c64:	24041b90 	.word	0x24041b90
 8018c68:	24041b0c 	.word	0x24041b0c

08018c6c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018c6c:	4b24      	ldr	r3, [pc, #144]	; (8018d00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018c6e:	8802      	ldrh	r2, [r0, #0]
 8018c70:	8818      	ldrh	r0, [r3, #0]
 8018c72:	4282      	cmp	r2, r0
 8018c74:	d221      	bcs.n	8018cba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8018c76:	4b23      	ldr	r3, [pc, #140]	; (8018d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018c78:	6819      	ldr	r1, [r3, #0]
 8018c7a:	2314      	movs	r3, #20
 8018c7c:	fb03 1302 	mla	r3, r3, r2, r1
 8018c80:	6858      	ldr	r0, [r3, #4]
 8018c82:	2800      	cmp	r0, #0
 8018c84:	d03a      	beq.n	8018cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018c86:	4920      	ldr	r1, [pc, #128]	; (8018d08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018c88:	6809      	ldr	r1, [r1, #0]
 8018c8a:	2900      	cmp	r1, #0
 8018c8c:	d036      	beq.n	8018cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018c8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018c92:	2900      	cmp	r1, #0
 8018c94:	d032      	beq.n	8018cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8018c96:	891a      	ldrh	r2, [r3, #8]
 8018c98:	8958      	ldrh	r0, [r3, #10]
 8018c9a:	4350      	muls	r0, r2
 8018c9c:	7c5a      	ldrb	r2, [r3, #17]
 8018c9e:	7cdb      	ldrb	r3, [r3, #19]
 8018ca0:	0952      	lsrs	r2, r2, #5
 8018ca2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018ca6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8018caa:	2b0b      	cmp	r3, #11
 8018cac:	bf18      	it	ne
 8018cae:	0040      	lslne	r0, r0, #1
 8018cb0:	3003      	adds	r0, #3
 8018cb2:	f020 0003 	bic.w	r0, r0, #3
 8018cb6:	4408      	add	r0, r1
 8018cb8:	4770      	bx	lr
 8018cba:	4b14      	ldr	r3, [pc, #80]	; (8018d0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8018cbc:	881b      	ldrh	r3, [r3, #0]
 8018cbe:	4403      	add	r3, r0
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	da1a      	bge.n	8018cfa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018cc4:	4b12      	ldr	r3, [pc, #72]	; (8018d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018cc6:	1a10      	subs	r0, r2, r0
 8018cc8:	210e      	movs	r1, #14
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	fb01 3000 	mla	r0, r1, r0, r3
 8018cd0:	7b03      	ldrb	r3, [r0, #12]
 8018cd2:	f003 031f 	and.w	r3, r3, #31
 8018cd6:	2b0b      	cmp	r3, #11
 8018cd8:	d10b      	bne.n	8018cf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8018cda:	8903      	ldrh	r3, [r0, #8]
 8018cdc:	8940      	ldrh	r0, [r0, #10]
 8018cde:	4358      	muls	r0, r3
 8018ce0:	4b09      	ldr	r3, [pc, #36]	; (8018d08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018ce2:	3003      	adds	r0, #3
 8018ce4:	6819      	ldr	r1, [r3, #0]
 8018ce6:	f020 0303 	bic.w	r3, r0, #3
 8018cea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8018cee:	4418      	add	r0, r3
 8018cf0:	4770      	bx	lr
 8018cf2:	2b0d      	cmp	r3, #13
 8018cf4:	d101      	bne.n	8018cfa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018cf6:	300d      	adds	r0, #13
 8018cf8:	4770      	bx	lr
 8018cfa:	2000      	movs	r0, #0
 8018cfc:	4770      	bx	lr
 8018cfe:	bf00      	nop
 8018d00:	24041b8c 	.word	0x24041b8c
 8018d04:	24041b94 	.word	0x24041b94
 8018d08:	24041b70 	.word	0x24041b70
 8018d0c:	24041b90 	.word	0x24041b90
 8018d10:	24041b74 	.word	0x24041b74

08018d14 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018d14:	4a17      	ldr	r2, [pc, #92]	; (8018d74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8018d16:	b510      	push	{r4, lr}
 8018d18:	8803      	ldrh	r3, [r0, #0]
 8018d1a:	8812      	ldrh	r2, [r2, #0]
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	d20c      	bcs.n	8018d3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018d20:	4a15      	ldr	r2, [pc, #84]	; (8018d78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8018d22:	2114      	movs	r1, #20
 8018d24:	6812      	ldr	r2, [r2, #0]
 8018d26:	fb01 2303 	mla	r3, r1, r3, r2
 8018d2a:	7c58      	ldrb	r0, [r3, #17]
 8018d2c:	0942      	lsrs	r2, r0, #5
 8018d2e:	7cd8      	ldrb	r0, [r3, #19]
 8018d30:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018d34:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018d38:	bd10      	pop	{r4, pc}
 8018d3a:	4910      	ldr	r1, [pc, #64]	; (8018d7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8018d3c:	8809      	ldrh	r1, [r1, #0]
 8018d3e:	4411      	add	r1, r2
 8018d40:	428b      	cmp	r3, r1
 8018d42:	da09      	bge.n	8018d58 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018d44:	1a9b      	subs	r3, r3, r2
 8018d46:	4a0e      	ldr	r2, [pc, #56]	; (8018d80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018d48:	210e      	movs	r1, #14
 8018d4a:	6812      	ldr	r2, [r2, #0]
 8018d4c:	fb01 2303 	mla	r3, r1, r3, r2
 8018d50:	7b18      	ldrb	r0, [r3, #12]
 8018d52:	f000 001f 	and.w	r0, r0, #31
 8018d56:	e7ef      	b.n	8018d38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018d58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018d5c:	4293      	cmp	r3, r2
 8018d5e:	d106      	bne.n	8018d6e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8018d60:	f7f3 fe98 	bl	800ca94 <_ZN8touchgfx3HAL3lcdEv>
 8018d64:	6803      	ldr	r3, [r0, #0]
 8018d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d6c:	4718      	bx	r3
 8018d6e:	2000      	movs	r0, #0
 8018d70:	e7e2      	b.n	8018d38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8018d72:	bf00      	nop
 8018d74:	24041b8c 	.word	0x24041b8c
 8018d78:	24041b94 	.word	0x24041b94
 8018d7c:	24041b90 	.word	0x24041b90
 8018d80:	24041b74 	.word	0x24041b74

08018d84 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8018d84:	2010      	movs	r0, #16
 8018d86:	4770      	bx	lr

08018d88 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8018d88:	2000      	movs	r0, #0
 8018d8a:	4770      	bx	lr

08018d8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8018d8c:	4b02      	ldr	r3, [pc, #8]	; (8018d98 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8018d8e:	8818      	ldrh	r0, [r3, #0]
 8018d90:	0040      	lsls	r0, r0, #1
 8018d92:	b280      	uxth	r0, r0
 8018d94:	4770      	bx	lr
 8018d96:	bf00      	nop
 8018d98:	24041b06 	.word	0x24041b06

08018d9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8018d9c:	2bff      	cmp	r3, #255	; 0xff
 8018d9e:	d050      	beq.n	8018e42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8018da0:	2a0b      	cmp	r2, #11
 8018da2:	d04a      	beq.n	8018e3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018da4:	d80e      	bhi.n	8018dc4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8018da6:	2a03      	cmp	r2, #3
 8018da8:	d03f      	beq.n	8018e2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8018daa:	d804      	bhi.n	8018db6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8018dac:	2a01      	cmp	r2, #1
 8018dae:	d03e      	beq.n	8018e2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8018db0:	d93f      	bls.n	8018e32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8018db2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8018db4:	4770      	bx	lr
 8018db6:	2a09      	cmp	r2, #9
 8018db8:	d03f      	beq.n	8018e3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8018dba:	d83c      	bhi.n	8018e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018dbc:	2a08      	cmp	r2, #8
 8018dbe:	d03a      	beq.n	8018e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	4770      	bx	lr
 8018dc4:	2a2f      	cmp	r2, #47	; 0x2f
 8018dc6:	d024      	beq.n	8018e12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8018dc8:	d80d      	bhi.n	8018de6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8018dca:	2a2d      	cmp	r2, #45	; 0x2d
 8018dcc:	d014      	beq.n	8018df8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8018dce:	d826      	bhi.n	8018e1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8018dd0:	2a2c      	cmp	r2, #44	; 0x2c
 8018dd2:	d1f5      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018dd4:	684b      	ldr	r3, [r1, #4]
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d018      	beq.n	8018e0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8018ddc:	d323      	bcc.n	8018e26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8018dde:	2b02      	cmp	r3, #2
 8018de0:	d1ee      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018de2:	6880      	ldr	r0, [r0, #8]
 8018de4:	4770      	bx	lr
 8018de6:	2a31      	cmp	r2, #49	; 0x31
 8018de8:	d004      	beq.n	8018df4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8018dea:	d328      	bcc.n	8018e3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018dec:	2a32      	cmp	r2, #50	; 0x32
 8018dee:	d026      	beq.n	8018e3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8018df0:	2a33      	cmp	r2, #51	; 0x33
 8018df2:	d1e5      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018df4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8018df6:	4770      	bx	lr
 8018df8:	684b      	ldr	r3, [r1, #4]
 8018dfa:	781b      	ldrb	r3, [r3, #0]
 8018dfc:	2b01      	cmp	r3, #1
 8018dfe:	d004      	beq.n	8018e0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8018e00:	d30b      	bcc.n	8018e1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8018e02:	2b02      	cmp	r3, #2
 8018e04:	d1dc      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e06:	6900      	ldr	r0, [r0, #16]
 8018e08:	4770      	bx	lr
 8018e0a:	6a00      	ldr	r0, [r0, #32]
 8018e0c:	4770      	bx	lr
 8018e0e:	6980      	ldr	r0, [r0, #24]
 8018e10:	4770      	bx	lr
 8018e12:	684b      	ldr	r3, [r1, #4]
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d1d2      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e1a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018e1c:	4770      	bx	lr
 8018e1e:	684b      	ldr	r3, [r1, #4]
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d1cc      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e26:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018e28:	4770      	bx	lr
 8018e2a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018e2c:	4770      	bx	lr
 8018e2e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8018e30:	4770      	bx	lr
 8018e32:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018e34:	4770      	bx	lr
 8018e36:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8018e38:	4770      	bx	lr
 8018e3a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8018e3c:	4770      	bx	lr
 8018e3e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8018e40:	4770      	bx	lr
 8018e42:	2a0b      	cmp	r2, #11
 8018e44:	d049      	beq.n	8018eda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018e46:	d80e      	bhi.n	8018e66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8018e48:	2a03      	cmp	r2, #3
 8018e4a:	d040      	beq.n	8018ece <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018e4c:	d804      	bhi.n	8018e58 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8018e4e:	2a01      	cmp	r2, #1
 8018e50:	d03f      	beq.n	8018ed2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8018e52:	d940      	bls.n	8018ed6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8018e54:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8018e56:	4770      	bx	lr
 8018e58:	2a09      	cmp	r2, #9
 8018e5a:	d03e      	beq.n	8018eda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8018e5c:	d801      	bhi.n	8018e62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8018e5e:	2a08      	cmp	r2, #8
 8018e60:	d1ae      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e62:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8018e64:	4770      	bx	lr
 8018e66:	2a2f      	cmp	r2, #47	; 0x2f
 8018e68:	d024      	beq.n	8018eb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018e6a:	d80d      	bhi.n	8018e88 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018e6c:	2a2d      	cmp	r2, #45	; 0x2d
 8018e6e:	d014      	beq.n	8018e9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8018e70:	d826      	bhi.n	8018ec0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8018e72:	2a2c      	cmp	r2, #44	; 0x2c
 8018e74:	d1a4      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e76:	684b      	ldr	r3, [r1, #4]
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	2b01      	cmp	r3, #1
 8018e7c:	d018      	beq.n	8018eb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8018e7e:	d324      	bcc.n	8018eca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	d19d      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e84:	68c0      	ldr	r0, [r0, #12]
 8018e86:	4770      	bx	lr
 8018e88:	2a31      	cmp	r2, #49	; 0x31
 8018e8a:	d004      	beq.n	8018e96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8018e8c:	d327      	bcc.n	8018ede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018e8e:	2a32      	cmp	r2, #50	; 0x32
 8018e90:	d025      	beq.n	8018ede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8018e92:	2a33      	cmp	r2, #51	; 0x33
 8018e94:	d194      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018e96:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8018e98:	4770      	bx	lr
 8018e9a:	684b      	ldr	r3, [r1, #4]
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	2b01      	cmp	r3, #1
 8018ea0:	d004      	beq.n	8018eac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8018ea2:	d30b      	bcc.n	8018ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8018ea4:	2b02      	cmp	r3, #2
 8018ea6:	d18b      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ea8:	6940      	ldr	r0, [r0, #20]
 8018eaa:	4770      	bx	lr
 8018eac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018eae:	4770      	bx	lr
 8018eb0:	69c0      	ldr	r0, [r0, #28]
 8018eb2:	4770      	bx	lr
 8018eb4:	684b      	ldr	r3, [r1, #4]
 8018eb6:	781b      	ldrb	r3, [r3, #0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d181      	bne.n	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018ebc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8018ebe:	4770      	bx	lr
 8018ec0:	684b      	ldr	r3, [r1, #4]
 8018ec2:	781b      	ldrb	r3, [r3, #0]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	f47f af7b 	bne.w	8018dc0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8018eca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8018ecc:	4770      	bx	lr
 8018ece:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8018ed0:	4770      	bx	lr
 8018ed2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8018ed4:	4770      	bx	lr
 8018ed6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018ed8:	4770      	bx	lr
 8018eda:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8018edc:	4770      	bx	lr
 8018ede:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8018ee0:	4770      	bx	lr

08018ee2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ee6:	b087      	sub	sp, #28
 8018ee8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018eea:	9205      	str	r2, [sp, #20]
 8018eec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018ef0:	9101      	str	r1, [sp, #4]
 8018ef2:	9202      	str	r2, [sp, #8]
 8018ef4:	6841      	ldr	r1, [r0, #4]
 8018ef6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018efa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018efe:	fb01 2404 	mla	r4, r1, r4, r2
 8018f02:	6802      	ldr	r2, [r0, #0]
 8018f04:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018f08:	f8de 2000 	ldr.w	r2, [lr]
 8018f0c:	9203      	str	r2, [sp, #12]
 8018f0e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018f12:	3204      	adds	r2, #4
 8018f14:	9204      	str	r2, [sp, #16]
 8018f16:	9a02      	ldr	r2, [sp, #8]
 8018f18:	43d6      	mvns	r6, r2
 8018f1a:	b2f6      	uxtb	r6, r6
 8018f1c:	9a01      	ldr	r2, [sp, #4]
 8018f1e:	2a00      	cmp	r2, #0
 8018f20:	dc03      	bgt.n	8018f2a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018f22:	9a05      	ldr	r2, [sp, #20]
 8018f24:	2a00      	cmp	r2, #0
 8018f26:	f340 8129 	ble.w	801917c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f2c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018f30:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f36:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8018f3a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	dd0e      	ble.n	8018f60 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018f42:	1408      	asrs	r0, r1, #16
 8018f44:	d405      	bmi.n	8018f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f46:	4560      	cmp	r0, ip
 8018f48:	da03      	bge.n	8018f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f4a:	1410      	asrs	r0, r2, #16
 8018f4c:	d401      	bmi.n	8018f52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018f4e:	42b8      	cmp	r0, r7
 8018f50:	db07      	blt.n	8018f62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018f52:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018f54:	3b01      	subs	r3, #1
 8018f56:	3402      	adds	r4, #2
 8018f58:	4401      	add	r1, r0
 8018f5a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018f5c:	4402      	add	r2, r0
 8018f5e:	e7ee      	b.n	8018f3e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018f60:	d071      	beq.n	8019046 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018f62:	1e58      	subs	r0, r3, #1
 8018f64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018f66:	fb05 1500 	mla	r5, r5, r0, r1
 8018f6a:	142d      	asrs	r5, r5, #16
 8018f6c:	d45f      	bmi.n	801902e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018f6e:	4565      	cmp	r5, ip
 8018f70:	da5d      	bge.n	801902e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018f72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018f74:	fb05 2000 	mla	r0, r5, r0, r2
 8018f78:	1400      	asrs	r0, r0, #16
 8018f7a:	d458      	bmi.n	801902e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018f7c:	42b8      	cmp	r0, r7
 8018f7e:	da56      	bge.n	801902e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018f80:	4699      	mov	r9, r3
 8018f82:	46a2      	mov	sl, r4
 8018f84:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8018f88:	f1b9 0f00 	cmp.w	r9, #0
 8018f8c:	dd57      	ble.n	801903e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8018f8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018f92:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018f96:	9803      	ldr	r0, [sp, #12]
 8018f98:	140d      	asrs	r5, r1, #16
 8018f9a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018f9e:	fb07 000c 	mla	r0, r7, ip, r0
 8018fa2:	5d40      	ldrb	r0, [r0, r5]
 8018fa4:	9d04      	ldr	r5, [sp, #16]
 8018fa6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8018faa:	f8ba 5000 	ldrh.w	r5, [sl]
 8018fae:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8018fb2:	122f      	asrs	r7, r5, #8
 8018fb4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8018fb8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018fbc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018fc0:	00ed      	lsls	r5, r5, #3
 8018fc2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8018fc6:	fb17 f706 	smulbb	r7, r7, r6
 8018fca:	b2ed      	uxtb	r5, r5
 8018fcc:	fb18 f806 	smulbb	r8, r8, r6
 8018fd0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8018fd4:	10c7      	asrs	r7, r0, #3
 8018fd6:	fb15 f506 	smulbb	r5, r5, r6
 8018fda:	00c0      	lsls	r0, r0, #3
 8018fdc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018fe0:	fa1f fc8c 	uxth.w	ip, ip
 8018fe4:	b2c0      	uxtb	r0, r0
 8018fe6:	fb07 870b 	mla	r7, r7, fp, r8
 8018fea:	fb00 500b 	mla	r0, r0, fp, r5
 8018fee:	f10c 0501 	add.w	r5, ip, #1
 8018ff2:	b2bf      	uxth	r7, r7
 8018ff4:	b280      	uxth	r0, r0
 8018ff6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018ffa:	f107 0801 	add.w	r8, r7, #1
 8018ffe:	1c45      	adds	r5, r0, #1
 8019000:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8019004:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019008:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801900c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801900e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019012:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019016:	4401      	add	r1, r0
 8019018:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801901c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801901e:	ea45 0c0c 	orr.w	ip, r5, ip
 8019022:	4402      	add	r2, r0
 8019024:	ea4c 0c08 	orr.w	ip, ip, r8
 8019028:	f82a cb02 	strh.w	ip, [sl], #2
 801902c:	e7ac      	b.n	8018f88 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801902e:	f04f 0800 	mov.w	r8, #0
 8019032:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8019036:	eb03 0008 	add.w	r0, r3, r8
 801903a:	2800      	cmp	r0, #0
 801903c:	dc41      	bgt.n	80190c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801903e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019042:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019046:	9b01      	ldr	r3, [sp, #4]
 8019048:	2b00      	cmp	r3, #0
 801904a:	f340 8097 	ble.w	801917c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801904e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019054:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019058:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801905c:	eef0 6a62 	vmov.f32	s13, s5
 8019060:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019064:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019068:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801906c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8019070:	eef0 6a43 	vmov.f32	s13, s6
 8019074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019078:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801907c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019080:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019084:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019088:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801908c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019090:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019094:	ee12 2a90 	vmov	r2, s5
 8019098:	eef0 2a47 	vmov.f32	s5, s14
 801909c:	fb92 f3f3 	sdiv	r3, r2, r3
 80190a0:	ee13 2a10 	vmov	r2, s6
 80190a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80190a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190a8:	eeb0 3a67 	vmov.f32	s6, s15
 80190ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80190b0:	9314      	str	r3, [sp, #80]	; 0x50
 80190b2:	9b01      	ldr	r3, [sp, #4]
 80190b4:	9a05      	ldr	r2, [sp, #20]
 80190b6:	3b01      	subs	r3, #1
 80190b8:	9301      	str	r3, [sp, #4]
 80190ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190bc:	bf08      	it	eq
 80190be:	4613      	moveq	r3, r2
 80190c0:	e72c      	b.n	8018f1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80190c2:	140f      	asrs	r7, r1, #16
 80190c4:	d453      	bmi.n	801916e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80190c6:	f8de 5008 	ldr.w	r5, [lr, #8]
 80190ca:	42bd      	cmp	r5, r7
 80190cc:	dd4f      	ble.n	801916e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80190ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80190d2:	d44c      	bmi.n	801916e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80190d4:	f8de 000c 	ldr.w	r0, [lr, #12]
 80190d8:	4560      	cmp	r0, ip
 80190da:	dd48      	ble.n	801916e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80190dc:	9803      	ldr	r0, [sp, #12]
 80190de:	b22d      	sxth	r5, r5
 80190e0:	fb0c 0505 	mla	r5, ip, r5, r0
 80190e4:	5de8      	ldrb	r0, [r5, r7]
 80190e6:	9d04      	ldr	r5, [sp, #16]
 80190e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80190ec:	f06f 0501 	mvn.w	r5, #1
 80190f0:	fb05 fb08 	mul.w	fp, r5, r8
 80190f4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80190f8:	f834 500b 	ldrh.w	r5, [r4, fp]
 80190fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019100:	122f      	asrs	r7, r5, #8
 8019102:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019106:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801910a:	00ed      	lsls	r5, r5, #3
 801910c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019110:	fb17 f706 	smulbb	r7, r7, r6
 8019114:	b2ed      	uxtb	r5, r5
 8019116:	fb19 f906 	smulbb	r9, r9, r6
 801911a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801911e:	10c7      	asrs	r7, r0, #3
 8019120:	fb15 f506 	smulbb	r5, r5, r6
 8019124:	00c0      	lsls	r0, r0, #3
 8019126:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801912a:	fa1f fc8c 	uxth.w	ip, ip
 801912e:	b2c0      	uxtb	r0, r0
 8019130:	fb07 970a 	mla	r7, r7, sl, r9
 8019134:	fb00 500a 	mla	r0, r0, sl, r5
 8019138:	f10c 0501 	add.w	r5, ip, #1
 801913c:	b2bf      	uxth	r7, r7
 801913e:	b280      	uxth	r0, r0
 8019140:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019144:	f107 0901 	add.w	r9, r7, #1
 8019148:	1c45      	adds	r5, r0, #1
 801914a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801914e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019152:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019156:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801915a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801915e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019162:	ea45 0c0c 	orr.w	ip, r5, ip
 8019166:	ea4c 0c09 	orr.w	ip, ip, r9
 801916a:	f824 c00b 	strh.w	ip, [r4, fp]
 801916e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019170:	f108 38ff 	add.w	r8, r8, #4294967295
 8019174:	4401      	add	r1, r0
 8019176:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019178:	4402      	add	r2, r0
 801917a:	e75c      	b.n	8019036 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801917c:	b007      	add	sp, #28
 801917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019182 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019186:	b085      	sub	sp, #20
 8019188:	4693      	mov	fp, r2
 801918a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801918e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019190:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8019192:	6870      	ldr	r0, [r6, #4]
 8019194:	9100      	str	r1, [sp, #0]
 8019196:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801919a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801919e:	fb00 2404 	mla	r4, r0, r4, r2
 80191a2:	6832      	ldr	r2, [r6, #0]
 80191a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80191a8:	682a      	ldr	r2, [r5, #0]
 80191aa:	9201      	str	r2, [sp, #4]
 80191ac:	686a      	ldr	r2, [r5, #4]
 80191ae:	3204      	adds	r2, #4
 80191b0:	9202      	str	r2, [sp, #8]
 80191b2:	9a00      	ldr	r2, [sp, #0]
 80191b4:	2a00      	cmp	r2, #0
 80191b6:	dc03      	bgt.n	80191c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80191b8:	f1bb 0f00 	cmp.w	fp, #0
 80191bc:	f340 80a0 	ble.w	8019300 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80191c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80191c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80191c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80191ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80191cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80191d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	dd0c      	ble.n	80191f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80191d8:	1406      	asrs	r6, r0, #16
 80191da:	d405      	bmi.n	80191e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80191dc:	454e      	cmp	r6, r9
 80191de:	da03      	bge.n	80191e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80191e0:	1416      	asrs	r6, r2, #16
 80191e2:	d401      	bmi.n	80191e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80191e4:	4546      	cmp	r6, r8
 80191e6:	db05      	blt.n	80191f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80191e8:	4470      	add	r0, lr
 80191ea:	4462      	add	r2, ip
 80191ec:	3b01      	subs	r3, #1
 80191ee:	3402      	adds	r4, #2
 80191f0:	e7f0      	b.n	80191d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80191f2:	d00f      	beq.n	8019214 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80191f4:	1e5e      	subs	r6, r3, #1
 80191f6:	fb0e 0706 	mla	r7, lr, r6, r0
 80191fa:	143f      	asrs	r7, r7, #16
 80191fc:	d541      	bpl.n	8019282 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80191fe:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019202:	4698      	mov	r8, r3
 8019204:	9603      	str	r6, [sp, #12]
 8019206:	f1b8 0f00 	cmp.w	r8, #0
 801920a:	dc59      	bgt.n	80192c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801920c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019210:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019214:	9b00      	ldr	r3, [sp, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	dd72      	ble.n	8019300 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801921a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801921e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019220:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019224:	eeb0 6a62 	vmov.f32	s12, s5
 8019228:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801922c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019230:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019234:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019238:	eeb0 6a43 	vmov.f32	s12, s6
 801923c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019240:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019244:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019248:	ee61 7a27 	vmul.f32	s15, s2, s15
 801924c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019250:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019254:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019258:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801925c:	ee12 2a90 	vmov	r2, s5
 8019260:	eef0 2a47 	vmov.f32	s5, s14
 8019264:	fb92 fef3 	sdiv	lr, r2, r3
 8019268:	ee13 2a10 	vmov	r2, s6
 801926c:	eeb0 3a67 	vmov.f32	s6, s15
 8019270:	fb92 fcf3 	sdiv	ip, r2, r3
 8019274:	9b00      	ldr	r3, [sp, #0]
 8019276:	3b01      	subs	r3, #1
 8019278:	9300      	str	r3, [sp, #0]
 801927a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801927c:	bf08      	it	eq
 801927e:	465b      	moveq	r3, fp
 8019280:	e797      	b.n	80191b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019282:	454f      	cmp	r7, r9
 8019284:	dabb      	bge.n	80191fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019286:	fb0c 2606 	mla	r6, ip, r6, r2
 801928a:	1436      	asrs	r6, r6, #16
 801928c:	d4b7      	bmi.n	80191fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801928e:	4546      	cmp	r6, r8
 8019290:	dab5      	bge.n	80191fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019292:	461e      	mov	r6, r3
 8019294:	46a0      	mov	r8, r4
 8019296:	2e00      	cmp	r6, #0
 8019298:	ddb8      	ble.n	801920c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801929a:	1417      	asrs	r7, r2, #16
 801929c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80192a0:	9901      	ldr	r1, [sp, #4]
 80192a2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80192a6:	4462      	add	r2, ip
 80192a8:	4470      	add	r0, lr
 80192aa:	fb0a 1707 	mla	r7, sl, r7, r1
 80192ae:	9902      	ldr	r1, [sp, #8]
 80192b0:	3e01      	subs	r6, #1
 80192b2:	f817 7009 	ldrb.w	r7, [r7, r9]
 80192b6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80192ba:	f828 7b02 	strh.w	r7, [r8], #2
 80192be:	e7ea      	b.n	8019296 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80192c0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80192c4:	d417      	bmi.n	80192f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80192c6:	68ae      	ldr	r6, [r5, #8]
 80192c8:	454e      	cmp	r6, r9
 80192ca:	dd14      	ble.n	80192f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80192cc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80192d0:	d411      	bmi.n	80192f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80192d2:	68ef      	ldr	r7, [r5, #12]
 80192d4:	4557      	cmp	r7, sl
 80192d6:	dd0e      	ble.n	80192f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80192d8:	9f01      	ldr	r7, [sp, #4]
 80192da:	b236      	sxth	r6, r6
 80192dc:	f06f 0101 	mvn.w	r1, #1
 80192e0:	fb0a 7606 	mla	r6, sl, r6, r7
 80192e4:	9f02      	ldr	r7, [sp, #8]
 80192e6:	f816 6009 	ldrb.w	r6, [r6, r9]
 80192ea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80192ee:	fb01 f608 	mul.w	r6, r1, r8
 80192f2:	9903      	ldr	r1, [sp, #12]
 80192f4:	538f      	strh	r7, [r1, r6]
 80192f6:	4470      	add	r0, lr
 80192f8:	4462      	add	r2, ip
 80192fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80192fe:	e782      	b.n	8019206 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019300:	b005      	add	sp, #20
 8019302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019306 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801930a:	b087      	sub	sp, #28
 801930c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801930e:	9205      	str	r2, [sp, #20]
 8019310:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019314:	9102      	str	r1, [sp, #8]
 8019316:	9203      	str	r2, [sp, #12]
 8019318:	6861      	ldr	r1, [r4, #4]
 801931a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801931e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019322:	fb01 2000 	mla	r0, r1, r0, r2
 8019326:	6822      	ldr	r2, [r4, #0]
 8019328:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801932c:	9200      	str	r2, [sp, #0]
 801932e:	f8dc 2000 	ldr.w	r2, [ip]
 8019332:	9204      	str	r2, [sp, #16]
 8019334:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019338:	3204      	adds	r2, #4
 801933a:	9201      	str	r2, [sp, #4]
 801933c:	9a03      	ldr	r2, [sp, #12]
 801933e:	43d5      	mvns	r5, r2
 8019340:	b2ed      	uxtb	r5, r5
 8019342:	9a02      	ldr	r2, [sp, #8]
 8019344:	2a00      	cmp	r2, #0
 8019346:	dc03      	bgt.n	8019350 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019348:	9a05      	ldr	r2, [sp, #20]
 801934a:	2a00      	cmp	r2, #0
 801934c:	f340 812c 	ble.w	80195a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019352:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019356:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801935a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801935c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019360:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019364:	2b00      	cmp	r3, #0
 8019366:	dd10      	ble.n	801938a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019368:	140c      	asrs	r4, r1, #16
 801936a:	d405      	bmi.n	8019378 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801936c:	4574      	cmp	r4, lr
 801936e:	da03      	bge.n	8019378 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019370:	1414      	asrs	r4, r2, #16
 8019372:	d401      	bmi.n	8019378 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019374:	42bc      	cmp	r4, r7
 8019376:	db09      	blt.n	801938c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8019378:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801937a:	3b01      	subs	r3, #1
 801937c:	9800      	ldr	r0, [sp, #0]
 801937e:	4421      	add	r1, r4
 8019380:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019382:	3002      	adds	r0, #2
 8019384:	4422      	add	r2, r4
 8019386:	9000      	str	r0, [sp, #0]
 8019388:	e7ec      	b.n	8019364 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801938a:	d071      	beq.n	8019470 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801938c:	1e5c      	subs	r4, r3, #1
 801938e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019390:	fb06 1604 	mla	r6, r6, r4, r1
 8019394:	1436      	asrs	r6, r6, #16
 8019396:	d45d      	bmi.n	8019454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8019398:	4576      	cmp	r6, lr
 801939a:	da5b      	bge.n	8019454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801939c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801939e:	fb06 2404 	mla	r4, r6, r4, r2
 80193a2:	1424      	asrs	r4, r4, #16
 80193a4:	d456      	bmi.n	8019454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80193a6:	42bc      	cmp	r4, r7
 80193a8:	da54      	bge.n	8019454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80193aa:	4698      	mov	r8, r3
 80193ac:	f8dd 9000 	ldr.w	r9, [sp]
 80193b0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80193b4:	f1b8 0f00 	cmp.w	r8, #0
 80193b8:	dd54      	ble.n	8019464 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80193ba:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80193be:	1414      	asrs	r4, r2, #16
 80193c0:	9804      	ldr	r0, [sp, #16]
 80193c2:	140e      	asrs	r6, r1, #16
 80193c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80193c8:	fb07 0404 	mla	r4, r7, r4, r0
 80193cc:	9801      	ldr	r0, [sp, #4]
 80193ce:	f814 e006 	ldrb.w	lr, [r4, r6]
 80193d2:	f8b9 4000 	ldrh.w	r4, [r9]
 80193d6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80193da:	1227      	asrs	r7, r4, #8
 80193dc:	eb00 0b0e 	add.w	fp, r0, lr
 80193e0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80193e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80193e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80193ea:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80193ee:	f89b b001 	ldrb.w	fp, [fp, #1]
 80193f2:	4401      	add	r1, r0
 80193f4:	fb16 f60a 	smulbb	r6, r6, sl
 80193f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80193fa:	fb1b fb0a 	smulbb	fp, fp, sl
 80193fe:	fb07 6705 	mla	r7, r7, r5, r6
 8019402:	10e6      	asrs	r6, r4, #3
 8019404:	00e4      	lsls	r4, r4, #3
 8019406:	4402      	add	r2, r0
 8019408:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801940c:	b2bf      	uxth	r7, r7
 801940e:	b2e4      	uxtb	r4, r4
 8019410:	fb06 b605 	mla	r6, r6, r5, fp
 8019414:	fb14 f405 	smulbb	r4, r4, r5
 8019418:	b2b6      	uxth	r6, r6
 801941a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801941e:	1c7c      	adds	r4, r7, #1
 8019420:	f106 0b01 	add.w	fp, r6, #1
 8019424:	fa1f fe8e 	uxth.w	lr, lr
 8019428:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801942c:	f10e 0401 	add.w	r4, lr, #1
 8019430:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8019434:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019438:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801943c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019440:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8019444:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019448:	4327      	orrs	r7, r4
 801944a:	ea47 070b 	orr.w	r7, r7, fp
 801944e:	f829 7b02 	strh.w	r7, [r9], #2
 8019452:	e7af      	b.n	80193b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019454:	f04f 0e00 	mov.w	lr, #0
 8019458:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801945c:	eb03 040e 	add.w	r4, r3, lr
 8019460:	2c00      	cmp	r4, #0
 8019462:	dc43      	bgt.n	80194ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019464:	9a00      	ldr	r2, [sp, #0]
 8019466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801946a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801946e:	9300      	str	r3, [sp, #0]
 8019470:	9b02      	ldr	r3, [sp, #8]
 8019472:	2b00      	cmp	r3, #0
 8019474:	f340 8098 	ble.w	80195a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801947c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801947e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019482:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019486:	eef0 6a62 	vmov.f32	s13, s5
 801948a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801948e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019492:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019496:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801949a:	eef0 6a43 	vmov.f32	s13, s6
 801949e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80194a2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80194a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80194aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80194ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80194b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80194b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80194ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80194be:	ee12 2a90 	vmov	r2, s5
 80194c2:	eef0 2a47 	vmov.f32	s5, s14
 80194c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80194ca:	ee13 2a10 	vmov	r2, s6
 80194ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80194d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194d2:	eeb0 3a67 	vmov.f32	s6, s15
 80194d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80194da:	9314      	str	r3, [sp, #80]	; 0x50
 80194dc:	9b02      	ldr	r3, [sp, #8]
 80194de:	9a05      	ldr	r2, [sp, #20]
 80194e0:	3b01      	subs	r3, #1
 80194e2:	9302      	str	r3, [sp, #8]
 80194e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194e6:	bf08      	it	eq
 80194e8:	4613      	moveq	r3, r2
 80194ea:	e72a      	b.n	8019342 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80194ec:	140f      	asrs	r7, r1, #16
 80194ee:	d454      	bmi.n	801959a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80194f0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80194f4:	42be      	cmp	r6, r7
 80194f6:	dd50      	ble.n	801959a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80194f8:	ea5f 4822 	movs.w	r8, r2, asr #16
 80194fc:	d44d      	bmi.n	801959a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80194fe:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8019502:	4544      	cmp	r4, r8
 8019504:	dd49      	ble.n	801959a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019506:	9c04      	ldr	r4, [sp, #16]
 8019508:	b236      	sxth	r6, r6
 801950a:	f06f 0001 	mvn.w	r0, #1
 801950e:	fb08 4606 	mla	r6, r8, r6, r4
 8019512:	9c01      	ldr	r4, [sp, #4]
 8019514:	fb00 fa0e 	mul.w	sl, r0, lr
 8019518:	9800      	ldr	r0, [sp, #0]
 801951a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801951e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019522:	eb04 0b08 	add.w	fp, r4, r8
 8019526:	f830 400a 	ldrh.w	r4, [r0, sl]
 801952a:	9801      	ldr	r0, [sp, #4]
 801952c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8019530:	1227      	asrs	r7, r4, #8
 8019532:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019536:	fb16 f609 	smulbb	r6, r6, r9
 801953a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801953e:	f810 8008 	ldrb.w	r8, [r0, r8]
 8019542:	fb1b fb09 	smulbb	fp, fp, r9
 8019546:	fb07 6705 	mla	r7, r7, r5, r6
 801954a:	10e6      	asrs	r6, r4, #3
 801954c:	00e4      	lsls	r4, r4, #3
 801954e:	9800      	ldr	r0, [sp, #0]
 8019550:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019554:	b2bf      	uxth	r7, r7
 8019556:	b2e4      	uxtb	r4, r4
 8019558:	fb06 b605 	mla	r6, r6, r5, fp
 801955c:	fb14 f405 	smulbb	r4, r4, r5
 8019560:	b2b6      	uxth	r6, r6
 8019562:	fb08 4809 	mla	r8, r8, r9, r4
 8019566:	1c7c      	adds	r4, r7, #1
 8019568:	f106 0b01 	add.w	fp, r6, #1
 801956c:	fa1f f888 	uxth.w	r8, r8
 8019570:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8019574:	f108 0401 	add.w	r4, r8, #1
 8019578:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801957c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019580:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8019584:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8019588:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801958c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019590:	4327      	orrs	r7, r4
 8019592:	ea47 070b 	orr.w	r7, r7, fp
 8019596:	f820 700a 	strh.w	r7, [r0, sl]
 801959a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801959c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80195a0:	4401      	add	r1, r0
 80195a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80195a4:	4402      	add	r2, r0
 80195a6:	e759      	b.n	801945c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80195a8:	b007      	add	sp, #28
 80195aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080195b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80195b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b4:	b085      	sub	sp, #20
 80195b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195ba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80195bc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80195be:	9203      	str	r2, [sp, #12]
 80195c0:	6870      	ldr	r0, [r6, #4]
 80195c2:	686f      	ldr	r7, [r5, #4]
 80195c4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80195c8:	3704      	adds	r7, #4
 80195ca:	9101      	str	r1, [sp, #4]
 80195cc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80195d0:	fb00 2404 	mla	r4, r0, r4, r2
 80195d4:	6832      	ldr	r2, [r6, #0]
 80195d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80195da:	682a      	ldr	r2, [r5, #0]
 80195dc:	9202      	str	r2, [sp, #8]
 80195de:	9a01      	ldr	r2, [sp, #4]
 80195e0:	2a00      	cmp	r2, #0
 80195e2:	dc03      	bgt.n	80195ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80195e4:	9a03      	ldr	r2, [sp, #12]
 80195e6:	2a00      	cmp	r2, #0
 80195e8:	f340 80cc 	ble.w	8019784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80195ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80195ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80195f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80195f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80195f8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80195fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019600:	2b00      	cmp	r3, #0
 8019602:	dd0d      	ble.n	8019620 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019604:	1406      	asrs	r6, r0, #16
 8019606:	d405      	bmi.n	8019614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019608:	454e      	cmp	r6, r9
 801960a:	da03      	bge.n	8019614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801960c:	1416      	asrs	r6, r2, #16
 801960e:	d401      	bmi.n	8019614 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019610:	4546      	cmp	r6, r8
 8019612:	db06      	blt.n	8019622 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019614:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019616:	4460      	add	r0, ip
 8019618:	3b01      	subs	r3, #1
 801961a:	3402      	adds	r4, #2
 801961c:	4432      	add	r2, r6
 801961e:	e7ef      	b.n	8019600 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019620:	d00f      	beq.n	8019642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019622:	1e5e      	subs	r6, r3, #1
 8019624:	fb0c 0e06 	mla	lr, ip, r6, r0
 8019628:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801962c:	d543      	bpl.n	80196b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801962e:	4698      	mov	r8, r3
 8019630:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8019634:	f1b8 0f00 	cmp.w	r8, #0
 8019638:	dc71      	bgt.n	801971e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801963a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801963e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019642:	9b01      	ldr	r3, [sp, #4]
 8019644:	2b00      	cmp	r3, #0
 8019646:	f340 809d 	ble.w	8019784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801964a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801964e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019650:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019654:	eeb0 6a62 	vmov.f32	s12, s5
 8019658:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801965c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019660:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019664:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019668:	eeb0 6a43 	vmov.f32	s12, s6
 801966c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019670:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019674:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019678:	ee61 7a27 	vmul.f32	s15, s2, s15
 801967c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019680:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019684:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019688:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801968c:	ee12 2a90 	vmov	r2, s5
 8019690:	eef0 2a47 	vmov.f32	s5, s14
 8019694:	fb92 fcf3 	sdiv	ip, r2, r3
 8019698:	ee13 2a10 	vmov	r2, s6
 801969c:	eeb0 3a67 	vmov.f32	s6, s15
 80196a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80196a4:	9312      	str	r3, [sp, #72]	; 0x48
 80196a6:	9b01      	ldr	r3, [sp, #4]
 80196a8:	9a03      	ldr	r2, [sp, #12]
 80196aa:	3b01      	subs	r3, #1
 80196ac:	9301      	str	r3, [sp, #4]
 80196ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196b0:	bf08      	it	eq
 80196b2:	4613      	moveq	r3, r2
 80196b4:	e793      	b.n	80195de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80196b6:	45ce      	cmp	lr, r9
 80196b8:	dab9      	bge.n	801962e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80196ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80196bc:	fb01 2606 	mla	r6, r1, r6, r2
 80196c0:	1436      	asrs	r6, r6, #16
 80196c2:	d4b4      	bmi.n	801962e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80196c4:	4546      	cmp	r6, r8
 80196c6:	dab2      	bge.n	801962e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80196c8:	4698      	mov	r8, r3
 80196ca:	46a2      	mov	sl, r4
 80196cc:	f1b8 0f00 	cmp.w	r8, #0
 80196d0:	ddb3      	ble.n	801963a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80196d2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80196d6:	1416      	asrs	r6, r2, #16
 80196d8:	9902      	ldr	r1, [sp, #8]
 80196da:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80196de:	f108 38ff 	add.w	r8, r8, #4294967295
 80196e2:	4460      	add	r0, ip
 80196e4:	fb09 1606 	mla	r6, r9, r6, r1
 80196e8:	4928      	ldr	r1, [pc, #160]	; (801978c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80196ea:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80196ee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80196f2:	eb07 0b0e 	add.w	fp, r7, lr
 80196f6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80196fa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80196fe:	00f6      	lsls	r6, r6, #3
 8019700:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8019704:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019706:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801970a:	440a      	add	r2, r1
 801970c:	ea49 0606 	orr.w	r6, r9, r6
 8019710:	f817 900e 	ldrb.w	r9, [r7, lr]
 8019714:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8019718:	f82a 6b02 	strh.w	r6, [sl], #2
 801971c:	e7d6      	b.n	80196cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801971e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019722:	d429      	bmi.n	8019778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019724:	68ae      	ldr	r6, [r5, #8]
 8019726:	454e      	cmp	r6, r9
 8019728:	dd26      	ble.n	8019778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801972a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801972e:	d423      	bmi.n	8019778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019730:	68e9      	ldr	r1, [r5, #12]
 8019732:	4559      	cmp	r1, fp
 8019734:	dd20      	ble.n	8019778 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019736:	fa0f fe86 	sxth.w	lr, r6
 801973a:	9902      	ldr	r1, [sp, #8]
 801973c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8019740:	f06f 0101 	mvn.w	r1, #1
 8019744:	f81e e009 	ldrb.w	lr, [lr, r9]
 8019748:	fb01 f908 	mul.w	r9, r1, r8
 801974c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8019750:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019754:	eb07 060e 	add.w	r6, r7, lr
 8019758:	f896 b002 	ldrb.w	fp, [r6, #2]
 801975c:	7876      	ldrb	r6, [r6, #1]
 801975e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8019762:	00f6      	lsls	r6, r6, #3
 8019764:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019768:	ea4b 0606 	orr.w	r6, fp, r6
 801976c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8019770:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8019774:	f82a 6009 	strh.w	r6, [sl, r9]
 8019778:	9912      	ldr	r1, [sp, #72]	; 0x48
 801977a:	4460      	add	r0, ip
 801977c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019780:	440a      	add	r2, r1
 8019782:	e757      	b.n	8019634 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8019784:	b005      	add	sp, #20
 8019786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801978a:	bf00      	nop
 801978c:	fffff800 	.word	0xfffff800

08019790 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019794:	b087      	sub	sp, #28
 8019796:	468b      	mov	fp, r1
 8019798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801979c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801979e:	9204      	str	r2, [sp, #16]
 80197a0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80197a4:	6841      	ldr	r1, [r0, #4]
 80197a6:	9205      	str	r2, [sp, #20]
 80197a8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80197ac:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80197b0:	fb01 2404 	mla	r4, r1, r4, r2
 80197b4:	6802      	ldr	r2, [r0, #0]
 80197b6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80197ba:	f8dc 2000 	ldr.w	r2, [ip]
 80197be:	9201      	str	r2, [sp, #4]
 80197c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80197c4:	3204      	adds	r2, #4
 80197c6:	9202      	str	r2, [sp, #8]
 80197c8:	f1bb 0f00 	cmp.w	fp, #0
 80197cc:	dc03      	bgt.n	80197d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80197ce:	9a04      	ldr	r2, [sp, #16]
 80197d0:	2a00      	cmp	r2, #0
 80197d2:	f340 8138 	ble.w	8019a46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80197d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80197d8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80197dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80197e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80197e2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80197e6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	dd0e      	ble.n	801980c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80197ee:	1402      	asrs	r2, r0, #16
 80197f0:	d405      	bmi.n	80197fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80197f2:	42ba      	cmp	r2, r7
 80197f4:	da03      	bge.n	80197fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80197f6:	140a      	asrs	r2, r1, #16
 80197f8:	d401      	bmi.n	80197fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80197fa:	42b2      	cmp	r2, r6
 80197fc:	db07      	blt.n	801980e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80197fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019800:	3b01      	subs	r3, #1
 8019802:	3402      	adds	r4, #2
 8019804:	4410      	add	r0, r2
 8019806:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019808:	4411      	add	r1, r2
 801980a:	e7ee      	b.n	80197ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801980c:	d019      	beq.n	8019842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801980e:	1e5a      	subs	r2, r3, #1
 8019810:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019812:	fb05 0502 	mla	r5, r5, r2, r0
 8019816:	142d      	asrs	r5, r5, #16
 8019818:	d409      	bmi.n	801982e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801981a:	42bd      	cmp	r5, r7
 801981c:	da07      	bge.n	801982e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801981e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019820:	fb05 1202 	mla	r2, r5, r2, r1
 8019824:	1412      	asrs	r2, r2, #16
 8019826:	d402      	bmi.n	801982e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019828:	42b2      	cmp	r2, r6
 801982a:	f2c0 80ac 	blt.w	8019986 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801982e:	f04f 0e00 	mov.w	lr, #0
 8019832:	eb03 020e 	add.w	r2, r3, lr
 8019836:	2a00      	cmp	r2, #0
 8019838:	dc3e      	bgt.n	80198b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801983a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801983e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019842:	f1bb 0f00 	cmp.w	fp, #0
 8019846:	f340 80fe 	ble.w	8019a46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801984a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801984e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019850:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019854:	f1bb 0b01 	subs.w	fp, fp, #1
 8019858:	eeb0 6a62 	vmov.f32	s12, s5
 801985c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019860:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019864:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019868:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801986c:	eeb0 6a43 	vmov.f32	s12, s6
 8019870:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019874:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019878:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801987c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019880:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019884:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019888:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801988c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019890:	ee12 2a90 	vmov	r2, s5
 8019894:	eef0 2a47 	vmov.f32	s5, s14
 8019898:	fb92 f3f3 	sdiv	r3, r2, r3
 801989c:	ee13 2a10 	vmov	r2, s6
 80198a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80198a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80198a4:	eeb0 3a67 	vmov.f32	s6, s15
 80198a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80198ac:	9a04      	ldr	r2, [sp, #16]
 80198ae:	9314      	str	r3, [sp, #80]	; 0x50
 80198b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80198b2:	bf08      	it	eq
 80198b4:	4613      	moveq	r3, r2
 80198b6:	e787      	b.n	80197c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80198b8:	1406      	asrs	r6, r0, #16
 80198ba:	d45d      	bmi.n	8019978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80198bc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80198c0:	42b5      	cmp	r5, r6
 80198c2:	dd59      	ble.n	8019978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80198c4:	140f      	asrs	r7, r1, #16
 80198c6:	d457      	bmi.n	8019978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80198c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80198cc:	42ba      	cmp	r2, r7
 80198ce:	dd53      	ble.n	8019978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80198d0:	9a01      	ldr	r2, [sp, #4]
 80198d2:	b22d      	sxth	r5, r5
 80198d4:	fb07 2505 	mla	r5, r7, r5, r2
 80198d8:	5daa      	ldrb	r2, [r5, r6]
 80198da:	9d02      	ldr	r5, [sp, #8]
 80198dc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80198e0:	0e2e      	lsrs	r6, r5, #24
 80198e2:	d049      	beq.n	8019978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80198e4:	f06f 0201 	mvn.w	r2, #1
 80198e8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80198ec:	fb02 f20e 	mul.w	r2, r2, lr
 80198f0:	f834 8002 	ldrh.w	r8, [r4, r2]
 80198f4:	9203      	str	r2, [sp, #12]
 80198f6:	9a05      	ldr	r2, [sp, #20]
 80198f8:	ea4f 2728 	mov.w	r7, r8, asr #8
 80198fc:	4356      	muls	r6, r2
 80198fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019902:	1c72      	adds	r2, r6, #1
 8019904:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8019908:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801990c:	b2ed      	uxtb	r5, r5
 801990e:	1212      	asrs	r2, r2, #8
 8019910:	fa1f f982 	uxth.w	r9, r2
 8019914:	43d2      	mvns	r2, r2
 8019916:	fb16 f609 	smulbb	r6, r6, r9
 801991a:	b2d2      	uxtb	r2, r2
 801991c:	fb15 f509 	smulbb	r5, r5, r9
 8019920:	fb07 6702 	mla	r7, r7, r2, r6
 8019924:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8019928:	fb1a fa09 	smulbb	sl, sl, r9
 801992c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019930:	b2bf      	uxth	r7, r7
 8019932:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019936:	fa5f f888 	uxtb.w	r8, r8
 801993a:	fb06 a602 	mla	r6, r6, r2, sl
 801993e:	fb08 5502 	mla	r5, r8, r2, r5
 8019942:	1c7a      	adds	r2, r7, #1
 8019944:	b2b6      	uxth	r6, r6
 8019946:	b2ad      	uxth	r5, r5
 8019948:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801994c:	9a03      	ldr	r2, [sp, #12]
 801994e:	f105 0a01 	add.w	sl, r5, #1
 8019952:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019956:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801995a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801995e:	ea4a 0707 	orr.w	r7, sl, r7
 8019962:	f106 0a01 	add.w	sl, r6, #1
 8019966:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801996a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801996e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019972:	ea47 070a 	orr.w	r7, r7, sl
 8019976:	52a7      	strh	r7, [r4, r2]
 8019978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801997a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801997e:	4410      	add	r0, r2
 8019980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019982:	4411      	add	r1, r2
 8019984:	e755      	b.n	8019832 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019986:	f04f 0800 	mov.w	r8, #0
 801998a:	eba3 0208 	sub.w	r2, r3, r8
 801998e:	2a00      	cmp	r2, #0
 8019990:	f77f af53 	ble.w	801983a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019994:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8019998:	140a      	asrs	r2, r1, #16
 801999a:	9f01      	ldr	r7, [sp, #4]
 801999c:	1405      	asrs	r5, r0, #16
 801999e:	fb06 7202 	mla	r2, r6, r2, r7
 80199a2:	5d52      	ldrb	r2, [r2, r5]
 80199a4:	9d02      	ldr	r5, [sp, #8]
 80199a6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80199aa:	0e2e      	lsrs	r6, r5, #24
 80199ac:	d044      	beq.n	8019a38 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80199ae:	9a05      	ldr	r2, [sp, #20]
 80199b0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80199b4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80199b8:	4356      	muls	r6, r2
 80199ba:	ea4f 272e 	mov.w	r7, lr, asr #8
 80199be:	1c72      	adds	r2, r6, #1
 80199c0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80199c4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80199c8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80199cc:	b2ed      	uxtb	r5, r5
 80199ce:	1212      	asrs	r2, r2, #8
 80199d0:	fa1f f982 	uxth.w	r9, r2
 80199d4:	43d2      	mvns	r2, r2
 80199d6:	fb16 f609 	smulbb	r6, r6, r9
 80199da:	b2d2      	uxtb	r2, r2
 80199dc:	fb15 f509 	smulbb	r5, r5, r9
 80199e0:	fb07 6702 	mla	r7, r7, r2, r6
 80199e4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80199e8:	fb1a fa09 	smulbb	sl, sl, r9
 80199ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80199f0:	b2bf      	uxth	r7, r7
 80199f2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80199f6:	fa5f fe8e 	uxtb.w	lr, lr
 80199fa:	fb06 a602 	mla	r6, r6, r2, sl
 80199fe:	fb0e 5502 	mla	r5, lr, r2, r5
 8019a02:	1c7a      	adds	r2, r7, #1
 8019a04:	b2b6      	uxth	r6, r6
 8019a06:	b2ad      	uxth	r5, r5
 8019a08:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019a0c:	f105 0a01 	add.w	sl, r5, #1
 8019a10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019a14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019a18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019a1c:	ea4a 0707 	orr.w	r7, sl, r7
 8019a20:	f106 0a01 	add.w	sl, r6, #1
 8019a24:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019a28:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019a2c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019a30:	ea47 070a 	orr.w	r7, r7, sl
 8019a34:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019a3a:	f108 0801 	add.w	r8, r8, #1
 8019a3e:	4410      	add	r0, r2
 8019a40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a42:	4411      	add	r1, r2
 8019a44:	e7a1      	b.n	801998a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8019a46:	b007      	add	sp, #28
 8019a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a50:	b085      	sub	sp, #20
 8019a52:	468b      	mov	fp, r1
 8019a54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019a58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a5a:	9203      	str	r2, [sp, #12]
 8019a5c:	6841      	ldr	r1, [r0, #4]
 8019a5e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8019a62:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019a66:	fb01 2404 	mla	r4, r1, r4, r2
 8019a6a:	6802      	ldr	r2, [r0, #0]
 8019a6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019a70:	f8de 2000 	ldr.w	r2, [lr]
 8019a74:	9200      	str	r2, [sp, #0]
 8019a76:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019a7a:	3204      	adds	r2, #4
 8019a7c:	9201      	str	r2, [sp, #4]
 8019a7e:	f1bb 0f00 	cmp.w	fp, #0
 8019a82:	dc03      	bgt.n	8019a8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8019a84:	9a03      	ldr	r2, [sp, #12]
 8019a86:	2a00      	cmp	r2, #0
 8019a88:	f340 8153 	ble.w	8019d32 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a8e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019a92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a98:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019a9c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	dd0e      	ble.n	8019ac2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019aa4:	1408      	asrs	r0, r1, #16
 8019aa6:	d405      	bmi.n	8019ab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019aa8:	42b8      	cmp	r0, r7
 8019aaa:	da03      	bge.n	8019ab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019aac:	1410      	asrs	r0, r2, #16
 8019aae:	d401      	bmi.n	8019ab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019ab0:	42b0      	cmp	r0, r6
 8019ab2:	db07      	blt.n	8019ac4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019ab4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019ab6:	3b01      	subs	r3, #1
 8019ab8:	3402      	adds	r4, #2
 8019aba:	4401      	add	r1, r0
 8019abc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019abe:	4402      	add	r2, r0
 8019ac0:	e7ee      	b.n	8019aa0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8019ac2:	d017      	beq.n	8019af4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019ac4:	1e58      	subs	r0, r3, #1
 8019ac6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019ac8:	fb05 1500 	mla	r5, r5, r0, r1
 8019acc:	142d      	asrs	r5, r5, #16
 8019ace:	d409      	bmi.n	8019ae4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019ad0:	42bd      	cmp	r5, r7
 8019ad2:	da07      	bge.n	8019ae4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019ad4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019ad6:	fb05 2000 	mla	r0, r5, r0, r2
 8019ada:	1400      	asrs	r0, r0, #16
 8019adc:	d402      	bmi.n	8019ae4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019ade:	42b0      	cmp	r0, r6
 8019ae0:	f2c0 80bc 	blt.w	8019c5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8019ae4:	2600      	movs	r6, #0
 8019ae6:	1998      	adds	r0, r3, r6
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	dc3e      	bgt.n	8019b6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019aec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019af0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019af4:	f1bb 0f00 	cmp.w	fp, #0
 8019af8:	f340 811b 	ble.w	8019d32 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8019afc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019b06:	f1bb 0b01 	subs.w	fp, fp, #1
 8019b0a:	eeb0 6a62 	vmov.f32	s12, s5
 8019b0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019b12:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019b16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b1a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019b1e:	eeb0 6a43 	vmov.f32	s12, s6
 8019b22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019b26:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019b2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019b2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019b32:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019b36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019b3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019b3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019b42:	ee12 2a90 	vmov	r2, s5
 8019b46:	eef0 2a47 	vmov.f32	s5, s14
 8019b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b4e:	ee13 2a10 	vmov	r2, s6
 8019b52:	9311      	str	r3, [sp, #68]	; 0x44
 8019b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b56:	eeb0 3a67 	vmov.f32	s6, s15
 8019b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b5e:	9a03      	ldr	r2, [sp, #12]
 8019b60:	9312      	str	r3, [sp, #72]	; 0x48
 8019b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b64:	bf08      	it	eq
 8019b66:	4613      	moveq	r3, r2
 8019b68:	e789      	b.n	8019a7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8019b6a:	140f      	asrs	r7, r1, #16
 8019b6c:	d426      	bmi.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019b6e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019b72:	42bd      	cmp	r5, r7
 8019b74:	dd22      	ble.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019b76:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019b7a:	d41f      	bmi.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019b7c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019b80:	4560      	cmp	r0, ip
 8019b82:	dd1b      	ble.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019b84:	9800      	ldr	r0, [sp, #0]
 8019b86:	b22d      	sxth	r5, r5
 8019b88:	fb0c 0505 	mla	r5, ip, r5, r0
 8019b8c:	5de8      	ldrb	r0, [r5, r7]
 8019b8e:	9d01      	ldr	r5, [sp, #4]
 8019b90:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019b94:	0e07      	lsrs	r7, r0, #24
 8019b96:	2fff      	cmp	r7, #255	; 0xff
 8019b98:	d116      	bne.n	8019bc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019b9a:	f06f 0501 	mvn.w	r5, #1
 8019b9e:	fb05 f706 	mul.w	r7, r5, r6
 8019ba2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8019ba6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8019baa:	0945      	lsrs	r5, r0, #5
 8019bac:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019bb0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019bb4:	ea4c 0505 	orr.w	r5, ip, r5
 8019bb8:	4305      	orrs	r5, r0
 8019bba:	53e5      	strh	r5, [r4, r7]
 8019bbc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019bbe:	3e01      	subs	r6, #1
 8019bc0:	4401      	add	r1, r0
 8019bc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019bc4:	4402      	add	r2, r0
 8019bc6:	e78e      	b.n	8019ae6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019bc8:	b2fd      	uxtb	r5, r7
 8019bca:	2f00      	cmp	r7, #0
 8019bcc:	d0f6      	beq.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019bce:	f06f 0701 	mvn.w	r7, #1
 8019bd2:	fa1f f985 	uxth.w	r9, r5
 8019bd6:	43ed      	mvns	r5, r5
 8019bd8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8019bdc:	4377      	muls	r7, r6
 8019bde:	fb1a fa09 	smulbb	sl, sl, r9
 8019be2:	b2ed      	uxtb	r5, r5
 8019be4:	f834 8007 	ldrh.w	r8, [r4, r7]
 8019be8:	9702      	str	r7, [sp, #8]
 8019bea:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8019bee:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019bf2:	fb17 f709 	smulbb	r7, r7, r9
 8019bf6:	b2c0      	uxtb	r0, r0
 8019bf8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019bfc:	fb10 f009 	smulbb	r0, r0, r9
 8019c00:	fb0c 7c05 	mla	ip, ip, r5, r7
 8019c04:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8019c08:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019c0c:	fa1f fc8c 	uxth.w	ip, ip
 8019c10:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c14:	fa5f f888 	uxtb.w	r8, r8
 8019c18:	fb07 a705 	mla	r7, r7, r5, sl
 8019c1c:	fb08 0005 	mla	r0, r8, r5, r0
 8019c20:	f10c 0501 	add.w	r5, ip, #1
 8019c24:	b2bf      	uxth	r7, r7
 8019c26:	b280      	uxth	r0, r0
 8019c28:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019c2c:	f100 0a01 	add.w	sl, r0, #1
 8019c30:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c34:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019c38:	9802      	ldr	r0, [sp, #8]
 8019c3a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019c3e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019c42:	f107 0a01 	add.w	sl, r7, #1
 8019c46:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019c4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019c4e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019c52:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019c56:	f824 c000 	strh.w	ip, [r4, r0]
 8019c5a:	e7af      	b.n	8019bbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019c5c:	f04f 0800 	mov.w	r8, #0
 8019c60:	eba3 0008 	sub.w	r0, r3, r8
 8019c64:	2800      	cmp	r0, #0
 8019c66:	f77f af41 	ble.w	8019aec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019c6a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8019c6e:	1410      	asrs	r0, r2, #16
 8019c70:	9f00      	ldr	r7, [sp, #0]
 8019c72:	140d      	asrs	r5, r1, #16
 8019c74:	fb06 7000 	mla	r0, r6, r0, r7
 8019c78:	5d40      	ldrb	r0, [r0, r5]
 8019c7a:	9d01      	ldr	r5, [sp, #4]
 8019c7c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019c80:	0e2e      	lsrs	r6, r5, #24
 8019c82:	2eff      	cmp	r6, #255	; 0xff
 8019c84:	d112      	bne.n	8019cac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8019c86:	482c      	ldr	r0, [pc, #176]	; (8019d38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8019c88:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019c8c:	0968      	lsrs	r0, r5, #5
 8019c8e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019c92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019c96:	4330      	orrs	r0, r6
 8019c98:	4328      	orrs	r0, r5
 8019c9a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8019c9e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019ca0:	f108 0801 	add.w	r8, r8, #1
 8019ca4:	4401      	add	r1, r0
 8019ca6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019ca8:	4402      	add	r2, r0
 8019caa:	e7d9      	b.n	8019c60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8019cac:	b2f0      	uxtb	r0, r6
 8019cae:	2e00      	cmp	r6, #0
 8019cb0:	d0f5      	beq.n	8019c9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019cb2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8019cb6:	fa1f f980 	uxth.w	r9, r0
 8019cba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8019cbe:	43c0      	mvns	r0, r0
 8019cc0:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019cc4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019cc8:	fb16 f609 	smulbb	r6, r6, r9
 8019ccc:	b2c0      	uxtb	r0, r0
 8019cce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019cd2:	b2ed      	uxtb	r5, r5
 8019cd4:	fb1a fa09 	smulbb	sl, sl, r9
 8019cd8:	fb07 6700 	mla	r7, r7, r0, r6
 8019cdc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8019ce0:	fb15 f509 	smulbb	r5, r5, r9
 8019ce4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019ce8:	b2bf      	uxth	r7, r7
 8019cea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019cee:	fa5f fc8c 	uxtb.w	ip, ip
 8019cf2:	fb06 a600 	mla	r6, r6, r0, sl
 8019cf6:	fb0c 5500 	mla	r5, ip, r0, r5
 8019cfa:	1c78      	adds	r0, r7, #1
 8019cfc:	b2b6      	uxth	r6, r6
 8019cfe:	b2ad      	uxth	r5, r5
 8019d00:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8019d04:	f105 0a01 	add.w	sl, r5, #1
 8019d08:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019d0c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019d10:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019d14:	ea4a 0707 	orr.w	r7, sl, r7
 8019d18:	f106 0a01 	add.w	sl, r6, #1
 8019d1c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019d20:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019d24:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019d28:	ea47 070a 	orr.w	r7, r7, sl
 8019d2c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8019d30:	e7b5      	b.n	8019c9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8019d32:	b005      	add	sp, #20
 8019d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d38:	fffff800 	.word	0xfffff800

08019d3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d40:	b087      	sub	sp, #28
 8019d42:	468b      	mov	fp, r1
 8019d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019d48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019d4a:	9204      	str	r2, [sp, #16]
 8019d4c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019d50:	6861      	ldr	r1, [r4, #4]
 8019d52:	9205      	str	r2, [sp, #20]
 8019d54:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8019d58:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8019d5c:	fb01 2000 	mla	r0, r1, r0, r2
 8019d60:	6822      	ldr	r2, [r4, #0]
 8019d62:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8019d66:	f8de 2000 	ldr.w	r2, [lr]
 8019d6a:	9201      	str	r2, [sp, #4]
 8019d6c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019d70:	9202      	str	r2, [sp, #8]
 8019d72:	f1bb 0f00 	cmp.w	fp, #0
 8019d76:	dc03      	bgt.n	8019d80 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019d78:	9a04      	ldr	r2, [sp, #16]
 8019d7a:	2a00      	cmp	r2, #0
 8019d7c:	f340 8142 	ble.w	801a004 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019d82:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019d86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019d8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d8c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8019d90:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	dd0e      	ble.n	8019db6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019d98:	140c      	asrs	r4, r1, #16
 8019d9a:	d405      	bmi.n	8019da8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019d9c:	42bc      	cmp	r4, r7
 8019d9e:	da03      	bge.n	8019da8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019da0:	1414      	asrs	r4, r2, #16
 8019da2:	d401      	bmi.n	8019da8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019da4:	42b4      	cmp	r4, r6
 8019da6:	db07      	blt.n	8019db8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019da8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019daa:	3b01      	subs	r3, #1
 8019dac:	3002      	adds	r0, #2
 8019dae:	4421      	add	r1, r4
 8019db0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019db2:	4422      	add	r2, r4
 8019db4:	e7ee      	b.n	8019d94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8019db6:	d019      	beq.n	8019dec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019db8:	1e5c      	subs	r4, r3, #1
 8019dba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019dbc:	fb05 1504 	mla	r5, r5, r4, r1
 8019dc0:	142d      	asrs	r5, r5, #16
 8019dc2:	d409      	bmi.n	8019dd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019dc4:	42bd      	cmp	r5, r7
 8019dc6:	da07      	bge.n	8019dd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019dc8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019dca:	fb05 2404 	mla	r4, r5, r4, r2
 8019dce:	1424      	asrs	r4, r4, #16
 8019dd0:	d402      	bmi.n	8019dd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8019dd2:	42b4      	cmp	r4, r6
 8019dd4:	f2c0 80b1 	blt.w	8019f3a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8019dd8:	f04f 0800 	mov.w	r8, #0
 8019ddc:	eb03 0408 	add.w	r4, r3, r8
 8019de0:	2c00      	cmp	r4, #0
 8019de2:	dc3e      	bgt.n	8019e62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019de8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019dec:	f1bb 0f00 	cmp.w	fp, #0
 8019df0:	f340 8108 	ble.w	801a004 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8019df4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019df8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019dfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019dfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8019e02:	eeb0 6a62 	vmov.f32	s12, s5
 8019e06:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e12:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019e16:	eeb0 6a43 	vmov.f32	s12, s6
 8019e1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e1e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019e22:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e3a:	ee12 2a90 	vmov	r2, s5
 8019e3e:	eef0 2a47 	vmov.f32	s5, s14
 8019e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e46:	ee13 2a10 	vmov	r2, s6
 8019e4a:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e4e:	eeb0 3a67 	vmov.f32	s6, s15
 8019e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e56:	9a04      	ldr	r2, [sp, #16]
 8019e58:	9314      	str	r3, [sp, #80]	; 0x50
 8019e5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e5c:	bf08      	it	eq
 8019e5e:	4613      	moveq	r3, r2
 8019e60:	e787      	b.n	8019d72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019e62:	140e      	asrs	r6, r1, #16
 8019e64:	d462      	bmi.n	8019f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019e66:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019e6a:	42b5      	cmp	r5, r6
 8019e6c:	dd5e      	ble.n	8019f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019e6e:	1417      	asrs	r7, r2, #16
 8019e70:	d45c      	bmi.n	8019f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019e72:	f8de 400c 	ldr.w	r4, [lr, #12]
 8019e76:	42bc      	cmp	r4, r7
 8019e78:	dd58      	ble.n	8019f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019e7a:	b22d      	sxth	r5, r5
 8019e7c:	9c02      	ldr	r4, [sp, #8]
 8019e7e:	fb07 6505 	mla	r5, r7, r5, r6
 8019e82:	5d66      	ldrb	r6, [r4, r5]
 8019e84:	2e00      	cmp	r6, #0
 8019e86:	d051      	beq.n	8019f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8019e88:	9c01      	ldr	r4, [sp, #4]
 8019e8a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8019e8e:	f06f 0401 	mvn.w	r4, #1
 8019e92:	fb04 f408 	mul.w	r4, r4, r8
 8019e96:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8019e9a:	5b05      	ldrh	r5, [r0, r4]
 8019e9c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019ea0:	9403      	str	r4, [sp, #12]
 8019ea2:	9c05      	ldr	r4, [sp, #20]
 8019ea4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019ea8:	4366      	muls	r6, r4
 8019eaa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019eae:	1c74      	adds	r4, r6, #1
 8019eb0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8019eb4:	122e      	asrs	r6, r5, #8
 8019eb6:	1224      	asrs	r4, r4, #8
 8019eb8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019ebc:	00ed      	lsls	r5, r5, #3
 8019ebe:	b2a7      	uxth	r7, r4
 8019ec0:	43e4      	mvns	r4, r4
 8019ec2:	b2ed      	uxtb	r5, r5
 8019ec4:	b2e4      	uxtb	r4, r4
 8019ec6:	fb16 f604 	smulbb	r6, r6, r4
 8019eca:	fb15 f504 	smulbb	r5, r5, r4
 8019ece:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019ed2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8019ed6:	fb1a fa04 	smulbb	sl, sl, r4
 8019eda:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8019ede:	fa1f fc8c 	uxth.w	ip, ip
 8019ee2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019ee6:	fa5f f989 	uxtb.w	r9, r9
 8019eea:	fb06 a607 	mla	r6, r6, r7, sl
 8019eee:	f10c 0401 	add.w	r4, ip, #1
 8019ef2:	fb09 5507 	mla	r5, r9, r7, r5
 8019ef6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019efa:	9c03      	ldr	r4, [sp, #12]
 8019efc:	b2ad      	uxth	r5, r5
 8019efe:	b2b6      	uxth	r6, r6
 8019f00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019f04:	f105 0a01 	add.w	sl, r5, #1
 8019f08:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019f0c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019f10:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019f14:	f106 0a01 	add.w	sl, r6, #1
 8019f18:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019f1c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019f20:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019f24:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019f28:	f820 c004 	strh.w	ip, [r0, r4]
 8019f2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f32:	4421      	add	r1, r4
 8019f34:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019f36:	4422      	add	r2, r4
 8019f38:	e750      	b.n	8019ddc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019f3a:	f04f 0900 	mov.w	r9, #0
 8019f3e:	eba3 0409 	sub.w	r4, r3, r9
 8019f42:	2c00      	cmp	r4, #0
 8019f44:	f77f af4e 	ble.w	8019de4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019f48:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8019f4c:	140d      	asrs	r5, r1, #16
 8019f4e:	1414      	asrs	r4, r2, #16
 8019f50:	fb06 5404 	mla	r4, r6, r4, r5
 8019f54:	9d02      	ldr	r5, [sp, #8]
 8019f56:	5d2e      	ldrb	r6, [r5, r4]
 8019f58:	2e00      	cmp	r6, #0
 8019f5a:	d04c      	beq.n	8019ff6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8019f5c:	9d01      	ldr	r5, [sp, #4]
 8019f5e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8019f62:	9c05      	ldr	r4, [sp, #20]
 8019f64:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8019f68:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8019f6c:	4366      	muls	r6, r4
 8019f6e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8019f72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019f76:	1c74      	adds	r4, r6, #1
 8019f78:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019f7c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8019f80:	122e      	asrs	r6, r5, #8
 8019f82:	1224      	asrs	r4, r4, #8
 8019f84:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019f88:	00ed      	lsls	r5, r5, #3
 8019f8a:	b2a7      	uxth	r7, r4
 8019f8c:	43e4      	mvns	r4, r4
 8019f8e:	b2ed      	uxtb	r5, r5
 8019f90:	b2e4      	uxtb	r4, r4
 8019f92:	fb16 f604 	smulbb	r6, r6, r4
 8019f96:	fb15 f504 	smulbb	r5, r5, r4
 8019f9a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019f9e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8019fa2:	fb1a fa04 	smulbb	sl, sl, r4
 8019fa6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019faa:	fa1f fc8c 	uxth.w	ip, ip
 8019fae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019fb2:	fa5f f888 	uxtb.w	r8, r8
 8019fb6:	fb06 a607 	mla	r6, r6, r7, sl
 8019fba:	f10c 0401 	add.w	r4, ip, #1
 8019fbe:	fb08 5507 	mla	r5, r8, r7, r5
 8019fc2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8019fc6:	b2ad      	uxth	r5, r5
 8019fc8:	b2b6      	uxth	r6, r6
 8019fca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019fce:	f105 0a01 	add.w	sl, r5, #1
 8019fd2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019fd6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019fda:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019fde:	f106 0a01 	add.w	sl, r6, #1
 8019fe2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019fe6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019fea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019fee:	ea4c 0c0a 	orr.w	ip, ip, sl
 8019ff2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8019ff6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019ff8:	f109 0901 	add.w	r9, r9, #1
 8019ffc:	4421      	add	r1, r4
 8019ffe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a000:	4422      	add	r2, r4
 801a002:	e79c      	b.n	8019f3e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801a004:	b007      	add	sp, #28
 801a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a00a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a00a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00e:	b085      	sub	sp, #20
 801a010:	468b      	mov	fp, r1
 801a012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a016:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a018:	9203      	str	r2, [sp, #12]
 801a01a:	6861      	ldr	r1, [r4, #4]
 801a01c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a020:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801a024:	fb01 2000 	mla	r0, r1, r0, r2
 801a028:	6822      	ldr	r2, [r4, #0]
 801a02a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801a02e:	f8d8 2000 	ldr.w	r2, [r8]
 801a032:	9200      	str	r2, [sp, #0]
 801a034:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a038:	9201      	str	r2, [sp, #4]
 801a03a:	f1bb 0f00 	cmp.w	fp, #0
 801a03e:	dc03      	bgt.n	801a048 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a040:	9a03      	ldr	r2, [sp, #12]
 801a042:	2a00      	cmp	r2, #0
 801a044:	f340 8146 	ble.w	801a2d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a04a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801a04e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a052:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a054:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801a058:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	dd0e      	ble.n	801a07e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a060:	140c      	asrs	r4, r1, #16
 801a062:	d405      	bmi.n	801a070 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a064:	42bc      	cmp	r4, r7
 801a066:	da03      	bge.n	801a070 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a068:	1414      	asrs	r4, r2, #16
 801a06a:	d401      	bmi.n	801a070 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a06c:	42b4      	cmp	r4, r6
 801a06e:	db07      	blt.n	801a080 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a070:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a072:	3b01      	subs	r3, #1
 801a074:	3002      	adds	r0, #2
 801a076:	4421      	add	r1, r4
 801a078:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a07a:	4422      	add	r2, r4
 801a07c:	e7ee      	b.n	801a05c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a07e:	d017      	beq.n	801a0b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a080:	1e5c      	subs	r4, r3, #1
 801a082:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a084:	fb05 1504 	mla	r5, r5, r4, r1
 801a088:	142d      	asrs	r5, r5, #16
 801a08a:	d409      	bmi.n	801a0a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a08c:	42bd      	cmp	r5, r7
 801a08e:	da07      	bge.n	801a0a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a090:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a092:	fb05 2404 	mla	r4, r5, r4, r2
 801a096:	1424      	asrs	r4, r4, #16
 801a098:	d402      	bmi.n	801a0a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a09a:	42b4      	cmp	r4, r6
 801a09c:	f2c0 80b3 	blt.w	801a206 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801a0a0:	2600      	movs	r6, #0
 801a0a2:	199c      	adds	r4, r3, r6
 801a0a4:	2c00      	cmp	r4, #0
 801a0a6:	dc3e      	bgt.n	801a126 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a0a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a0ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a0b0:	f1bb 0f00 	cmp.w	fp, #0
 801a0b4:	f340 810e 	ble.w	801a2d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801a0b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a0bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a0c2:	f1bb 0b01 	subs.w	fp, fp, #1
 801a0c6:	eeb0 6a62 	vmov.f32	s12, s5
 801a0ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a0ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a0da:	eeb0 6a43 	vmov.f32	s12, s6
 801a0de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a0e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a0ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a0fe:	ee12 2a90 	vmov	r2, s5
 801a102:	eef0 2a47 	vmov.f32	s5, s14
 801a106:	fb92 f3f3 	sdiv	r3, r2, r3
 801a10a:	ee13 2a10 	vmov	r2, s6
 801a10e:	9311      	str	r3, [sp, #68]	; 0x44
 801a110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a112:	eeb0 3a67 	vmov.f32	s6, s15
 801a116:	fb92 f3f3 	sdiv	r3, r2, r3
 801a11a:	9a03      	ldr	r2, [sp, #12]
 801a11c:	9312      	str	r3, [sp, #72]	; 0x48
 801a11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a120:	bf08      	it	eq
 801a122:	4613      	moveq	r3, r2
 801a124:	e789      	b.n	801a03a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a126:	140f      	asrs	r7, r1, #16
 801a128:	d418      	bmi.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a12a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a12e:	42bd      	cmp	r5, r7
 801a130:	dd14      	ble.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a132:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a136:	d411      	bmi.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a138:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801a13c:	4564      	cmp	r4, ip
 801a13e:	dd0d      	ble.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a140:	b22d      	sxth	r5, r5
 801a142:	9c01      	ldr	r4, [sp, #4]
 801a144:	fb0c 7505 	mla	r5, ip, r5, r7
 801a148:	5d64      	ldrb	r4, [r4, r5]
 801a14a:	2cff      	cmp	r4, #255	; 0xff
 801a14c:	d10c      	bne.n	801a168 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a14e:	9c00      	ldr	r4, [sp, #0]
 801a150:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801a154:	f06f 0401 	mvn.w	r4, #1
 801a158:	4374      	muls	r4, r6
 801a15a:	5305      	strh	r5, [r0, r4]
 801a15c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a15e:	3e01      	subs	r6, #1
 801a160:	4421      	add	r1, r4
 801a162:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a164:	4422      	add	r2, r4
 801a166:	e79c      	b.n	801a0a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a168:	2c00      	cmp	r4, #0
 801a16a:	d0f7      	beq.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a16c:	9f00      	ldr	r7, [sp, #0]
 801a16e:	fa1f fc84 	uxth.w	ip, r4
 801a172:	43e4      	mvns	r4, r4
 801a174:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801a178:	f06f 0501 	mvn.w	r5, #1
 801a17c:	b2e4      	uxtb	r4, r4
 801a17e:	4375      	muls	r5, r6
 801a180:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801a184:	9502      	str	r5, [sp, #8]
 801a186:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a18a:	5b45      	ldrh	r5, [r0, r5]
 801a18c:	122f      	asrs	r7, r5, #8
 801a18e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a192:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a196:	00ed      	lsls	r5, r5, #3
 801a198:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a19c:	fb17 f704 	smulbb	r7, r7, r4
 801a1a0:	b2ed      	uxtb	r5, r5
 801a1a2:	fb1a fa04 	smulbb	sl, sl, r4
 801a1a6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801a1aa:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801a1ae:	fb15 f504 	smulbb	r5, r5, r4
 801a1b2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801a1b6:	fa1f fe8e 	uxth.w	lr, lr
 801a1ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a1be:	fa5f f989 	uxtb.w	r9, r9
 801a1c2:	fb07 a70c 	mla	r7, r7, ip, sl
 801a1c6:	f10e 0401 	add.w	r4, lr, #1
 801a1ca:	fb09 550c 	mla	r5, r9, ip, r5
 801a1ce:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801a1d2:	9c02      	ldr	r4, [sp, #8]
 801a1d4:	b2ad      	uxth	r5, r5
 801a1d6:	b2bf      	uxth	r7, r7
 801a1d8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a1dc:	f105 0a01 	add.w	sl, r5, #1
 801a1e0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a1e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a1e8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801a1ec:	f107 0a01 	add.w	sl, r7, #1
 801a1f0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a1f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a1f8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a1fc:	ea4e 0e0a 	orr.w	lr, lr, sl
 801a200:	f820 e004 	strh.w	lr, [r0, r4]
 801a204:	e7aa      	b.n	801a15c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a206:	f04f 0900 	mov.w	r9, #0
 801a20a:	eba3 0409 	sub.w	r4, r3, r9
 801a20e:	2c00      	cmp	r4, #0
 801a210:	f77f af4a 	ble.w	801a0a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a214:	1414      	asrs	r4, r2, #16
 801a216:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801a21a:	140d      	asrs	r5, r1, #16
 801a21c:	fb06 5504 	mla	r5, r6, r4, r5
 801a220:	9c01      	ldr	r4, [sp, #4]
 801a222:	5d64      	ldrb	r4, [r4, r5]
 801a224:	2cff      	cmp	r4, #255	; 0xff
 801a226:	d10b      	bne.n	801a240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801a228:	9c00      	ldr	r4, [sp, #0]
 801a22a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801a22e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801a232:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a234:	f109 0901 	add.w	r9, r9, #1
 801a238:	4421      	add	r1, r4
 801a23a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a23c:	4422      	add	r2, r4
 801a23e:	e7e4      	b.n	801a20a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801a240:	2c00      	cmp	r4, #0
 801a242:	d0f6      	beq.n	801a232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a244:	9e00      	ldr	r6, [sp, #0]
 801a246:	b2a7      	uxth	r7, r4
 801a248:	43e4      	mvns	r4, r4
 801a24a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801a24e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801a252:	b2e4      	uxtb	r4, r4
 801a254:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a258:	122e      	asrs	r6, r5, #8
 801a25a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801a25e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a262:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a266:	00ed      	lsls	r5, r5, #3
 801a268:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801a26c:	fb16 f604 	smulbb	r6, r6, r4
 801a270:	b2ed      	uxtb	r5, r5
 801a272:	fb1a fa04 	smulbb	sl, sl, r4
 801a276:	fb0c 6c07 	mla	ip, ip, r7, r6
 801a27a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801a27e:	fb15 f504 	smulbb	r5, r5, r4
 801a282:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a286:	fa1f fc8c 	uxth.w	ip, ip
 801a28a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a28e:	fa5f fe8e 	uxtb.w	lr, lr
 801a292:	fb06 a607 	mla	r6, r6, r7, sl
 801a296:	f10c 0401 	add.w	r4, ip, #1
 801a29a:	fb0e 5507 	mla	r5, lr, r7, r5
 801a29e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801a2a2:	b2ad      	uxth	r5, r5
 801a2a4:	b2b6      	uxth	r6, r6
 801a2a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a2aa:	f105 0a01 	add.w	sl, r5, #1
 801a2ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a2b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a2b6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801a2ba:	f106 0a01 	add.w	sl, r6, #1
 801a2be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801a2c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a2c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a2ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a2ce:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801a2d2:	e7ae      	b.n	801a232 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801a2d4:	b005      	add	sp, #20
 801a2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a2da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a2da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2de:	b085      	sub	sp, #20
 801a2e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a2e2:	9203      	str	r2, [sp, #12]
 801a2e4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a2e8:	9100      	str	r1, [sp, #0]
 801a2ea:	9201      	str	r2, [sp, #4]
 801a2ec:	6841      	ldr	r1, [r0, #4]
 801a2ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801a2f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a2f6:	fb01 2404 	mla	r4, r1, r4, r2
 801a2fa:	6802      	ldr	r2, [r0, #0]
 801a2fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a300:	f8de 2000 	ldr.w	r2, [lr]
 801a304:	9202      	str	r2, [sp, #8]
 801a306:	9a01      	ldr	r2, [sp, #4]
 801a308:	43d6      	mvns	r6, r2
 801a30a:	b2f6      	uxtb	r6, r6
 801a30c:	9a00      	ldr	r2, [sp, #0]
 801a30e:	2a00      	cmp	r2, #0
 801a310:	dc03      	bgt.n	801a31a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a312:	9a03      	ldr	r2, [sp, #12]
 801a314:	2a00      	cmp	r2, #0
 801a316:	f340 8124 	ble.w	801a562 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a31a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a31c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801a320:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a324:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a326:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801a32a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a32e:	2b00      	cmp	r3, #0
 801a330:	dd0e      	ble.n	801a350 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a332:	1408      	asrs	r0, r1, #16
 801a334:	d405      	bmi.n	801a342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a336:	4560      	cmp	r0, ip
 801a338:	da03      	bge.n	801a342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a33a:	1410      	asrs	r0, r2, #16
 801a33c:	d401      	bmi.n	801a342 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a33e:	42b8      	cmp	r0, r7
 801a340:	db07      	blt.n	801a352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a342:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a344:	3b01      	subs	r3, #1
 801a346:	3402      	adds	r4, #2
 801a348:	4401      	add	r1, r0
 801a34a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a34c:	4402      	add	r2, r0
 801a34e:	e7ee      	b.n	801a32e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a350:	d06e      	beq.n	801a430 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801a352:	1e58      	subs	r0, r3, #1
 801a354:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a356:	fb05 1500 	mla	r5, r5, r0, r1
 801a35a:	142d      	asrs	r5, r5, #16
 801a35c:	d45c      	bmi.n	801a418 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a35e:	4565      	cmp	r5, ip
 801a360:	da5a      	bge.n	801a418 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a362:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a364:	fb05 2000 	mla	r0, r5, r0, r2
 801a368:	1400      	asrs	r0, r0, #16
 801a36a:	d455      	bmi.n	801a418 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a36c:	42b8      	cmp	r0, r7
 801a36e:	da53      	bge.n	801a418 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801a370:	4699      	mov	r9, r3
 801a372:	46a2      	mov	sl, r4
 801a374:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801a378:	f1b9 0f00 	cmp.w	r9, #0
 801a37c:	dd54      	ble.n	801a428 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801a37e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801a382:	140d      	asrs	r5, r1, #16
 801a384:	1410      	asrs	r0, r2, #16
 801a386:	f109 39ff 	add.w	r9, r9, #4294967295
 801a38a:	fb07 5000 	mla	r0, r7, r0, r5
 801a38e:	9d02      	ldr	r5, [sp, #8]
 801a390:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801a394:	f8ba 5000 	ldrh.w	r5, [sl]
 801a398:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a39c:	122f      	asrs	r7, r5, #8
 801a39e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801a3a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a3a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a3aa:	00ed      	lsls	r5, r5, #3
 801a3ac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801a3b0:	fb17 f706 	smulbb	r7, r7, r6
 801a3b4:	b2ed      	uxtb	r5, r5
 801a3b6:	fb18 f806 	smulbb	r8, r8, r6
 801a3ba:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801a3be:	10c7      	asrs	r7, r0, #3
 801a3c0:	fb15 f506 	smulbb	r5, r5, r6
 801a3c4:	00c0      	lsls	r0, r0, #3
 801a3c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a3ca:	fa1f fc8c 	uxth.w	ip, ip
 801a3ce:	b2c0      	uxtb	r0, r0
 801a3d0:	fb07 870b 	mla	r7, r7, fp, r8
 801a3d4:	fb00 500b 	mla	r0, r0, fp, r5
 801a3d8:	f10c 0501 	add.w	r5, ip, #1
 801a3dc:	b2bf      	uxth	r7, r7
 801a3de:	b280      	uxth	r0, r0
 801a3e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a3e4:	f107 0801 	add.w	r8, r7, #1
 801a3e8:	1c45      	adds	r5, r0, #1
 801a3ea:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801a3ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a3f2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a3f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a3f8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a3fc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a400:	4401      	add	r1, r0
 801a402:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a406:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a408:	ea45 0c0c 	orr.w	ip, r5, ip
 801a40c:	4402      	add	r2, r0
 801a40e:	ea4c 0c08 	orr.w	ip, ip, r8
 801a412:	f82a cb02 	strh.w	ip, [sl], #2
 801a416:	e7af      	b.n	801a378 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a418:	f04f 0800 	mov.w	r8, #0
 801a41c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801a420:	eb03 0008 	add.w	r0, r3, r8
 801a424:	2800      	cmp	r0, #0
 801a426:	dc41      	bgt.n	801a4ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801a428:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a42c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a430:	9b00      	ldr	r3, [sp, #0]
 801a432:	2b00      	cmp	r3, #0
 801a434:	f340 8095 	ble.w	801a562 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a43e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a442:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a446:	eef0 6a62 	vmov.f32	s13, s5
 801a44a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a44e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a452:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a456:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a45a:	eef0 6a43 	vmov.f32	s13, s6
 801a45e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a462:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801a466:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a46a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a46e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a472:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a476:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a47a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a47e:	ee12 2a90 	vmov	r2, s5
 801a482:	eef0 2a47 	vmov.f32	s5, s14
 801a486:	fb92 f3f3 	sdiv	r3, r2, r3
 801a48a:	ee13 2a10 	vmov	r2, s6
 801a48e:	9311      	str	r3, [sp, #68]	; 0x44
 801a490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a492:	eeb0 3a67 	vmov.f32	s6, s15
 801a496:	fb92 f3f3 	sdiv	r3, r2, r3
 801a49a:	9312      	str	r3, [sp, #72]	; 0x48
 801a49c:	9b00      	ldr	r3, [sp, #0]
 801a49e:	9a03      	ldr	r2, [sp, #12]
 801a4a0:	3b01      	subs	r3, #1
 801a4a2:	9300      	str	r3, [sp, #0]
 801a4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a4a6:	bf08      	it	eq
 801a4a8:	4613      	moveq	r3, r2
 801a4aa:	e72f      	b.n	801a30c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801a4ac:	140f      	asrs	r7, r1, #16
 801a4ae:	d451      	bmi.n	801a554 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a4b0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801a4b4:	42bd      	cmp	r5, r7
 801a4b6:	dd4d      	ble.n	801a554 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a4b8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801a4bc:	d44a      	bmi.n	801a554 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a4be:	f8de 000c 	ldr.w	r0, [lr, #12]
 801a4c2:	4560      	cmp	r0, ip
 801a4c4:	dd46      	ble.n	801a554 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a4c6:	b22d      	sxth	r5, r5
 801a4c8:	9802      	ldr	r0, [sp, #8]
 801a4ca:	fb0c 7505 	mla	r5, ip, r5, r7
 801a4ce:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801a4d2:	f06f 0501 	mvn.w	r5, #1
 801a4d6:	fb05 fb08 	mul.w	fp, r5, r8
 801a4da:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801a4de:	f834 500b 	ldrh.w	r5, [r4, fp]
 801a4e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a4e6:	122f      	asrs	r7, r5, #8
 801a4e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801a4ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a4f0:	00ed      	lsls	r5, r5, #3
 801a4f2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801a4f6:	fb17 f706 	smulbb	r7, r7, r6
 801a4fa:	b2ed      	uxtb	r5, r5
 801a4fc:	fb19 f906 	smulbb	r9, r9, r6
 801a500:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801a504:	10c7      	asrs	r7, r0, #3
 801a506:	fb15 f506 	smulbb	r5, r5, r6
 801a50a:	00c0      	lsls	r0, r0, #3
 801a50c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a510:	fa1f fc8c 	uxth.w	ip, ip
 801a514:	b2c0      	uxtb	r0, r0
 801a516:	fb07 970a 	mla	r7, r7, sl, r9
 801a51a:	fb00 500a 	mla	r0, r0, sl, r5
 801a51e:	f10c 0501 	add.w	r5, ip, #1
 801a522:	b2bf      	uxth	r7, r7
 801a524:	b280      	uxth	r0, r0
 801a526:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801a52a:	f107 0901 	add.w	r9, r7, #1
 801a52e:	1c45      	adds	r5, r0, #1
 801a530:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801a534:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a538:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801a53c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a540:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801a544:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a548:	ea45 0c0c 	orr.w	ip, r5, ip
 801a54c:	ea4c 0c09 	orr.w	ip, ip, r9
 801a550:	f824 c00b 	strh.w	ip, [r4, fp]
 801a554:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a556:	f108 38ff 	add.w	r8, r8, #4294967295
 801a55a:	4401      	add	r1, r0
 801a55c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a55e:	4402      	add	r2, r0
 801a560:	e75e      	b.n	801a420 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a562:	b005      	add	sp, #20
 801a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a568 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a56c:	b085      	sub	sp, #20
 801a56e:	4693      	mov	fp, r2
 801a570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a574:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a576:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801a578:	6870      	ldr	r0, [r6, #4]
 801a57a:	9101      	str	r1, [sp, #4]
 801a57c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a580:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801a584:	fb00 2404 	mla	r4, r0, r4, r2
 801a588:	6832      	ldr	r2, [r6, #0]
 801a58a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a58e:	682a      	ldr	r2, [r5, #0]
 801a590:	9202      	str	r2, [sp, #8]
 801a592:	9a01      	ldr	r2, [sp, #4]
 801a594:	2a00      	cmp	r2, #0
 801a596:	dc03      	bgt.n	801a5a0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801a598:	f1bb 0f00 	cmp.w	fp, #0
 801a59c:	f340 809a 	ble.w	801a6d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a5a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5a2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801a5a6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a5aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a5ac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801a5b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	dd0c      	ble.n	801a5d2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a5b8:	1406      	asrs	r6, r0, #16
 801a5ba:	d405      	bmi.n	801a5c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a5bc:	454e      	cmp	r6, r9
 801a5be:	da03      	bge.n	801a5c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a5c0:	1416      	asrs	r6, r2, #16
 801a5c2:	d401      	bmi.n	801a5c8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801a5c4:	4546      	cmp	r6, r8
 801a5c6:	db05      	blt.n	801a5d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a5c8:	4470      	add	r0, lr
 801a5ca:	4462      	add	r2, ip
 801a5cc:	3b01      	subs	r3, #1
 801a5ce:	3402      	adds	r4, #2
 801a5d0:	e7f0      	b.n	801a5b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a5d2:	d00f      	beq.n	801a5f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a5d4:	1e5e      	subs	r6, r3, #1
 801a5d6:	fb0e 0706 	mla	r7, lr, r6, r0
 801a5da:	143f      	asrs	r7, r7, #16
 801a5dc:	d541      	bpl.n	801a662 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801a5de:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801a5e2:	4698      	mov	r8, r3
 801a5e4:	9603      	str	r6, [sp, #12]
 801a5e6:	f1b8 0f00 	cmp.w	r8, #0
 801a5ea:	dc56      	bgt.n	801a69a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801a5ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a5f4:	9b01      	ldr	r3, [sp, #4]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	dd6c      	ble.n	801a6d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801a5fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a600:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a604:	eeb0 6a62 	vmov.f32	s12, s5
 801a608:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a60c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a610:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a614:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a618:	eeb0 6a43 	vmov.f32	s12, s6
 801a61c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a620:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a624:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a628:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a62c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a630:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a634:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a638:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a63c:	ee12 2a90 	vmov	r2, s5
 801a640:	eef0 2a47 	vmov.f32	s5, s14
 801a644:	fb92 fef3 	sdiv	lr, r2, r3
 801a648:	ee13 2a10 	vmov	r2, s6
 801a64c:	eeb0 3a67 	vmov.f32	s6, s15
 801a650:	fb92 fcf3 	sdiv	ip, r2, r3
 801a654:	9b01      	ldr	r3, [sp, #4]
 801a656:	3b01      	subs	r3, #1
 801a658:	9301      	str	r3, [sp, #4]
 801a65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a65c:	bf08      	it	eq
 801a65e:	465b      	moveq	r3, fp
 801a660:	e797      	b.n	801a592 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801a662:	454f      	cmp	r7, r9
 801a664:	dabb      	bge.n	801a5de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a666:	fb0c 2606 	mla	r6, ip, r6, r2
 801a66a:	1436      	asrs	r6, r6, #16
 801a66c:	d4b7      	bmi.n	801a5de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a66e:	4546      	cmp	r6, r8
 801a670:	dab5      	bge.n	801a5de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a672:	461e      	mov	r6, r3
 801a674:	46a0      	mov	r8, r4
 801a676:	2e00      	cmp	r6, #0
 801a678:	ddb8      	ble.n	801a5ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a67a:	1417      	asrs	r7, r2, #16
 801a67c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801a680:	ea4f 4920 	mov.w	r9, r0, asr #16
 801a684:	9902      	ldr	r1, [sp, #8]
 801a686:	4470      	add	r0, lr
 801a688:	4462      	add	r2, ip
 801a68a:	fb0a 9707 	mla	r7, sl, r7, r9
 801a68e:	3e01      	subs	r6, #1
 801a690:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801a694:	f828 7b02 	strh.w	r7, [r8], #2
 801a698:	e7ed      	b.n	801a676 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801a69a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a69e:	d414      	bmi.n	801a6ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a6a0:	68ae      	ldr	r6, [r5, #8]
 801a6a2:	454e      	cmp	r6, r9
 801a6a4:	dd11      	ble.n	801a6ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a6a6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a6aa:	d40e      	bmi.n	801a6ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a6ac:	68ef      	ldr	r7, [r5, #12]
 801a6ae:	4557      	cmp	r7, sl
 801a6b0:	dd0b      	ble.n	801a6ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801a6b2:	b236      	sxth	r6, r6
 801a6b4:	f06f 0101 	mvn.w	r1, #1
 801a6b8:	9f02      	ldr	r7, [sp, #8]
 801a6ba:	fb0a 9606 	mla	r6, sl, r6, r9
 801a6be:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801a6c2:	fb01 f608 	mul.w	r6, r1, r8
 801a6c6:	9903      	ldr	r1, [sp, #12]
 801a6c8:	538f      	strh	r7, [r1, r6]
 801a6ca:	4470      	add	r0, lr
 801a6cc:	4462      	add	r2, ip
 801a6ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801a6d2:	e788      	b.n	801a5e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a6d4:	b005      	add	sp, #20
 801a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6de:	b087      	sub	sp, #28
 801a6e0:	468b      	mov	fp, r1
 801a6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a6e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a6e8:	9203      	str	r2, [sp, #12]
 801a6ea:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a6ee:	6841      	ldr	r1, [r0, #4]
 801a6f0:	9204      	str	r2, [sp, #16]
 801a6f2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801a6f6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a6fa:	fb01 2505 	mla	r5, r1, r5, r2
 801a6fe:	6802      	ldr	r2, [r0, #0]
 801a700:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801a704:	f8d9 2000 	ldr.w	r2, [r9]
 801a708:	9201      	str	r2, [sp, #4]
 801a70a:	f1bb 0f00 	cmp.w	fp, #0
 801a70e:	dc03      	bgt.n	801a718 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a710:	9a03      	ldr	r2, [sp, #12]
 801a712:	2a00      	cmp	r2, #0
 801a714:	f340 8158 	ble.w	801a9c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801a718:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a71a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801a71e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a724:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801a728:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	dd0e      	ble.n	801a74e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a730:	1402      	asrs	r2, r0, #16
 801a732:	d405      	bmi.n	801a740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a734:	42ba      	cmp	r2, r7
 801a736:	da03      	bge.n	801a740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a738:	140a      	asrs	r2, r1, #16
 801a73a:	d401      	bmi.n	801a740 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a73c:	42b2      	cmp	r2, r6
 801a73e:	db07      	blt.n	801a750 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a742:	3b01      	subs	r3, #1
 801a744:	3502      	adds	r5, #2
 801a746:	4410      	add	r0, r2
 801a748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a74a:	4411      	add	r1, r2
 801a74c:	e7ee      	b.n	801a72c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a74e:	d017      	beq.n	801a780 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801a750:	1e5a      	subs	r2, r3, #1
 801a752:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a754:	fb04 0402 	mla	r4, r4, r2, r0
 801a758:	1424      	asrs	r4, r4, #16
 801a75a:	d409      	bmi.n	801a770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a75c:	42bc      	cmp	r4, r7
 801a75e:	da07      	bge.n	801a770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a760:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a762:	fb04 1202 	mla	r2, r4, r2, r1
 801a766:	1412      	asrs	r2, r2, #16
 801a768:	d402      	bmi.n	801a770 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a76a:	42b2      	cmp	r2, r6
 801a76c:	f2c0 80bf 	blt.w	801a8ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a770:	2700      	movs	r7, #0
 801a772:	19da      	adds	r2, r3, r7
 801a774:	2a00      	cmp	r2, #0
 801a776:	dc3e      	bgt.n	801a7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801a778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a77c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a780:	f1bb 0f00 	cmp.w	fp, #0
 801a784:	f340 8120 	ble.w	801a9c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801a788:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a78e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a792:	f1bb 0b01 	subs.w	fp, fp, #1
 801a796:	eeb0 6a62 	vmov.f32	s12, s5
 801a79a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a79e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a7a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801a7aa:	eeb0 6a43 	vmov.f32	s12, s6
 801a7ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7b2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801a7b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7be:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a7c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a7ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7ce:	ee12 2a90 	vmov	r2, s5
 801a7d2:	eef0 2a47 	vmov.f32	s5, s14
 801a7d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7da:	ee13 2a10 	vmov	r2, s6
 801a7de:	9313      	str	r3, [sp, #76]	; 0x4c
 801a7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7e2:	eeb0 3a67 	vmov.f32	s6, s15
 801a7e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a7ea:	9a03      	ldr	r2, [sp, #12]
 801a7ec:	9314      	str	r3, [sp, #80]	; 0x50
 801a7ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7f0:	bf08      	it	eq
 801a7f2:	4613      	moveq	r3, r2
 801a7f4:	e789      	b.n	801a70a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801a7f6:	1406      	asrs	r6, r0, #16
 801a7f8:	d42d      	bmi.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a7fa:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801a7fe:	42b4      	cmp	r4, r6
 801a800:	dd29      	ble.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a802:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801a806:	d426      	bmi.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a808:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801a80c:	4562      	cmp	r2, ip
 801a80e:	dd22      	ble.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a810:	b224      	sxth	r4, r4
 801a812:	9a01      	ldr	r2, [sp, #4]
 801a814:	fb0c 6404 	mla	r4, ip, r4, r6
 801a818:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801a81c:	0e22      	lsrs	r2, r4, #24
 801a81e:	d01a      	beq.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a820:	9e04      	ldr	r6, [sp, #16]
 801a822:	4372      	muls	r2, r6
 801a824:	1c56      	adds	r6, r2, #1
 801a826:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a82a:	0a26      	lsrs	r6, r4, #8
 801a82c:	1212      	asrs	r2, r2, #8
 801a82e:	9605      	str	r6, [sp, #20]
 801a830:	2aff      	cmp	r2, #255	; 0xff
 801a832:	d116      	bne.n	801a862 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801a834:	f06f 0201 	mvn.w	r2, #1
 801a838:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a83c:	fb02 fc07 	mul.w	ip, r2, r7
 801a840:	0962      	lsrs	r2, r4, #5
 801a842:	f026 0607 	bic.w	r6, r6, #7
 801a846:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a84a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a84e:	4316      	orrs	r6, r2
 801a850:	4326      	orrs	r6, r4
 801a852:	f825 600c 	strh.w	r6, [r5, ip]
 801a856:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a858:	3f01      	subs	r7, #1
 801a85a:	4410      	add	r0, r2
 801a85c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a85e:	4411      	add	r1, r2
 801a860:	e787      	b.n	801a772 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a862:	f06f 0601 	mvn.w	r6, #1
 801a866:	fa1f fa82 	uxth.w	sl, r2
 801a86a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801a86e:	43d2      	mvns	r2, r2
 801a870:	437e      	muls	r6, r7
 801a872:	b2e4      	uxtb	r4, r4
 801a874:	fb1c fc0a 	smulbb	ip, ip, sl
 801a878:	b2d2      	uxtb	r2, r2
 801a87a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801a87e:	fb14 f40a 	smulbb	r4, r4, sl
 801a882:	9602      	str	r6, [sp, #8]
 801a884:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801a888:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a88c:	fb16 f60a 	smulbb	r6, r6, sl
 801a890:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801a894:	fb0e ce02 	mla	lr, lr, r2, ip
 801a898:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a89c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801a8a0:	fa1f fe8e 	uxth.w	lr, lr
 801a8a4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a8a8:	fa5f f888 	uxtb.w	r8, r8
 801a8ac:	fb0c 6c02 	mla	ip, ip, r2, r6
 801a8b0:	fb08 4402 	mla	r4, r8, r2, r4
 801a8b4:	f10e 0201 	add.w	r2, lr, #1
 801a8b8:	fa1f fc8c 	uxth.w	ip, ip
 801a8bc:	b2a4      	uxth	r4, r4
 801a8be:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801a8c2:	9a02      	ldr	r2, [sp, #8]
 801a8c4:	1c66      	adds	r6, r4, #1
 801a8c6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801a8ca:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a8ce:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a8d2:	ea46 0e0e 	orr.w	lr, r6, lr
 801a8d6:	f10c 0601 	add.w	r6, ip, #1
 801a8da:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801a8de:	0976      	lsrs	r6, r6, #5
 801a8e0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a8e4:	ea4e 0e06 	orr.w	lr, lr, r6
 801a8e8:	f825 e002 	strh.w	lr, [r5, r2]
 801a8ec:	e7b3      	b.n	801a856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801a8ee:	f04f 0800 	mov.w	r8, #0
 801a8f2:	eba3 0208 	sub.w	r2, r3, r8
 801a8f6:	2a00      	cmp	r2, #0
 801a8f8:	f77f af3e 	ble.w	801a778 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a8fc:	1404      	asrs	r4, r0, #16
 801a8fe:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801a902:	140a      	asrs	r2, r1, #16
 801a904:	fb06 4202 	mla	r2, r6, r2, r4
 801a908:	9c01      	ldr	r4, [sp, #4]
 801a90a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801a90e:	0e22      	lsrs	r2, r4, #24
 801a910:	d015      	beq.n	801a93e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801a912:	9e04      	ldr	r6, [sp, #16]
 801a914:	4372      	muls	r2, r6
 801a916:	1c56      	adds	r6, r2, #1
 801a918:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a91c:	0a26      	lsrs	r6, r4, #8
 801a91e:	1212      	asrs	r2, r2, #8
 801a920:	2aff      	cmp	r2, #255	; 0xff
 801a922:	d113      	bne.n	801a94c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801a924:	0962      	lsrs	r2, r4, #5
 801a926:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801a92a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a92e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a932:	f026 0607 	bic.w	r6, r6, #7
 801a936:	4316      	orrs	r6, r2
 801a938:	4326      	orrs	r6, r4
 801a93a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801a93e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a940:	f108 0801 	add.w	r8, r8, #1
 801a944:	4410      	add	r0, r2
 801a946:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a948:	4411      	add	r1, r2
 801a94a:	e7d2      	b.n	801a8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801a94c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801a950:	fa1f fa82 	uxth.w	sl, r2
 801a954:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801a958:	43d2      	mvns	r2, r2
 801a95a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801a95e:	fb17 f70a 	smulbb	r7, r7, sl
 801a962:	b2d2      	uxtb	r2, r2
 801a964:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a968:	b2e4      	uxtb	r4, r4
 801a96a:	b2f6      	uxtb	r6, r6
 801a96c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801a970:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801a974:	fb14 f40a 	smulbb	r4, r4, sl
 801a978:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a97c:	fa1f fc8c 	uxth.w	ip, ip
 801a980:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a984:	fb16 f60a 	smulbb	r6, r6, sl
 801a988:	fa5f fe8e 	uxtb.w	lr, lr
 801a98c:	fb0e 4402 	mla	r4, lr, r2, r4
 801a990:	fb07 6702 	mla	r7, r7, r2, r6
 801a994:	f10c 0201 	add.w	r2, ip, #1
 801a998:	b2a4      	uxth	r4, r4
 801a99a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801a99e:	1c66      	adds	r6, r4, #1
 801a9a0:	b2bf      	uxth	r7, r7
 801a9a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801a9a6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801a9aa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801a9ae:	ea46 0c0c 	orr.w	ip, r6, ip
 801a9b2:	1c7e      	adds	r6, r7, #1
 801a9b4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801a9b8:	0976      	lsrs	r6, r6, #5
 801a9ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a9be:	ea4c 0c06 	orr.w	ip, ip, r6
 801a9c2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801a9c6:	e7ba      	b.n	801a93e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801a9c8:	b007      	add	sp, #28
 801a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a9d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d4:	b085      	sub	sp, #20
 801a9d6:	468b      	mov	fp, r1
 801a9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a9de:	9203      	str	r2, [sp, #12]
 801a9e0:	6841      	ldr	r1, [r0, #4]
 801a9e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a9e6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a9ea:	fb01 2404 	mla	r4, r1, r4, r2
 801a9ee:	6802      	ldr	r2, [r0, #0]
 801a9f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a9f4:	f8d8 2000 	ldr.w	r2, [r8]
 801a9f8:	9201      	str	r2, [sp, #4]
 801a9fa:	f1bb 0f00 	cmp.w	fp, #0
 801a9fe:	dc03      	bgt.n	801aa08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801aa00:	9a03      	ldr	r2, [sp, #12]
 801aa02:	2a00      	cmp	r2, #0
 801aa04:	f340 814f 	ble.w	801aca6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801aa08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa0a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801aa0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801aa12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa14:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801aa18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	dd0e      	ble.n	801aa3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801aa20:	1408      	asrs	r0, r1, #16
 801aa22:	d405      	bmi.n	801aa30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801aa24:	42b8      	cmp	r0, r7
 801aa26:	da03      	bge.n	801aa30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801aa28:	1410      	asrs	r0, r2, #16
 801aa2a:	d401      	bmi.n	801aa30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801aa2c:	42b0      	cmp	r0, r6
 801aa2e:	db07      	blt.n	801aa40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aa30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aa32:	3b01      	subs	r3, #1
 801aa34:	3402      	adds	r4, #2
 801aa36:	4401      	add	r1, r0
 801aa38:	9812      	ldr	r0, [sp, #72]	; 0x48
 801aa3a:	4402      	add	r2, r0
 801aa3c:	e7ee      	b.n	801aa1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801aa3e:	d017      	beq.n	801aa70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801aa40:	1e58      	subs	r0, r3, #1
 801aa42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801aa44:	fb05 1500 	mla	r5, r5, r0, r1
 801aa48:	142d      	asrs	r5, r5, #16
 801aa4a:	d409      	bmi.n	801aa60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801aa4c:	42bd      	cmp	r5, r7
 801aa4e:	da07      	bge.n	801aa60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801aa50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801aa52:	fb05 2000 	mla	r0, r5, r0, r2
 801aa56:	1400      	asrs	r0, r0, #16
 801aa58:	d402      	bmi.n	801aa60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801aa5a:	42b0      	cmp	r0, r6
 801aa5c:	f2c0 80ba 	blt.w	801abd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801aa60:	2600      	movs	r6, #0
 801aa62:	1998      	adds	r0, r3, r6
 801aa64:	2800      	cmp	r0, #0
 801aa66:	dc3e      	bgt.n	801aae6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801aa68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aa70:	f1bb 0f00 	cmp.w	fp, #0
 801aa74:	f340 8117 	ble.w	801aca6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801aa78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa82:	f1bb 0b01 	subs.w	fp, fp, #1
 801aa86:	eeb0 6a62 	vmov.f32	s12, s5
 801aa8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aa8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aa96:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aa9a:	eeb0 6a43 	vmov.f32	s12, s6
 801aa9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aaa2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801aaa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aaaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aaae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aab2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aab6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aaba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aabe:	ee12 2a90 	vmov	r2, s5
 801aac2:	eef0 2a47 	vmov.f32	s5, s14
 801aac6:	fb92 f3f3 	sdiv	r3, r2, r3
 801aaca:	ee13 2a10 	vmov	r2, s6
 801aace:	9311      	str	r3, [sp, #68]	; 0x44
 801aad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aad2:	eeb0 3a67 	vmov.f32	s6, s15
 801aad6:	fb92 f3f3 	sdiv	r3, r2, r3
 801aada:	9a03      	ldr	r2, [sp, #12]
 801aadc:	9312      	str	r3, [sp, #72]	; 0x48
 801aade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aae0:	bf08      	it	eq
 801aae2:	4613      	moveq	r3, r2
 801aae4:	e789      	b.n	801a9fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801aae6:	140f      	asrs	r7, r1, #16
 801aae8:	d424      	bmi.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aaea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801aaee:	42bd      	cmp	r5, r7
 801aaf0:	dd20      	ble.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aaf2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801aaf6:	d41d      	bmi.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aaf8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801aafc:	4560      	cmp	r0, ip
 801aafe:	dd19      	ble.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ab00:	b22d      	sxth	r5, r5
 801ab02:	9801      	ldr	r0, [sp, #4]
 801ab04:	fb0c 7505 	mla	r5, ip, r5, r7
 801ab08:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801ab0c:	0e07      	lsrs	r7, r0, #24
 801ab0e:	2fff      	cmp	r7, #255	; 0xff
 801ab10:	d116      	bne.n	801ab40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ab12:	f06f 0501 	mvn.w	r5, #1
 801ab16:	fb05 f706 	mul.w	r7, r5, r6
 801ab1a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ab1e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ab22:	0945      	lsrs	r5, r0, #5
 801ab24:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ab28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ab2c:	ea4c 0505 	orr.w	r5, ip, r5
 801ab30:	4305      	orrs	r5, r0
 801ab32:	53e5      	strh	r5, [r4, r7]
 801ab34:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ab36:	3e01      	subs	r6, #1
 801ab38:	4401      	add	r1, r0
 801ab3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ab3c:	4402      	add	r2, r0
 801ab3e:	e790      	b.n	801aa62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ab40:	b2fd      	uxtb	r5, r7
 801ab42:	2f00      	cmp	r7, #0
 801ab44:	d0f6      	beq.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ab46:	f06f 0701 	mvn.w	r7, #1
 801ab4a:	fa1f f985 	uxth.w	r9, r5
 801ab4e:	43ed      	mvns	r5, r5
 801ab50:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ab54:	4377      	muls	r7, r6
 801ab56:	fb1a fa09 	smulbb	sl, sl, r9
 801ab5a:	b2ed      	uxtb	r5, r5
 801ab5c:	f834 e007 	ldrh.w	lr, [r4, r7]
 801ab60:	9702      	str	r7, [sp, #8]
 801ab62:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ab66:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ab6a:	fb17 f709 	smulbb	r7, r7, r9
 801ab6e:	b2c0      	uxtb	r0, r0
 801ab70:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ab74:	fb10 f009 	smulbb	r0, r0, r9
 801ab78:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ab7c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801ab80:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ab84:	fa1f fc8c 	uxth.w	ip, ip
 801ab88:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ab8c:	fa5f fe8e 	uxtb.w	lr, lr
 801ab90:	fb07 a705 	mla	r7, r7, r5, sl
 801ab94:	fb0e 0005 	mla	r0, lr, r5, r0
 801ab98:	f10c 0501 	add.w	r5, ip, #1
 801ab9c:	b2bf      	uxth	r7, r7
 801ab9e:	b280      	uxth	r0, r0
 801aba0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801aba4:	f100 0a01 	add.w	sl, r0, #1
 801aba8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801abac:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801abb0:	9802      	ldr	r0, [sp, #8]
 801abb2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801abb6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801abba:	f107 0a01 	add.w	sl, r7, #1
 801abbe:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801abc2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801abc6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801abca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801abce:	f824 c000 	strh.w	ip, [r4, r0]
 801abd2:	e7af      	b.n	801ab34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801abd4:	f04f 0e00 	mov.w	lr, #0
 801abd8:	eba3 000e 	sub.w	r0, r3, lr
 801abdc:	2800      	cmp	r0, #0
 801abde:	f77f af43 	ble.w	801aa68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801abe2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801abe6:	140d      	asrs	r5, r1, #16
 801abe8:	1410      	asrs	r0, r2, #16
 801abea:	fb06 5000 	mla	r0, r6, r0, r5
 801abee:	9d01      	ldr	r5, [sp, #4]
 801abf0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801abf4:	0e2e      	lsrs	r6, r5, #24
 801abf6:	2eff      	cmp	r6, #255	; 0xff
 801abf8:	d112      	bne.n	801ac20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801abfa:	482c      	ldr	r0, [pc, #176]	; (801acac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801abfc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ac00:	0968      	lsrs	r0, r5, #5
 801ac02:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ac06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ac0a:	4330      	orrs	r0, r6
 801ac0c:	4328      	orrs	r0, r5
 801ac0e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ac12:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ac14:	f10e 0e01 	add.w	lr, lr, #1
 801ac18:	4401      	add	r1, r0
 801ac1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ac1c:	4402      	add	r2, r0
 801ac1e:	e7db      	b.n	801abd8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ac20:	b2f0      	uxtb	r0, r6
 801ac22:	2e00      	cmp	r6, #0
 801ac24:	d0f5      	beq.n	801ac12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ac26:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ac2a:	fa1f f980 	uxth.w	r9, r0
 801ac2e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ac32:	43c0      	mvns	r0, r0
 801ac34:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ac38:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ac3c:	fb16 f609 	smulbb	r6, r6, r9
 801ac40:	b2c0      	uxtb	r0, r0
 801ac42:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ac46:	b2ed      	uxtb	r5, r5
 801ac48:	fb1a fa09 	smulbb	sl, sl, r9
 801ac4c:	fb07 6700 	mla	r7, r7, r0, r6
 801ac50:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ac54:	fb15 f509 	smulbb	r5, r5, r9
 801ac58:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ac5c:	b2bf      	uxth	r7, r7
 801ac5e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ac62:	fa5f fc8c 	uxtb.w	ip, ip
 801ac66:	fb06 a600 	mla	r6, r6, r0, sl
 801ac6a:	fb0c 5500 	mla	r5, ip, r0, r5
 801ac6e:	1c78      	adds	r0, r7, #1
 801ac70:	b2b6      	uxth	r6, r6
 801ac72:	b2ad      	uxth	r5, r5
 801ac74:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ac78:	f105 0a01 	add.w	sl, r5, #1
 801ac7c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ac80:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ac84:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ac88:	ea4a 0707 	orr.w	r7, sl, r7
 801ac8c:	f106 0a01 	add.w	sl, r6, #1
 801ac90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ac94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ac98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ac9c:	ea47 070a 	orr.w	r7, r7, sl
 801aca0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801aca4:	e7b5      	b.n	801ac12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801aca6:	b005      	add	sp, #20
 801aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acac:	fffff800 	.word	0xfffff800

0801acb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acb4:	b087      	sub	sp, #28
 801acb6:	468b      	mov	fp, r1
 801acb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801acbc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801acbe:	9203      	str	r2, [sp, #12]
 801acc0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801acc4:	6841      	ldr	r1, [r0, #4]
 801acc6:	9204      	str	r2, [sp, #16]
 801acc8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801accc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801acd0:	fb01 2404 	mla	r4, r1, r4, r2
 801acd4:	6802      	ldr	r2, [r0, #0]
 801acd6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801acda:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801acde:	3201      	adds	r2, #1
 801ace0:	f022 0201 	bic.w	r2, r2, #1
 801ace4:	9200      	str	r2, [sp, #0]
 801ace6:	f8d9 2000 	ldr.w	r2, [r9]
 801acea:	9201      	str	r2, [sp, #4]
 801acec:	f1bb 0f00 	cmp.w	fp, #0
 801acf0:	dc03      	bgt.n	801acfa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801acf2:	9a03      	ldr	r2, [sp, #12]
 801acf4:	2a00      	cmp	r2, #0
 801acf6:	f340 816a 	ble.w	801afce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801acfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801acfc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ad00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ad04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad06:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ad0a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	dd0e      	ble.n	801ad30 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ad12:	1402      	asrs	r2, r0, #16
 801ad14:	d405      	bmi.n	801ad22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad16:	42ba      	cmp	r2, r7
 801ad18:	da03      	bge.n	801ad22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad1a:	140a      	asrs	r2, r1, #16
 801ad1c:	d401      	bmi.n	801ad22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ad1e:	42b2      	cmp	r2, r6
 801ad20:	db07      	blt.n	801ad32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ad22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ad24:	3b01      	subs	r3, #1
 801ad26:	3402      	adds	r4, #2
 801ad28:	4410      	add	r0, r2
 801ad2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ad2c:	4411      	add	r1, r2
 801ad2e:	e7ee      	b.n	801ad0e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ad30:	d017      	beq.n	801ad62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ad32:	1e5a      	subs	r2, r3, #1
 801ad34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ad36:	fb05 0502 	mla	r5, r5, r2, r0
 801ad3a:	142d      	asrs	r5, r5, #16
 801ad3c:	d409      	bmi.n	801ad52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ad3e:	42bd      	cmp	r5, r7
 801ad40:	da07      	bge.n	801ad52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ad42:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ad44:	fb05 1202 	mla	r2, r5, r2, r1
 801ad48:	1412      	asrs	r2, r2, #16
 801ad4a:	d402      	bmi.n	801ad52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ad4c:	42b2      	cmp	r2, r6
 801ad4e:	f2c0 80c8 	blt.w	801aee2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ad52:	2700      	movs	r7, #0
 801ad54:	19da      	adds	r2, r3, r7
 801ad56:	2a00      	cmp	r2, #0
 801ad58:	dc3e      	bgt.n	801add8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ad5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ad62:	f1bb 0f00 	cmp.w	fp, #0
 801ad66:	f340 8132 	ble.w	801afce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ad6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad74:	f1bb 0b01 	subs.w	fp, fp, #1
 801ad78:	eeb0 6a62 	vmov.f32	s12, s5
 801ad7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad80:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad88:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ad8c:	eeb0 6a43 	vmov.f32	s12, s6
 801ad90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ad94:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ad98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ada0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ada4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ada8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801adb0:	ee12 2a90 	vmov	r2, s5
 801adb4:	eef0 2a47 	vmov.f32	s5, s14
 801adb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801adbc:	ee13 2a10 	vmov	r2, s6
 801adc0:	9313      	str	r3, [sp, #76]	; 0x4c
 801adc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801adc4:	eeb0 3a67 	vmov.f32	s6, s15
 801adc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801adcc:	9a03      	ldr	r2, [sp, #12]
 801adce:	9314      	str	r3, [sp, #80]	; 0x50
 801add0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801add2:	bf08      	it	eq
 801add4:	4613      	moveq	r3, r2
 801add6:	e789      	b.n	801acec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801add8:	1405      	asrs	r5, r0, #16
 801adda:	d436      	bmi.n	801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801addc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ade0:	42aa      	cmp	r2, r5
 801ade2:	dd32      	ble.n	801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ade4:	140e      	asrs	r6, r1, #16
 801ade6:	d430      	bmi.n	801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ade8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801adec:	42b2      	cmp	r2, r6
 801adee:	dd2c      	ble.n	801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801adf0:	9a00      	ldr	r2, [sp, #0]
 801adf2:	fb06 5502 	mla	r5, r6, r2, r5
 801adf6:	9e01      	ldr	r6, [sp, #4]
 801adf8:	086a      	lsrs	r2, r5, #1
 801adfa:	5cb2      	ldrb	r2, [r6, r2]
 801adfc:	07ee      	lsls	r6, r5, #31
 801adfe:	bf54      	ite	pl
 801ae00:	f002 020f 	andpl.w	r2, r2, #15
 801ae04:	1112      	asrmi	r2, r2, #4
 801ae06:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ae0a:	b2d2      	uxtb	r2, r2
 801ae0c:	b1ea      	cbz	r2, 801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ae0e:	9d04      	ldr	r5, [sp, #16]
 801ae10:	436a      	muls	r2, r5
 801ae12:	1c55      	adds	r5, r2, #1
 801ae14:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ae18:	4d6e      	ldr	r5, [pc, #440]	; (801afd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ae1a:	1212      	asrs	r2, r2, #8
 801ae1c:	682d      	ldr	r5, [r5, #0]
 801ae1e:	2aff      	cmp	r2, #255	; 0xff
 801ae20:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ae24:	9605      	str	r6, [sp, #20]
 801ae26:	d116      	bne.n	801ae56 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ae28:	f06f 0201 	mvn.w	r2, #1
 801ae2c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ae30:	fb02 fc07 	mul.w	ip, r2, r7
 801ae34:	096a      	lsrs	r2, r5, #5
 801ae36:	f026 0607 	bic.w	r6, r6, #7
 801ae3a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ae3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ae42:	4316      	orrs	r6, r2
 801ae44:	432e      	orrs	r6, r5
 801ae46:	f824 600c 	strh.w	r6, [r4, ip]
 801ae4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae4c:	3f01      	subs	r7, #1
 801ae4e:	4410      	add	r0, r2
 801ae50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ae52:	4411      	add	r1, r2
 801ae54:	e77e      	b.n	801ad54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ae56:	f06f 0601 	mvn.w	r6, #1
 801ae5a:	fa1f fa82 	uxth.w	sl, r2
 801ae5e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ae62:	43d2      	mvns	r2, r2
 801ae64:	437e      	muls	r6, r7
 801ae66:	b2ed      	uxtb	r5, r5
 801ae68:	fb1c fc0a 	smulbb	ip, ip, sl
 801ae6c:	b2d2      	uxtb	r2, r2
 801ae6e:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ae72:	fb15 f50a 	smulbb	r5, r5, sl
 801ae76:	9602      	str	r6, [sp, #8]
 801ae78:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ae7c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ae80:	fb16 f60a 	smulbb	r6, r6, sl
 801ae84:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ae88:	fb0e ce02 	mla	lr, lr, r2, ip
 801ae8c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ae90:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ae94:	fa1f fe8e 	uxth.w	lr, lr
 801ae98:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ae9c:	fa5f f888 	uxtb.w	r8, r8
 801aea0:	fb0c 6c02 	mla	ip, ip, r2, r6
 801aea4:	fb08 5502 	mla	r5, r8, r2, r5
 801aea8:	f10e 0201 	add.w	r2, lr, #1
 801aeac:	fa1f fc8c 	uxth.w	ip, ip
 801aeb0:	b2ad      	uxth	r5, r5
 801aeb2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801aeb6:	9a02      	ldr	r2, [sp, #8]
 801aeb8:	1c6e      	adds	r6, r5, #1
 801aeba:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801aebe:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801aec2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801aec6:	ea46 0e0e 	orr.w	lr, r6, lr
 801aeca:	f10c 0601 	add.w	r6, ip, #1
 801aece:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801aed2:	0976      	lsrs	r6, r6, #5
 801aed4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801aed8:	ea4e 0e06 	orr.w	lr, lr, r6
 801aedc:	f824 e002 	strh.w	lr, [r4, r2]
 801aee0:	e7b3      	b.n	801ae4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801aee2:	f04f 0800 	mov.w	r8, #0
 801aee6:	eba3 0208 	sub.w	r2, r3, r8
 801aeea:	2a00      	cmp	r2, #0
 801aeec:	f77f af35 	ble.w	801ad5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801aef0:	1402      	asrs	r2, r0, #16
 801aef2:	9e00      	ldr	r6, [sp, #0]
 801aef4:	140d      	asrs	r5, r1, #16
 801aef6:	fb06 2505 	mla	r5, r6, r5, r2
 801aefa:	9e01      	ldr	r6, [sp, #4]
 801aefc:	086a      	lsrs	r2, r5, #1
 801aefe:	07ed      	lsls	r5, r5, #31
 801af00:	5cb2      	ldrb	r2, [r6, r2]
 801af02:	bf54      	ite	pl
 801af04:	f002 020f 	andpl.w	r2, r2, #15
 801af08:	1112      	asrmi	r2, r2, #4
 801af0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af0e:	b2d2      	uxtb	r2, r2
 801af10:	b1c2      	cbz	r2, 801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801af12:	9d04      	ldr	r5, [sp, #16]
 801af14:	436a      	muls	r2, r5
 801af16:	1c55      	adds	r5, r2, #1
 801af18:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801af1c:	4d2d      	ldr	r5, [pc, #180]	; (801afd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801af1e:	1212      	asrs	r2, r2, #8
 801af20:	682e      	ldr	r6, [r5, #0]
 801af22:	2aff      	cmp	r2, #255	; 0xff
 801af24:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801af28:	d113      	bne.n	801af52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801af2a:	0972      	lsrs	r2, r6, #5
 801af2c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801af30:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801af34:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801af38:	f025 0507 	bic.w	r5, r5, #7
 801af3c:	4315      	orrs	r5, r2
 801af3e:	4335      	orrs	r5, r6
 801af40:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801af44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af46:	f108 0801 	add.w	r8, r8, #1
 801af4a:	4410      	add	r0, r2
 801af4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af4e:	4411      	add	r1, r2
 801af50:	e7c9      	b.n	801aee6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801af52:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801af56:	fa1f fa82 	uxth.w	sl, r2
 801af5a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801af5e:	43d2      	mvns	r2, r2
 801af60:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801af64:	fb17 f70a 	smulbb	r7, r7, sl
 801af68:	b2d2      	uxtb	r2, r2
 801af6a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801af6e:	b2f6      	uxtb	r6, r6
 801af70:	b2ed      	uxtb	r5, r5
 801af72:	fb0c 7c02 	mla	ip, ip, r2, r7
 801af76:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801af7a:	fb16 f60a 	smulbb	r6, r6, sl
 801af7e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801af82:	fa1f fc8c 	uxth.w	ip, ip
 801af86:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801af8a:	fb15 f50a 	smulbb	r5, r5, sl
 801af8e:	fa5f fe8e 	uxtb.w	lr, lr
 801af92:	fb0e 6602 	mla	r6, lr, r2, r6
 801af96:	fb07 5702 	mla	r7, r7, r2, r5
 801af9a:	f10c 0201 	add.w	r2, ip, #1
 801af9e:	b2b6      	uxth	r6, r6
 801afa0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801afa4:	1c75      	adds	r5, r6, #1
 801afa6:	b2bf      	uxth	r7, r7
 801afa8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801afac:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801afb0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801afb4:	ea45 0c0c 	orr.w	ip, r5, ip
 801afb8:	1c7d      	adds	r5, r7, #1
 801afba:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801afbe:	096d      	lsrs	r5, r5, #5
 801afc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801afc4:	ea4c 0c05 	orr.w	ip, ip, r5
 801afc8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801afcc:	e7ba      	b.n	801af44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801afce:	b007      	add	sp, #28
 801afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afd4:	24041b14 	.word	0x24041b14

0801afd8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afdc:	b087      	sub	sp, #28
 801afde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801afe2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801b2ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801afe6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801afe8:	9101      	str	r1, [sp, #4]
 801afea:	9205      	str	r2, [sp, #20]
 801afec:	6841      	ldr	r1, [r0, #4]
 801afee:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801aff2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801aff6:	fb01 2404 	mla	r4, r1, r4, r2
 801affa:	6802      	ldr	r2, [r0, #0]
 801affc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801b000:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b004:	3201      	adds	r2, #1
 801b006:	f022 0201 	bic.w	r2, r2, #1
 801b00a:	9202      	str	r2, [sp, #8]
 801b00c:	f8db 2000 	ldr.w	r2, [fp]
 801b010:	9203      	str	r2, [sp, #12]
 801b012:	9a01      	ldr	r2, [sp, #4]
 801b014:	2a00      	cmp	r2, #0
 801b016:	dc03      	bgt.n	801b020 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b018:	9a05      	ldr	r2, [sp, #20]
 801b01a:	2a00      	cmp	r2, #0
 801b01c:	f340 8162 	ble.w	801b2e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b022:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801b026:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b02a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b02c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801b030:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801b034:	2b00      	cmp	r3, #0
 801b036:	dd0e      	ble.n	801b056 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b038:	1402      	asrs	r2, r0, #16
 801b03a:	d405      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b03c:	42ba      	cmp	r2, r7
 801b03e:	da03      	bge.n	801b048 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b040:	140a      	asrs	r2, r1, #16
 801b042:	d401      	bmi.n	801b048 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b044:	42b2      	cmp	r2, r6
 801b046:	db07      	blt.n	801b058 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b04a:	3b01      	subs	r3, #1
 801b04c:	3402      	adds	r4, #2
 801b04e:	4410      	add	r0, r2
 801b050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b052:	4411      	add	r1, r2
 801b054:	e7ee      	b.n	801b034 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b056:	d017      	beq.n	801b088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801b058:	1e5a      	subs	r2, r3, #1
 801b05a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b05c:	fb05 0502 	mla	r5, r5, r2, r0
 801b060:	142d      	asrs	r5, r5, #16
 801b062:	d409      	bmi.n	801b078 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b064:	42bd      	cmp	r5, r7
 801b066:	da07      	bge.n	801b078 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b068:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b06a:	fb05 1202 	mla	r2, r5, r2, r1
 801b06e:	1412      	asrs	r2, r2, #16
 801b070:	d402      	bmi.n	801b078 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b072:	42b2      	cmp	r2, r6
 801b074:	f2c0 80c3 	blt.w	801b1fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801b078:	2500      	movs	r5, #0
 801b07a:	195a      	adds	r2, r3, r5
 801b07c:	2a00      	cmp	r2, #0
 801b07e:	dc3f      	bgt.n	801b100 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b084:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b088:	9b01      	ldr	r3, [sp, #4]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f340 812a 	ble.w	801b2e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801b090:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b096:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b09a:	eeb0 6a62 	vmov.f32	s12, s5
 801b09e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b0a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0aa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b0ae:	eeb0 6a43 	vmov.f32	s12, s6
 801b0b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b0ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0d2:	ee12 2a90 	vmov	r2, s5
 801b0d6:	eef0 2a47 	vmov.f32	s5, s14
 801b0da:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0de:	ee13 2a10 	vmov	r2, s6
 801b0e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0e6:	eeb0 3a67 	vmov.f32	s6, s15
 801b0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ee:	9314      	str	r3, [sp, #80]	; 0x50
 801b0f0:	9b01      	ldr	r3, [sp, #4]
 801b0f2:	9a05      	ldr	r2, [sp, #20]
 801b0f4:	3b01      	subs	r3, #1
 801b0f6:	9301      	str	r3, [sp, #4]
 801b0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0fa:	bf08      	it	eq
 801b0fc:	4613      	moveq	r3, r2
 801b0fe:	e788      	b.n	801b012 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b100:	1406      	asrs	r6, r0, #16
 801b102:	d42c      	bmi.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b104:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b108:	42b2      	cmp	r2, r6
 801b10a:	dd28      	ble.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b10c:	140f      	asrs	r7, r1, #16
 801b10e:	d426      	bmi.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b110:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b114:	42ba      	cmp	r2, r7
 801b116:	dd22      	ble.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b118:	9a02      	ldr	r2, [sp, #8]
 801b11a:	fb07 6602 	mla	r6, r7, r2, r6
 801b11e:	9f03      	ldr	r7, [sp, #12]
 801b120:	0872      	lsrs	r2, r6, #1
 801b122:	07f6      	lsls	r6, r6, #31
 801b124:	5cba      	ldrb	r2, [r7, r2]
 801b126:	bf54      	ite	pl
 801b128:	f002 020f 	andpl.w	r2, r2, #15
 801b12c:	1112      	asrmi	r2, r2, #4
 801b12e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b132:	b2d2      	uxtb	r2, r2
 801b134:	2aff      	cmp	r2, #255	; 0xff
 801b136:	d118      	bne.n	801b16a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b138:	f06f 0601 	mvn.w	r6, #1
 801b13c:	f8d8 2000 	ldr.w	r2, [r8]
 801b140:	fb06 f705 	mul.w	r7, r6, r5
 801b144:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801b148:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801b14c:	0956      	lsrs	r6, r2, #5
 801b14e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801b152:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b156:	ea4c 0606 	orr.w	r6, ip, r6
 801b15a:	4316      	orrs	r6, r2
 801b15c:	53e6      	strh	r6, [r4, r7]
 801b15e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b160:	3d01      	subs	r5, #1
 801b162:	4410      	add	r0, r2
 801b164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b166:	4411      	add	r1, r2
 801b168:	e787      	b.n	801b07a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801b16a:	2a00      	cmp	r2, #0
 801b16c:	d0f7      	beq.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b16e:	f06f 0601 	mvn.w	r6, #1
 801b172:	f8d8 c000 	ldr.w	ip, [r8]
 801b176:	fa1f f982 	uxth.w	r9, r2
 801b17a:	43d2      	mvns	r2, r2
 801b17c:	436e      	muls	r6, r5
 801b17e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801b182:	b2d2      	uxtb	r2, r2
 801b184:	f834 e006 	ldrh.w	lr, [r4, r6]
 801b188:	fb1a fa09 	smulbb	sl, sl, r9
 801b18c:	9604      	str	r6, [sp, #16]
 801b18e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801b192:	ea4f 272e 	mov.w	r7, lr, asr #8
 801b196:	fb16 f609 	smulbb	r6, r6, r9
 801b19a:	fa5f fc8c 	uxtb.w	ip, ip
 801b19e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b1a2:	fb1c fc09 	smulbb	ip, ip, r9
 801b1a6:	fb07 6702 	mla	r7, r7, r2, r6
 801b1aa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b1ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b1b2:	b2bf      	uxth	r7, r7
 801b1b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b1b8:	fa5f fe8e 	uxtb.w	lr, lr
 801b1bc:	fb06 a602 	mla	r6, r6, r2, sl
 801b1c0:	fb0e cc02 	mla	ip, lr, r2, ip
 801b1c4:	1c7a      	adds	r2, r7, #1
 801b1c6:	b2b6      	uxth	r6, r6
 801b1c8:	fa1f fc8c 	uxth.w	ip, ip
 801b1cc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b1d0:	9a04      	ldr	r2, [sp, #16]
 801b1d2:	f10c 0a01 	add.w	sl, ip, #1
 801b1d6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801b1da:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b1de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b1e2:	ea4a 0707 	orr.w	r7, sl, r7
 801b1e6:	f106 0a01 	add.w	sl, r6, #1
 801b1ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801b1ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b1f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b1f6:	ea47 070a 	orr.w	r7, r7, sl
 801b1fa:	52a7      	strh	r7, [r4, r2]
 801b1fc:	e7af      	b.n	801b15e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b1fe:	f04f 0e00 	mov.w	lr, #0
 801b202:	eba3 020e 	sub.w	r2, r3, lr
 801b206:	2a00      	cmp	r2, #0
 801b208:	f77f af3a 	ble.w	801b080 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801b20c:	1402      	asrs	r2, r0, #16
 801b20e:	9e02      	ldr	r6, [sp, #8]
 801b210:	140d      	asrs	r5, r1, #16
 801b212:	fb06 2505 	mla	r5, r6, r5, r2
 801b216:	9e03      	ldr	r6, [sp, #12]
 801b218:	086a      	lsrs	r2, r5, #1
 801b21a:	07ed      	lsls	r5, r5, #31
 801b21c:	5cb2      	ldrb	r2, [r6, r2]
 801b21e:	bf54      	ite	pl
 801b220:	f002 020f 	andpl.w	r2, r2, #15
 801b224:	1112      	asrmi	r2, r2, #4
 801b226:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b22a:	b2d2      	uxtb	r2, r2
 801b22c:	2aff      	cmp	r2, #255	; 0xff
 801b22e:	d115      	bne.n	801b25c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b230:	f8d8 5000 	ldr.w	r5, [r8]
 801b234:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801b238:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801b23c:	096a      	lsrs	r2, r5, #5
 801b23e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801b242:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b246:	4332      	orrs	r2, r6
 801b248:	432a      	orrs	r2, r5
 801b24a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801b24e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b250:	f10e 0e01 	add.w	lr, lr, #1
 801b254:	4410      	add	r0, r2
 801b256:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b258:	4411      	add	r1, r2
 801b25a:	e7d2      	b.n	801b202 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801b25c:	2a00      	cmp	r2, #0
 801b25e:	d0f6      	beq.n	801b24e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b260:	f8d8 7000 	ldr.w	r7, [r8]
 801b264:	fa1f f982 	uxth.w	r9, r2
 801b268:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801b26c:	43d2      	mvns	r2, r2
 801b26e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801b272:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b276:	ea4f 262c 	mov.w	r6, ip, asr #8
 801b27a:	fb15 f509 	smulbb	r5, r5, r9
 801b27e:	b2d2      	uxtb	r2, r2
 801b280:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b284:	b2ff      	uxtb	r7, r7
 801b286:	fb1a fa09 	smulbb	sl, sl, r9
 801b28a:	fb06 5602 	mla	r6, r6, r2, r5
 801b28e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b292:	fb17 f709 	smulbb	r7, r7, r9
 801b296:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b29a:	b2b6      	uxth	r6, r6
 801b29c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b2a0:	fa5f fc8c 	uxtb.w	ip, ip
 801b2a4:	fb05 a502 	mla	r5, r5, r2, sl
 801b2a8:	fb0c 7702 	mla	r7, ip, r2, r7
 801b2ac:	1c72      	adds	r2, r6, #1
 801b2ae:	b2ad      	uxth	r5, r5
 801b2b0:	b2bf      	uxth	r7, r7
 801b2b2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801b2b6:	f107 0a01 	add.w	sl, r7, #1
 801b2ba:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801b2be:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801b2c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801b2c6:	ea4a 0606 	orr.w	r6, sl, r6
 801b2ca:	f105 0a01 	add.w	sl, r5, #1
 801b2ce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801b2d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801b2d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801b2da:	ea46 060a 	orr.w	r6, r6, sl
 801b2de:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801b2e2:	e7b4      	b.n	801b24e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b2e4:	b007      	add	sp, #28
 801b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ea:	bf00      	nop
 801b2ec:	24041b14 	.word	0x24041b14

0801b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b2f0:	4770      	bx	lr

0801b2f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b2f2:	4770      	bx	lr

0801b2f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b2f4:	4770      	bx	lr

0801b2f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b2f6:	4770      	bx	lr

0801b2f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b2f8:	4770      	bx	lr

0801b2fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b2fa:	4770      	bx	lr

0801b2fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b2fc:	4770      	bx	lr

0801b2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b2fe:	4770      	bx	lr

0801b300 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b300:	4770      	bx	lr

0801b302 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b302:	4770      	bx	lr

0801b304 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b304:	4770      	bx	lr

0801b306 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b306:	4770      	bx	lr

0801b308 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b308:	4770      	bx	lr

0801b30a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b30a:	4770      	bx	lr

0801b30c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b30c:	4770      	bx	lr

0801b30e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b30e:	4770      	bx	lr

0801b310 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b310:	4770      	bx	lr

0801b312 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b312:	4770      	bx	lr

0801b314 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b314:	4770      	bx	lr

0801b316 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b316:	4770      	bx	lr

0801b318 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b318:	4770      	bx	lr

0801b31a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b31a:	4770      	bx	lr

0801b31c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b31c:	4770      	bx	lr

0801b31e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b31e:	4770      	bx	lr

0801b320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b320:	4770      	bx	lr

0801b322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801b322:	4770      	bx	lr

0801b324 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b324:	4770      	bx	lr

0801b326 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801b326:	4770      	bx	lr

0801b328 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b32c:	b088      	sub	sp, #32
 801b32e:	4606      	mov	r6, r0
 801b330:	4688      	mov	r8, r1
 801b332:	4691      	mov	r9, r2
 801b334:	ac08      	add	r4, sp, #32
 801b336:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b33a:	4620      	mov	r0, r4
 801b33c:	f7fd fc66 	bl	8018c0c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b340:	6833      	ldr	r3, [r6, #0]
 801b342:	4605      	mov	r5, r0
 801b344:	4620      	mov	r0, r4
 801b346:	699f      	ldr	r7, [r3, #24]
 801b348:	f7fd fb74 	bl	8018a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b34c:	4682      	mov	sl, r0
 801b34e:	4620      	mov	r0, r4
 801b350:	f7fd fba4 	bl	8018a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b354:	9500      	str	r5, [sp, #0]
 801b356:	464b      	mov	r3, r9
 801b358:	4642      	mov	r2, r8
 801b35a:	4631      	mov	r1, r6
 801b35c:	e9cd a001 	strd	sl, r0, [sp, #4]
 801b360:	a806      	add	r0, sp, #24
 801b362:	47b8      	blx	r7
 801b364:	4628      	mov	r0, r5
 801b366:	b008      	add	sp, #32
 801b368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b36c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b370:	2300      	movs	r3, #0
 801b372:	9300      	str	r3, [sp, #0]
 801b374:	4b3d      	ldr	r3, [pc, #244]	; (801b46c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801b376:	781b      	ldrb	r3, [r3, #0]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d137      	bne.n	801b3ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801b37c:	4a3c      	ldr	r2, [pc, #240]	; (801b470 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b37e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b382:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d132      	bne.n	801b3f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801b38a:	4b3a      	ldr	r3, [pc, #232]	; (801b474 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b38c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b390:	ac02      	add	r4, sp, #8
 801b392:	6808      	ldr	r0, [r1, #0]
 801b394:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b398:	ab02      	add	r3, sp, #8
 801b39a:	6849      	ldr	r1, [r1, #4]
 801b39c:	4d36      	ldr	r5, [pc, #216]	; (801b478 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801b39e:	c303      	stmia	r3!, {r0, r1}
 801b3a0:	4669      	mov	r1, sp
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7fa fda6 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b3a8:	4668      	mov	r0, sp
 801b3aa:	f7fa fd7b 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b3ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b3b2:	f8bd 2000 	ldrh.w	r2, [sp]
 801b3b6:	462f      	mov	r7, r5
 801b3b8:	6828      	ldr	r0, [r5, #0]
 801b3ba:	4413      	add	r3, r2
 801b3bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b3c0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b3c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b3c8:	4413      	add	r3, r2
 801b3ca:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b3ce:	6803      	ldr	r3, [r0, #0]
 801b3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3d2:	4798      	blx	r3
 801b3d4:	f010 0f01 	tst.w	r0, #1
 801b3d8:	d00c      	beq.n	801b3f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801b3da:	6828      	ldr	r0, [r5, #0]
 801b3dc:	6803      	ldr	r3, [r0, #0]
 801b3de:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b3e4:	4798      	blx	r3
 801b3e6:	b004      	add	sp, #16
 801b3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3ec:	4a21      	ldr	r2, [pc, #132]	; (801b474 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801b3ee:	e7c6      	b.n	801b37e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b3f0:	4b1f      	ldr	r3, [pc, #124]	; (801b470 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b3f2:	e7cb      	b.n	801b38c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b3f4:	6838      	ldr	r0, [r7, #0]
 801b3f6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801b3fa:	6803      	ldr	r3, [r0, #0]
 801b3fc:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801b400:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b406:	4798      	blx	r3
 801b408:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b40c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b410:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b414:	fb16 3602 	smlabb	r6, r6, r2, r3
 801b418:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801b41c:	6838      	ldr	r0, [r7, #0]
 801b41e:	6803      	ldr	r3, [r0, #0]
 801b420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b422:	4798      	blx	r3
 801b424:	4a12      	ldr	r2, [pc, #72]	; (801b470 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801b426:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801b42a:	8813      	ldrh	r3, [r2, #0]
 801b42c:	4691      	mov	r9, r2
 801b42e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801b432:	435d      	muls	r5, r3
 801b434:	fb03 1404 	mla	r4, r3, r4, r1
 801b438:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b43c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b440:	6838      	ldr	r0, [r7, #0]
 801b442:	42ac      	cmp	r4, r5
 801b444:	6803      	ldr	r3, [r0, #0]
 801b446:	d20e      	bcs.n	801b466 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801b448:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801b44c:	4632      	mov	r2, r6
 801b44e:	4643      	mov	r3, r8
 801b450:	4621      	mov	r1, r4
 801b452:	47d0      	blx	sl
 801b454:	f8b9 3000 	ldrh.w	r3, [r9]
 801b458:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b45c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b460:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b464:	e7ec      	b.n	801b440 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b468:	4798      	blx	r3
 801b46a:	e7bc      	b.n	801b3e6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b46c:	24041b04 	.word	0x24041b04
 801b470:	24041b06 	.word	0x24041b06
 801b474:	24041b08 	.word	0x24041b08
 801b478:	24041b0c 	.word	0x24041b0c

0801b47c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b480:	b08b      	sub	sp, #44	; 0x2c
 801b482:	460f      	mov	r7, r1
 801b484:	4616      	mov	r6, r2
 801b486:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801b48a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b48e:	f1bb 0f00 	cmp.w	fp, #0
 801b492:	d049      	beq.n	801b528 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b494:	6810      	ldr	r0, [r2, #0]
 801b496:	ad06      	add	r5, sp, #24
 801b498:	6851      	ldr	r1, [r2, #4]
 801b49a:	c503      	stmia	r5!, {r0, r1}
 801b49c:	6818      	ldr	r0, [r3, #0]
 801b49e:	ad08      	add	r5, sp, #32
 801b4a0:	6859      	ldr	r1, [r3, #4]
 801b4a2:	c503      	stmia	r5!, {r0, r1}
 801b4a4:	a806      	add	r0, sp, #24
 801b4a6:	f7fa fcfd 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4aa:	4631      	mov	r1, r6
 801b4ac:	a808      	add	r0, sp, #32
 801b4ae:	f7fa fd21 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b4b2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b4b6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b4ba:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801b4be:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b4c2:	fb16 2103 	smlabb	r1, r6, r3, r2
 801b4c6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801b4ca:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801b4ce:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b4d2:	4f5f      	ldr	r7, [pc, #380]	; (801b650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b4d4:	440a      	add	r2, r1
 801b4d6:	6838      	ldr	r0, [r7, #0]
 801b4d8:	46b9      	mov	r9, r7
 801b4da:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b4de:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b4e2:	4413      	add	r3, r2
 801b4e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b4e8:	6803      	ldr	r3, [r0, #0]
 801b4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4ec:	4798      	blx	r3
 801b4ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b4f2:	d01c      	beq.n	801b52e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801b4f4:	f010 0f04 	tst.w	r0, #4
 801b4f8:	d01d      	beq.n	801b536 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b4fa:	f8d9 0000 	ldr.w	r0, [r9]
 801b4fe:	2700      	movs	r7, #0
 801b500:	b2ad      	uxth	r5, r5
 801b502:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b506:	6801      	ldr	r1, [r0, #0]
 801b508:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b50c:	f8cd b00c 	str.w	fp, [sp, #12]
 801b510:	9501      	str	r5, [sp, #4]
 801b512:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801b516:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801b51a:	9402      	str	r4, [sp, #8]
 801b51c:	fa1f f488 	uxth.w	r4, r8
 801b520:	9400      	str	r4, [sp, #0]
 801b522:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801b524:	4631      	mov	r1, r6
 801b526:	47a0      	blx	r4
 801b528:	b00b      	add	sp, #44	; 0x2c
 801b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52e:	b914      	cbnz	r4, 801b536 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801b530:	f010 0f01 	tst.w	r0, #1
 801b534:	e7e0      	b.n	801b4f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801b536:	f8d9 0000 	ldr.w	r0, [r9]
 801b53a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801b53e:	6803      	ldr	r3, [r0, #0]
 801b540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b542:	4798      	blx	r3
 801b544:	4b43      	ldr	r3, [pc, #268]	; (801b654 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801b546:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b54a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b54e:	881a      	ldrh	r2, [r3, #0]
 801b550:	469a      	mov	sl, r3
 801b552:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b556:	fb05 f502 	mul.w	r5, r5, r2
 801b55a:	fb02 1404 	mla	r4, r2, r4, r1
 801b55e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801b562:	d059      	beq.n	801b618 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801b564:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801b568:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b56c:	fa1f f28b 	uxth.w	r2, fp
 801b570:	469e      	mov	lr, r3
 801b572:	fa1f f989 	uxth.w	r9, r9
 801b576:	42ac      	cmp	r4, r5
 801b578:	d264      	bcs.n	801b644 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b57a:	eb04 0a07 	add.w	sl, r4, r7
 801b57e:	4554      	cmp	r4, sl
 801b580:	d23d      	bcs.n	801b5fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801b582:	8821      	ldrh	r1, [r4, #0]
 801b584:	f836 3b02 	ldrh.w	r3, [r6], #2
 801b588:	1208      	asrs	r0, r1, #8
 801b58a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b58e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b592:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801b596:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b59a:	00c9      	lsls	r1, r1, #3
 801b59c:	fb10 f009 	smulbb	r0, r0, r9
 801b5a0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801b5a4:	b2c9      	uxtb	r1, r1
 801b5a6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b5aa:	10d8      	asrs	r0, r3, #3
 801b5ac:	fb1b fb09 	smulbb	fp, fp, r9
 801b5b0:	00db      	lsls	r3, r3, #3
 801b5b2:	fa1f fc8c 	uxth.w	ip, ip
 801b5b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801b5ba:	fb11 f109 	smulbb	r1, r1, r9
 801b5be:	b2db      	uxtb	r3, r3
 801b5c0:	fb00 b002 	mla	r0, r0, r2, fp
 801b5c4:	f10c 0b01 	add.w	fp, ip, #1
 801b5c8:	fb03 1302 	mla	r3, r3, r2, r1
 801b5cc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801b5d0:	b29b      	uxth	r3, r3
 801b5d2:	b280      	uxth	r0, r0
 801b5d4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801b5d8:	f103 0c01 	add.w	ip, r3, #1
 801b5dc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b5e0:	1c43      	adds	r3, r0, #1
 801b5e2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b5e6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b5ea:	0940      	lsrs	r0, r0, #5
 801b5ec:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b5f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801b5f4:	ea4c 0c00 	orr.w	ip, ip, r0
 801b5f8:	f824 cb02 	strh.w	ip, [r4], #2
 801b5fc:	e7bf      	b.n	801b57e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801b5fe:	f8be 3000 	ldrh.w	r3, [lr]
 801b602:	eba3 0308 	sub.w	r3, r3, r8
 801b606:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b60a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b60e:	eba3 0308 	sub.w	r3, r3, r8
 801b612:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b616:	e7ae      	b.n	801b576 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801b618:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801b61c:	f8d9 0000 	ldr.w	r0, [r9]
 801b620:	42ac      	cmp	r4, r5
 801b622:	6803      	ldr	r3, [r0, #0]
 801b624:	d20e      	bcs.n	801b644 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801b626:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801b62a:	4632      	mov	r2, r6
 801b62c:	463b      	mov	r3, r7
 801b62e:	4621      	mov	r1, r4
 801b630:	47c0      	blx	r8
 801b632:	f8ba 3000 	ldrh.w	r3, [sl]
 801b636:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801b63a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b63e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801b642:	e7eb      	b.n	801b61c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801b644:	4b02      	ldr	r3, [pc, #8]	; (801b650 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801b646:	6818      	ldr	r0, [r3, #0]
 801b648:	6803      	ldr	r3, [r0, #0]
 801b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b64c:	4798      	blx	r3
 801b64e:	e76b      	b.n	801b528 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b650:	24041b0c 	.word	0x24041b0c
 801b654:	24041b06 	.word	0x24041b06

0801b658 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b658:	b510      	push	{r4, lr}
 801b65a:	4604      	mov	r4, r0
 801b65c:	2104      	movs	r1, #4
 801b65e:	f008 ffc2 	bl	80245e6 <_ZdlPvj>
 801b662:	4620      	mov	r0, r4
 801b664:	bd10      	pop	{r4, pc}

0801b666 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b666:	b510      	push	{r4, lr}
 801b668:	4604      	mov	r4, r0
 801b66a:	2104      	movs	r1, #4
 801b66c:	f008 ffbb 	bl	80245e6 <_ZdlPvj>
 801b670:	4620      	mov	r0, r4
 801b672:	bd10      	pop	{r4, pc}

0801b674 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b674:	b510      	push	{r4, lr}
 801b676:	4604      	mov	r4, r0
 801b678:	2104      	movs	r1, #4
 801b67a:	f008 ffb4 	bl	80245e6 <_ZdlPvj>
 801b67e:	4620      	mov	r0, r4
 801b680:	bd10      	pop	{r4, pc}

0801b682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b682:	b510      	push	{r4, lr}
 801b684:	4604      	mov	r4, r0
 801b686:	2104      	movs	r1, #4
 801b688:	f008 ffad 	bl	80245e6 <_ZdlPvj>
 801b68c:	4620      	mov	r0, r4
 801b68e:	bd10      	pop	{r4, pc}

0801b690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b690:	b510      	push	{r4, lr}
 801b692:	4604      	mov	r4, r0
 801b694:	2104      	movs	r1, #4
 801b696:	f008 ffa6 	bl	80245e6 <_ZdlPvj>
 801b69a:	4620      	mov	r0, r4
 801b69c:	bd10      	pop	{r4, pc}

0801b69e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b69e:	b510      	push	{r4, lr}
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	2104      	movs	r1, #4
 801b6a4:	f008 ff9f 	bl	80245e6 <_ZdlPvj>
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	bd10      	pop	{r4, pc}

0801b6ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b6ac:	b510      	push	{r4, lr}
 801b6ae:	4604      	mov	r4, r0
 801b6b0:	2104      	movs	r1, #4
 801b6b2:	f008 ff98 	bl	80245e6 <_ZdlPvj>
 801b6b6:	4620      	mov	r0, r4
 801b6b8:	bd10      	pop	{r4, pc}

0801b6ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b6ba:	b510      	push	{r4, lr}
 801b6bc:	4604      	mov	r4, r0
 801b6be:	2104      	movs	r1, #4
 801b6c0:	f008 ff91 	bl	80245e6 <_ZdlPvj>
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	bd10      	pop	{r4, pc}

0801b6c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b6c8:	b510      	push	{r4, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	2104      	movs	r1, #4
 801b6ce:	f008 ff8a 	bl	80245e6 <_ZdlPvj>
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	bd10      	pop	{r4, pc}

0801b6d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b6d6:	b510      	push	{r4, lr}
 801b6d8:	4604      	mov	r4, r0
 801b6da:	2104      	movs	r1, #4
 801b6dc:	f008 ff83 	bl	80245e6 <_ZdlPvj>
 801b6e0:	4620      	mov	r0, r4
 801b6e2:	bd10      	pop	{r4, pc}

0801b6e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b6e4:	b510      	push	{r4, lr}
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	2104      	movs	r1, #4
 801b6ea:	f008 ff7c 	bl	80245e6 <_ZdlPvj>
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	bd10      	pop	{r4, pc}

0801b6f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b6f2:	b510      	push	{r4, lr}
 801b6f4:	4604      	mov	r4, r0
 801b6f6:	2104      	movs	r1, #4
 801b6f8:	f008 ff75 	bl	80245e6 <_ZdlPvj>
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	bd10      	pop	{r4, pc}

0801b700 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b700:	b510      	push	{r4, lr}
 801b702:	4604      	mov	r4, r0
 801b704:	2104      	movs	r1, #4
 801b706:	f008 ff6e 	bl	80245e6 <_ZdlPvj>
 801b70a:	4620      	mov	r0, r4
 801b70c:	bd10      	pop	{r4, pc}

0801b70e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801b70e:	b510      	push	{r4, lr}
 801b710:	4604      	mov	r4, r0
 801b712:	2104      	movs	r1, #4
 801b714:	f008 ff67 	bl	80245e6 <_ZdlPvj>
 801b718:	4620      	mov	r0, r4
 801b71a:	bd10      	pop	{r4, pc}

0801b71c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b71c:	b510      	push	{r4, lr}
 801b71e:	4604      	mov	r4, r0
 801b720:	2104      	movs	r1, #4
 801b722:	f008 ff60 	bl	80245e6 <_ZdlPvj>
 801b726:	4620      	mov	r0, r4
 801b728:	bd10      	pop	{r4, pc}

0801b72a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b72a:	b510      	push	{r4, lr}
 801b72c:	4604      	mov	r4, r0
 801b72e:	2104      	movs	r1, #4
 801b730:	f008 ff59 	bl	80245e6 <_ZdlPvj>
 801b734:	4620      	mov	r0, r4
 801b736:	bd10      	pop	{r4, pc}

0801b738 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b738:	b510      	push	{r4, lr}
 801b73a:	4604      	mov	r4, r0
 801b73c:	2104      	movs	r1, #4
 801b73e:	f008 ff52 	bl	80245e6 <_ZdlPvj>
 801b742:	4620      	mov	r0, r4
 801b744:	bd10      	pop	{r4, pc}

0801b746 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801b746:	b510      	push	{r4, lr}
 801b748:	4604      	mov	r4, r0
 801b74a:	2104      	movs	r1, #4
 801b74c:	f008 ff4b 	bl	80245e6 <_ZdlPvj>
 801b750:	4620      	mov	r0, r4
 801b752:	bd10      	pop	{r4, pc}

0801b754 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b754:	b510      	push	{r4, lr}
 801b756:	4604      	mov	r4, r0
 801b758:	2104      	movs	r1, #4
 801b75a:	f008 ff44 	bl	80245e6 <_ZdlPvj>
 801b75e:	4620      	mov	r0, r4
 801b760:	bd10      	pop	{r4, pc}

0801b762 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b762:	b510      	push	{r4, lr}
 801b764:	4604      	mov	r4, r0
 801b766:	2104      	movs	r1, #4
 801b768:	f008 ff3d 	bl	80245e6 <_ZdlPvj>
 801b76c:	4620      	mov	r0, r4
 801b76e:	bd10      	pop	{r4, pc}

0801b770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b770:	b510      	push	{r4, lr}
 801b772:	4604      	mov	r4, r0
 801b774:	2104      	movs	r1, #4
 801b776:	f008 ff36 	bl	80245e6 <_ZdlPvj>
 801b77a:	4620      	mov	r0, r4
 801b77c:	bd10      	pop	{r4, pc}

0801b77e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b77e:	b510      	push	{r4, lr}
 801b780:	4604      	mov	r4, r0
 801b782:	2104      	movs	r1, #4
 801b784:	f008 ff2f 	bl	80245e6 <_ZdlPvj>
 801b788:	4620      	mov	r0, r4
 801b78a:	bd10      	pop	{r4, pc}

0801b78c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b78c:	b510      	push	{r4, lr}
 801b78e:	4604      	mov	r4, r0
 801b790:	2104      	movs	r1, #4
 801b792:	f008 ff28 	bl	80245e6 <_ZdlPvj>
 801b796:	4620      	mov	r0, r4
 801b798:	bd10      	pop	{r4, pc}

0801b79a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b79a:	b510      	push	{r4, lr}
 801b79c:	4604      	mov	r4, r0
 801b79e:	2104      	movs	r1, #4
 801b7a0:	f008 ff21 	bl	80245e6 <_ZdlPvj>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	bd10      	pop	{r4, pc}

0801b7a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b7a8:	b510      	push	{r4, lr}
 801b7aa:	4604      	mov	r4, r0
 801b7ac:	2104      	movs	r1, #4
 801b7ae:	f008 ff1a 	bl	80245e6 <_ZdlPvj>
 801b7b2:	4620      	mov	r0, r4
 801b7b4:	bd10      	pop	{r4, pc}

0801b7b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b7b6:	b510      	push	{r4, lr}
 801b7b8:	4604      	mov	r4, r0
 801b7ba:	2104      	movs	r1, #4
 801b7bc:	f008 ff13 	bl	80245e6 <_ZdlPvj>
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	bd10      	pop	{r4, pc}

0801b7c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b7c4:	b510      	push	{r4, lr}
 801b7c6:	4604      	mov	r4, r0
 801b7c8:	2104      	movs	r1, #4
 801b7ca:	f008 ff0c 	bl	80245e6 <_ZdlPvj>
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	bd10      	pop	{r4, pc}

0801b7d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b7d2:	b510      	push	{r4, lr}
 801b7d4:	4604      	mov	r4, r0
 801b7d6:	2104      	movs	r1, #4
 801b7d8:	f008 ff05 	bl	80245e6 <_ZdlPvj>
 801b7dc:	4620      	mov	r0, r4
 801b7de:	bd10      	pop	{r4, pc}

0801b7e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e4:	b091      	sub	sp, #68	; 0x44
 801b7e6:	469b      	mov	fp, r3
 801b7e8:	4616      	mov	r6, r2
 801b7ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b7ee:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b7f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b7f6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801b7fa:	4604      	mov	r4, r0
 801b7fc:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801b800:	4640      	mov	r0, r8
 801b802:	460d      	mov	r5, r1
 801b804:	4659      	mov	r1, fp
 801b806:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b80a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b80e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801b812:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801b816:	f7f8 fb4f 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 801b81a:	4631      	mov	r1, r6
 801b81c:	4640      	mov	r0, r8
 801b81e:	f7f8 fb4b 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 801b822:	4b74      	ldr	r3, [pc, #464]	; (801b9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801b824:	8818      	ldrh	r0, [r3, #0]
 801b826:	4b74      	ldr	r3, [pc, #464]	; (801b9f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801b828:	b202      	sxth	r2, r0
 801b82a:	8819      	ldrh	r1, [r3, #0]
 801b82c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801b830:	b20e      	sxth	r6, r1
 801b832:	2b00      	cmp	r3, #0
 801b834:	da07      	bge.n	801b846 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801b836:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b83a:	4463      	add	r3, ip
 801b83c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b840:	2300      	movs	r3, #0
 801b842:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801b846:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801b84a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801b84e:	1ad2      	subs	r2, r2, r3
 801b850:	4594      	cmp	ip, r2
 801b852:	bfc4      	itt	gt
 801b854:	1ac2      	subgt	r2, r0, r3
 801b856:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801b85a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b85e:	2a00      	cmp	r2, #0
 801b860:	da07      	bge.n	801b872 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801b862:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801b866:	4462      	add	r2, ip
 801b868:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b86c:	2200      	movs	r2, #0
 801b86e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b872:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801b876:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801b87a:	eba6 060a 	sub.w	r6, r6, sl
 801b87e:	42b2      	cmp	r2, r6
 801b880:	bfc4      	itt	gt
 801b882:	eba1 020a 	subgt.w	r2, r1, sl
 801b886:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801b88a:	4a5c      	ldr	r2, [pc, #368]	; (801b9fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801b88c:	7812      	ldrb	r2, [r2, #0]
 801b88e:	b9a2      	cbnz	r2, 801b8ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801b890:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801b894:	4286      	cmp	r6, r0
 801b896:	4640      	mov	r0, r8
 801b898:	9303      	str	r3, [sp, #12]
 801b89a:	bf14      	ite	ne
 801b89c:	2600      	movne	r6, #0
 801b89e:	2601      	moveq	r6, #1
 801b8a0:	f7f8 fb4d 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8a4:	9b03      	ldr	r3, [sp, #12]
 801b8a6:	b160      	cbz	r0, 801b8c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	8023      	strh	r3, [r4, #0]
 801b8ac:	8063      	strh	r3, [r4, #2]
 801b8ae:	80a3      	strh	r3, [r4, #4]
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	80e3      	strh	r3, [r4, #6]
 801b8b4:	b011      	add	sp, #68	; 0x44
 801b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ba:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b8be:	428e      	cmp	r6, r1
 801b8c0:	e7e9      	b.n	801b896 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801b8c2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b8c6:	a90e      	add	r1, sp, #56	; 0x38
 801b8c8:	900e      	str	r0, [sp, #56]	; 0x38
 801b8ca:	a80c      	add	r0, sp, #48	; 0x30
 801b8cc:	9205      	str	r2, [sp, #20]
 801b8ce:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801b8d2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801b8d6:	9206      	str	r2, [sp, #24]
 801b8d8:	f8bb 2000 	ldrh.w	r2, [fp]
 801b8dc:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801b8e0:	1a9b      	subs	r3, r3, r2
 801b8e2:	b21b      	sxth	r3, r3
 801b8e4:	9303      	str	r3, [sp, #12]
 801b8e6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801b8ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 801ba04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801b8ee:	ebaa 0a03 	sub.w	sl, sl, r3
 801b8f2:	fa0f f38a 	sxth.w	r3, sl
 801b8f6:	9304      	str	r3, [sp, #16]
 801b8f8:	9b03      	ldr	r3, [sp, #12]
 801b8fa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b8fe:	9b04      	ldr	r3, [sp, #16]
 801b900:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b904:	9b05      	ldr	r3, [sp, #20]
 801b906:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b90a:	9b06      	ldr	r3, [sp, #24]
 801b90c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b910:	f7fa faf0 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b914:	4640      	mov	r0, r8
 801b916:	f7fa fac5 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b91a:	a80e      	add	r0, sp, #56	; 0x38
 801b91c:	f7fa fac2 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b920:	4b37      	ldr	r3, [pc, #220]	; (801ba00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b922:	4628      	mov	r0, r5
 801b924:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801b928:	881b      	ldrh	r3, [r3, #0]
 801b92a:	9307      	str	r3, [sp, #28]
 801b92c:	682b      	ldr	r3, [r5, #0]
 801b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b930:	4798      	blx	r3
 801b932:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801b936:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801b93a:	4681      	mov	r9, r0
 801b93c:	f8db 0000 	ldr.w	r0, [fp]
 801b940:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801b944:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801b946:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801b94a:	6803      	ldr	r3, [r0, #0]
 801b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b94e:	4798      	blx	r3
 801b950:	4607      	mov	r7, r0
 801b952:	f8db 0000 	ldr.w	r0, [fp]
 801b956:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b95a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b95e:	6803      	ldr	r3, [r0, #0]
 801b960:	9109      	str	r1, [sp, #36]	; 0x24
 801b962:	9208      	str	r2, [sp, #32]
 801b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b966:	4798      	blx	r3
 801b968:	f010 0f01 	tst.w	r0, #1
 801b96c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b970:	d012      	beq.n	801b998 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801b972:	f8db 0000 	ldr.w	r0, [fp]
 801b976:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b97a:	6803      	ldr	r3, [r0, #0]
 801b97c:	9200      	str	r2, [sp, #0]
 801b97e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801b980:	462b      	mov	r3, r5
 801b982:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b986:	47b0      	blx	r6
 801b988:	9b03      	ldr	r3, [sp, #12]
 801b98a:	8023      	strh	r3, [r4, #0]
 801b98c:	9b04      	ldr	r3, [sp, #16]
 801b98e:	8063      	strh	r3, [r4, #2]
 801b990:	9b05      	ldr	r3, [sp, #20]
 801b992:	80a3      	strh	r3, [r4, #4]
 801b994:	9b06      	ldr	r3, [sp, #24]
 801b996:	e78b      	b.n	801b8b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801b998:	fb09 f202 	mul.w	r2, r9, r2
 801b99c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b9a0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801b9a4:	440f      	add	r7, r1
 801b9a6:	b166      	cbz	r6, 801b9c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801b9a8:	9a07      	ldr	r2, [sp, #28]
 801b9aa:	4592      	cmp	sl, r2
 801b9ac:	d109      	bne.n	801b9c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801b9ae:	f8db 0000 	ldr.w	r0, [fp]
 801b9b2:	fb09 f303 	mul.w	r3, r9, r3
 801b9b6:	4629      	mov	r1, r5
 801b9b8:	6802      	ldr	r2, [r0, #0]
 801b9ba:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801b9bc:	463a      	mov	r2, r7
 801b9be:	47b0      	blx	r6
 801b9c0:	e7e2      	b.n	801b988 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801b9c2:	fb0a f303 	mul.w	r3, sl, r3
 801b9c6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801b9ca:	f8df b038 	ldr.w	fp, [pc, #56]	; 801ba04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801b9ce:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801b9d2:	4545      	cmp	r5, r8
 801b9d4:	d2d8      	bcs.n	801b988 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801b9d6:	f8db 0000 	ldr.w	r0, [fp]
 801b9da:	4629      	mov	r1, r5
 801b9dc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b9e0:	4435      	add	r5, r6
 801b9e2:	6802      	ldr	r2, [r0, #0]
 801b9e4:	005b      	lsls	r3, r3, #1
 801b9e6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801b9ea:	463a      	mov	r2, r7
 801b9ec:	47d0      	blx	sl
 801b9ee:	444f      	add	r7, r9
 801b9f0:	e7ef      	b.n	801b9d2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801b9f2:	bf00      	nop
 801b9f4:	24041b00 	.word	0x24041b00
 801b9f8:	24041b02 	.word	0x24041b02
 801b9fc:	24041b04 	.word	0x24041b04
 801ba00:	24041b06 	.word	0x24041b06
 801ba04:	24041b0c 	.word	0x24041b0c

0801ba08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ba08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba0a:	4606      	mov	r6, r0
 801ba0c:	b087      	sub	sp, #28
 801ba0e:	460c      	mov	r4, r1
 801ba10:	4617      	mov	r7, r2
 801ba12:	461d      	mov	r5, r3
 801ba14:	b333      	cbz	r3, 801ba64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ba16:	4608      	mov	r0, r1
 801ba18:	f7f8 fa91 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ba1c:	bb10      	cbnz	r0, 801ba64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ba1e:	6820      	ldr	r0, [r4, #0]
 801ba20:	ab04      	add	r3, sp, #16
 801ba22:	6861      	ldr	r1, [r4, #4]
 801ba24:	4c1b      	ldr	r4, [pc, #108]	; (801ba94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801ba26:	c303      	stmia	r3!, {r0, r1}
 801ba28:	a804      	add	r0, sp, #16
 801ba2a:	f7fa fa3b 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ba2e:	6820      	ldr	r0, [r4, #0]
 801ba30:	6803      	ldr	r3, [r0, #0]
 801ba32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ba34:	4798      	blx	r3
 801ba36:	2dff      	cmp	r5, #255	; 0xff
 801ba38:	d016      	beq.n	801ba68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801ba3a:	f010 0f08 	tst.w	r0, #8
 801ba3e:	6820      	ldr	r0, [r4, #0]
 801ba40:	d015      	beq.n	801ba6e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801ba42:	2400      	movs	r4, #0
 801ba44:	6801      	ldr	r1, [r0, #0]
 801ba46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ba4a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ba4e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801ba52:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801ba56:	9401      	str	r4, [sp, #4]
 801ba58:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801ba5c:	9400      	str	r4, [sp, #0]
 801ba5e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801ba60:	4639      	mov	r1, r7
 801ba62:	47a0      	blx	r4
 801ba64:	b007      	add	sp, #28
 801ba66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba68:	f010 0f02 	tst.w	r0, #2
 801ba6c:	e7e7      	b.n	801ba3e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801ba6e:	6803      	ldr	r3, [r0, #0]
 801ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba72:	4798      	blx	r3
 801ba74:	4b08      	ldr	r3, [pc, #32]	; (801ba98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801ba76:	4601      	mov	r1, r0
 801ba78:	4630      	mov	r0, r6
 801ba7a:	881a      	ldrh	r2, [r3, #0]
 801ba7c:	6833      	ldr	r3, [r6, #0]
 801ba7e:	e9cd 7500 	strd	r7, r5, [sp]
 801ba82:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801ba84:	ab04      	add	r3, sp, #16
 801ba86:	47a8      	blx	r5
 801ba88:	6820      	ldr	r0, [r4, #0]
 801ba8a:	6803      	ldr	r3, [r0, #0]
 801ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba8e:	4798      	blx	r3
 801ba90:	e7e8      	b.n	801ba64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ba92:	bf00      	nop
 801ba94:	24041b0c 	.word	0x24041b0c
 801ba98:	24041b06 	.word	0x24041b06

0801ba9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801baa0:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801baa4:	4688      	mov	r8, r1
 801baa6:	4614      	mov	r4, r2
 801baa8:	461d      	mov	r5, r3
 801baaa:	9e08      	ldr	r6, [sp, #32]
 801baac:	2f00      	cmp	r7, #0
 801baae:	f000 80ab 	beq.w	801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bab2:	4618      	mov	r0, r3
 801bab4:	f7f8 fa43 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bab8:	2800      	cmp	r0, #0
 801baba:	f040 80a5 	bne.w	801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801babe:	f9b5 1000 	ldrsh.w	r1, [r5]
 801bac2:	2fff      	cmp	r7, #255	; 0xff
 801bac4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bac8:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801bacc:	fb04 1303 	mla	r3, r4, r3, r1
 801bad0:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801bad4:	eba4 0200 	sub.w	r2, r4, r0
 801bad8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801badc:	fb04 f505 	mul.w	r5, r4, r5
 801bae0:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801bae4:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801bae8:	d04a      	beq.n	801bb80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801baea:	b2bc      	uxth	r4, r7
 801baec:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801baf0:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801baf4:	fa5f f788 	uxtb.w	r7, r8
 801baf8:	b2f3      	uxtb	r3, r6
 801bafa:	0040      	lsls	r0, r0, #1
 801bafc:	fb0e fe04 	mul.w	lr, lr, r4
 801bb00:	4367      	muls	r7, r4
 801bb02:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801bb06:	4363      	muls	r3, r4
 801bb08:	fa1f fc8c 	uxth.w	ip, ip
 801bb0c:	42a9      	cmp	r1, r5
 801bb0e:	d27b      	bcs.n	801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bb10:	eb01 0900 	add.w	r9, r1, r0
 801bb14:	4549      	cmp	r1, r9
 801bb16:	d231      	bcs.n	801bb7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801bb18:	880a      	ldrh	r2, [r1, #0]
 801bb1a:	1214      	asrs	r4, r2, #8
 801bb1c:	10d6      	asrs	r6, r2, #3
 801bb1e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801bb22:	00d2      	lsls	r2, r2, #3
 801bb24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bb28:	b2d2      	uxtb	r2, r2
 801bb2a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801bb2e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bb32:	fb14 f40c 	smulbb	r4, r4, ip
 801bb36:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801bb3a:	fb12 f20c 	smulbb	r2, r2, ip
 801bb3e:	fb16 f60c 	smulbb	r6, r6, ip
 801bb42:	4474      	add	r4, lr
 801bb44:	441a      	add	r2, r3
 801bb46:	b2a4      	uxth	r4, r4
 801bb48:	443e      	add	r6, r7
 801bb4a:	b292      	uxth	r2, r2
 801bb4c:	f104 0a01 	add.w	sl, r4, #1
 801bb50:	b2b6      	uxth	r6, r6
 801bb52:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bb56:	f102 0a01 	add.w	sl, r2, #1
 801bb5a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801bb5e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801bb62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bb66:	4322      	orrs	r2, r4
 801bb68:	1c74      	adds	r4, r6, #1
 801bb6a:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801bb6e:	0976      	lsrs	r6, r6, #5
 801bb70:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801bb74:	4332      	orrs	r2, r6
 801bb76:	f821 2b02 	strh.w	r2, [r1], #2
 801bb7a:	e7cb      	b.n	801bb14 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801bb7c:	4441      	add	r1, r8
 801bb7e:	e7c5      	b.n	801bb0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801bb80:	0973      	lsrs	r3, r6, #5
 801bb82:	4f22      	ldr	r7, [pc, #136]	; (801bc0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801bb84:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801bb88:	ea08 0707 	and.w	r7, r8, r7
 801bb8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb90:	433b      	orrs	r3, r7
 801bb92:	07e7      	lsls	r7, r4, #31
 801bb94:	ea43 0306 	orr.w	r3, r3, r6
 801bb98:	b29b      	uxth	r3, r3
 801bb9a:	d50b      	bpl.n	801bbb4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801bb9c:	0040      	lsls	r0, r0, #1
 801bb9e:	0052      	lsls	r2, r2, #1
 801bba0:	42a9      	cmp	r1, r5
 801bba2:	d231      	bcs.n	801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bba4:	180c      	adds	r4, r1, r0
 801bba6:	42a1      	cmp	r1, r4
 801bba8:	d202      	bcs.n	801bbb0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801bbaa:	f821 3b02 	strh.w	r3, [r1], #2
 801bbae:	e7fa      	b.n	801bba6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801bbb0:	4411      	add	r1, r2
 801bbb2:	e7f5      	b.n	801bba0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801bbb4:	078e      	lsls	r6, r1, #30
 801bbb6:	d008      	beq.n	801bbca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801bbb8:	0066      	lsls	r6, r4, #1
 801bbba:	460a      	mov	r2, r1
 801bbbc:	42aa      	cmp	r2, r5
 801bbbe:	d202      	bcs.n	801bbc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801bbc0:	8013      	strh	r3, [r2, #0]
 801bbc2:	4432      	add	r2, r6
 801bbc4:	e7fa      	b.n	801bbbc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801bbc6:	3102      	adds	r1, #2
 801bbc8:	3801      	subs	r0, #1
 801bbca:	07c2      	lsls	r2, r0, #31
 801bbcc:	d50b      	bpl.n	801bbe6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801bbce:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801bbd2:	0066      	lsls	r6, r4, #1
 801bbd4:	3a01      	subs	r2, #1
 801bbd6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801bbda:	42aa      	cmp	r2, r5
 801bbdc:	d202      	bcs.n	801bbe4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801bbde:	8013      	strh	r3, [r2, #0]
 801bbe0:	4432      	add	r2, r6
 801bbe2:	e7fa      	b.n	801bbda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801bbe4:	3801      	subs	r0, #1
 801bbe6:	b178      	cbz	r0, 801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bbe8:	1040      	asrs	r0, r0, #1
 801bbea:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801bbee:	0080      	lsls	r0, r0, #2
 801bbf0:	0064      	lsls	r4, r4, #1
 801bbf2:	42a9      	cmp	r1, r5
 801bbf4:	d208      	bcs.n	801bc08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801bbf6:	180e      	adds	r6, r1, r0
 801bbf8:	460a      	mov	r2, r1
 801bbfa:	42b2      	cmp	r2, r6
 801bbfc:	d202      	bcs.n	801bc04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801bbfe:	f842 3b04 	str.w	r3, [r2], #4
 801bc02:	e7fa      	b.n	801bbfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801bc04:	4421      	add	r1, r4
 801bc06:	e7f4      	b.n	801bbf2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801bc08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc0c:	00fff800 	.word	0x00fff800

0801bc10 <_ZN8touchgfx8LCD16bppC1Ev>:
 801bc10:	2200      	movs	r2, #0
 801bc12:	4910      	ldr	r1, [pc, #64]	; (801bc54 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801bc14:	6042      	str	r2, [r0, #4]
 801bc16:	6001      	str	r1, [r0, #0]
 801bc18:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801bc1c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801bc20:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801bc24:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801bc28:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801bc2c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801bc30:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801bc34:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801bc38:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801bc3c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801bc40:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801bc44:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801bc48:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801bc4c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801bc50:	4770      	bx	lr
 801bc52:	bf00      	nop
 801bc54:	08029014 	.word	0x08029014

0801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc5c:	b08d      	sub	sp, #52	; 0x34
 801bc5e:	460d      	mov	r5, r1
 801bc60:	4604      	mov	r4, r0
 801bc62:	4699      	mov	r9, r3
 801bc64:	6808      	ldr	r0, [r1, #0]
 801bc66:	ab08      	add	r3, sp, #32
 801bc68:	6849      	ldr	r1, [r1, #4]
 801bc6a:	c303      	stmia	r3!, {r0, r1}
 801bc6c:	6810      	ldr	r0, [r2, #0]
 801bc6e:	ab0a      	add	r3, sp, #40	; 0x28
 801bc70:	6851      	ldr	r1, [r2, #4]
 801bc72:	c303      	stmia	r3!, {r0, r1}
 801bc74:	a808      	add	r0, sp, #32
 801bc76:	f7fa f915 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc7a:	4629      	mov	r1, r5
 801bc7c:	a80a      	add	r0, sp, #40	; 0x28
 801bc7e:	4d67      	ldr	r5, [pc, #412]	; (801be1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801bc80:	f7fa f938 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bc84:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801bc88:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801bc8c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801bc90:	6828      	ldr	r0, [r5, #0]
 801bc92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bc96:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801bc9a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801bc9e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bca2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801bca6:	440a      	add	r2, r1
 801bca8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bcac:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bcb0:	4413      	add	r3, r2
 801bcb2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bcb6:	6803      	ldr	r3, [r0, #0]
 801bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bcba:	4798      	blx	r3
 801bcbc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bcc0:	d119      	bne.n	801bcf6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801bcc2:	f010 0f20 	tst.w	r0, #32
 801bcc6:	6828      	ldr	r0, [r5, #0]
 801bcc8:	d018      	beq.n	801bcfc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801bcca:	2500      	movs	r5, #0
 801bccc:	6801      	ldr	r1, [r0, #0]
 801bcce:	b2b6      	uxth	r6, r6
 801bcd0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801bcd4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801bcd8:	9601      	str	r6, [sp, #4]
 801bcda:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801bcde:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801bce2:	9502      	str	r5, [sp, #8]
 801bce4:	fa1f f588 	uxth.w	r5, r8
 801bce8:	9500      	str	r5, [sp, #0]
 801bcea:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801bcec:	4621      	mov	r1, r4
 801bcee:	47a8      	blx	r5
 801bcf0:	b00d      	add	sp, #52	; 0x34
 801bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bcfa:	e7e4      	b.n	801bcc6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801bcfc:	6803      	ldr	r3, [r0, #0]
 801bcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd00:	4798      	blx	r3
 801bd02:	4947      	ldr	r1, [pc, #284]	; (801be20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801bd04:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801bd08:	880b      	ldrh	r3, [r1, #0]
 801bd0a:	468a      	mov	sl, r1
 801bd0c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801bd10:	fb03 5202 	mla	r2, r3, r2, r5
 801bd14:	4373      	muls	r3, r6
 801bd16:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bd1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bd1e:	9307      	str	r3, [sp, #28]
 801bd20:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801bd24:	9306      	str	r3, [sp, #24]
 801bd26:	9b07      	ldr	r3, [sp, #28]
 801bd28:	4298      	cmp	r0, r3
 801bd2a:	d270      	bcs.n	801be0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801bd2c:	9b06      	ldr	r3, [sp, #24]
 801bd2e:	4621      	mov	r1, r4
 801bd30:	eb00 0b03 	add.w	fp, r0, r3
 801bd34:	4558      	cmp	r0, fp
 801bd36:	d25d      	bcs.n	801bdf4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801bd38:	f851 4b04 	ldr.w	r4, [r1], #4
 801bd3c:	0e23      	lsrs	r3, r4, #24
 801bd3e:	d014      	beq.n	801bd6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801bd40:	2bff      	cmp	r3, #255	; 0xff
 801bd42:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801bd46:	d112      	bne.n	801bd6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801bd48:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bd4c:	d10f      	bne.n	801bd6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801bd4e:	0963      	lsrs	r3, r4, #5
 801bd50:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801bd54:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801bd58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bd5c:	f02c 0c07 	bic.w	ip, ip, #7
 801bd60:	ea43 0c0c 	orr.w	ip, r3, ip
 801bd64:	ea4c 0404 	orr.w	r4, ip, r4
 801bd68:	8004      	strh	r4, [r0, #0]
 801bd6a:	3002      	adds	r0, #2
 801bd6c:	e7e2      	b.n	801bd34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801bd6e:	fb09 f303 	mul.w	r3, r9, r3
 801bd72:	8807      	ldrh	r7, [r0, #0]
 801bd74:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801bd78:	fa5f fc8c 	uxtb.w	ip, ip
 801bd7c:	1c5a      	adds	r2, r3, #1
 801bd7e:	123e      	asrs	r6, r7, #8
 801bd80:	10fd      	asrs	r5, r7, #3
 801bd82:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801bd86:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bd8a:	00ff      	lsls	r7, r7, #3
 801bd8c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801bd90:	1212      	asrs	r2, r2, #8
 801bd92:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801bd96:	b293      	uxth	r3, r2
 801bd98:	43d2      	mvns	r2, r2
 801bd9a:	b2ff      	uxtb	r7, r7
 801bd9c:	fb1e fe03 	smulbb	lr, lr, r3
 801bda0:	b2d2      	uxtb	r2, r2
 801bda2:	fb1c fc03 	smulbb	ip, ip, r3
 801bda6:	b2e4      	uxtb	r4, r4
 801bda8:	fb06 e602 	mla	r6, r6, r2, lr
 801bdac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801bdb0:	fb14 f403 	smulbb	r4, r4, r3
 801bdb4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801bdb8:	b2b6      	uxth	r6, r6
 801bdba:	fb05 c502 	mla	r5, r5, r2, ip
 801bdbe:	fb07 4702 	mla	r7, r7, r2, r4
 801bdc2:	f106 0e01 	add.w	lr, r6, #1
 801bdc6:	b2ad      	uxth	r5, r5
 801bdc8:	b2bf      	uxth	r7, r7
 801bdca:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801bdce:	f105 0c01 	add.w	ip, r5, #1
 801bdd2:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801bdd6:	1c7e      	adds	r6, r7, #1
 801bdd8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801bddc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801bde0:	096d      	lsrs	r5, r5, #5
 801bde2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bde6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bdea:	ea46 060e 	orr.w	r6, r6, lr
 801bdee:	432e      	orrs	r6, r5
 801bdf0:	8006      	strh	r6, [r0, #0]
 801bdf2:	e7ba      	b.n	801bd6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801bdf4:	f8ba 3000 	ldrh.w	r3, [sl]
 801bdf8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801bdfc:	eba3 0308 	sub.w	r3, r3, r8
 801be00:	eba4 0408 	sub.w	r4, r4, r8
 801be04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801be08:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801be0c:	e78b      	b.n	801bd26 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801be0e:	4b03      	ldr	r3, [pc, #12]	; (801be1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801be10:	6818      	ldr	r0, [r3, #0]
 801be12:	6803      	ldr	r3, [r0, #0]
 801be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be16:	4798      	blx	r3
 801be18:	e76a      	b.n	801bcf0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801be1a:	bf00      	nop
 801be1c:	24041b0c 	.word	0x24041b0c
 801be20:	24041b06 	.word	0x24041b06

0801be24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801be24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be28:	b085      	sub	sp, #20
 801be2a:	6810      	ldr	r0, [r2, #0]
 801be2c:	460c      	mov	r4, r1
 801be2e:	6851      	ldr	r1, [r2, #4]
 801be30:	466d      	mov	r5, sp
 801be32:	4616      	mov	r6, r2
 801be34:	c503      	stmia	r5!, {r0, r1}
 801be36:	6818      	ldr	r0, [r3, #0]
 801be38:	6859      	ldr	r1, [r3, #4]
 801be3a:	c503      	stmia	r5!, {r0, r1}
 801be3c:	4668      	mov	r0, sp
 801be3e:	4d2e      	ldr	r5, [pc, #184]	; (801bef8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801be40:	f7fa f830 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be44:	4631      	mov	r1, r6
 801be46:	a802      	add	r0, sp, #8
 801be48:	4e2c      	ldr	r6, [pc, #176]	; (801befc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801be4a:	f7fa f853 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be4e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801be52:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801be56:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801be5a:	6828      	ldr	r0, [r5, #0]
 801be5c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801be60:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801be64:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801be68:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801be6c:	f8bd 1000 	ldrh.w	r1, [sp]
 801be70:	440a      	add	r2, r1
 801be72:	f8ad 2008 	strh.w	r2, [sp, #8]
 801be76:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801be7a:	4413      	add	r3, r2
 801be7c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801be80:	6803      	ldr	r3, [r0, #0]
 801be82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be84:	4798      	blx	r3
 801be86:	8833      	ldrh	r3, [r6, #0]
 801be88:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801be8c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801be90:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801be94:	f8df e068 	ldr.w	lr, [pc, #104]	; 801bf00 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801be98:	fb03 1202 	mla	r2, r3, r2, r1
 801be9c:	fb08 f303 	mul.w	r3, r8, r3
 801bea0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bea4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bea8:	4298      	cmp	r0, r3
 801beaa:	d21d      	bcs.n	801bee8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801beac:	eb00 080c 	add.w	r8, r0, ip
 801beb0:	4540      	cmp	r0, r8
 801beb2:	d20f      	bcs.n	801bed4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801beb4:	f854 1b04 	ldr.w	r1, [r4], #4
 801beb8:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801bebc:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801bec0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801bec4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bec8:	ea42 0209 	orr.w	r2, r2, r9
 801becc:	430a      	orrs	r2, r1
 801bece:	f820 2b02 	strh.w	r2, [r0], #2
 801bed2:	e7ed      	b.n	801beb0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801bed4:	8832      	ldrh	r2, [r6, #0]
 801bed6:	1bd2      	subs	r2, r2, r7
 801bed8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bedc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bee0:	1bd2      	subs	r2, r2, r7
 801bee2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801bee6:	e7df      	b.n	801bea8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801bee8:	6828      	ldr	r0, [r5, #0]
 801beea:	6803      	ldr	r3, [r0, #0]
 801beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801beee:	4798      	blx	r3
 801bef0:	b005      	add	sp, #20
 801bef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bef6:	bf00      	nop
 801bef8:	24041b0c 	.word	0x24041b0c
 801befc:	24041b06 	.word	0x24041b06
 801bf00:	fffff800 	.word	0xfffff800

0801bf04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801bf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf08:	b08e      	sub	sp, #56	; 0x38
 801bf0a:	460e      	mov	r6, r1
 801bf0c:	4604      	mov	r4, r0
 801bf0e:	461d      	mov	r5, r3
 801bf10:	6808      	ldr	r0, [r1, #0]
 801bf12:	ab0a      	add	r3, sp, #40	; 0x28
 801bf14:	6849      	ldr	r1, [r1, #4]
 801bf16:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801c0ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801bf1a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801c0f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801bf1e:	c303      	stmia	r3!, {r0, r1}
 801bf20:	6810      	ldr	r0, [r2, #0]
 801bf22:	ab0c      	add	r3, sp, #48	; 0x30
 801bf24:	6851      	ldr	r1, [r2, #4]
 801bf26:	c303      	stmia	r3!, {r0, r1}
 801bf28:	a80a      	add	r0, sp, #40	; 0x28
 801bf2a:	f7f9 ffbb 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf2e:	4631      	mov	r1, r6
 801bf30:	a80c      	add	r0, sp, #48	; 0x30
 801bf32:	f7f9 ffdf 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf36:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801bf3a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801bf3e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bf42:	f8d8 0000 	ldr.w	r0, [r8]
 801bf46:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bf4a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801bf4e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801bf52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bf56:	440c      	add	r4, r1
 801bf58:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801bf5c:	440a      	add	r2, r1
 801bf5e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801bf62:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801bf66:	4413      	add	r3, r2
 801bf68:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bf6c:	6803      	ldr	r3, [r0, #0]
 801bf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf70:	4798      	blx	r3
 801bf72:	2dff      	cmp	r5, #255	; 0xff
 801bf74:	d124      	bne.n	801bfc0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801bf76:	f010 0f01 	tst.w	r0, #1
 801bf7a:	f8d8 0000 	ldr.w	r0, [r8]
 801bf7e:	d022      	beq.n	801bfc6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801bf80:	2100      	movs	r1, #0
 801bf82:	f04f 0e01 	mov.w	lr, #1
 801bf86:	f8d0 c000 	ldr.w	ip, [r0]
 801bf8a:	b2b6      	uxth	r6, r6
 801bf8c:	f8cd e018 	str.w	lr, [sp, #24]
 801bf90:	b2bf      	uxth	r7, r7
 801bf92:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801bf96:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801bf9a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801bf9e:	f8b9 e000 	ldrh.w	lr, [r9]
 801bfa2:	9503      	str	r5, [sp, #12]
 801bfa4:	9601      	str	r6, [sp, #4]
 801bfa6:	9700      	str	r7, [sp, #0]
 801bfa8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bfac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bfb0:	9102      	str	r1, [sp, #8]
 801bfb2:	4621      	mov	r1, r4
 801bfb4:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801bfb8:	47a8      	blx	r5
 801bfba:	b00e      	add	sp, #56	; 0x38
 801bfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfc0:	f010 0f04 	tst.w	r0, #4
 801bfc4:	e7d9      	b.n	801bf7a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfca:	4798      	blx	r3
 801bfcc:	f8b9 3000 	ldrh.w	r3, [r9]
 801bfd0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bfd4:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801bfd8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bfdc:	435e      	muls	r6, r3
 801bfde:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801bfe2:	2dff      	cmp	r5, #255	; 0xff
 801bfe4:	fb03 1202 	mla	r2, r3, r2, r1
 801bfe8:	ebac 0c07 	sub.w	ip, ip, r7
 801bfec:	eba3 0707 	sub.w	r7, r3, r7
 801bff0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801bff4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bff8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801bffc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801c000:	d049      	beq.n	801c096 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801c002:	43eb      	mvns	r3, r5
 801c004:	fa1f f985 	uxth.w	r9, r5
 801c008:	b2db      	uxtb	r3, r3
 801c00a:	42b0      	cmp	r0, r6
 801c00c:	d266      	bcs.n	801c0dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c00e:	eb00 0a0e 	add.w	sl, r0, lr
 801c012:	4550      	cmp	r0, sl
 801c014:	4621      	mov	r1, r4
 801c016:	f104 0403 	add.w	r4, r4, #3
 801c01a:	d25b      	bcs.n	801c0d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801c01c:	8802      	ldrh	r2, [r0, #0]
 801c01e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c022:	ea4f 2822 	mov.w	r8, r2, asr #8
 801c026:	fb11 f109 	smulbb	r1, r1, r9
 801c02a:	10d5      	asrs	r5, r2, #3
 801c02c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801c030:	00d2      	lsls	r2, r2, #3
 801c032:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c036:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801c03a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801c03e:	fb08 1803 	mla	r8, r8, r3, r1
 801c042:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801c046:	b2d2      	uxtb	r2, r2
 801c048:	fb11 f109 	smulbb	r1, r1, r9
 801c04c:	fa1f f888 	uxth.w	r8, r8
 801c050:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c054:	fb05 1503 	mla	r5, r5, r3, r1
 801c058:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c05c:	fb11 f109 	smulbb	r1, r1, r9
 801c060:	b2ad      	uxth	r5, r5
 801c062:	fb02 1203 	mla	r2, r2, r3, r1
 801c066:	f108 0101 	add.w	r1, r8, #1
 801c06a:	b292      	uxth	r2, r2
 801c06c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801c070:	1c51      	adds	r1, r2, #1
 801c072:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801c076:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c07a:	1c69      	adds	r1, r5, #1
 801c07c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801c080:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c084:	096d      	lsrs	r5, r5, #5
 801c086:	ea42 0208 	orr.w	r2, r2, r8
 801c08a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c08e:	432a      	orrs	r2, r5
 801c090:	f820 2b02 	strh.w	r2, [r0], #2
 801c094:	e7bd      	b.n	801c012 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801c096:	4a14      	ldr	r2, [pc, #80]	; (801c0e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801c098:	42b0      	cmp	r0, r6
 801c09a:	d21f      	bcs.n	801c0dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801c09c:	eb00 050e 	add.w	r5, r0, lr
 801c0a0:	42a8      	cmp	r0, r5
 801c0a2:	4621      	mov	r1, r4
 801c0a4:	f104 0403 	add.w	r4, r4, #3
 801c0a8:	d210      	bcs.n	801c0cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801c0aa:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801c0ae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801c0b2:	00db      	lsls	r3, r3, #3
 801c0b4:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801c0b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c0bc:	430b      	orrs	r3, r1
 801c0be:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801c0c2:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801c0c6:	f820 3b02 	strh.w	r3, [r0], #2
 801c0ca:	e7e9      	b.n	801c0a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801c0cc:	4438      	add	r0, r7
 801c0ce:	eb01 040c 	add.w	r4, r1, ip
 801c0d2:	e7e1      	b.n	801c098 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801c0d4:	4438      	add	r0, r7
 801c0d6:	eb01 040c 	add.w	r4, r1, ip
 801c0da:	e796      	b.n	801c00a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801c0dc:	4b03      	ldr	r3, [pc, #12]	; (801c0ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801c0de:	6818      	ldr	r0, [r3, #0]
 801c0e0:	6803      	ldr	r3, [r0, #0]
 801c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0e4:	4798      	blx	r3
 801c0e6:	e768      	b.n	801bfba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801c0e8:	fffff800 	.word	0xfffff800
 801c0ec:	24041b0c 	.word	0x24041b0c
 801c0f0:	24041b06 	.word	0x24041b06

0801c0f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c0f4:	b4f0      	push	{r4, r5, r6, r7}
 801c0f6:	4616      	mov	r6, r2
 801c0f8:	461c      	mov	r4, r3
 801c0fa:	460d      	mov	r5, r1
 801c0fc:	9a04      	ldr	r2, [sp, #16]
 801c0fe:	2e01      	cmp	r6, #1
 801c100:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c104:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801c108:	d012      	beq.n	801c130 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801c10a:	d303      	bcc.n	801c114 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801c10c:	2e02      	cmp	r6, #2
 801c10e:	d00a      	beq.n	801c126 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801c110:	bcf0      	pop	{r4, r5, r6, r7}
 801c112:	4770      	bx	lr
 801c114:	6805      	ldr	r5, [r0, #0]
 801c116:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801c11a:	68ed      	ldr	r5, [r5, #12]
 801c11c:	4613      	mov	r3, r2
 801c11e:	4622      	mov	r2, r4
 801c120:	46ac      	mov	ip, r5
 801c122:	bcf0      	pop	{r4, r5, r6, r7}
 801c124:	4760      	bx	ip
 801c126:	4621      	mov	r1, r4
 801c128:	4628      	mov	r0, r5
 801c12a:	bcf0      	pop	{r4, r5, r6, r7}
 801c12c:	f7ff bd94 	b.w	801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c130:	4621      	mov	r1, r4
 801c132:	4628      	mov	r0, r5
 801c134:	bcf0      	pop	{r4, r5, r6, r7}
 801c136:	f7ff bee5 	b.w	801bf04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801c13c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c140:	b093      	sub	sp, #76	; 0x4c
 801c142:	4681      	mov	r9, r0
 801c144:	4688      	mov	r8, r1
 801c146:	6810      	ldr	r0, [r2, #0]
 801c148:	6851      	ldr	r1, [r2, #4]
 801c14a:	ac0e      	add	r4, sp, #56	; 0x38
 801c14c:	4616      	mov	r6, r2
 801c14e:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801c152:	4f6b      	ldr	r7, [pc, #428]	; (801c300 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801c154:	c403      	stmia	r4!, {r0, r1}
 801c156:	6818      	ldr	r0, [r3, #0]
 801c158:	ac10      	add	r4, sp, #64	; 0x40
 801c15a:	6859      	ldr	r1, [r3, #4]
 801c15c:	c403      	stmia	r4!, {r0, r1}
 801c15e:	a80e      	add	r0, sp, #56	; 0x38
 801c160:	f7f9 fea0 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c164:	4631      	mov	r1, r6
 801c166:	a810      	add	r0, sp, #64	; 0x40
 801c168:	4e66      	ldr	r6, [pc, #408]	; (801c304 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801c16a:	f7f9 fec3 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c16e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801c172:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c176:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801c17a:	6830      	ldr	r0, [r6, #0]
 801c17c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c180:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801c184:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801c188:	4489      	add	r9, r1
 801c18a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801c18e:	440a      	add	r2, r1
 801c190:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c194:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c198:	4413      	add	r3, r2
 801c19a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801c19e:	6803      	ldr	r3, [r0, #0]
 801c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1a2:	4798      	blx	r3
 801c1a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c1a8:	6830      	ldr	r0, [r6, #0]
 801c1aa:	d01d      	beq.n	801c1e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801c1ac:	2200      	movs	r2, #0
 801c1ae:	6801      	ldr	r1, [r0, #0]
 801c1b0:	b2a4      	uxth	r4, r4
 801c1b2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801c1b6:	b2ad      	uxth	r5, r5
 801c1b8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801c1bc:	220b      	movs	r2, #11
 801c1be:	9207      	str	r2, [sp, #28]
 801c1c0:	883a      	ldrh	r2, [r7, #0]
 801c1c2:	9502      	str	r5, [sp, #8]
 801c1c4:	9206      	str	r2, [sp, #24]
 801c1c6:	2201      	movs	r2, #1
 801c1c8:	9401      	str	r4, [sp, #4]
 801c1ca:	e9cd a204 	strd	sl, r2, [sp, #16]
 801c1ce:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801c1d2:	9203      	str	r2, [sp, #12]
 801c1d4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c1d8:	9200      	str	r2, [sp, #0]
 801c1da:	4642      	mov	r2, r8
 801c1dc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c1de:	4649      	mov	r1, r9
 801c1e0:	47a0      	blx	r4
 801c1e2:	b013      	add	sp, #76	; 0x4c
 801c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e8:	6803      	ldr	r3, [r0, #0]
 801c1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1ec:	4798      	blx	r3
 801c1ee:	883b      	ldrh	r3, [r7, #0]
 801c1f0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801c1f4:	f04f 0e04 	mov.w	lr, #4
 801c1f8:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801c1fc:	435d      	muls	r5, r3
 801c1fe:	fb03 1202 	mla	r2, r3, r2, r1
 801c202:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801c206:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801c20a:	920c      	str	r2, [sp, #48]	; 0x30
 801c20c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801c210:	1b12      	subs	r2, r2, r4
 801c212:	920d      	str	r2, [sp, #52]	; 0x34
 801c214:	0062      	lsls	r2, r4, #1
 801c216:	1b1c      	subs	r4, r3, r4
 801c218:	920a      	str	r2, [sp, #40]	; 0x28
 801c21a:	0063      	lsls	r3, r4, #1
 801c21c:	930b      	str	r3, [sp, #44]	; 0x2c
 801c21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c220:	4298      	cmp	r0, r3
 801c222:	d266      	bcs.n	801c2f2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801c224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c226:	eb00 0b03 	add.w	fp, r0, r3
 801c22a:	4558      	cmp	r0, fp
 801c22c:	d25c      	bcs.n	801c2e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c22e:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c232:	fb1e e303 	smlabb	r3, lr, r3, lr
 801c236:	f858 2003 	ldr.w	r2, [r8, r3]
 801c23a:	0e11      	lsrs	r1, r2, #24
 801c23c:	d012      	beq.n	801c264 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c23e:	29ff      	cmp	r1, #255	; 0xff
 801c240:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801c244:	d110      	bne.n	801c268 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c246:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c24a:	d10d      	bne.n	801c268 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c24c:	0953      	lsrs	r3, r2, #5
 801c24e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801c252:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801c256:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c25a:	f027 0707 	bic.w	r7, r7, #7
 801c25e:	431f      	orrs	r7, r3
 801c260:	433a      	orrs	r2, r7
 801c262:	8002      	strh	r2, [r0, #0]
 801c264:	3002      	adds	r0, #2
 801c266:	e7e0      	b.n	801c22a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801c268:	fb0a f101 	mul.w	r1, sl, r1
 801c26c:	8806      	ldrh	r6, [r0, #0]
 801c26e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801c272:	b2d2      	uxtb	r2, r2
 801c274:	1c4b      	adds	r3, r1, #1
 801c276:	1235      	asrs	r5, r6, #8
 801c278:	10f4      	asrs	r4, r6, #3
 801c27a:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801c27e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c282:	00f6      	lsls	r6, r6, #3
 801c284:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801c288:	121b      	asrs	r3, r3, #8
 801c28a:	b2f6      	uxtb	r6, r6
 801c28c:	b299      	uxth	r1, r3
 801c28e:	43db      	mvns	r3, r3
 801c290:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801c294:	fb1c fc01 	smulbb	ip, ip, r1
 801c298:	b2db      	uxtb	r3, r3
 801c29a:	fb12 f201 	smulbb	r2, r2, r1
 801c29e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801c2a2:	fb05 c503 	mla	r5, r5, r3, ip
 801c2a6:	b2ff      	uxtb	r7, r7
 801c2a8:	fb06 2203 	mla	r2, r6, r3, r2
 801c2ac:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801c2b0:	fb17 f701 	smulbb	r7, r7, r1
 801c2b4:	b2ad      	uxth	r5, r5
 801c2b6:	b292      	uxth	r2, r2
 801c2b8:	fb04 7403 	mla	r4, r4, r3, r7
 801c2bc:	f105 0c01 	add.w	ip, r5, #1
 801c2c0:	1c57      	adds	r7, r2, #1
 801c2c2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c2c6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c2ca:	b2a4      	uxth	r4, r4
 801c2cc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c2d0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c2d4:	433d      	orrs	r5, r7
 801c2d6:	1c67      	adds	r7, r4, #1
 801c2d8:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801c2dc:	0964      	lsrs	r4, r4, #5
 801c2de:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801c2e2:	4325      	orrs	r5, r4
 801c2e4:	8005      	strh	r5, [r0, #0]
 801c2e6:	e7bd      	b.n	801c264 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2ea:	4418      	add	r0, r3
 801c2ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2ee:	4499      	add	r9, r3
 801c2f0:	e795      	b.n	801c21e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801c2f2:	4b04      	ldr	r3, [pc, #16]	; (801c304 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801c2f4:	6818      	ldr	r0, [r3, #0]
 801c2f6:	6803      	ldr	r3, [r0, #0]
 801c2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2fa:	4798      	blx	r3
 801c2fc:	e771      	b.n	801c1e2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801c2fe:	bf00      	nop
 801c300:	24041b06 	.word	0x24041b06
 801c304:	24041b0c 	.word	0x24041b0c

0801c308 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c30c:	b087      	sub	sp, #28
 801c30e:	4680      	mov	r8, r0
 801c310:	460d      	mov	r5, r1
 801c312:	4614      	mov	r4, r2
 801c314:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801c318:	2e00      	cmp	r6, #0
 801c31a:	f000 80b9 	beq.w	801c490 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801c31e:	6810      	ldr	r0, [r2, #0]
 801c320:	af02      	add	r7, sp, #8
 801c322:	6851      	ldr	r1, [r2, #4]
 801c324:	c703      	stmia	r7!, {r0, r1}
 801c326:	6818      	ldr	r0, [r3, #0]
 801c328:	af04      	add	r7, sp, #16
 801c32a:	6859      	ldr	r1, [r3, #4]
 801c32c:	c703      	stmia	r7!, {r0, r1}
 801c32e:	a802      	add	r0, sp, #8
 801c330:	f7f9 fdb8 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c334:	4621      	mov	r1, r4
 801c336:	a804      	add	r0, sp, #16
 801c338:	f7f9 fddc 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c33c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c340:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c344:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801c348:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801c34c:	fb14 2103 	smlabb	r1, r4, r3, r2
 801c350:	eb08 0401 	add.w	r4, r8, r1
 801c354:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c358:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801c35c:	440a      	add	r2, r1
 801c35e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801c362:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c366:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c36a:	4413      	add	r3, r2
 801c36c:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c370:	4b49      	ldr	r3, [pc, #292]	; (801c498 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801c372:	6818      	ldr	r0, [r3, #0]
 801c374:	6803      	ldr	r3, [r0, #0]
 801c376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c378:	4798      	blx	r3
 801c37a:	4b48      	ldr	r3, [pc, #288]	; (801c49c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801c37c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801c380:	2eff      	cmp	r6, #255	; 0xff
 801c382:	881a      	ldrh	r2, [r3, #0]
 801c384:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801c388:	fb02 c101 	mla	r1, r2, r1, ip
 801c38c:	fb02 f207 	mul.w	r2, r2, r7
 801c390:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801c394:	f105 0104 	add.w	r1, r5, #4
 801c398:	461d      	mov	r5, r3
 801c39a:	d05a      	beq.n	801c452 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801c39c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801c3a0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c3a4:	b2b6      	uxth	r6, r6
 801c3a6:	9301      	str	r3, [sp, #4]
 801c3a8:	fa1f fe8e 	uxth.w	lr, lr
 801c3ac:	4282      	cmp	r2, r0
 801c3ae:	d96a      	bls.n	801c486 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c3b0:	eb00 0b0a 	add.w	fp, r0, sl
 801c3b4:	4583      	cmp	fp, r0
 801c3b6:	d940      	bls.n	801c43a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801c3b8:	8805      	ldrh	r5, [r0, #0]
 801c3ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c3be:	122f      	asrs	r7, r5, #8
 801c3c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c3c4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801c3c8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c3cc:	00ed      	lsls	r5, r5, #3
 801c3ce:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801c3d2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801c3d6:	fb17 f70e 	smulbb	r7, r7, lr
 801c3da:	b2ed      	uxtb	r5, r5
 801c3dc:	fb19 f90e 	smulbb	r9, r9, lr
 801c3e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c3e4:	fb15 f50e 	smulbb	r5, r5, lr
 801c3e8:	fb0c 7c06 	mla	ip, ip, r6, r7
 801c3ec:	10df      	asrs	r7, r3, #3
 801c3ee:	00db      	lsls	r3, r3, #3
 801c3f0:	fa1f fc8c 	uxth.w	ip, ip
 801c3f4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	fb07 9706 	mla	r7, r7, r6, r9
 801c3fe:	f10c 0901 	add.w	r9, ip, #1
 801c402:	fb03 5306 	mla	r3, r3, r6, r5
 801c406:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801c40a:	b29b      	uxth	r3, r3
 801c40c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801c410:	b2bf      	uxth	r7, r7
 801c412:	f103 0c01 	add.w	ip, r3, #1
 801c416:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c41a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c41e:	ea4c 0c09 	orr.w	ip, ip, r9
 801c422:	f107 0901 	add.w	r9, r7, #1
 801c426:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801c42a:	097f      	lsrs	r7, r7, #5
 801c42c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c430:	ea4c 0c07 	orr.w	ip, ip, r7
 801c434:	f820 cb02 	strh.w	ip, [r0], #2
 801c438:	e7bc      	b.n	801c3b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801c43a:	9b01      	ldr	r3, [sp, #4]
 801c43c:	881b      	ldrh	r3, [r3, #0]
 801c43e:	eba3 0308 	sub.w	r3, r3, r8
 801c442:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c446:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c44a:	eba3 0308 	sub.w	r3, r3, r8
 801c44e:	441c      	add	r4, r3
 801c450:	e7ac      	b.n	801c3ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801c452:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c456:	4282      	cmp	r2, r0
 801c458:	d915      	bls.n	801c486 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801c45a:	eb00 060a 	add.w	r6, r0, sl
 801c45e:	4286      	cmp	r6, r0
 801c460:	d906      	bls.n	801c470 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801c462:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c466:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801c46a:	f820 3b02 	strh.w	r3, [r0], #2
 801c46e:	e7f6      	b.n	801c45e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801c470:	882b      	ldrh	r3, [r5, #0]
 801c472:	eba3 0308 	sub.w	r3, r3, r8
 801c476:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c47a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c47e:	eba3 0308 	sub.w	r3, r3, r8
 801c482:	441c      	add	r4, r3
 801c484:	e7e7      	b.n	801c456 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801c486:	4b04      	ldr	r3, [pc, #16]	; (801c498 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801c488:	6818      	ldr	r0, [r3, #0]
 801c48a:	6803      	ldr	r3, [r0, #0]
 801c48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c48e:	4798      	blx	r3
 801c490:	b007      	add	sp, #28
 801c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c496:	bf00      	nop
 801c498:	24041b0c 	.word	0x24041b0c
 801c49c:	24041b06 	.word	0x24041b06

0801c4a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4a4:	b091      	sub	sp, #68	; 0x44
 801c4a6:	4680      	mov	r8, r0
 801c4a8:	460f      	mov	r7, r1
 801c4aa:	4614      	mov	r4, r2
 801c4ac:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801c4b0:	2d00      	cmp	r5, #0
 801c4b2:	d051      	beq.n	801c558 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c4b4:	6810      	ldr	r0, [r2, #0]
 801c4b6:	ae0c      	add	r6, sp, #48	; 0x30
 801c4b8:	6851      	ldr	r1, [r2, #4]
 801c4ba:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801c6bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801c4be:	c603      	stmia	r6!, {r0, r1}
 801c4c0:	6818      	ldr	r0, [r3, #0]
 801c4c2:	ae0e      	add	r6, sp, #56	; 0x38
 801c4c4:	6859      	ldr	r1, [r3, #4]
 801c4c6:	c603      	stmia	r6!, {r0, r1}
 801c4c8:	a80c      	add	r0, sp, #48	; 0x30
 801c4ca:	f7f9 fceb 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4ce:	4621      	mov	r1, r4
 801c4d0:	a80e      	add	r0, sp, #56	; 0x38
 801c4d2:	f7f9 fd0f 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4d6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c4da:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c4de:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c4e2:	f8d9 0000 	ldr.w	r0, [r9]
 801c4e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c4ea:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801c4ee:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801c4f2:	eb08 0401 	add.w	r4, r8, r1
 801c4f6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c4fa:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801c6c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801c4fe:	440a      	add	r2, r1
 801c500:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c504:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c508:	4413      	add	r3, r2
 801c50a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c50e:	6803      	ldr	r3, [r0, #0]
 801c510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c512:	4798      	blx	r3
 801c514:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c518:	f8d9 0000 	ldr.w	r0, [r9]
 801c51c:	d01f      	beq.n	801c55e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801c51e:	2200      	movs	r2, #0
 801c520:	6801      	ldr	r1, [r0, #0]
 801c522:	b2b6      	uxth	r6, r6
 801c524:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c528:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801c52c:	220b      	movs	r2, #11
 801c52e:	9207      	str	r2, [sp, #28]
 801c530:	f8b8 2000 	ldrh.w	r2, [r8]
 801c534:	9601      	str	r6, [sp, #4]
 801c536:	9206      	str	r2, [sp, #24]
 801c538:	2201      	movs	r2, #1
 801c53a:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801c53e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801c542:	9203      	str	r2, [sp, #12]
 801c544:	fa1f f28a 	uxth.w	r2, sl
 801c548:	9202      	str	r2, [sp, #8]
 801c54a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c54e:	9200      	str	r2, [sp, #0]
 801c550:	463a      	mov	r2, r7
 801c552:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801c554:	4621      	mov	r1, r4
 801c556:	47a8      	blx	r5
 801c558:	b011      	add	sp, #68	; 0x44
 801c55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c55e:	6803      	ldr	r3, [r0, #0]
 801c560:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801c564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c566:	4798      	blx	r3
 801c568:	f8b8 2000 	ldrh.w	r2, [r8]
 801c56c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c570:	2dff      	cmp	r5, #255	; 0xff
 801c572:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801c576:	fb0a fa02 	mul.w	sl, sl, r2
 801c57a:	fb02 1303 	mla	r3, r2, r3, r1
 801c57e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c582:	d062      	beq.n	801c64a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801c584:	ea6f 0c05 	mvn.w	ip, r5
 801c588:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801c58c:	b2ad      	uxth	r5, r5
 801c58e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801c592:	fa5f fc8c 	uxtb.w	ip, ip
 801c596:	930a      	str	r3, [sp, #40]	; 0x28
 801c598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c59a:	4298      	cmp	r0, r3
 801c59c:	f080 8085 	bcs.w	801c6aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c5a0:	eb00 0b09 	add.w	fp, r0, r9
 801c5a4:	4558      	cmp	r0, fp
 801c5a6:	d246      	bcs.n	801c636 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801c5a8:	f814 eb01 	ldrb.w	lr, [r4], #1
 801c5ac:	2303      	movs	r3, #3
 801c5ae:	2204      	movs	r2, #4
 801c5b0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801c5b4:	8803      	ldrh	r3, [r0, #0]
 801c5b6:	eb07 0a0e 	add.w	sl, r7, lr
 801c5ba:	1219      	asrs	r1, r3, #8
 801c5bc:	10da      	asrs	r2, r3, #3
 801c5be:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c5c2:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801c5c6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c5ca:	00db      	lsls	r3, r3, #3
 801c5cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c5d0:	fb18 f805 	smulbb	r8, r8, r5
 801c5d4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801c5d8:	fb1e fe05 	smulbb	lr, lr, r5
 801c5dc:	b2db      	uxtb	r3, r3
 801c5de:	fb01 810c 	mla	r1, r1, ip, r8
 801c5e2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801c5e6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c5ea:	fb18 f805 	smulbb	r8, r8, r5
 801c5ee:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c5f2:	b289      	uxth	r1, r1
 801c5f4:	fb02 820c 	mla	r2, r2, ip, r8
 801c5f8:	fb03 e30c 	mla	r3, r3, ip, lr
 801c5fc:	f101 0801 	add.w	r8, r1, #1
 801c600:	b292      	uxth	r2, r2
 801c602:	b29b      	uxth	r3, r3
 801c604:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c608:	f102 0801 	add.w	r8, r2, #1
 801c60c:	f103 0e01 	add.w	lr, r3, #1
 801c610:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801c614:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801c618:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c61c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c620:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c624:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c628:	ea4e 0101 	orr.w	r1, lr, r1
 801c62c:	ea41 0108 	orr.w	r1, r1, r8
 801c630:	f820 1b02 	strh.w	r1, [r0], #2
 801c634:	e7b6      	b.n	801c5a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801c636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c638:	881b      	ldrh	r3, [r3, #0]
 801c63a:	1b9b      	subs	r3, r3, r6
 801c63c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c640:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c644:	1b9b      	subs	r3, r3, r6
 801c646:	441c      	add	r4, r3
 801c648:	e7a6      	b.n	801c598 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801c64a:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801c64e:	2203      	movs	r2, #3
 801c650:	2504      	movs	r5, #4
 801c652:	4919      	ldr	r1, [pc, #100]	; (801c6b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801c654:	4550      	cmp	r0, sl
 801c656:	d228      	bcs.n	801c6aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801c658:	eb00 0c09 	add.w	ip, r0, r9
 801c65c:	4560      	cmp	r0, ip
 801c65e:	4623      	mov	r3, r4
 801c660:	d219      	bcs.n	801c696 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801c662:	f893 e000 	ldrb.w	lr, [r3]
 801c666:	3401      	adds	r4, #1
 801c668:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801c66c:	eb07 0b0e 	add.w	fp, r7, lr
 801c670:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c674:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c678:	f89b b001 	ldrb.w	fp, [fp, #1]
 801c67c:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801c680:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801c684:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c688:	ea43 030b 	orr.w	r3, r3, fp
 801c68c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801c690:	f820 3b02 	strh.w	r3, [r0], #2
 801c694:	e7e2      	b.n	801c65c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801c696:	f8b8 3000 	ldrh.w	r3, [r8]
 801c69a:	1b9b      	subs	r3, r3, r6
 801c69c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c6a0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c6a4:	1b9b      	subs	r3, r3, r6
 801c6a6:	441c      	add	r4, r3
 801c6a8:	e7d4      	b.n	801c654 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801c6aa:	4b04      	ldr	r3, [pc, #16]	; (801c6bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801c6ac:	6818      	ldr	r0, [r3, #0]
 801c6ae:	6803      	ldr	r3, [r0, #0]
 801c6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6b2:	4798      	blx	r3
 801c6b4:	e750      	b.n	801c558 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801c6b6:	bf00      	nop
 801c6b8:	fffff800 	.word	0xfffff800
 801c6bc:	24041b0c 	.word	0x24041b0c
 801c6c0:	24041b06 	.word	0x24041b06

0801c6c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c6c4:	b430      	push	{r4, r5}
 801c6c6:	780d      	ldrb	r5, [r1, #0]
 801c6c8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801c6cc:	2d01      	cmp	r5, #1
 801c6ce:	d00a      	beq.n	801c6e6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801c6d0:	d305      	bcc.n	801c6de <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801c6d2:	2d02      	cmp	r5, #2
 801c6d4:	d10b      	bne.n	801c6ee <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801c6d6:	9402      	str	r4, [sp, #8]
 801c6d8:	bc30      	pop	{r4, r5}
 801c6da:	f7ff be15 	b.w	801c308 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801c6de:	9402      	str	r4, [sp, #8]
 801c6e0:	bc30      	pop	{r4, r5}
 801c6e2:	f7ff bd2b 	b.w	801c13c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c6e6:	9402      	str	r4, [sp, #8]
 801c6e8:	bc30      	pop	{r4, r5}
 801c6ea:	f7ff bed9 	b.w	801c4a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801c6ee:	bc30      	pop	{r4, r5}
 801c6f0:	4770      	bx	lr
	...

0801c6f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f8:	b087      	sub	sp, #28
 801c6fa:	4604      	mov	r4, r0
 801c6fc:	460e      	mov	r6, r1
 801c6fe:	6810      	ldr	r0, [r2, #0]
 801c700:	6851      	ldr	r1, [r2, #4]
 801c702:	ad02      	add	r5, sp, #8
 801c704:	4617      	mov	r7, r2
 801c706:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801c70a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801c93c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801c70e:	c503      	stmia	r5!, {r0, r1}
 801c710:	6818      	ldr	r0, [r3, #0]
 801c712:	ad04      	add	r5, sp, #16
 801c714:	6859      	ldr	r1, [r3, #4]
 801c716:	c503      	stmia	r5!, {r0, r1}
 801c718:	a802      	add	r0, sp, #8
 801c71a:	f7f9 fbc3 	bl	8015ea4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c71e:	4639      	mov	r1, r7
 801c720:	a804      	add	r0, sp, #16
 801c722:	f7f9 fbe7 	bl	8015ef4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c726:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c72a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c72e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c732:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801c736:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c73a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801c73e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801c742:	440e      	add	r6, r1
 801c744:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c748:	440a      	add	r2, r1
 801c74a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c74e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c752:	4413      	add	r3, r2
 801c754:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c758:	4b77      	ldr	r3, [pc, #476]	; (801c938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c75a:	6818      	ldr	r0, [r3, #0]
 801c75c:	6803      	ldr	r3, [r0, #0]
 801c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c760:	4798      	blx	r3
 801c762:	f8b9 b000 	ldrh.w	fp, [r9]
 801c766:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801c76a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c76e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801c772:	fb05 f50b 	mul.w	r5, r5, fp
 801c776:	fb0b 2303 	mla	r3, fp, r3, r2
 801c77a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c77e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801c782:	9300      	str	r3, [sp, #0]
 801c784:	d069      	beq.n	801c85a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801c786:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801c78a:	4558      	cmp	r0, fp
 801c78c:	f080 80cc 	bcs.w	801c928 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c790:	9b00      	ldr	r3, [sp, #0]
 801c792:	4631      	mov	r1, r6
 801c794:	18c3      	adds	r3, r0, r3
 801c796:	9301      	str	r3, [sp, #4]
 801c798:	9b01      	ldr	r3, [sp, #4]
 801c79a:	4298      	cmp	r0, r3
 801c79c:	d24f      	bcs.n	801c83e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801c79e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c7a2:	2a00      	cmp	r2, #0
 801c7a4:	d048      	beq.n	801c838 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c7a6:	fb0a f202 	mul.w	r2, sl, r2
 801c7aa:	1c53      	adds	r3, r2, #1
 801c7ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c7b0:	121b      	asrs	r3, r3, #8
 801c7b2:	d041      	beq.n	801c838 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801c7b4:	8802      	ldrh	r2, [r0, #0]
 801c7b6:	b29e      	uxth	r6, r3
 801c7b8:	f8b4 c000 	ldrh.w	ip, [r4]
 801c7bc:	43db      	mvns	r3, r3
 801c7be:	1215      	asrs	r5, r2, #8
 801c7c0:	b2db      	uxtb	r3, r3
 801c7c2:	ea4f 272c 	mov.w	r7, ip, asr #8
 801c7c6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c7ca:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801c7ce:	fb15 f503 	smulbb	r5, r5, r3
 801c7d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c7d6:	00d2      	lsls	r2, r2, #3
 801c7d8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c7dc:	fb07 5706 	mla	r7, r7, r6, r5
 801c7e0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801c7e4:	b2d2      	uxtb	r2, r2
 801c7e6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c7ea:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c7ee:	fb1e fe03 	smulbb	lr, lr, r3
 801c7f2:	b2bf      	uxth	r7, r7
 801c7f4:	fb12 f203 	smulbb	r2, r2, r3
 801c7f8:	fa5f fc8c 	uxtb.w	ip, ip
 801c7fc:	fb05 e506 	mla	r5, r5, r6, lr
 801c800:	f107 0e01 	add.w	lr, r7, #1
 801c804:	fb0c 2c06 	mla	ip, ip, r6, r2
 801c808:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c80c:	fa1f fc8c 	uxth.w	ip, ip
 801c810:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801c814:	b2ad      	uxth	r5, r5
 801c816:	f10c 0701 	add.w	r7, ip, #1
 801c81a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c81e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c822:	ea47 070e 	orr.w	r7, r7, lr
 801c826:	f105 0e01 	add.w	lr, r5, #1
 801c82a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801c82e:	096d      	lsrs	r5, r5, #5
 801c830:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801c834:	432f      	orrs	r7, r5
 801c836:	8007      	strh	r7, [r0, #0]
 801c838:	3002      	adds	r0, #2
 801c83a:	3402      	adds	r4, #2
 801c83c:	e7ac      	b.n	801c798 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801c83e:	f8b9 3000 	ldrh.w	r3, [r9]
 801c842:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c846:	eba3 0308 	sub.w	r3, r3, r8
 801c84a:	eba6 0608 	sub.w	r6, r6, r8
 801c84e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c852:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c856:	440e      	add	r6, r1
 801c858:	e797      	b.n	801c78a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801c85a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801c85e:	42a8      	cmp	r0, r5
 801c860:	d262      	bcs.n	801c928 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801c862:	9b00      	ldr	r3, [sp, #0]
 801c864:	4631      	mov	r1, r6
 801c866:	eb00 0b03 	add.w	fp, r0, r3
 801c86a:	4558      	cmp	r0, fp
 801c86c:	d24e      	bcs.n	801c90c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801c86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c872:	b12b      	cbz	r3, 801c880 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c874:	2bff      	cmp	r3, #255	; 0xff
 801c876:	f8b4 e000 	ldrh.w	lr, [r4]
 801c87a:	d104      	bne.n	801c886 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801c87c:	f8a0 e000 	strh.w	lr, [r0]
 801c880:	3002      	adds	r0, #2
 801c882:	3402      	adds	r4, #2
 801c884:	e7f1      	b.n	801c86a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801c886:	8802      	ldrh	r2, [r0, #0]
 801c888:	b29f      	uxth	r7, r3
 801c88a:	43db      	mvns	r3, r3
 801c88c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801c890:	1216      	asrs	r6, r2, #8
 801c892:	b2db      	uxtb	r3, r3
 801c894:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c898:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c89c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801c8a0:	00d2      	lsls	r2, r2, #3
 801c8a2:	fb16 f603 	smulbb	r6, r6, r3
 801c8a6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801c8aa:	b2d2      	uxtb	r2, r2
 801c8ac:	fb0c 6c07 	mla	ip, ip, r7, r6
 801c8b0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801c8b4:	fb1a fa03 	smulbb	sl, sl, r3
 801c8b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c8bc:	fa1f fc8c 	uxth.w	ip, ip
 801c8c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801c8c4:	fb12 f303 	smulbb	r3, r2, r3
 801c8c8:	fa5f fe8e 	uxtb.w	lr, lr
 801c8cc:	fb06 a607 	mla	r6, r6, r7, sl
 801c8d0:	f10c 0201 	add.w	r2, ip, #1
 801c8d4:	fb0e 3307 	mla	r3, lr, r7, r3
 801c8d8:	b2b6      	uxth	r6, r6
 801c8da:	b29b      	uxth	r3, r3
 801c8dc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801c8e0:	f106 0a01 	add.w	sl, r6, #1
 801c8e4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801c8e8:	f103 0c01 	add.w	ip, r3, #1
 801c8ec:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801c8f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c8f4:	0976      	lsrs	r6, r6, #5
 801c8f6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c8fa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c8fe:	ea4c 0c02 	orr.w	ip, ip, r2
 801c902:	ea4c 0c06 	orr.w	ip, ip, r6
 801c906:	f8a0 c000 	strh.w	ip, [r0]
 801c90a:	e7b9      	b.n	801c880 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801c90c:	f8b9 3000 	ldrh.w	r3, [r9]
 801c910:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801c914:	eba3 0308 	sub.w	r3, r3, r8
 801c918:	eba6 0608 	sub.w	r6, r6, r8
 801c91c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c920:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801c924:	440e      	add	r6, r1
 801c926:	e79a      	b.n	801c85e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801c928:	4b03      	ldr	r3, [pc, #12]	; (801c938 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801c92a:	6818      	ldr	r0, [r3, #0]
 801c92c:	6803      	ldr	r3, [r0, #0]
 801c92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c930:	4798      	blx	r3
 801c932:	b007      	add	sp, #28
 801c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c938:	24041b0c 	.word	0x24041b0c
 801c93c:	24041b06 	.word	0x24041b06

0801c940 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c944:	b089      	sub	sp, #36	; 0x24
 801c946:	4682      	mov	sl, r0
 801c948:	460f      	mov	r7, r1
 801c94a:	4691      	mov	r9, r2
 801c94c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801c950:	4698      	mov	r8, r3
 801c952:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c954:	2e00      	cmp	r6, #0
 801c956:	d036      	beq.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801c958:	4608      	mov	r0, r1
 801c95a:	f7fc f86b 	bl	8018a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c95e:	4605      	mov	r5, r0
 801c960:	4638      	mov	r0, r7
 801c962:	f7fc f89b 	bl	8018a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c966:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c96a:	4638      	mov	r0, r7
 801c96c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c970:	f8ad 500c 	strh.w	r5, [sp, #12]
 801c974:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c978:	f7fc f948 	bl	8018c0c <_ZNK8touchgfx6Bitmap7getDataEv>
 801c97c:	4605      	mov	r5, r0
 801c97e:	4638      	mov	r0, r7
 801c980:	f7fc f974 	bl	8018c6c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c984:	4681      	mov	r9, r0
 801c986:	4638      	mov	r0, r7
 801c988:	f7fc f9c4 	bl	8018d14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c98c:	280b      	cmp	r0, #11
 801c98e:	d81a      	bhi.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801c990:	e8df f000 	tbb	[pc, r0]
 801c994:	1906aebd 	.word	0x1906aebd
 801c998:	19191919 	.word	0x19191919
 801c99c:	b5191919 	.word	0xb5191919
 801c9a0:	4bb0      	ldr	r3, [pc, #704]	; (801cc64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801c9a2:	6818      	ldr	r0, [r3, #0]
 801c9a4:	6803      	ldr	r3, [r0, #0]
 801c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9a8:	4798      	blx	r3
 801c9aa:	2eff      	cmp	r6, #255	; 0xff
 801c9ac:	d121      	bne.n	801c9f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801c9ae:	0683      	lsls	r3, r0, #26
 801c9b0:	d41f      	bmi.n	801c9f2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801c9b2:	4638      	mov	r0, r7
 801c9b4:	f7fc f8f2 	bl	8018b9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c9b8:	b940      	cbnz	r0, 801c9cc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801c9ba:	4623      	mov	r3, r4
 801c9bc:	aa02      	add	r2, sp, #8
 801c9be:	4629      	mov	r1, r5
 801c9c0:	4650      	mov	r0, sl
 801c9c2:	f7ff fa2f 	bl	801be24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801c9c6:	b009      	add	sp, #36	; 0x24
 801c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9cc:	f10d 0818 	add.w	r8, sp, #24
 801c9d0:	4639      	mov	r1, r7
 801c9d2:	af04      	add	r7, sp, #16
 801c9d4:	4640      	mov	r0, r8
 801c9d6:	f7fc f895 	bl	8018b04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c9da:	e898 0003 	ldmia.w	r8, {r0, r1}
 801c9de:	e887 0003 	stmia.w	r7, {r0, r1}
 801c9e2:	4638      	mov	r0, r7
 801c9e4:	4621      	mov	r1, r4
 801c9e6:	f7f7 fa67 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 801c9ea:	4638      	mov	r0, r7
 801c9ec:	f7f7 faa7 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9f0:	b130      	cbz	r0, 801ca00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801c9f2:	4633      	mov	r3, r6
 801c9f4:	4622      	mov	r2, r4
 801c9f6:	a902      	add	r1, sp, #8
 801c9f8:	4628      	mov	r0, r5
 801c9fa:	f7ff f92d 	bl	801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c9fe:	e7e2      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801ca00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ca04:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	dd12      	ble.n	801ca32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801ca0c:	1a9b      	subs	r3, r3, r2
 801ca0e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ca12:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ca16:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ca20:	4642      	mov	r2, r8
 801ca22:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ca26:	a902      	add	r1, sp, #8
 801ca28:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ca2c:	4633      	mov	r3, r6
 801ca2e:	f7ff f913 	bl	801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ca32:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ca36:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ca3a:	4293      	cmp	r3, r2
 801ca3c:	dd12      	ble.n	801ca64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801ca3e:	1a9b      	subs	r3, r3, r2
 801ca40:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ca44:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ca48:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ca4c:	4642      	mov	r2, r8
 801ca4e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca52:	4628      	mov	r0, r5
 801ca54:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ca58:	23ff      	movs	r3, #255	; 0xff
 801ca5a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ca5e:	a902      	add	r1, sp, #8
 801ca60:	f7ff f8fa 	bl	801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ca64:	463b      	mov	r3, r7
 801ca66:	aa02      	add	r2, sp, #8
 801ca68:	4629      	mov	r1, r5
 801ca6a:	4650      	mov	r0, sl
 801ca6c:	f7ff f9da 	bl	801be24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801ca70:	88a2      	ldrh	r2, [r4, #4]
 801ca72:	8823      	ldrh	r3, [r4, #0]
 801ca74:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ca78:	4413      	add	r3, r2
 801ca7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ca7e:	440a      	add	r2, r1
 801ca80:	b29b      	uxth	r3, r3
 801ca82:	b292      	uxth	r2, r2
 801ca84:	b218      	sxth	r0, r3
 801ca86:	b211      	sxth	r1, r2
 801ca88:	4288      	cmp	r0, r1
 801ca8a:	dd12      	ble.n	801cab2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801ca8c:	1a9b      	subs	r3, r3, r2
 801ca8e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ca92:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801ca96:	4642      	mov	r2, r8
 801ca98:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ca9c:	a902      	add	r1, sp, #8
 801ca9e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801caa2:	23ff      	movs	r3, #255	; 0xff
 801caa4:	f8ad 001e 	strh.w	r0, [sp, #30]
 801caa8:	4628      	mov	r0, r5
 801caaa:	f8ad 601a 	strh.w	r6, [sp, #26]
 801caae:	f7ff f8d3 	bl	801bc58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801cab2:	88e2      	ldrh	r2, [r4, #6]
 801cab4:	8863      	ldrh	r3, [r4, #2]
 801cab6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801caba:	4413      	add	r3, r2
 801cabc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801cac0:	440a      	add	r2, r1
 801cac2:	b29b      	uxth	r3, r3
 801cac4:	b292      	uxth	r2, r2
 801cac6:	b218      	sxth	r0, r3
 801cac8:	b211      	sxth	r1, r2
 801caca:	4288      	cmp	r0, r1
 801cacc:	f77f af7b 	ble.w	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cad0:	1a9b      	subs	r3, r3, r2
 801cad2:	f9b4 6000 	ldrsh.w	r6, [r4]
 801cad6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cada:	4642      	mov	r2, r8
 801cadc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cae0:	23ff      	movs	r3, #255	; 0xff
 801cae2:	f8ad 6018 	strh.w	r6, [sp, #24]
 801cae6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801caea:	f8ad 001c 	strh.w	r0, [sp, #28]
 801caee:	e782      	b.n	801c9f6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801caf0:	4633      	mov	r3, r6
 801caf2:	4622      	mov	r2, r4
 801caf4:	a902      	add	r1, sp, #8
 801caf6:	4628      	mov	r0, r5
 801caf8:	f7ff fa04 	bl	801bf04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801cafc:	e763      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cafe:	9600      	str	r6, [sp, #0]
 801cb00:	4623      	mov	r3, r4
 801cb02:	aa02      	add	r2, sp, #8
 801cb04:	4649      	mov	r1, r9
 801cb06:	4628      	mov	r0, r5
 801cb08:	f7ff fddc 	bl	801c6c4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801cb0c:	e75b      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cb0e:	4638      	mov	r0, r7
 801cb10:	f7fc f844 	bl	8018b9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801cb14:	b950      	cbnz	r0, 801cb2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801cb16:	f8da 3000 	ldr.w	r3, [sl]
 801cb1a:	aa02      	add	r2, sp, #8
 801cb1c:	4629      	mov	r1, r5
 801cb1e:	e9cd 6000 	strd	r6, r0, [sp]
 801cb22:	4650      	mov	r0, sl
 801cb24:	68de      	ldr	r6, [r3, #12]
 801cb26:	4623      	mov	r3, r4
 801cb28:	47b0      	blx	r6
 801cb2a:	e74c      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cb2c:	f10d 0818 	add.w	r8, sp, #24
 801cb30:	4639      	mov	r1, r7
 801cb32:	af04      	add	r7, sp, #16
 801cb34:	4640      	mov	r0, r8
 801cb36:	f7fb ffe5 	bl	8018b04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cb3a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801cb3e:	e887 0003 	stmia.w	r7, {r0, r1}
 801cb42:	4638      	mov	r0, r7
 801cb44:	4621      	mov	r1, r4
 801cb46:	f7f7 f9b7 	bl	8013eb8 <_ZN8touchgfx4RectaNERKS0_>
 801cb4a:	4638      	mov	r0, r7
 801cb4c:	f7f7 f9f7 	bl	8013f3e <_ZNK8touchgfx4Rect7isEmptyEv>
 801cb50:	b138      	cbz	r0, 801cb62 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801cb52:	4623      	mov	r3, r4
 801cb54:	9600      	str	r6, [sp, #0]
 801cb56:	aa02      	add	r2, sp, #8
 801cb58:	4649      	mov	r1, r9
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	f7ff fdca 	bl	801c6f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cb60:	e731      	b.n	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cb62:	f8da 3000 	ldr.w	r3, [sl]
 801cb66:	aa02      	add	r2, sp, #8
 801cb68:	4629      	mov	r1, r5
 801cb6a:	e9cd 6000 	strd	r6, r0, [sp]
 801cb6e:	4650      	mov	r0, sl
 801cb70:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801cb74:	463b      	mov	r3, r7
 801cb76:	47d8      	blx	fp
 801cb78:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cb7c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cb80:	4293      	cmp	r3, r2
 801cb82:	dd13      	ble.n	801cbac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801cb84:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cb88:	1a9b      	subs	r3, r3, r2
 801cb8a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cb8e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801cb92:	4628      	mov	r0, r5
 801cb94:	f8ad 201a 	strh.w	r2, [sp, #26]
 801cb98:	aa02      	add	r2, sp, #8
 801cb9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801cb9e:	4649      	mov	r1, r9
 801cba0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cba4:	4643      	mov	r3, r8
 801cba6:	9600      	str	r6, [sp, #0]
 801cba8:	f7ff fda4 	bl	801c6f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cbac:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801cbb0:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cbb4:	4293      	cmp	r3, r2
 801cbb6:	dd13      	ble.n	801cbe0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801cbb8:	1a9b      	subs	r3, r3, r2
 801cbba:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801cbbe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801cbc2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cbc6:	aa02      	add	r2, sp, #8
 801cbc8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cbcc:	4628      	mov	r0, r5
 801cbce:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cbd2:	4643      	mov	r3, r8
 801cbd4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801cbd8:	4649      	mov	r1, r9
 801cbda:	9600      	str	r6, [sp, #0]
 801cbdc:	f7ff fd8a 	bl	801c6f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cbe0:	88a2      	ldrh	r2, [r4, #4]
 801cbe2:	8823      	ldrh	r3, [r4, #0]
 801cbe4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801cbe8:	4413      	add	r3, r2
 801cbea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cbee:	440a      	add	r2, r1
 801cbf0:	b29b      	uxth	r3, r3
 801cbf2:	b292      	uxth	r2, r2
 801cbf4:	b218      	sxth	r0, r3
 801cbf6:	b211      	sxth	r1, r2
 801cbf8:	4288      	cmp	r0, r1
 801cbfa:	dd13      	ble.n	801cc24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801cbfc:	1a9b      	subs	r3, r3, r2
 801cbfe:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801cc02:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801cc06:	aa02      	add	r2, sp, #8
 801cc08:	f8ad 1018 	strh.w	r1, [sp, #24]
 801cc0c:	4649      	mov	r1, r9
 801cc0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cc12:	4643      	mov	r3, r8
 801cc14:	f8ad 001e 	strh.w	r0, [sp, #30]
 801cc18:	4628      	mov	r0, r5
 801cc1a:	9600      	str	r6, [sp, #0]
 801cc1c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801cc20:	f7ff fd68 	bl	801c6f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801cc24:	88e2      	ldrh	r2, [r4, #6]
 801cc26:	8863      	ldrh	r3, [r4, #2]
 801cc28:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801cc2c:	4413      	add	r3, r2
 801cc2e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801cc32:	440a      	add	r2, r1
 801cc34:	b29b      	uxth	r3, r3
 801cc36:	b292      	uxth	r2, r2
 801cc38:	b218      	sxth	r0, r3
 801cc3a:	b211      	sxth	r1, r2
 801cc3c:	4288      	cmp	r0, r1
 801cc3e:	f77f aec2 	ble.w	801c9c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801cc42:	f9b4 7000 	ldrsh.w	r7, [r4]
 801cc46:	1a9b      	subs	r3, r3, r2
 801cc48:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cc4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801cc50:	4643      	mov	r3, r8
 801cc52:	f8ad 7018 	strh.w	r7, [sp, #24]
 801cc56:	f8ad 101a 	strh.w	r1, [sp, #26]
 801cc5a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801cc5e:	9600      	str	r6, [sp, #0]
 801cc60:	e779      	b.n	801cb56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801cc62:	bf00      	nop
 801cc64:	24041b0c 	.word	0x24041b0c

0801cc68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801cc68:	b180      	cbz	r0, 801cc8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801cc6a:	2903      	cmp	r1, #3
 801cc6c:	d81c      	bhi.n	801cca8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801cc6e:	e8df f001 	tbb	[pc, r1]
 801cc72:	1d02      	.short	0x1d02
 801cc74:	1f08      	.short	0x1f08
 801cc76:	4b10      	ldr	r3, [pc, #64]	; (801ccb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801cc78:	8818      	ldrh	r0, [r3, #0]
 801cc7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cc7e:	4240      	negs	r0, r0
 801cc80:	4770      	bx	lr
 801cc82:	4b0d      	ldr	r3, [pc, #52]	; (801ccb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801cc84:	8818      	ldrh	r0, [r3, #0]
 801cc86:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801cc8a:	4770      	bx	lr
 801cc8c:	2903      	cmp	r1, #3
 801cc8e:	d80b      	bhi.n	801cca8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801cc90:	a301      	add	r3, pc, #4	; (adr r3, 801cc98 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801cc92:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801cc96:	bf00      	nop
 801cc98:	0801ccad 	.word	0x0801ccad
 801cc9c:	0801cc83 	.word	0x0801cc83
 801cca0:	0801ccb1 	.word	0x0801ccb1
 801cca4:	0801cc77 	.word	0x0801cc77
 801cca8:	2000      	movs	r0, #0
 801ccaa:	4770      	bx	lr
 801ccac:	2001      	movs	r0, #1
 801ccae:	4770      	bx	lr
 801ccb0:	f04f 30ff 	mov.w	r0, #4294967295
 801ccb4:	4770      	bx	lr
 801ccb6:	bf00      	nop
 801ccb8:	24041b06 	.word	0x24041b06

0801ccbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ccbc:	b180      	cbz	r0, 801cce0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801ccbe:	2903      	cmp	r1, #3
 801ccc0:	d81c      	bhi.n	801ccfc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ccc2:	e8df f001 	tbb	[pc, r1]
 801ccc6:	021d      	.short	0x021d
 801ccc8:	071f      	.short	0x071f
 801ccca:	4b10      	ldr	r3, [pc, #64]	; (801cd0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801cccc:	8818      	ldrh	r0, [r3, #0]
 801ccce:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ccd2:	4770      	bx	lr
 801ccd4:	4b0d      	ldr	r3, [pc, #52]	; (801cd0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ccd6:	8818      	ldrh	r0, [r3, #0]
 801ccd8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ccdc:	4240      	negs	r0, r0
 801ccde:	4770      	bx	lr
 801cce0:	2903      	cmp	r1, #3
 801cce2:	d80b      	bhi.n	801ccfc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801cce4:	a301      	add	r3, pc, #4	; (adr r3, 801ccec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801cce6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ccea:	bf00      	nop
 801ccec:	0801cccb 	.word	0x0801cccb
 801ccf0:	0801cd05 	.word	0x0801cd05
 801ccf4:	0801ccd5 	.word	0x0801ccd5
 801ccf8:	0801cd01 	.word	0x0801cd01
 801ccfc:	2000      	movs	r0, #0
 801ccfe:	4770      	bx	lr
 801cd00:	2001      	movs	r0, #1
 801cd02:	4770      	bx	lr
 801cd04:	f04f 30ff 	mov.w	r0, #4294967295
 801cd08:	4770      	bx	lr
 801cd0a:	bf00      	nop
 801cd0c:	24041b06 	.word	0x24041b06

0801cd10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd14:	b099      	sub	sp, #100	; 0x64
 801cd16:	910b      	str	r1, [sp, #44]	; 0x2c
 801cd18:	a914      	add	r1, sp, #80	; 0x50
 801cd1a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801cd1e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801cd22:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801cd26:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801cd2a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801cd2e:	e881 000c 	stmia.w	r1, {r2, r3}
 801cd32:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801cd36:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801cd3a:	9309      	str	r3, [sp, #36]	; 0x24
 801cd3c:	f891 900d 	ldrb.w	r9, [r1, #13]
 801cd40:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801cd44:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801cd48:	9310      	str	r3, [sp, #64]	; 0x40
 801cd4a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801cd4e:	930c      	str	r3, [sp, #48]	; 0x30
 801cd50:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801cd54:	798f      	ldrb	r7, [r1, #6]
 801cd56:	431f      	orrs	r7, r3
 801cd58:	f000 8195 	beq.w	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cd5c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801cd60:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801cd64:	f891 9007 	ldrb.w	r9, [r1, #7]
 801cd68:	ea59 0903 	orrs.w	r9, r9, r3
 801cd6c:	f000 818b 	beq.w	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801cd70:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801cd74:	b29b      	uxth	r3, r3
 801cd76:	2d00      	cmp	r5, #0
 801cd78:	f000 812e 	beq.w	801cfd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801cd7c:	1aed      	subs	r5, r5, r3
 801cd7e:	b2ad      	uxth	r5, r5
 801cd80:	042b      	lsls	r3, r5, #16
 801cd82:	d502      	bpl.n	801cd8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801cd84:	1b64      	subs	r4, r4, r5
 801cd86:	2500      	movs	r5, #0
 801cd88:	b224      	sxth	r4, r4
 801cd8a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cd8e:	a814      	add	r0, sp, #80	; 0x50
 801cd90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801cd94:	428c      	cmp	r4, r1
 801cd96:	b28b      	uxth	r3, r1
 801cd98:	bfbf      	itttt	lt
 801cd9a:	18ed      	addlt	r5, r5, r3
 801cd9c:	1b2c      	sublt	r4, r5, r4
 801cd9e:	b2a5      	uxthlt	r5, r4
 801cda0:	460c      	movlt	r4, r1
 801cda2:	8891      	ldrh	r1, [r2, #4]
 801cda4:	440b      	add	r3, r1
 801cda6:	4621      	mov	r1, r4
 801cda8:	b21b      	sxth	r3, r3
 801cdaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801cdac:	88d3      	ldrh	r3, [r2, #6]
 801cdae:	8852      	ldrh	r2, [r2, #2]
 801cdb0:	4413      	add	r3, r2
 801cdb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cdb4:	b21b      	sxth	r3, r3
 801cdb6:	930d      	str	r3, [sp, #52]	; 0x34
 801cdb8:	4bbd      	ldr	r3, [pc, #756]	; (801d0b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801cdba:	f893 b000 	ldrb.w	fp, [r3]
 801cdbe:	f10b 3cff 	add.w	ip, fp, #4294967295
 801cdc2:	f1dc 0300 	rsbs	r3, ip, #0
 801cdc6:	eb43 030c 	adc.w	r3, r3, ip
 801cdca:	930e      	str	r3, [sp, #56]	; 0x38
 801cdcc:	4653      	mov	r3, sl
 801cdce:	f7f8 fee3 	bl	8015b98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801cdd2:	4621      	mov	r1, r4
 801cdd4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801cdd8:	4653      	mov	r3, sl
 801cdda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cddc:	a814      	add	r0, sp, #80	; 0x50
 801cdde:	f7f8 fef8 	bl	8015bd2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801cde2:	a918      	add	r1, sp, #96	; 0x60
 801cde4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801cde8:	a817      	add	r0, sp, #92	; 0x5c
 801cdea:	f7f9 f819 	bl	8015e20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801cdee:	f1ba 0f00 	cmp.w	sl, #0
 801cdf2:	f040 80f4 	bne.w	801cfde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801cdf6:	f1bb 0f01 	cmp.w	fp, #1
 801cdfa:	f040 80f8 	bne.w	801cfee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801cdfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	f040 8145 	bne.w	801d090 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ce06:	b2ba      	uxth	r2, r7
 801ce08:	b905      	cbnz	r5, 801ce0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ce0a:	b16e      	cbz	r6, 801ce28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ce0c:	fb06 5302 	mla	r3, r6, r2, r5
 801ce10:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ce12:	4631      	mov	r1, r6
 801ce14:	fb08 f303 	mul.w	r3, r8, r3
 801ce18:	f003 0607 	and.w	r6, r3, #7
 801ce1c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801ce20:	9328      	str	r3, [sp, #160]	; 0xa0
 801ce22:	eba9 0301 	sub.w	r3, r9, r1
 801ce26:	930a      	str	r3, [sp, #40]	; 0x28
 801ce28:	4651      	mov	r1, sl
 801ce2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ce2c:	f7ff ff1c 	bl	801cc68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801ce30:	4681      	mov	r9, r0
 801ce32:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ce34:	f7ff ff42 	bl	801ccbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801ce38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ce3c:	4683      	mov	fp, r0
 801ce3e:	eba3 0a01 	sub.w	sl, r3, r1
 801ce42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce44:	459a      	cmp	sl, r3
 801ce46:	bfa8      	it	ge
 801ce48:	469a      	movge	sl, r3
 801ce4a:	f1ba 0f00 	cmp.w	sl, #0
 801ce4e:	f340 811a 	ble.w	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ce52:	1b64      	subs	r4, r4, r5
 801ce54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce56:	1b1c      	subs	r4, r3, r4
 801ce58:	42bc      	cmp	r4, r7
 801ce5a:	bfd4      	ite	le
 801ce5c:	ebc5 0504 	rsble	r5, r5, r4
 801ce60:	ebc5 0507 	rsbgt	r5, r5, r7
 801ce64:	2d00      	cmp	r5, #0
 801ce66:	f340 810e 	ble.w	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801ce6a:	1b52      	subs	r2, r2, r5
 801ce6c:	fb08 f302 	mul.w	r3, r8, r2
 801ce70:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	f040 8116 	bne.w	801d0a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801ce7a:	4b8e      	ldr	r3, [pc, #568]	; (801d0b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801ce7c:	6818      	ldr	r0, [r3, #0]
 801ce7e:	6803      	ldr	r3, [r0, #0]
 801ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce82:	4798      	blx	r3
 801ce84:	2301      	movs	r3, #1
 801ce86:	4a8c      	ldr	r2, [pc, #560]	; (801d0b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801ce88:	fa03 f308 	lsl.w	r3, r3, r8
 801ce8c:	8811      	ldrh	r1, [r2, #0]
 801ce8e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ce92:	3b01      	subs	r3, #1
 801ce94:	b2db      	uxtb	r3, r3
 801ce96:	930e      	str	r3, [sp, #56]	; 0x38
 801ce98:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ce9c:	fb01 2303 	mla	r3, r1, r3, r2
 801cea0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cea4:	930a      	str	r3, [sp, #40]	; 0x28
 801cea6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cea8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ceac:	9313      	str	r3, [sp, #76]	; 0x4c
 801ceae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ceb0:	0a19      	lsrs	r1, r3, #8
 801ceb2:	b2cb      	uxtb	r3, r1
 801ceb4:	9312      	str	r3, [sp, #72]	; 0x48
 801ceb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ceb8:	b2db      	uxtb	r3, r3
 801ceba:	9311      	str	r3, [sp, #68]	; 0x44
 801cebc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cebe:	095a      	lsrs	r2, r3, #5
 801cec0:	4b7e      	ldr	r3, [pc, #504]	; (801d0bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801cec2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cec6:	400b      	ands	r3, r1
 801cec8:	4313      	orrs	r3, r2
 801ceca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801cecc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ced0:	4313      	orrs	r3, r2
 801ced2:	b29b      	uxth	r3, r3
 801ced4:	9310      	str	r3, [sp, #64]	; 0x40
 801ced6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ced8:	781a      	ldrb	r2, [r3, #0]
 801ceda:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801cede:	fb05 b919 	mls	r9, r5, r9, fp
 801cee2:	4132      	asrs	r2, r6
 801cee4:	fb03 fb05 	mul.w	fp, r3, r5
 801cee8:	930d      	str	r3, [sp, #52]	; 0x34
 801ceea:	b2d2      	uxtb	r2, r2
 801ceec:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801cef0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801cef4:	f0c0 80f5 	bcc.w	801d0e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801cef8:	46ae      	mov	lr, r5
 801cefa:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801cefe:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801cf02:	f0c0 80dd 	bcc.w	801d0c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801cf06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cf08:	4013      	ands	r3, r2
 801cf0a:	d055      	beq.n	801cfb8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801cf0c:	20ff      	movs	r0, #255	; 0xff
 801cf0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cf10:	fb90 f1f1 	sdiv	r1, r0, r1
 801cf14:	434b      	muls	r3, r1
 801cf16:	2bfe      	cmp	r3, #254	; 0xfe
 801cf18:	dd03      	ble.n	801cf22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801cf1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cf1c:	4281      	cmp	r1, r0
 801cf1e:	f000 80c4 	beq.w	801d0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801cf22:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cf24:	f8bc 4000 	ldrh.w	r4, [ip]
 801cf28:	fb11 f303 	smulbb	r3, r1, r3
 801cf2c:	1220      	asrs	r0, r4, #8
 801cf2e:	b29b      	uxth	r3, r3
 801cf30:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cf34:	1c59      	adds	r1, r3, #1
 801cf36:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801cf3a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801cf3e:	10e1      	asrs	r1, r4, #3
 801cf40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cf44:	00e4      	lsls	r4, r4, #3
 801cf46:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cf4a:	b29f      	uxth	r7, r3
 801cf4c:	43db      	mvns	r3, r3
 801cf4e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801cf52:	b2db      	uxtb	r3, r3
 801cf54:	b2e4      	uxtb	r4, r4
 801cf56:	9309      	str	r3, [sp, #36]	; 0x24
 801cf58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cf5a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801cf5e:	fb13 f907 	smulbb	r9, r3, r7
 801cf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf64:	fb00 9003 	mla	r0, r0, r3, r9
 801cf68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cf6a:	fb13 f907 	smulbb	r9, r3, r7
 801cf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf70:	b280      	uxth	r0, r0
 801cf72:	fb01 9103 	mla	r1, r1, r3, r9
 801cf76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cf78:	fb13 f707 	smulbb	r7, r3, r7
 801cf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf7e:	b289      	uxth	r1, r1
 801cf80:	fb04 7403 	mla	r4, r4, r3, r7
 801cf84:	1c43      	adds	r3, r0, #1
 801cf86:	b2a4      	uxth	r4, r4
 801cf88:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cf8c:	f104 0901 	add.w	r9, r4, #1
 801cf90:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cf94:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801cf98:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801cf9c:	ea49 0000 	orr.w	r0, r9, r0
 801cfa0:	f101 0901 	add.w	r9, r1, #1
 801cfa4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801cfa8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801cfac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cfb0:	ea40 0009 	orr.w	r0, r0, r9
 801cfb4:	f8ac 0000 	strh.w	r0, [ip]
 801cfb8:	4446      	add	r6, r8
 801cfba:	b2b6      	uxth	r6, r6
 801cfbc:	2e07      	cmp	r6, #7
 801cfbe:	bf89      	itett	hi
 801cfc0:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801cfc2:	fa42 f208 	asrls.w	r2, r2, r8
 801cfc6:	2600      	movhi	r6, #0
 801cfc8:	785a      	ldrbhi	r2, [r3, #1]
 801cfca:	bf8a      	itet	hi
 801cfcc:	3301      	addhi	r3, #1
 801cfce:	b2d2      	uxtbls	r2, r2
 801cfd0:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801cfd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfd4:	449c      	add	ip, r3
 801cfd6:	e792      	b.n	801cefe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801cfd8:	441c      	add	r4, r3
 801cfda:	b224      	sxth	r4, r4
 801cfdc:	e6d5      	b.n	801cd8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801cfde:	f1ba 0f01 	cmp.w	sl, #1
 801cfe2:	f47f af0c 	bne.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cfe6:	f1bb 0f01 	cmp.w	fp, #1
 801cfea:	f47f af08 	bne.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801cfee:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801d0b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801cff2:	f8db 0000 	ldr.w	r0, [fp]
 801cff6:	6803      	ldr	r3, [r0, #0]
 801cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cffa:	4798      	blx	r3
 801cffc:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801d000:	465a      	mov	r2, fp
 801d002:	d006      	beq.n	801d012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d004:	f1b8 0f04 	cmp.w	r8, #4
 801d008:	d140      	bne.n	801d08c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801d00a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d00c:	3300      	adds	r3, #0
 801d00e:	bf18      	it	ne
 801d010:	2301      	movne	r3, #1
 801d012:	0580      	lsls	r0, r0, #22
 801d014:	d56e      	bpl.n	801d0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d016:	f1b8 0f08 	cmp.w	r8, #8
 801d01a:	d16b      	bne.n	801d0f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	bf0c      	ite	eq
 801d020:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801d024:	f44f 7180 	movne.w	r1, #256	; 0x100
 801d028:	2d00      	cmp	r5, #0
 801d02a:	f47f aee8 	bne.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d02e:	2e00      	cmp	r6, #0
 801d030:	f47f aee5 	bne.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d034:	19e3      	adds	r3, r4, r7
 801d036:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d038:	4283      	cmp	r3, r0
 801d03a:	f73f aee0 	bgt.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d040:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d042:	444b      	add	r3, r9
 801d044:	4283      	cmp	r3, r0
 801d046:	f73f aeda 	bgt.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d04a:	b2bf      	uxth	r7, r7
 801d04c:	f1b8 0f08 	cmp.w	r8, #8
 801d050:	6810      	ldr	r0, [r2, #0]
 801d052:	f04f 0500 	mov.w	r5, #0
 801d056:	bf18      	it	ne
 801d058:	3701      	addne	r7, #1
 801d05a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801d05e:	6804      	ldr	r4, [r0, #0]
 801d060:	bf18      	it	ne
 801d062:	f027 0701 	bicne.w	r7, r7, #1
 801d066:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801d06a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801d06e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d070:	bf18      	it	ne
 801d072:	b2bf      	uxthne	r7, r7
 801d074:	9104      	str	r1, [sp, #16]
 801d076:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801d078:	e9cd 7900 	strd	r7, r9, [sp]
 801d07c:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801d080:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d082:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801d084:	47a0      	blx	r4
 801d086:	b019      	add	sp, #100	; 0x64
 801d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d08c:	2300      	movs	r3, #0
 801d08e:	e7c0      	b.n	801d012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801d090:	2208      	movs	r2, #8
 801d092:	fb92 f3f8 	sdiv	r3, r2, r8
 801d096:	1e5a      	subs	r2, r3, #1
 801d098:	443a      	add	r2, r7
 801d09a:	fb92 f2f3 	sdiv	r2, r2, r3
 801d09e:	fb12 f203 	smulbb	r2, r2, r3
 801d0a2:	b292      	uxth	r2, r2
 801d0a4:	e6b0      	b.n	801ce08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801d0a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d0a8:	e6ec      	b.n	801ce84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801d0aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d0ac:	e782      	b.n	801cfb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801d0ae:	bf00      	nop
 801d0b0:	24041b04 	.word	0x24041b04
 801d0b4:	24041b0c 	.word	0x24041b0c
 801d0b8:	24041b06 	.word	0x24041b06
 801d0bc:	00fff800 	.word	0x00fff800
 801d0c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d0c2:	b153      	cbz	r3, 801d0da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801d0c4:	441e      	add	r6, r3
 801d0c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d0c8:	b2b6      	uxth	r6, r6
 801d0ca:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801d0ce:	f006 0607 	and.w	r6, r6, #7
 801d0d2:	781a      	ldrb	r2, [r3, #0]
 801d0d4:	9328      	str	r3, [sp, #160]	; 0xa0
 801d0d6:	4132      	asrs	r2, r6
 801d0d8:	b2d2      	uxtb	r2, r2
 801d0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0dc:	445b      	add	r3, fp
 801d0de:	930a      	str	r3, [sp, #40]	; 0x28
 801d0e0:	e706      	b.n	801cef0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801d0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d1ce      	bne.n	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d0e8:	4b05      	ldr	r3, [pc, #20]	; (801d100 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801d0ea:	6818      	ldr	r0, [r3, #0]
 801d0ec:	6803      	ldr	r3, [r0, #0]
 801d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0f0:	4798      	blx	r3
 801d0f2:	e7c8      	b.n	801d086 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	f43f ae82 	beq.w	801cdfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801d0fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d0fe:	e793      	b.n	801d028 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801d100:	24041b0c 	.word	0x24041b0c

0801d104 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801d104:	b538      	push	{r3, r4, r5, lr}
 801d106:	4c15      	ldr	r4, [pc, #84]	; (801d15c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801d108:	4605      	mov	r5, r0
 801d10a:	7823      	ldrb	r3, [r4, #0]
 801d10c:	f3bf 8f5b 	dmb	ish
 801d110:	07da      	lsls	r2, r3, #31
 801d112:	d40b      	bmi.n	801d12c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d114:	4620      	mov	r0, r4
 801d116:	f007 fa68 	bl	80245ea <__cxa_guard_acquire>
 801d11a:	b138      	cbz	r0, 801d12c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801d11c:	4620      	mov	r0, r4
 801d11e:	f007 fa70 	bl	8024602 <__cxa_guard_release>
 801d122:	4a0f      	ldr	r2, [pc, #60]	; (801d160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d124:	490f      	ldr	r1, [pc, #60]	; (801d164 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801d126:	4810      	ldr	r0, [pc, #64]	; (801d168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d128:	f007 fa58 	bl	80245dc <__aeabi_atexit>
 801d12c:	4c0f      	ldr	r4, [pc, #60]	; (801d16c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801d12e:	7823      	ldrb	r3, [r4, #0]
 801d130:	f3bf 8f5b 	dmb	ish
 801d134:	07db      	lsls	r3, r3, #31
 801d136:	d40b      	bmi.n	801d150 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d138:	4620      	mov	r0, r4
 801d13a:	f007 fa56 	bl	80245ea <__cxa_guard_acquire>
 801d13e:	b138      	cbz	r0, 801d150 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801d140:	4620      	mov	r0, r4
 801d142:	f007 fa5e 	bl	8024602 <__cxa_guard_release>
 801d146:	4a06      	ldr	r2, [pc, #24]	; (801d160 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801d148:	4909      	ldr	r1, [pc, #36]	; (801d170 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801d14a:	480a      	ldr	r0, [pc, #40]	; (801d174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d14c:	f007 fa46 	bl	80245dc <__aeabi_atexit>
 801d150:	4b05      	ldr	r3, [pc, #20]	; (801d168 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801d152:	612b      	str	r3, [r5, #16]
 801d154:	4b07      	ldr	r3, [pc, #28]	; (801d174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801d156:	616b      	str	r3, [r5, #20]
 801d158:	bd38      	pop	{r3, r4, r5, pc}
 801d15a:	bf00      	nop
 801d15c:	24041bd8 	.word	0x24041bd8
 801d160:	24000000 	.word	0x24000000
 801d164:	0801b323 	.word	0x0801b323
 801d168:	2400007c 	.word	0x2400007c
 801d16c:	24041bdc 	.word	0x24041bdc
 801d170:	0801b321 	.word	0x0801b321
 801d174:	24000080 	.word	0x24000080

0801d178 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801d178:	b538      	push	{r3, r4, r5, lr}
 801d17a:	4c15      	ldr	r4, [pc, #84]	; (801d1d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801d17c:	4605      	mov	r5, r0
 801d17e:	7823      	ldrb	r3, [r4, #0]
 801d180:	f3bf 8f5b 	dmb	ish
 801d184:	07da      	lsls	r2, r3, #31
 801d186:	d40b      	bmi.n	801d1a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d188:	4620      	mov	r0, r4
 801d18a:	f007 fa2e 	bl	80245ea <__cxa_guard_acquire>
 801d18e:	b138      	cbz	r0, 801d1a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801d190:	4620      	mov	r0, r4
 801d192:	f007 fa36 	bl	8024602 <__cxa_guard_release>
 801d196:	4a0f      	ldr	r2, [pc, #60]	; (801d1d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d198:	490f      	ldr	r1, [pc, #60]	; (801d1d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801d19a:	4810      	ldr	r0, [pc, #64]	; (801d1dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d19c:	f007 fa1e 	bl	80245dc <__aeabi_atexit>
 801d1a0:	4c0f      	ldr	r4, [pc, #60]	; (801d1e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801d1a2:	7823      	ldrb	r3, [r4, #0]
 801d1a4:	f3bf 8f5b 	dmb	ish
 801d1a8:	07db      	lsls	r3, r3, #31
 801d1aa:	d40b      	bmi.n	801d1c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d1ac:	4620      	mov	r0, r4
 801d1ae:	f007 fa1c 	bl	80245ea <__cxa_guard_acquire>
 801d1b2:	b138      	cbz	r0, 801d1c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801d1b4:	4620      	mov	r0, r4
 801d1b6:	f007 fa24 	bl	8024602 <__cxa_guard_release>
 801d1ba:	4a06      	ldr	r2, [pc, #24]	; (801d1d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801d1bc:	4909      	ldr	r1, [pc, #36]	; (801d1e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801d1be:	480a      	ldr	r0, [pc, #40]	; (801d1e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d1c0:	f007 fa0c 	bl	80245dc <__aeabi_atexit>
 801d1c4:	4b05      	ldr	r3, [pc, #20]	; (801d1dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801d1c6:	60ab      	str	r3, [r5, #8]
 801d1c8:	4b07      	ldr	r3, [pc, #28]	; (801d1e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801d1ca:	60eb      	str	r3, [r5, #12]
 801d1cc:	bd38      	pop	{r3, r4, r5, pc}
 801d1ce:	bf00      	nop
 801d1d0:	24041bb0 	.word	0x24041bb0
 801d1d4:	24000000 	.word	0x24000000
 801d1d8:	0801b327 	.word	0x0801b327
 801d1dc:	24000054 	.word	0x24000054
 801d1e0:	24041bb4 	.word	0x24041bb4
 801d1e4:	0801b325 	.word	0x0801b325
 801d1e8:	24000058 	.word	0x24000058

0801d1ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801d1ec:	b510      	push	{r4, lr}
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	f7ff ff88 	bl	801d104 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801d1f4:	4620      	mov	r0, r4
 801d1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d1fa:	f7ff bfbd 	b.w	801d178 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801d200 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d200:	b538      	push	{r3, r4, r5, lr}
 801d202:	4c15      	ldr	r4, [pc, #84]	; (801d258 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d204:	4605      	mov	r5, r0
 801d206:	7823      	ldrb	r3, [r4, #0]
 801d208:	f3bf 8f5b 	dmb	ish
 801d20c:	07da      	lsls	r2, r3, #31
 801d20e:	d40b      	bmi.n	801d228 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d210:	4620      	mov	r0, r4
 801d212:	f007 f9ea 	bl	80245ea <__cxa_guard_acquire>
 801d216:	b138      	cbz	r0, 801d228 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d218:	4620      	mov	r0, r4
 801d21a:	f007 f9f2 	bl	8024602 <__cxa_guard_release>
 801d21e:	4a0f      	ldr	r2, [pc, #60]	; (801d25c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d220:	490f      	ldr	r1, [pc, #60]	; (801d260 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d222:	4810      	ldr	r0, [pc, #64]	; (801d264 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d224:	f007 f9da 	bl	80245dc <__aeabi_atexit>
 801d228:	4c0f      	ldr	r4, [pc, #60]	; (801d268 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d22a:	7823      	ldrb	r3, [r4, #0]
 801d22c:	f3bf 8f5b 	dmb	ish
 801d230:	07db      	lsls	r3, r3, #31
 801d232:	d40b      	bmi.n	801d24c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d234:	4620      	mov	r0, r4
 801d236:	f007 f9d8 	bl	80245ea <__cxa_guard_acquire>
 801d23a:	b138      	cbz	r0, 801d24c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d23c:	4620      	mov	r0, r4
 801d23e:	f007 f9e0 	bl	8024602 <__cxa_guard_release>
 801d242:	4a06      	ldr	r2, [pc, #24]	; (801d25c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d244:	4909      	ldr	r1, [pc, #36]	; (801d26c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d246:	480a      	ldr	r0, [pc, #40]	; (801d270 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d248:	f007 f9c8 	bl	80245dc <__aeabi_atexit>
 801d24c:	4b05      	ldr	r3, [pc, #20]	; (801d264 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d24e:	622b      	str	r3, [r5, #32]
 801d250:	4b07      	ldr	r3, [pc, #28]	; (801d270 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d252:	626b      	str	r3, [r5, #36]	; 0x24
 801d254:	bd38      	pop	{r3, r4, r5, pc}
 801d256:	bf00      	nop
 801d258:	24041be0 	.word	0x24041be0
 801d25c:	24000000 	.word	0x24000000
 801d260:	0801b31b 	.word	0x0801b31b
 801d264:	24000084 	.word	0x24000084
 801d268:	24041be4 	.word	0x24041be4
 801d26c:	0801b319 	.word	0x0801b319
 801d270:	24000088 	.word	0x24000088

0801d274 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d274:	b538      	push	{r3, r4, r5, lr}
 801d276:	4c15      	ldr	r4, [pc, #84]	; (801d2cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d278:	4605      	mov	r5, r0
 801d27a:	7823      	ldrb	r3, [r4, #0]
 801d27c:	f3bf 8f5b 	dmb	ish
 801d280:	07da      	lsls	r2, r3, #31
 801d282:	d40b      	bmi.n	801d29c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d284:	4620      	mov	r0, r4
 801d286:	f007 f9b0 	bl	80245ea <__cxa_guard_acquire>
 801d28a:	b138      	cbz	r0, 801d29c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d28c:	4620      	mov	r0, r4
 801d28e:	f007 f9b8 	bl	8024602 <__cxa_guard_release>
 801d292:	4a0f      	ldr	r2, [pc, #60]	; (801d2d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d294:	490f      	ldr	r1, [pc, #60]	; (801d2d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d296:	4810      	ldr	r0, [pc, #64]	; (801d2d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d298:	f007 f9a0 	bl	80245dc <__aeabi_atexit>
 801d29c:	4c0f      	ldr	r4, [pc, #60]	; (801d2dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d29e:	7823      	ldrb	r3, [r4, #0]
 801d2a0:	f3bf 8f5b 	dmb	ish
 801d2a4:	07db      	lsls	r3, r3, #31
 801d2a6:	d40b      	bmi.n	801d2c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d2a8:	4620      	mov	r0, r4
 801d2aa:	f007 f99e 	bl	80245ea <__cxa_guard_acquire>
 801d2ae:	b138      	cbz	r0, 801d2c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d2b0:	4620      	mov	r0, r4
 801d2b2:	f007 f9a6 	bl	8024602 <__cxa_guard_release>
 801d2b6:	4a06      	ldr	r2, [pc, #24]	; (801d2d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d2b8:	4909      	ldr	r1, [pc, #36]	; (801d2e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d2ba:	480a      	ldr	r0, [pc, #40]	; (801d2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d2bc:	f007 f98e 	bl	80245dc <__aeabi_atexit>
 801d2c0:	4b05      	ldr	r3, [pc, #20]	; (801d2d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d2c2:	61ab      	str	r3, [r5, #24]
 801d2c4:	4b07      	ldr	r3, [pc, #28]	; (801d2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d2c6:	61eb      	str	r3, [r5, #28]
 801d2c8:	bd38      	pop	{r3, r4, r5, pc}
 801d2ca:	bf00      	nop
 801d2cc:	24041bb8 	.word	0x24041bb8
 801d2d0:	24000000 	.word	0x24000000
 801d2d4:	0801b31f 	.word	0x0801b31f
 801d2d8:	2400005c 	.word	0x2400005c
 801d2dc:	24041bbc 	.word	0x24041bbc
 801d2e0:	0801b31d 	.word	0x0801b31d
 801d2e4:	24000060 	.word	0x24000060

0801d2e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801d2e8:	b510      	push	{r4, lr}
 801d2ea:	4604      	mov	r4, r0
 801d2ec:	f7ff ff88 	bl	801d200 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d2f0:	4620      	mov	r0, r4
 801d2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2f6:	f7ff bfbd 	b.w	801d274 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d2fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d2fc:	b538      	push	{r3, r4, r5, lr}
 801d2fe:	4c15      	ldr	r4, [pc, #84]	; (801d354 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d300:	4605      	mov	r5, r0
 801d302:	7823      	ldrb	r3, [r4, #0]
 801d304:	f3bf 8f5b 	dmb	ish
 801d308:	07da      	lsls	r2, r3, #31
 801d30a:	d40b      	bmi.n	801d324 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d30c:	4620      	mov	r0, r4
 801d30e:	f007 f96c 	bl	80245ea <__cxa_guard_acquire>
 801d312:	b138      	cbz	r0, 801d324 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d314:	4620      	mov	r0, r4
 801d316:	f007 f974 	bl	8024602 <__cxa_guard_release>
 801d31a:	4a0f      	ldr	r2, [pc, #60]	; (801d358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d31c:	490f      	ldr	r1, [pc, #60]	; (801d35c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d31e:	4810      	ldr	r0, [pc, #64]	; (801d360 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d320:	f007 f95c 	bl	80245dc <__aeabi_atexit>
 801d324:	4c0f      	ldr	r4, [pc, #60]	; (801d364 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d326:	7823      	ldrb	r3, [r4, #0]
 801d328:	f3bf 8f5b 	dmb	ish
 801d32c:	07db      	lsls	r3, r3, #31
 801d32e:	d40b      	bmi.n	801d348 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d330:	4620      	mov	r0, r4
 801d332:	f007 f95a 	bl	80245ea <__cxa_guard_acquire>
 801d336:	b138      	cbz	r0, 801d348 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d338:	4620      	mov	r0, r4
 801d33a:	f007 f962 	bl	8024602 <__cxa_guard_release>
 801d33e:	4a06      	ldr	r2, [pc, #24]	; (801d358 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d340:	4909      	ldr	r1, [pc, #36]	; (801d368 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d342:	480a      	ldr	r0, [pc, #40]	; (801d36c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d344:	f007 f94a 	bl	80245dc <__aeabi_atexit>
 801d348:	4b05      	ldr	r3, [pc, #20]	; (801d360 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d34a:	632b      	str	r3, [r5, #48]	; 0x30
 801d34c:	4b07      	ldr	r3, [pc, #28]	; (801d36c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d34e:	636b      	str	r3, [r5, #52]	; 0x34
 801d350:	bd38      	pop	{r3, r4, r5, pc}
 801d352:	bf00      	nop
 801d354:	24041bf0 	.word	0x24041bf0
 801d358:	24000000 	.word	0x24000000
 801d35c:	0801b313 	.word	0x0801b313
 801d360:	24000094 	.word	0x24000094
 801d364:	24041bf4 	.word	0x24041bf4
 801d368:	0801b311 	.word	0x0801b311
 801d36c:	24000098 	.word	0x24000098

0801d370 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d370:	b538      	push	{r3, r4, r5, lr}
 801d372:	4c15      	ldr	r4, [pc, #84]	; (801d3c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d374:	4605      	mov	r5, r0
 801d376:	7823      	ldrb	r3, [r4, #0]
 801d378:	f3bf 8f5b 	dmb	ish
 801d37c:	07da      	lsls	r2, r3, #31
 801d37e:	d40b      	bmi.n	801d398 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d380:	4620      	mov	r0, r4
 801d382:	f007 f932 	bl	80245ea <__cxa_guard_acquire>
 801d386:	b138      	cbz	r0, 801d398 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d388:	4620      	mov	r0, r4
 801d38a:	f007 f93a 	bl	8024602 <__cxa_guard_release>
 801d38e:	4a0f      	ldr	r2, [pc, #60]	; (801d3cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d390:	490f      	ldr	r1, [pc, #60]	; (801d3d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d392:	4810      	ldr	r0, [pc, #64]	; (801d3d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d394:	f007 f922 	bl	80245dc <__aeabi_atexit>
 801d398:	4c0f      	ldr	r4, [pc, #60]	; (801d3d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d39a:	7823      	ldrb	r3, [r4, #0]
 801d39c:	f3bf 8f5b 	dmb	ish
 801d3a0:	07db      	lsls	r3, r3, #31
 801d3a2:	d40b      	bmi.n	801d3bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	f007 f920 	bl	80245ea <__cxa_guard_acquire>
 801d3aa:	b138      	cbz	r0, 801d3bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d3ac:	4620      	mov	r0, r4
 801d3ae:	f007 f928 	bl	8024602 <__cxa_guard_release>
 801d3b2:	4a06      	ldr	r2, [pc, #24]	; (801d3cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d3b4:	4909      	ldr	r1, [pc, #36]	; (801d3dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d3b6:	480a      	ldr	r0, [pc, #40]	; (801d3e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d3b8:	f007 f910 	bl	80245dc <__aeabi_atexit>
 801d3bc:	4b05      	ldr	r3, [pc, #20]	; (801d3d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d3be:	62ab      	str	r3, [r5, #40]	; 0x28
 801d3c0:	4b07      	ldr	r3, [pc, #28]	; (801d3e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d3c2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d3c4:	bd38      	pop	{r3, r4, r5, pc}
 801d3c6:	bf00      	nop
 801d3c8:	24041bc0 	.word	0x24041bc0
 801d3cc:	24000000 	.word	0x24000000
 801d3d0:	0801b317 	.word	0x0801b317
 801d3d4:	24000064 	.word	0x24000064
 801d3d8:	24041bc4 	.word	0x24041bc4
 801d3dc:	0801b315 	.word	0x0801b315
 801d3e0:	24000068 	.word	0x24000068

0801d3e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d3e4:	b510      	push	{r4, lr}
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	f7ff ff88 	bl	801d2fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3f2:	f7ff bfbd 	b.w	801d370 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d3f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801d3f8:	b538      	push	{r3, r4, r5, lr}
 801d3fa:	4c15      	ldr	r4, [pc, #84]	; (801d450 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801d3fc:	4605      	mov	r5, r0
 801d3fe:	7823      	ldrb	r3, [r4, #0]
 801d400:	f3bf 8f5b 	dmb	ish
 801d404:	07da      	lsls	r2, r3, #31
 801d406:	d40b      	bmi.n	801d420 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d408:	4620      	mov	r0, r4
 801d40a:	f007 f8ee 	bl	80245ea <__cxa_guard_acquire>
 801d40e:	b138      	cbz	r0, 801d420 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801d410:	4620      	mov	r0, r4
 801d412:	f007 f8f6 	bl	8024602 <__cxa_guard_release>
 801d416:	4a0f      	ldr	r2, [pc, #60]	; (801d454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d418:	490f      	ldr	r1, [pc, #60]	; (801d458 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801d41a:	4810      	ldr	r0, [pc, #64]	; (801d45c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d41c:	f007 f8de 	bl	80245dc <__aeabi_atexit>
 801d420:	4c0f      	ldr	r4, [pc, #60]	; (801d460 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801d422:	7823      	ldrb	r3, [r4, #0]
 801d424:	f3bf 8f5b 	dmb	ish
 801d428:	07db      	lsls	r3, r3, #31
 801d42a:	d40b      	bmi.n	801d444 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d42c:	4620      	mov	r0, r4
 801d42e:	f007 f8dc 	bl	80245ea <__cxa_guard_acquire>
 801d432:	b138      	cbz	r0, 801d444 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801d434:	4620      	mov	r0, r4
 801d436:	f007 f8e4 	bl	8024602 <__cxa_guard_release>
 801d43a:	4a06      	ldr	r2, [pc, #24]	; (801d454 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801d43c:	4909      	ldr	r1, [pc, #36]	; (801d464 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801d43e:	480a      	ldr	r0, [pc, #40]	; (801d468 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d440:	f007 f8cc 	bl	80245dc <__aeabi_atexit>
 801d444:	4b05      	ldr	r3, [pc, #20]	; (801d45c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801d446:	652b      	str	r3, [r5, #80]	; 0x50
 801d448:	4b07      	ldr	r3, [pc, #28]	; (801d468 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801d44a:	656b      	str	r3, [r5, #84]	; 0x54
 801d44c:	bd38      	pop	{r3, r4, r5, pc}
 801d44e:	bf00      	nop
 801d450:	24041bf8 	.word	0x24041bf8
 801d454:	24000000 	.word	0x24000000
 801d458:	0801b303 	.word	0x0801b303
 801d45c:	2400009c 	.word	0x2400009c
 801d460:	24041bfc 	.word	0x24041bfc
 801d464:	0801b301 	.word	0x0801b301
 801d468:	240000a0 	.word	0x240000a0

0801d46c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801d46c:	b538      	push	{r3, r4, r5, lr}
 801d46e:	4c15      	ldr	r4, [pc, #84]	; (801d4c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801d470:	4605      	mov	r5, r0
 801d472:	7823      	ldrb	r3, [r4, #0]
 801d474:	f3bf 8f5b 	dmb	ish
 801d478:	07da      	lsls	r2, r3, #31
 801d47a:	d40b      	bmi.n	801d494 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d47c:	4620      	mov	r0, r4
 801d47e:	f007 f8b4 	bl	80245ea <__cxa_guard_acquire>
 801d482:	b138      	cbz	r0, 801d494 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801d484:	4620      	mov	r0, r4
 801d486:	f007 f8bc 	bl	8024602 <__cxa_guard_release>
 801d48a:	4a0f      	ldr	r2, [pc, #60]	; (801d4c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d48c:	490f      	ldr	r1, [pc, #60]	; (801d4cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801d48e:	4810      	ldr	r0, [pc, #64]	; (801d4d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d490:	f007 f8a4 	bl	80245dc <__aeabi_atexit>
 801d494:	4c0f      	ldr	r4, [pc, #60]	; (801d4d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801d496:	7823      	ldrb	r3, [r4, #0]
 801d498:	f3bf 8f5b 	dmb	ish
 801d49c:	07db      	lsls	r3, r3, #31
 801d49e:	d40b      	bmi.n	801d4b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d4a0:	4620      	mov	r0, r4
 801d4a2:	f007 f8a2 	bl	80245ea <__cxa_guard_acquire>
 801d4a6:	b138      	cbz	r0, 801d4b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801d4a8:	4620      	mov	r0, r4
 801d4aa:	f007 f8aa 	bl	8024602 <__cxa_guard_release>
 801d4ae:	4a06      	ldr	r2, [pc, #24]	; (801d4c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801d4b0:	4909      	ldr	r1, [pc, #36]	; (801d4d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801d4b2:	480a      	ldr	r0, [pc, #40]	; (801d4dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d4b4:	f007 f892 	bl	80245dc <__aeabi_atexit>
 801d4b8:	4b05      	ldr	r3, [pc, #20]	; (801d4d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801d4ba:	64ab      	str	r3, [r5, #72]	; 0x48
 801d4bc:	4b07      	ldr	r3, [pc, #28]	; (801d4dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801d4be:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d4c0:	bd38      	pop	{r3, r4, r5, pc}
 801d4c2:	bf00      	nop
 801d4c4:	24041c00 	.word	0x24041c00
 801d4c8:	24000000 	.word	0x24000000
 801d4cc:	0801b307 	.word	0x0801b307
 801d4d0:	240000a4 	.word	0x240000a4
 801d4d4:	24041c04 	.word	0x24041c04
 801d4d8:	0801b305 	.word	0x0801b305
 801d4dc:	240000a8 	.word	0x240000a8

0801d4e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801d4e0:	b538      	push	{r3, r4, r5, lr}
 801d4e2:	4c15      	ldr	r4, [pc, #84]	; (801d538 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801d4e4:	4605      	mov	r5, r0
 801d4e6:	7823      	ldrb	r3, [r4, #0]
 801d4e8:	f3bf 8f5b 	dmb	ish
 801d4ec:	07da      	lsls	r2, r3, #31
 801d4ee:	d40b      	bmi.n	801d508 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d4f0:	4620      	mov	r0, r4
 801d4f2:	f007 f87a 	bl	80245ea <__cxa_guard_acquire>
 801d4f6:	b138      	cbz	r0, 801d508 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801d4f8:	4620      	mov	r0, r4
 801d4fa:	f007 f882 	bl	8024602 <__cxa_guard_release>
 801d4fe:	4a0f      	ldr	r2, [pc, #60]	; (801d53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d500:	490f      	ldr	r1, [pc, #60]	; (801d540 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801d502:	4810      	ldr	r0, [pc, #64]	; (801d544 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d504:	f007 f86a 	bl	80245dc <__aeabi_atexit>
 801d508:	4c0f      	ldr	r4, [pc, #60]	; (801d548 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801d50a:	7823      	ldrb	r3, [r4, #0]
 801d50c:	f3bf 8f5b 	dmb	ish
 801d510:	07db      	lsls	r3, r3, #31
 801d512:	d40b      	bmi.n	801d52c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d514:	4620      	mov	r0, r4
 801d516:	f007 f868 	bl	80245ea <__cxa_guard_acquire>
 801d51a:	b138      	cbz	r0, 801d52c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801d51c:	4620      	mov	r0, r4
 801d51e:	f007 f870 	bl	8024602 <__cxa_guard_release>
 801d522:	4a06      	ldr	r2, [pc, #24]	; (801d53c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801d524:	4909      	ldr	r1, [pc, #36]	; (801d54c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801d526:	480a      	ldr	r0, [pc, #40]	; (801d550 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d528:	f007 f858 	bl	80245dc <__aeabi_atexit>
 801d52c:	4b05      	ldr	r3, [pc, #20]	; (801d544 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801d52e:	642b      	str	r3, [r5, #64]	; 0x40
 801d530:	4b07      	ldr	r3, [pc, #28]	; (801d550 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801d532:	646b      	str	r3, [r5, #68]	; 0x44
 801d534:	bd38      	pop	{r3, r4, r5, pc}
 801d536:	bf00      	nop
 801d538:	24041bc8 	.word	0x24041bc8
 801d53c:	24000000 	.word	0x24000000
 801d540:	0801b30b 	.word	0x0801b30b
 801d544:	2400006c 	.word	0x2400006c
 801d548:	24041bcc 	.word	0x24041bcc
 801d54c:	0801b309 	.word	0x0801b309
 801d550:	24000070 	.word	0x24000070

0801d554 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801d554:	b538      	push	{r3, r4, r5, lr}
 801d556:	4c15      	ldr	r4, [pc, #84]	; (801d5ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801d558:	4605      	mov	r5, r0
 801d55a:	7823      	ldrb	r3, [r4, #0]
 801d55c:	f3bf 8f5b 	dmb	ish
 801d560:	07da      	lsls	r2, r3, #31
 801d562:	d40b      	bmi.n	801d57c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d564:	4620      	mov	r0, r4
 801d566:	f007 f840 	bl	80245ea <__cxa_guard_acquire>
 801d56a:	b138      	cbz	r0, 801d57c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801d56c:	4620      	mov	r0, r4
 801d56e:	f007 f848 	bl	8024602 <__cxa_guard_release>
 801d572:	4a0f      	ldr	r2, [pc, #60]	; (801d5b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d574:	490f      	ldr	r1, [pc, #60]	; (801d5b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801d576:	4810      	ldr	r0, [pc, #64]	; (801d5b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d578:	f007 f830 	bl	80245dc <__aeabi_atexit>
 801d57c:	4c0f      	ldr	r4, [pc, #60]	; (801d5bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801d57e:	7823      	ldrb	r3, [r4, #0]
 801d580:	f3bf 8f5b 	dmb	ish
 801d584:	07db      	lsls	r3, r3, #31
 801d586:	d40b      	bmi.n	801d5a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d588:	4620      	mov	r0, r4
 801d58a:	f007 f82e 	bl	80245ea <__cxa_guard_acquire>
 801d58e:	b138      	cbz	r0, 801d5a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801d590:	4620      	mov	r0, r4
 801d592:	f007 f836 	bl	8024602 <__cxa_guard_release>
 801d596:	4a06      	ldr	r2, [pc, #24]	; (801d5b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801d598:	4909      	ldr	r1, [pc, #36]	; (801d5c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801d59a:	480a      	ldr	r0, [pc, #40]	; (801d5c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d59c:	f007 f81e 	bl	80245dc <__aeabi_atexit>
 801d5a0:	4b05      	ldr	r3, [pc, #20]	; (801d5b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801d5a2:	63ab      	str	r3, [r5, #56]	; 0x38
 801d5a4:	4b07      	ldr	r3, [pc, #28]	; (801d5c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801d5a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d5a8:	bd38      	pop	{r3, r4, r5, pc}
 801d5aa:	bf00      	nop
 801d5ac:	24041be8 	.word	0x24041be8
 801d5b0:	24000000 	.word	0x24000000
 801d5b4:	0801b30f 	.word	0x0801b30f
 801d5b8:	2400008c 	.word	0x2400008c
 801d5bc:	24041bec 	.word	0x24041bec
 801d5c0:	0801b30d 	.word	0x0801b30d
 801d5c4:	24000090 	.word	0x24000090

0801d5c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801d5c8:	b510      	push	{r4, lr}
 801d5ca:	4604      	mov	r4, r0
 801d5cc:	f7ff ff14 	bl	801d3f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801d5d0:	4620      	mov	r0, r4
 801d5d2:	f7ff ff85 	bl	801d4e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801d5d6:	4620      	mov	r0, r4
 801d5d8:	f7ff ff48 	bl	801d46c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801d5dc:	4620      	mov	r0, r4
 801d5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5e2:	f7ff bfb7 	b.w	801d554 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801d5e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d5e8:	b538      	push	{r3, r4, r5, lr}
 801d5ea:	4c15      	ldr	r4, [pc, #84]	; (801d640 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d5ec:	4605      	mov	r5, r0
 801d5ee:	7823      	ldrb	r3, [r4, #0]
 801d5f0:	f3bf 8f5b 	dmb	ish
 801d5f4:	07da      	lsls	r2, r3, #31
 801d5f6:	d40b      	bmi.n	801d610 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	f006 fff6 	bl	80245ea <__cxa_guard_acquire>
 801d5fe:	b138      	cbz	r0, 801d610 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d600:	4620      	mov	r0, r4
 801d602:	f006 fffe 	bl	8024602 <__cxa_guard_release>
 801d606:	4a0f      	ldr	r2, [pc, #60]	; (801d644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d608:	490f      	ldr	r1, [pc, #60]	; (801d648 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d60a:	4810      	ldr	r0, [pc, #64]	; (801d64c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d60c:	f006 ffe6 	bl	80245dc <__aeabi_atexit>
 801d610:	4c0f      	ldr	r4, [pc, #60]	; (801d650 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d612:	7823      	ldrb	r3, [r4, #0]
 801d614:	f3bf 8f5b 	dmb	ish
 801d618:	07db      	lsls	r3, r3, #31
 801d61a:	d40b      	bmi.n	801d634 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d61c:	4620      	mov	r0, r4
 801d61e:	f006 ffe4 	bl	80245ea <__cxa_guard_acquire>
 801d622:	b138      	cbz	r0, 801d634 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d624:	4620      	mov	r0, r4
 801d626:	f006 ffec 	bl	8024602 <__cxa_guard_release>
 801d62a:	4a06      	ldr	r2, [pc, #24]	; (801d644 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d62c:	4909      	ldr	r1, [pc, #36]	; (801d654 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d62e:	480a      	ldr	r0, [pc, #40]	; (801d658 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d630:	f006 ffd4 	bl	80245dc <__aeabi_atexit>
 801d634:	4b05      	ldr	r3, [pc, #20]	; (801d64c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d636:	662b      	str	r3, [r5, #96]	; 0x60
 801d638:	4b07      	ldr	r3, [pc, #28]	; (801d658 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d63a:	666b      	str	r3, [r5, #100]	; 0x64
 801d63c:	bd38      	pop	{r3, r4, r5, pc}
 801d63e:	bf00      	nop
 801d640:	24041bd0 	.word	0x24041bd0
 801d644:	24000000 	.word	0x24000000
 801d648:	0801b2fb 	.word	0x0801b2fb
 801d64c:	24000074 	.word	0x24000074
 801d650:	24041bd4 	.word	0x24041bd4
 801d654:	0801b2f9 	.word	0x0801b2f9
 801d658:	24000078 	.word	0x24000078

0801d65c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d65c:	b538      	push	{r3, r4, r5, lr}
 801d65e:	4c15      	ldr	r4, [pc, #84]	; (801d6b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d660:	4605      	mov	r5, r0
 801d662:	7823      	ldrb	r3, [r4, #0]
 801d664:	f3bf 8f5b 	dmb	ish
 801d668:	07da      	lsls	r2, r3, #31
 801d66a:	d40b      	bmi.n	801d684 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d66c:	4620      	mov	r0, r4
 801d66e:	f006 ffbc 	bl	80245ea <__cxa_guard_acquire>
 801d672:	b138      	cbz	r0, 801d684 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d674:	4620      	mov	r0, r4
 801d676:	f006 ffc4 	bl	8024602 <__cxa_guard_release>
 801d67a:	4a0f      	ldr	r2, [pc, #60]	; (801d6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d67c:	490f      	ldr	r1, [pc, #60]	; (801d6bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d67e:	4810      	ldr	r0, [pc, #64]	; (801d6c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d680:	f006 ffac 	bl	80245dc <__aeabi_atexit>
 801d684:	4c0f      	ldr	r4, [pc, #60]	; (801d6c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d686:	7823      	ldrb	r3, [r4, #0]
 801d688:	f3bf 8f5b 	dmb	ish
 801d68c:	07db      	lsls	r3, r3, #31
 801d68e:	d40b      	bmi.n	801d6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d690:	4620      	mov	r0, r4
 801d692:	f006 ffaa 	bl	80245ea <__cxa_guard_acquire>
 801d696:	b138      	cbz	r0, 801d6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d698:	4620      	mov	r0, r4
 801d69a:	f006 ffb2 	bl	8024602 <__cxa_guard_release>
 801d69e:	4a06      	ldr	r2, [pc, #24]	; (801d6b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d6a0:	4909      	ldr	r1, [pc, #36]	; (801d6c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d6a2:	480a      	ldr	r0, [pc, #40]	; (801d6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d6a4:	f006 ff9a 	bl	80245dc <__aeabi_atexit>
 801d6a8:	4b05      	ldr	r3, [pc, #20]	; (801d6c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d6aa:	65ab      	str	r3, [r5, #88]	; 0x58
 801d6ac:	4b07      	ldr	r3, [pc, #28]	; (801d6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d6ae:	65eb      	str	r3, [r5, #92]	; 0x5c
 801d6b0:	bd38      	pop	{r3, r4, r5, pc}
 801d6b2:	bf00      	nop
 801d6b4:	24041ba8 	.word	0x24041ba8
 801d6b8:	24000000 	.word	0x24000000
 801d6bc:	0801b2ff 	.word	0x0801b2ff
 801d6c0:	2400004c 	.word	0x2400004c
 801d6c4:	24041bac 	.word	0x24041bac
 801d6c8:	0801b2fd 	.word	0x0801b2fd
 801d6cc:	24000050 	.word	0x24000050

0801d6d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801d6d0:	b510      	push	{r4, lr}
 801d6d2:	4604      	mov	r4, r0
 801d6d4:	f7ff ff88 	bl	801d5e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d6d8:	4620      	mov	r0, r4
 801d6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6de:	f7ff bfbd 	b.w	801d65c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801d6e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801d6e4:	b538      	push	{r3, r4, r5, lr}
 801d6e6:	4c15      	ldr	r4, [pc, #84]	; (801d73c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801d6e8:	4605      	mov	r5, r0
 801d6ea:	7823      	ldrb	r3, [r4, #0]
 801d6ec:	f3bf 8f5b 	dmb	ish
 801d6f0:	07da      	lsls	r2, r3, #31
 801d6f2:	d40b      	bmi.n	801d70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d6f4:	4620      	mov	r0, r4
 801d6f6:	f006 ff78 	bl	80245ea <__cxa_guard_acquire>
 801d6fa:	b138      	cbz	r0, 801d70c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	f006 ff80 	bl	8024602 <__cxa_guard_release>
 801d702:	4a0f      	ldr	r2, [pc, #60]	; (801d740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d704:	490f      	ldr	r1, [pc, #60]	; (801d744 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801d706:	4810      	ldr	r0, [pc, #64]	; (801d748 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d708:	f006 ff68 	bl	80245dc <__aeabi_atexit>
 801d70c:	4c0f      	ldr	r4, [pc, #60]	; (801d74c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801d70e:	7823      	ldrb	r3, [r4, #0]
 801d710:	f3bf 8f5b 	dmb	ish
 801d714:	07db      	lsls	r3, r3, #31
 801d716:	d40b      	bmi.n	801d730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d718:	4620      	mov	r0, r4
 801d71a:	f006 ff66 	bl	80245ea <__cxa_guard_acquire>
 801d71e:	b138      	cbz	r0, 801d730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d720:	4620      	mov	r0, r4
 801d722:	f006 ff6e 	bl	8024602 <__cxa_guard_release>
 801d726:	4a06      	ldr	r2, [pc, #24]	; (801d740 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d728:	4909      	ldr	r1, [pc, #36]	; (801d750 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801d72a:	480a      	ldr	r0, [pc, #40]	; (801d754 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d72c:	f006 ff56 	bl	80245dc <__aeabi_atexit>
 801d730:	4b05      	ldr	r3, [pc, #20]	; (801d748 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d732:	672b      	str	r3, [r5, #112]	; 0x70
 801d734:	4b07      	ldr	r3, [pc, #28]	; (801d754 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d736:	676b      	str	r3, [r5, #116]	; 0x74
 801d738:	bd38      	pop	{r3, r4, r5, pc}
 801d73a:	bf00      	nop
 801d73c:	24041ba0 	.word	0x24041ba0
 801d740:	24000000 	.word	0x24000000
 801d744:	0801b2f3 	.word	0x0801b2f3
 801d748:	24000044 	.word	0x24000044
 801d74c:	24041ba4 	.word	0x24041ba4
 801d750:	0801b2f1 	.word	0x0801b2f1
 801d754:	24000048 	.word	0x24000048

0801d758 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d758:	b538      	push	{r3, r4, r5, lr}
 801d75a:	4c15      	ldr	r4, [pc, #84]	; (801d7b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d75c:	4605      	mov	r5, r0
 801d75e:	7823      	ldrb	r3, [r4, #0]
 801d760:	f3bf 8f5b 	dmb	ish
 801d764:	07da      	lsls	r2, r3, #31
 801d766:	d40b      	bmi.n	801d780 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d768:	4620      	mov	r0, r4
 801d76a:	f006 ff3e 	bl	80245ea <__cxa_guard_acquire>
 801d76e:	b138      	cbz	r0, 801d780 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d770:	4620      	mov	r0, r4
 801d772:	f006 ff46 	bl	8024602 <__cxa_guard_release>
 801d776:	4a0f      	ldr	r2, [pc, #60]	; (801d7b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d778:	490f      	ldr	r1, [pc, #60]	; (801d7b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d77a:	4810      	ldr	r0, [pc, #64]	; (801d7bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d77c:	f006 ff2e 	bl	80245dc <__aeabi_atexit>
 801d780:	4c0f      	ldr	r4, [pc, #60]	; (801d7c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d782:	7823      	ldrb	r3, [r4, #0]
 801d784:	f3bf 8f5b 	dmb	ish
 801d788:	07db      	lsls	r3, r3, #31
 801d78a:	d40b      	bmi.n	801d7a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d78c:	4620      	mov	r0, r4
 801d78e:	f006 ff2c 	bl	80245ea <__cxa_guard_acquire>
 801d792:	b138      	cbz	r0, 801d7a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d794:	4620      	mov	r0, r4
 801d796:	f006 ff34 	bl	8024602 <__cxa_guard_release>
 801d79a:	4a06      	ldr	r2, [pc, #24]	; (801d7b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d79c:	4909      	ldr	r1, [pc, #36]	; (801d7c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d79e:	480a      	ldr	r0, [pc, #40]	; (801d7c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d7a0:	f006 ff1c 	bl	80245dc <__aeabi_atexit>
 801d7a4:	4b05      	ldr	r3, [pc, #20]	; (801d7bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d7a6:	66ab      	str	r3, [r5, #104]	; 0x68
 801d7a8:	4b07      	ldr	r3, [pc, #28]	; (801d7c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d7aa:	66eb      	str	r3, [r5, #108]	; 0x6c
 801d7ac:	bd38      	pop	{r3, r4, r5, pc}
 801d7ae:	bf00      	nop
 801d7b0:	24041b98 	.word	0x24041b98
 801d7b4:	24000000 	.word	0x24000000
 801d7b8:	0801b2f7 	.word	0x0801b2f7
 801d7bc:	2400003c 	.word	0x2400003c
 801d7c0:	24041b9c 	.word	0x24041b9c
 801d7c4:	0801b2f5 	.word	0x0801b2f5
 801d7c8:	24000040 	.word	0x24000040

0801d7cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801d7cc:	b510      	push	{r4, lr}
 801d7ce:	4604      	mov	r4, r0
 801d7d0:	f7ff ff88 	bl	801d6e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7da:	f7ff bfbd 	b.w	801d758 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801d7de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801d7de:	b510      	push	{r4, lr}
 801d7e0:	4604      	mov	r4, r0
 801d7e2:	f7ff fff3 	bl	801d7cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ff ff72 	bl	801d6d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801d7ec:	4620      	mov	r0, r4
 801d7ee:	f7ff fdf9 	bl	801d3e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	f7ff fcfa 	bl	801d1ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801d7f8:	4620      	mov	r0, r4
 801d7fa:	f7ff fd75 	bl	801d2e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801d7fe:	4620      	mov	r0, r4
 801d800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d804:	f7ff bee0 	b.w	801d5c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801d808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801d808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d80c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801d810:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801d814:	2d00      	cmp	r5, #0
 801d816:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801d81a:	fb05 4c0e 	mla	ip, r5, lr, r4
 801d81e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801d822:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801d826:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801d82a:	eb02 0a0c 	add.w	sl, r2, ip
 801d82e:	8808      	ldrh	r0, [r1, #0]
 801d830:	f2c0 80b0 	blt.w	801d994 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801d834:	45ab      	cmp	fp, r5
 801d836:	f340 80ad 	ble.w	801d994 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801d83a:	2c00      	cmp	r4, #0
 801d83c:	f2c0 80a8 	blt.w	801d990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801d840:	45a6      	cmp	lr, r4
 801d842:	f340 80a5 	ble.w	801d990 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801d846:	f812 200c 	ldrb.w	r2, [r2, ip]
 801d84a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801d84e:	1c62      	adds	r2, r4, #1
 801d850:	f100 80a3 	bmi.w	801d99a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d854:	4596      	cmp	lr, r2
 801d856:	f340 80a0 	ble.w	801d99a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d85a:	f1b9 0f00 	cmp.w	r9, #0
 801d85e:	f000 809c 	beq.w	801d99a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801d862:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801d866:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801d86a:	3501      	adds	r5, #1
 801d86c:	f100 8099 	bmi.w	801d9a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d870:	45ab      	cmp	fp, r5
 801d872:	f340 8096 	ble.w	801d9a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d876:	2f00      	cmp	r7, #0
 801d878:	f000 8093 	beq.w	801d9a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801d87c:	2c00      	cmp	r4, #0
 801d87e:	f2c0 808e 	blt.w	801d99e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801d882:	45a6      	cmp	lr, r4
 801d884:	f340 808b 	ble.w	801d99e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801d888:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801d88c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801d890:	3401      	adds	r4, #1
 801d892:	f100 8089 	bmi.w	801d9a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d896:	45a6      	cmp	lr, r4
 801d898:	f340 8086 	ble.w	801d9a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d89c:	f1b9 0f00 	cmp.w	r9, #0
 801d8a0:	f000 8082 	beq.w	801d9a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801d8a4:	44d6      	add	lr, sl
 801d8a6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d8aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801d8ae:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801d8b2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801d8b6:	fb19 fe07 	smulbb	lr, r9, r7
 801d8ba:	f1c7 0210 	rsb	r2, r7, #16
 801d8be:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d8c2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801d8c6:	eba2 0209 	sub.w	r2, r2, r9
 801d8ca:	ea44 0808 	orr.w	r8, r4, r8
 801d8ce:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801d8d2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d8d6:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801d8da:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d8de:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801d8e2:	ea44 0c0c 	orr.w	ip, r4, ip
 801d8e6:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801d8ea:	fb04 f40c 	mul.w	r4, r4, ip
 801d8ee:	fb02 4808 	mla	r8, r2, r8, r4
 801d8f2:	041a      	lsls	r2, r3, #16
 801d8f4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d8f8:	b2b4      	uxth	r4, r6
 801d8fa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d8fe:	43f6      	mvns	r6, r6
 801d900:	4313      	orrs	r3, r2
 801d902:	042a      	lsls	r2, r5, #16
 801d904:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801d908:	b2f6      	uxtb	r6, r6
 801d90a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d90e:	fb0e 8303 	mla	r3, lr, r3, r8
 801d912:	432a      	orrs	r2, r5
 801d914:	fb07 3202 	mla	r2, r7, r2, r3
 801d918:	10c7      	asrs	r7, r0, #3
 801d91a:	0d53      	lsrs	r3, r2, #21
 801d91c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d920:	0952      	lsrs	r2, r2, #5
 801d922:	fb17 f706 	smulbb	r7, r7, r6
 801d926:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d92a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d92e:	431a      	orrs	r2, r3
 801d930:	b293      	uxth	r3, r2
 801d932:	1202      	asrs	r2, r0, #8
 801d934:	121d      	asrs	r5, r3, #8
 801d936:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d93a:	00c0      	lsls	r0, r0, #3
 801d93c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d940:	fb12 f206 	smulbb	r2, r2, r6
 801d944:	b2c0      	uxtb	r0, r0
 801d946:	fb05 2504 	mla	r5, r5, r4, r2
 801d94a:	10da      	asrs	r2, r3, #3
 801d94c:	fb10 f006 	smulbb	r0, r0, r6
 801d950:	00db      	lsls	r3, r3, #3
 801d952:	b2ad      	uxth	r5, r5
 801d954:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d958:	b2db      	uxtb	r3, r3
 801d95a:	fb02 7204 	mla	r2, r2, r4, r7
 801d95e:	fb03 0004 	mla	r0, r3, r4, r0
 801d962:	1c6b      	adds	r3, r5, #1
 801d964:	b292      	uxth	r2, r2
 801d966:	b280      	uxth	r0, r0
 801d968:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d96c:	1c43      	adds	r3, r0, #1
 801d96e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801d972:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d976:	1c50      	adds	r0, r2, #1
 801d978:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d97c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d980:	0952      	lsrs	r2, r2, #5
 801d982:	432b      	orrs	r3, r5
 801d984:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d988:	4313      	orrs	r3, r2
 801d98a:	800b      	strh	r3, [r1, #0]
 801d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d990:	4680      	mov	r8, r0
 801d992:	e75c      	b.n	801d84e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801d994:	4684      	mov	ip, r0
 801d996:	4680      	mov	r8, r0
 801d998:	e767      	b.n	801d86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801d99a:	4684      	mov	ip, r0
 801d99c:	e765      	b.n	801d86a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801d99e:	4605      	mov	r5, r0
 801d9a0:	e776      	b.n	801d890 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	4605      	mov	r5, r0
 801d9a6:	e782      	b.n	801d8ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801d9a8:	4603      	mov	r3, r0
 801d9aa:	e780      	b.n	801d8ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801d9ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9b0:	b099      	sub	sp, #100	; 0x64
 801d9b2:	9215      	str	r2, [sp, #84]	; 0x54
 801d9b4:	9309      	str	r3, [sp, #36]	; 0x24
 801d9b6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801d9b8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801d9bc:	9016      	str	r0, [sp, #88]	; 0x58
 801d9be:	930d      	str	r3, [sp, #52]	; 0x34
 801d9c0:	6850      	ldr	r0, [r2, #4]
 801d9c2:	910c      	str	r1, [sp, #48]	; 0x30
 801d9c4:	6812      	ldr	r2, [r2, #0]
 801d9c6:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801d9ca:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801d9ce:	fb00 1303 	mla	r3, r0, r3, r1
 801d9d2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801d9d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	930b      	str	r3, [sp, #44]	; 0x2c
 801d9dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d9de:	685e      	ldr	r6, [r3, #4]
 801d9e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9e2:	3604      	adds	r6, #4
 801d9e4:	43db      	mvns	r3, r3
 801d9e6:	b2db      	uxtb	r3, r3
 801d9e8:	930a      	str	r3, [sp, #40]	; 0x28
 801d9ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	dc03      	bgt.n	801d9f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d9f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	f340 8225 	ble.w	801de42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801d9f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d9fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d9fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801da02:	1e48      	subs	r0, r1, #1
 801da04:	1e57      	subs	r7, r2, #1
 801da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da08:	2b00      	cmp	r3, #0
 801da0a:	f340 80e3 	ble.w	801dbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801da0e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801da12:	ea4f 4325 	mov.w	r3, r5, asr #16
 801da16:	d406      	bmi.n	801da26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801da18:	4584      	cmp	ip, r0
 801da1a:	da04      	bge.n	801da26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	db02      	blt.n	801da26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801da20:	42bb      	cmp	r3, r7
 801da22:	f2c0 80d8 	blt.w	801dbd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801da26:	f11c 0c01 	adds.w	ip, ip, #1
 801da2a:	f100 80c9 	bmi.w	801dbc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da2e:	4561      	cmp	r1, ip
 801da30:	f2c0 80c6 	blt.w	801dbc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da34:	3301      	adds	r3, #1
 801da36:	f100 80c3 	bmi.w	801dbc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da3a:	429a      	cmp	r2, r3
 801da3c:	f2c0 80c0 	blt.w	801dbc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801da40:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801da44:	4647      	mov	r7, r8
 801da46:	f1bb 0f00 	cmp.w	fp, #0
 801da4a:	f340 80e3 	ble.w	801dc14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801da4e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801da50:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801da54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801da56:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801da5a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801da5e:	ea5f 422a 	movs.w	r2, sl, asr #16
 801da62:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801da66:	689b      	ldr	r3, [r3, #8]
 801da68:	f100 8121 	bmi.w	801dcae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801da6c:	f103 39ff 	add.w	r9, r3, #4294967295
 801da70:	454a      	cmp	r2, r9
 801da72:	f280 811c 	bge.w	801dcae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801da76:	f1bc 0f00 	cmp.w	ip, #0
 801da7a:	f2c0 8118 	blt.w	801dcae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801da7e:	f10e 39ff 	add.w	r9, lr, #4294967295
 801da82:	45cc      	cmp	ip, r9
 801da84:	f280 8113 	bge.w	801dcae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801da88:	b21b      	sxth	r3, r3
 801da8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801da8c:	fb0c 2203 	mla	r2, ip, r3, r2
 801da90:	eb04 0902 	add.w	r9, r4, r2
 801da94:	5ca2      	ldrb	r2, [r4, r2]
 801da96:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801da9a:	2800      	cmp	r0, #0
 801da9c:	f000 80fe 	beq.w	801dc9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801daa0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801daa4:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801daa8:	9211      	str	r2, [sp, #68]	; 0x44
 801daaa:	b151      	cbz	r1, 801dac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801daac:	eb09 0203 	add.w	r2, r9, r3
 801dab0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801dab4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dab8:	930f      	str	r3, [sp, #60]	; 0x3c
 801daba:	7853      	ldrb	r3, [r2, #1]
 801dabc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dac0:	9312      	str	r3, [sp, #72]	; 0x48
 801dac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dac4:	fb10 f201 	smulbb	r2, r0, r1
 801dac8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801daca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801dace:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801dad2:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801dad6:	10d2      	asrs	r2, r2, #3
 801dad8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801dadc:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801dae0:	ea4c 0c03 	orr.w	ip, ip, r3
 801dae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dae6:	041b      	lsls	r3, r3, #16
 801dae8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801daec:	4323      	orrs	r3, r4
 801daee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801daf0:	4353      	muls	r3, r2
 801daf2:	fb09 330c 	mla	r3, r9, ip, r3
 801daf6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801dafa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801dafe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801db02:	ea4c 0e0e 	orr.w	lr, ip, lr
 801db06:	f1c1 0c10 	rsb	ip, r1, #16
 801db0a:	ebac 0c00 	sub.w	ip, ip, r0
 801db0e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801db12:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801db16:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801db1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db1c:	0418      	lsls	r0, r3, #16
 801db1e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801db22:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801db26:	4318      	orrs	r0, r3
 801db28:	fb02 c200 	mla	r2, r2, r0, ip
 801db2c:	8838      	ldrh	r0, [r7, #0]
 801db2e:	0d53      	lsrs	r3, r2, #21
 801db30:	0952      	lsrs	r2, r2, #5
 801db32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db36:	1201      	asrs	r1, r0, #8
 801db38:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801db3c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801db40:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801db44:	00c0      	lsls	r0, r0, #3
 801db46:	431a      	orrs	r2, r3
 801db48:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801db4c:	fb11 f104 	smulbb	r1, r1, r4
 801db50:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801db54:	b292      	uxth	r2, r2
 801db56:	fb1e fe04 	smulbb	lr, lr, r4
 801db5a:	b2c0      	uxtb	r0, r0
 801db5c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801db60:	fb10 f004 	smulbb	r0, r0, r4
 801db64:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801db68:	fb0c 1c03 	mla	ip, ip, r3, r1
 801db6c:	10d1      	asrs	r1, r2, #3
 801db6e:	00d2      	lsls	r2, r2, #3
 801db70:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801db74:	fa1f fc8c 	uxth.w	ip, ip
 801db78:	b2d2      	uxtb	r2, r2
 801db7a:	fb01 e103 	mla	r1, r1, r3, lr
 801db7e:	fb02 0303 	mla	r3, r2, r3, r0
 801db82:	b289      	uxth	r1, r1
 801db84:	b29a      	uxth	r2, r3
 801db86:	f10c 0301 	add.w	r3, ip, #1
 801db8a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801db8e:	1c53      	adds	r3, r2, #1
 801db90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db94:	1c4a      	adds	r2, r1, #1
 801db96:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801db9a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801db9e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801dba2:	0949      	lsrs	r1, r1, #5
 801dba4:	ea43 030c 	orr.w	r3, r3, ip
 801dba8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801dbac:	430b      	orrs	r3, r1
 801dbae:	803b      	strh	r3, [r7, #0]
 801dbb0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dbb2:	3702      	adds	r7, #2
 801dbb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dbb8:	449a      	add	sl, r3
 801dbba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dbbc:	441d      	add	r5, r3
 801dbbe:	e742      	b.n	801da46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dbc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dbc2:	f108 0802 	add.w	r8, r8, #2
 801dbc6:	449a      	add	sl, r3
 801dbc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dbca:	441d      	add	r5, r3
 801dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbce:	3b01      	subs	r3, #1
 801dbd0:	9309      	str	r3, [sp, #36]	; 0x24
 801dbd2:	e718      	b.n	801da06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801dbd4:	d023      	beq.n	801dc1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbd8:	9825      	ldr	r0, [sp, #148]	; 0x94
 801dbda:	3b01      	subs	r3, #1
 801dbdc:	fb00 a003 	mla	r0, r0, r3, sl
 801dbe0:	1400      	asrs	r0, r0, #16
 801dbe2:	f53f af2d 	bmi.w	801da40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dbe6:	3901      	subs	r1, #1
 801dbe8:	4288      	cmp	r0, r1
 801dbea:	f6bf af29 	bge.w	801da40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dbee:	9926      	ldr	r1, [sp, #152]	; 0x98
 801dbf0:	fb01 5303 	mla	r3, r1, r3, r5
 801dbf4:	141b      	asrs	r3, r3, #16
 801dbf6:	f53f af23 	bmi.w	801da40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dbfa:	3a01      	subs	r2, #1
 801dbfc:	4293      	cmp	r3, r2
 801dbfe:	f6bf af1f 	bge.w	801da40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dc02:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801dc06:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801dc0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801dc0e:	f1be 0f00 	cmp.w	lr, #0
 801dc12:	dc6c      	bgt.n	801dcee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801dc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc16:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dc1a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801dc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	f340 810e 	ble.w	801de42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801dc26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dc2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc34:	eef0 6a62 	vmov.f32	s13, s5
 801dc38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dc3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc44:	ee16 aa90 	vmov	sl, s13
 801dc48:	eef0 6a43 	vmov.f32	s13, s6
 801dc4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc50:	ee16 5a90 	vmov	r5, s13
 801dc54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc6c:	ee12 2a90 	vmov	r2, s5
 801dc70:	eef0 2a47 	vmov.f32	s5, s14
 801dc74:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc78:	ee13 2a10 	vmov	r2, s6
 801dc7c:	9325      	str	r3, [sp, #148]	; 0x94
 801dc7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dc80:	eeb0 3a67 	vmov.f32	s6, s15
 801dc84:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc88:	9326      	str	r3, [sp, #152]	; 0x98
 801dc8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dc8e:	3b01      	subs	r3, #1
 801dc90:	930c      	str	r3, [sp, #48]	; 0x30
 801dc92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dc94:	bf08      	it	eq
 801dc96:	4613      	moveq	r3, r2
 801dc98:	9309      	str	r3, [sp, #36]	; 0x24
 801dc9a:	e6a6      	b.n	801d9ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801dc9c:	2900      	cmp	r1, #0
 801dc9e:	f43f af10 	beq.w	801dac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801dca2:	f819 3003 	ldrb.w	r3, [r9, r3]
 801dca6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dcaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcac:	e709      	b.n	801dac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801dcae:	f112 0901 	adds.w	r9, r2, #1
 801dcb2:	f53f af7d 	bmi.w	801dbb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dcb6:	454b      	cmp	r3, r9
 801dcb8:	f6ff af7a 	blt.w	801dbb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dcbc:	f11c 0901 	adds.w	r9, ip, #1
 801dcc0:	f53f af76 	bmi.w	801dbb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dcc4:	45ce      	cmp	lr, r9
 801dcc6:	f6ff af73 	blt.w	801dbb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dcca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dccc:	b21b      	sxth	r3, r3
 801dcce:	9202      	str	r2, [sp, #8]
 801dcd0:	fa0f f28e 	sxth.w	r2, lr
 801dcd4:	9300      	str	r3, [sp, #0]
 801dcd6:	4633      	mov	r3, r6
 801dcd8:	9201      	str	r2, [sp, #4]
 801dcda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dcdc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dce0:	e9cd c003 	strd	ip, r0, [sp, #12]
 801dce4:	4639      	mov	r1, r7
 801dce6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801dce8:	f7ff fd8e 	bl	801d808 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801dcec:	e760      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801dcee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801dcf0:	ea4f 422a 	mov.w	r2, sl, asr #16
 801dcf4:	1429      	asrs	r1, r5, #16
 801dcf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dcf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801dcfc:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801dd00:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dd04:	fb03 2101 	mla	r1, r3, r1, r2
 801dd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dd0a:	440a      	add	r2, r1
 801dd0c:	5c61      	ldrb	r1, [r4, r1]
 801dd0e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801dd12:	f1bc 0f00 	cmp.w	ip, #0
 801dd16:	f000 808c 	beq.w	801de32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801dd1a:	7857      	ldrb	r7, [r2, #1]
 801dd1c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801dd20:	9413      	str	r4, [sp, #76]	; 0x4c
 801dd22:	b140      	cbz	r0, 801dd36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dd24:	18d7      	adds	r7, r2, r3
 801dd26:	5cd3      	ldrb	r3, [r2, r3]
 801dd28:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dd2c:	9310      	str	r3, [sp, #64]	; 0x40
 801dd2e:	787b      	ldrb	r3, [r7, #1]
 801dd30:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801dd34:	9314      	str	r3, [sp, #80]	; 0x50
 801dd36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dd38:	fb1c f200 	smulbb	r2, ip, r0
 801dd3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dd42:	041f      	lsls	r7, r3, #16
 801dd44:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801dd48:	10d2      	asrs	r2, r2, #3
 801dd4a:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801dd4e:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801dd52:	431f      	orrs	r7, r3
 801dd54:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801dd58:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd5c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dd5e:	041b      	lsls	r3, r3, #16
 801dd60:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801dd64:	ea43 030b 	orr.w	r3, r3, fp
 801dd68:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801dd6c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801dd70:	4353      	muls	r3, r2
 801dd72:	fb04 3707 	mla	r7, r4, r7, r3
 801dd76:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801dd7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dd7c:	ea43 0b01 	orr.w	fp, r3, r1
 801dd80:	f1c0 0110 	rsb	r1, r0, #16
 801dd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd86:	eba1 0c0c 	sub.w	ip, r1, ip
 801dd8a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801dd8e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801dd92:	fb0c 770b 	mla	r7, ip, fp, r7
 801dd96:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801dd9a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801dd9e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801dda2:	ea4c 0c0b 	orr.w	ip, ip, fp
 801dda6:	fb02 770c 	mla	r7, r2, ip, r7
 801ddaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ddac:	0d79      	lsrs	r1, r7, #21
 801ddae:	8812      	ldrh	r2, [r2, #0]
 801ddb0:	097f      	lsrs	r7, r7, #5
 801ddb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ddb6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ddba:	430f      	orrs	r7, r1
 801ddbc:	1211      	asrs	r1, r2, #8
 801ddbe:	b2bb      	uxth	r3, r7
 801ddc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ddc4:	10d7      	asrs	r7, r2, #3
 801ddc6:	fb11 f104 	smulbb	r1, r1, r4
 801ddca:	1218      	asrs	r0, r3, #8
 801ddcc:	00d2      	lsls	r2, r2, #3
 801ddce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ddd2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ddd6:	fb17 f704 	smulbb	r7, r7, r4
 801ddda:	b2d2      	uxtb	r2, r2
 801dddc:	fb00 1009 	mla	r0, r0, r9, r1
 801dde0:	10d9      	asrs	r1, r3, #3
 801dde2:	fb12 f204 	smulbb	r2, r2, r4
 801dde6:	00db      	lsls	r3, r3, #3
 801dde8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ddec:	b280      	uxth	r0, r0
 801ddee:	b2db      	uxtb	r3, r3
 801ddf0:	fb01 7109 	mla	r1, r1, r9, r7
 801ddf4:	fb03 2309 	mla	r3, r3, r9, r2
 801ddf8:	1c42      	adds	r2, r0, #1
 801ddfa:	b289      	uxth	r1, r1
 801ddfc:	b29b      	uxth	r3, r3
 801ddfe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801de02:	1c4f      	adds	r7, r1, #1
 801de04:	1c5a      	adds	r2, r3, #1
 801de06:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801de0a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801de0e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801de12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de14:	0949      	lsrs	r1, r1, #5
 801de16:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801de1a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801de1e:	4310      	orrs	r0, r2
 801de20:	4308      	orrs	r0, r1
 801de22:	f823 0b02 	strh.w	r0, [r3], #2
 801de26:	930e      	str	r3, [sp, #56]	; 0x38
 801de28:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801de2a:	449a      	add	sl, r3
 801de2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801de2e:	441d      	add	r5, r3
 801de30:	e6ed      	b.n	801dc0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801de32:	2800      	cmp	r0, #0
 801de34:	f43f af7f 	beq.w	801dd36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801de38:	5cd3      	ldrb	r3, [r2, r3]
 801de3a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801de3e:	9310      	str	r3, [sp, #64]	; 0x40
 801de40:	e779      	b.n	801dd36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801de42:	b019      	add	sp, #100	; 0x64
 801de44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801de48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de4c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801de50:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801de54:	f1b8 0f00 	cmp.w	r8, #0
 801de58:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801de5c:	fb08 470e 	mla	r7, r8, lr, r4
 801de60:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801de64:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801de68:	eb02 0907 	add.w	r9, r2, r7
 801de6c:	8808      	ldrh	r0, [r1, #0]
 801de6e:	db67      	blt.n	801df40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801de70:	45c2      	cmp	sl, r8
 801de72:	dd65      	ble.n	801df40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801de74:	2c00      	cmp	r4, #0
 801de76:	db61      	blt.n	801df3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801de78:	45a6      	cmp	lr, r4
 801de7a:	dd5f      	ble.n	801df3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801de7c:	5dd2      	ldrb	r2, [r2, r7]
 801de7e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801de82:	1c62      	adds	r2, r4, #1
 801de84:	d45f      	bmi.n	801df46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801de86:	4596      	cmp	lr, r2
 801de88:	dd5d      	ble.n	801df46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801de8a:	2d00      	cmp	r5, #0
 801de8c:	d05b      	beq.n	801df46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801de8e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801de92:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801de96:	f118 0801 	adds.w	r8, r8, #1
 801de9a:	d458      	bmi.n	801df4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801de9c:	45c2      	cmp	sl, r8
 801de9e:	dd56      	ble.n	801df4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801dea0:	2e00      	cmp	r6, #0
 801dea2:	d054      	beq.n	801df4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801dea4:	2c00      	cmp	r4, #0
 801dea6:	db50      	blt.n	801df4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801dea8:	45a6      	cmp	lr, r4
 801deaa:	dd4e      	ble.n	801df4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801deac:	f819 200e 	ldrb.w	r2, [r9, lr]
 801deb0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801deb4:	3401      	adds	r4, #1
 801deb6:	d407      	bmi.n	801dec8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801deb8:	45a6      	cmp	lr, r4
 801deba:	dd05      	ble.n	801dec8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801debc:	b125      	cbz	r5, 801dec8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801debe:	44ce      	add	lr, r9
 801dec0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801dec4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801dec8:	fb15 f406 	smulbb	r4, r5, r6
 801decc:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801ded0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801ded4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ded8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801dedc:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801dee0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801dee4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801dee8:	ea43 0c0c 	orr.w	ip, r3, ip
 801deec:	f1c6 0310 	rsb	r3, r6, #16
 801def0:	ea4e 0707 	orr.w	r7, lr, r7
 801def4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801def8:	1b5b      	subs	r3, r3, r5
 801defa:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801defe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df02:	437d      	muls	r5, r7
 801df04:	fb03 5c0c 	mla	ip, r3, ip, r5
 801df08:	0403      	lsls	r3, r0, #16
 801df0a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801df0e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801df12:	4318      	orrs	r0, r3
 801df14:	0413      	lsls	r3, r2, #16
 801df16:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801df1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801df1e:	fb04 c000 	mla	r0, r4, r0, ip
 801df22:	4313      	orrs	r3, r2
 801df24:	fb06 0003 	mla	r0, r6, r3, r0
 801df28:	0d43      	lsrs	r3, r0, #21
 801df2a:	0940      	lsrs	r0, r0, #5
 801df2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801df30:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801df34:	4318      	orrs	r0, r3
 801df36:	8008      	strh	r0, [r1, #0]
 801df38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df3c:	4684      	mov	ip, r0
 801df3e:	e7a0      	b.n	801de82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801df40:	4607      	mov	r7, r0
 801df42:	4684      	mov	ip, r0
 801df44:	e7a7      	b.n	801de96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801df46:	4607      	mov	r7, r0
 801df48:	e7a5      	b.n	801de96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801df4a:	4602      	mov	r2, r0
 801df4c:	e7b2      	b.n	801deb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801df4e:	4602      	mov	r2, r0
 801df50:	e7ba      	b.n	801dec8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801df52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801df52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df56:	b093      	sub	sp, #76	; 0x4c
 801df58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df5c:	920f      	str	r2, [sp, #60]	; 0x3c
 801df5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801df60:	9010      	str	r0, [sp, #64]	; 0x40
 801df62:	9108      	str	r1, [sp, #32]
 801df64:	6850      	ldr	r0, [r2, #4]
 801df66:	9306      	str	r3, [sp, #24]
 801df68:	6812      	ldr	r2, [r2, #0]
 801df6a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801df6e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801df72:	fb00 1303 	mla	r3, r0, r3, r1
 801df76:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801df7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	9307      	str	r3, [sp, #28]
 801df80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df82:	685f      	ldr	r7, [r3, #4]
 801df84:	3704      	adds	r7, #4
 801df86:	9b08      	ldr	r3, [sp, #32]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	dc03      	bgt.n	801df94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801df8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f340 81b2 	ble.w	801e2f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801df94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801df9e:	1e48      	subs	r0, r1, #1
 801dfa0:	f102 3cff 	add.w	ip, r2, #4294967295
 801dfa4:	9b06      	ldr	r3, [sp, #24]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	f340 80a9 	ble.w	801e0fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801dfac:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801dfb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dfb4:	d406      	bmi.n	801dfc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfb6:	4586      	cmp	lr, r0
 801dfb8:	da04      	bge.n	801dfc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	db02      	blt.n	801dfc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801dfbe:	4563      	cmp	r3, ip
 801dfc0:	f2c0 809e 	blt.w	801e100 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801dfc4:	f11e 0e01 	adds.w	lr, lr, #1
 801dfc8:	f100 808f 	bmi.w	801e0ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dfcc:	4571      	cmp	r1, lr
 801dfce:	f2c0 808c 	blt.w	801e0ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dfd2:	3301      	adds	r3, #1
 801dfd4:	f100 8089 	bmi.w	801e0ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dfd8:	429a      	cmp	r2, r3
 801dfda:	f2c0 8086 	blt.w	801e0ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801dfde:	f8dd b018 	ldr.w	fp, [sp, #24]
 801dfe2:	46c8      	mov	r8, r9
 801dfe4:	f1bb 0f00 	cmp.w	fp, #0
 801dfe8:	f340 80a6 	ble.w	801e138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801dfec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801dfee:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801dff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dff4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801dff8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dffc:	1422      	asrs	r2, r4, #16
 801dffe:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e002:	689b      	ldr	r3, [r3, #8]
 801e004:	f100 80e3 	bmi.w	801e1ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e008:	f103 3aff 	add.w	sl, r3, #4294967295
 801e00c:	4552      	cmp	r2, sl
 801e00e:	f280 80de 	bge.w	801e1ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e012:	f1bc 0f00 	cmp.w	ip, #0
 801e016:	f2c0 80da 	blt.w	801e1ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e01a:	f10e 3aff 	add.w	sl, lr, #4294967295
 801e01e:	45d4      	cmp	ip, sl
 801e020:	f280 80d5 	bge.w	801e1ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e024:	b21b      	sxth	r3, r3
 801e026:	9d07      	ldr	r5, [sp, #28]
 801e028:	fb0c 2203 	mla	r2, ip, r3, r2
 801e02c:	eb05 0a02 	add.w	sl, r5, r2
 801e030:	5caa      	ldrb	r2, [r5, r2]
 801e032:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801e036:	2800      	cmp	r0, #0
 801e038:	f000 80c0 	beq.w	801e1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801e03c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801e040:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801e044:	920b      	str	r2, [sp, #44]	; 0x2c
 801e046:	b151      	cbz	r1, 801e05e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e048:	eb0a 0203 	add.w	r2, sl, r3
 801e04c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801e050:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e054:	9309      	str	r3, [sp, #36]	; 0x24
 801e056:	7853      	ldrb	r3, [r2, #1]
 801e058:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e05c:	930c      	str	r3, [sp, #48]	; 0x30
 801e05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e060:	fb10 f201 	smulbb	r2, r0, r1
 801e064:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e066:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e06a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e06e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e072:	10d2      	asrs	r2, r2, #3
 801e074:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e078:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801e07c:	ea4c 0c03 	orr.w	ip, ip, r3
 801e080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e082:	041b      	lsls	r3, r3, #16
 801e084:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e088:	432b      	orrs	r3, r5
 801e08a:	4353      	muls	r3, r2
 801e08c:	fb0a 330c 	mla	r3, sl, ip, r3
 801e090:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801e094:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e098:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e09c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801e0a0:	f1c1 0c10 	rsb	ip, r1, #16
 801e0a4:	ebac 0c00 	sub.w	ip, ip, r0
 801e0a8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801e0ac:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801e0b0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801e0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0b6:	0418      	lsls	r0, r3, #16
 801e0b8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e0bc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801e0c0:	4318      	orrs	r0, r3
 801e0c2:	fb02 c200 	mla	r2, r2, r0, ip
 801e0c6:	0d53      	lsrs	r3, r2, #21
 801e0c8:	0952      	lsrs	r2, r2, #5
 801e0ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e0ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e0d2:	431a      	orrs	r2, r3
 801e0d4:	f8a8 2000 	strh.w	r2, [r8]
 801e0d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e0da:	f108 0802 	add.w	r8, r8, #2
 801e0de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e0e2:	441c      	add	r4, r3
 801e0e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e0e6:	441e      	add	r6, r3
 801e0e8:	e77c      	b.n	801dfe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e0ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e0ec:	f109 0902 	add.w	r9, r9, #2
 801e0f0:	441c      	add	r4, r3
 801e0f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e0f4:	441e      	add	r6, r3
 801e0f6:	9b06      	ldr	r3, [sp, #24]
 801e0f8:	3b01      	subs	r3, #1
 801e0fa:	9306      	str	r3, [sp, #24]
 801e0fc:	e752      	b.n	801dfa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e0fe:	d020      	beq.n	801e142 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e100:	9b06      	ldr	r3, [sp, #24]
 801e102:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e104:	3b01      	subs	r3, #1
 801e106:	fb00 4003 	mla	r0, r0, r3, r4
 801e10a:	1400      	asrs	r0, r0, #16
 801e10c:	f53f af67 	bmi.w	801dfde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e110:	3901      	subs	r1, #1
 801e112:	4288      	cmp	r0, r1
 801e114:	f6bf af63 	bge.w	801dfde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e118:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e11a:	fb01 6303 	mla	r3, r1, r3, r6
 801e11e:	141b      	asrs	r3, r3, #16
 801e120:	f53f af5d 	bmi.w	801dfde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e124:	3a01      	subs	r2, #1
 801e126:	4293      	cmp	r3, r2
 801e128:	f6bf af59 	bge.w	801dfde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e12c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801e130:	46ca      	mov	sl, r9
 801e132:	f1b8 0f00 	cmp.w	r8, #0
 801e136:	dc67      	bgt.n	801e208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e138:	9b06      	ldr	r3, [sp, #24]
 801e13a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801e13e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801e142:	9b08      	ldr	r3, [sp, #32]
 801e144:	2b00      	cmp	r3, #0
 801e146:	f340 80d7 	ble.w	801e2f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801e14a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e14e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e150:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e154:	eeb0 6a62 	vmov.f32	s12, s5
 801e158:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e15c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e160:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e164:	ee16 4a10 	vmov	r4, s12
 801e168:	eeb0 6a43 	vmov.f32	s12, s6
 801e16c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e170:	ee16 6a10 	vmov	r6, s12
 801e174:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e178:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e17c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e180:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e184:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e188:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e18c:	ee12 2a90 	vmov	r2, s5
 801e190:	eef0 2a47 	vmov.f32	s5, s14
 801e194:	fb92 f3f3 	sdiv	r3, r2, r3
 801e198:	ee13 2a10 	vmov	r2, s6
 801e19c:	931f      	str	r3, [sp, #124]	; 0x7c
 801e19e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e1a0:	eeb0 3a67 	vmov.f32	s6, s15
 801e1a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e1a8:	9320      	str	r3, [sp, #128]	; 0x80
 801e1aa:	9b08      	ldr	r3, [sp, #32]
 801e1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1ae:	3b01      	subs	r3, #1
 801e1b0:	9308      	str	r3, [sp, #32]
 801e1b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e1b4:	bf08      	it	eq
 801e1b6:	4613      	moveq	r3, r2
 801e1b8:	9306      	str	r3, [sp, #24]
 801e1ba:	e6e4      	b.n	801df86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e1bc:	2900      	cmp	r1, #0
 801e1be:	f43f af4e 	beq.w	801e05e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e1c2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801e1c6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e1ca:	9309      	str	r3, [sp, #36]	; 0x24
 801e1cc:	e747      	b.n	801e05e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801e1ce:	f112 0a01 	adds.w	sl, r2, #1
 801e1d2:	d481      	bmi.n	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e1d4:	4553      	cmp	r3, sl
 801e1d6:	f6ff af7f 	blt.w	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e1da:	f11c 0a01 	adds.w	sl, ip, #1
 801e1de:	f53f af7b 	bmi.w	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e1e2:	45d6      	cmp	lr, sl
 801e1e4:	f6ff af78 	blt.w	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e1e8:	b21b      	sxth	r3, r3
 801e1ea:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801e1ee:	fa0f f28e 	sxth.w	r2, lr
 801e1f2:	9300      	str	r3, [sp, #0]
 801e1f4:	463b      	mov	r3, r7
 801e1f6:	9201      	str	r2, [sp, #4]
 801e1f8:	9a07      	ldr	r2, [sp, #28]
 801e1fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e1fe:	4641      	mov	r1, r8
 801e200:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e202:	f7ff fe21 	bl	801de48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801e206:	e767      	b.n	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801e208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e20a:	1422      	asrs	r2, r4, #16
 801e20c:	1431      	asrs	r1, r6, #16
 801e20e:	9d07      	ldr	r5, [sp, #28]
 801e210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801e214:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801e218:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e21c:	fb03 2101 	mla	r1, r3, r1, r2
 801e220:	9a07      	ldr	r2, [sp, #28]
 801e222:	440a      	add	r2, r1
 801e224:	5c69      	ldrb	r1, [r5, r1]
 801e226:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801e22a:	f1be 0f00 	cmp.w	lr, #0
 801e22e:	d05c      	beq.n	801e2ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801e230:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e234:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801e238:	950d      	str	r5, [sp, #52]	; 0x34
 801e23a:	b150      	cbz	r0, 801e252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e23c:	eb02 0c03 	add.w	ip, r2, r3
 801e240:	5cd3      	ldrb	r3, [r2, r3]
 801e242:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e246:	930a      	str	r3, [sp, #40]	; 0x28
 801e248:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e24c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e250:	930e      	str	r3, [sp, #56]	; 0x38
 801e252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e254:	fb1e f200 	smulbb	r2, lr, r0
 801e258:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e25a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e25e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801e262:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e266:	10d2      	asrs	r2, r2, #3
 801e268:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801e26c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e270:	ea4c 0c03 	orr.w	ip, ip, r3
 801e274:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801e278:	9311      	str	r3, [sp, #68]	; 0x44
 801e27a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e27c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e27e:	041b      	lsls	r3, r3, #16
 801e280:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801e284:	ea43 030b 	orr.w	r3, r3, fp
 801e288:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801e28c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e290:	4353      	muls	r3, r2
 801e292:	fb05 3c0c 	mla	ip, r5, ip, r3
 801e296:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801e29a:	ea43 0b01 	orr.w	fp, r3, r1
 801e29e:	f1c0 0110 	rsb	r1, r0, #16
 801e2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e2a4:	eba1 0e0e 	sub.w	lr, r1, lr
 801e2a8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801e2ac:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801e2b0:	fb0e cc0b 	mla	ip, lr, fp, ip
 801e2b4:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801e2b8:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801e2bc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e2c0:	ea4b 0e0e 	orr.w	lr, fp, lr
 801e2c4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e2c8:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801e2cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801e2d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e2d4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e2d8:	ea43 0c0c 	orr.w	ip, r3, ip
 801e2dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e2de:	441c      	add	r4, r3
 801e2e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e2e2:	f82a cb02 	strh.w	ip, [sl], #2
 801e2e6:	441e      	add	r6, r3
 801e2e8:	e723      	b.n	801e132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e2ea:	2800      	cmp	r0, #0
 801e2ec:	d0b1      	beq.n	801e252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e2ee:	5cd3      	ldrb	r3, [r2, r3]
 801e2f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801e2f4:	930a      	str	r3, [sp, #40]	; 0x28
 801e2f6:	e7ac      	b.n	801e252 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801e2f8:	b013      	add	sp, #76	; 0x4c
 801e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801e2fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e302:	880d      	ldrh	r5, [r1, #0]
 801e304:	b087      	sub	sp, #28
 801e306:	10ef      	asrs	r7, r5, #3
 801e308:	9103      	str	r1, [sp, #12]
 801e30a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801e30e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801e312:	00ed      	lsls	r5, r5, #3
 801e314:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e318:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801e31c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801e320:	b2ed      	uxtb	r5, r5
 801e322:	9701      	str	r7, [sp, #4]
 801e324:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801e328:	9502      	str	r5, [sp, #8]
 801e32a:	9d01      	ldr	r5, [sp, #4]
 801e32c:	9902      	ldr	r1, [sp, #8]
 801e32e:	022d      	lsls	r5, r5, #8
 801e330:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801e334:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801e338:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801e33c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801e340:	430d      	orrs	r5, r1
 801e342:	fb06 0709 	mla	r7, r6, r9, r0
 801e346:	2e00      	cmp	r6, #0
 801e348:	9505      	str	r5, [sp, #20]
 801e34a:	eb02 0c07 	add.w	ip, r2, r7
 801e34e:	f2c0 80b6 	blt.w	801e4be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801e352:	45b3      	cmp	fp, r6
 801e354:	f340 80b3 	ble.w	801e4be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801e358:	2800      	cmp	r0, #0
 801e35a:	f2c0 80ae 	blt.w	801e4ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801e35e:	4581      	cmp	r9, r0
 801e360:	f340 80ab 	ble.w	801e4ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801e364:	5dd7      	ldrb	r7, [r2, r7]
 801e366:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e36a:	441f      	add	r7, r3
 801e36c:	1c42      	adds	r2, r0, #1
 801e36e:	f100 80a9 	bmi.w	801e4c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e372:	4591      	cmp	r9, r2
 801e374:	f340 80a6 	ble.w	801e4c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e378:	2c00      	cmp	r4, #0
 801e37a:	f000 80a3 	beq.w	801e4c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801e37e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e386:	441d      	add	r5, r3
 801e388:	3601      	adds	r6, #1
 801e38a:	f100 809f 	bmi.w	801e4cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e38e:	45b3      	cmp	fp, r6
 801e390:	f340 809c 	ble.w	801e4cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e394:	f1be 0f00 	cmp.w	lr, #0
 801e398:	f000 8098 	beq.w	801e4cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801e39c:	2800      	cmp	r0, #0
 801e39e:	f2c0 8093 	blt.w	801e4c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801e3a2:	4581      	cmp	r9, r0
 801e3a4:	f340 8090 	ble.w	801e4c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801e3a8:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801e3ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e3b0:	441e      	add	r6, r3
 801e3b2:	3001      	adds	r0, #1
 801e3b4:	f100 808d 	bmi.w	801e4d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e3b8:	4581      	cmp	r9, r0
 801e3ba:	f340 808a 	ble.w	801e4d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e3be:	2c00      	cmp	r4, #0
 801e3c0:	f000 8087 	beq.w	801e4d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801e3c4:	44e1      	add	r9, ip
 801e3c6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801e3ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e3ce:	4413      	add	r3, r2
 801e3d0:	b2a4      	uxth	r4, r4
 801e3d2:	f897 c002 	ldrb.w	ip, [r7, #2]
 801e3d6:	fa1f fe8e 	uxth.w	lr, lr
 801e3da:	9901      	ldr	r1, [sp, #4]
 801e3dc:	fb04 fb0e 	mul.w	fp, r4, lr
 801e3e0:	0124      	lsls	r4, r4, #4
 801e3e2:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801e3e6:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801e3ea:	eba4 040b 	sub.w	r4, r4, fp
 801e3ee:	fa1f f08e 	uxth.w	r0, lr
 801e3f2:	b2a2      	uxth	r2, r4
 801e3f4:	78ac      	ldrb	r4, [r5, #2]
 801e3f6:	eba9 0900 	sub.w	r9, r9, r0
 801e3fa:	fa1f fe88 	uxth.w	lr, r8
 801e3fe:	4354      	muls	r4, r2
 801e400:	ea6f 0808 	mvn.w	r8, r8
 801e404:	fa1f f989 	uxth.w	r9, r9
 801e408:	fa5f f888 	uxtb.w	r8, r8
 801e40c:	fb09 440c 	mla	r4, r9, ip, r4
 801e410:	f896 c002 	ldrb.w	ip, [r6, #2]
 801e414:	fb1a fa08 	smulbb	sl, sl, r8
 801e418:	fb00 440c 	mla	r4, r0, ip, r4
 801e41c:	f893 c002 	ldrb.w	ip, [r3, #2]
 801e420:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801e424:	787c      	ldrb	r4, [r7, #1]
 801e426:	783f      	ldrb	r7, [r7, #0]
 801e428:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e42c:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e430:	f895 a001 	ldrb.w	sl, [r5, #1]
 801e434:	782d      	ldrb	r5, [r5, #0]
 801e436:	fb02 fa0a 	mul.w	sl, r2, sl
 801e43a:	fa1f fc8c 	uxth.w	ip, ip
 801e43e:	436a      	muls	r2, r5
 801e440:	7835      	ldrb	r5, [r6, #0]
 801e442:	fb09 aa04 	mla	sl, r9, r4, sl
 801e446:	7874      	ldrb	r4, [r6, #1]
 801e448:	fb09 2207 	mla	r2, r9, r7, r2
 801e44c:	fb00 aa04 	mla	sl, r0, r4, sl
 801e450:	785c      	ldrb	r4, [r3, #1]
 801e452:	fb00 2005 	mla	r0, r0, r5, r2
 801e456:	781b      	ldrb	r3, [r3, #0]
 801e458:	fb0b a404 	mla	r4, fp, r4, sl
 801e45c:	fb11 fa08 	smulbb	sl, r1, r8
 801e460:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e464:	9b02      	ldr	r3, [sp, #8]
 801e466:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e46a:	fb13 f808 	smulbb	r8, r3, r8
 801e46e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e472:	fb04 a40e 	mla	r4, r4, lr, sl
 801e476:	f10c 0301 	add.w	r3, ip, #1
 801e47a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801e47e:	b2a4      	uxth	r4, r4
 801e480:	fa1f fe8e 	uxth.w	lr, lr
 801e484:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e488:	f104 0a01 	add.w	sl, r4, #1
 801e48c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801e490:	f10e 0c01 	add.w	ip, lr, #1
 801e494:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e498:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e49c:	0964      	lsrs	r4, r4, #5
 801e49e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801e4a2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e4a6:	ea4c 0c03 	orr.w	ip, ip, r3
 801e4aa:	9b03      	ldr	r3, [sp, #12]
 801e4ac:	ea4c 0c04 	orr.w	ip, ip, r4
 801e4b0:	f8a3 c000 	strh.w	ip, [r3]
 801e4b4:	b007      	add	sp, #28
 801e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ba:	af05      	add	r7, sp, #20
 801e4bc:	e756      	b.n	801e36c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801e4be:	ad05      	add	r5, sp, #20
 801e4c0:	462f      	mov	r7, r5
 801e4c2:	e761      	b.n	801e388 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801e4c4:	ad05      	add	r5, sp, #20
 801e4c6:	e75f      	b.n	801e388 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801e4c8:	ae05      	add	r6, sp, #20
 801e4ca:	e772      	b.n	801e3b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801e4cc:	ab05      	add	r3, sp, #20
 801e4ce:	461e      	mov	r6, r3
 801e4d0:	e77e      	b.n	801e3d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801e4d2:	ab05      	add	r3, sp, #20
 801e4d4:	e77c      	b.n	801e3d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801e4d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4da:	b095      	sub	sp, #84	; 0x54
 801e4dc:	9212      	str	r2, [sp, #72]	; 0x48
 801e4de:	9309      	str	r3, [sp, #36]	; 0x24
 801e4e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e4e2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801e4e6:	9013      	str	r0, [sp, #76]	; 0x4c
 801e4e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e4ea:	6850      	ldr	r0, [r2, #4]
 801e4ec:	910e      	str	r1, [sp, #56]	; 0x38
 801e4ee:	6812      	ldr	r2, [r2, #0]
 801e4f0:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801e4f4:	fb00 1303 	mla	r3, r0, r3, r1
 801e4f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e4fc:	930a      	str	r3, [sp, #40]	; 0x28
 801e4fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	930d      	str	r3, [sp, #52]	; 0x34
 801e504:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e506:	685c      	ldr	r4, [r3, #4]
 801e508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e50a:	3404      	adds	r4, #4
 801e50c:	43db      	mvns	r3, r3
 801e50e:	b2db      	uxtb	r3, r3
 801e510:	930b      	str	r3, [sp, #44]	; 0x2c
 801e512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e514:	2b00      	cmp	r3, #0
 801e516:	dc03      	bgt.n	801e520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	f340 8255 	ble.w	801e9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801e520:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e522:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e526:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e52a:	1e48      	subs	r0, r1, #1
 801e52c:	1e55      	subs	r5, r2, #1
 801e52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e530:	2b00      	cmp	r3, #0
 801e532:	f340 80f9 	ble.w	801e728 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801e536:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801e538:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e53a:	1436      	asrs	r6, r6, #16
 801e53c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e540:	d406      	bmi.n	801e550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e542:	4286      	cmp	r6, r0
 801e544:	da04      	bge.n	801e550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e546:	2b00      	cmp	r3, #0
 801e548:	db02      	blt.n	801e550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e54a:	42ab      	cmp	r3, r5
 801e54c:	f2c0 80ed 	blt.w	801e72a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801e550:	3601      	adds	r6, #1
 801e552:	f100 80da 	bmi.w	801e70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e556:	42b1      	cmp	r1, r6
 801e558:	f2c0 80d7 	blt.w	801e70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e55c:	3301      	adds	r3, #1
 801e55e:	f100 80d4 	bmi.w	801e70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e562:	429a      	cmp	r2, r3
 801e564:	f2c0 80d1 	blt.w	801e70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801e568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e56a:	9311      	str	r3, [sp, #68]	; 0x44
 801e56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e56e:	930c      	str	r3, [sp, #48]	; 0x30
 801e570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e572:	2b00      	cmp	r3, #0
 801e574:	f340 80fa 	ble.w	801e76c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801e578:	9826      	ldr	r0, [sp, #152]	; 0x98
 801e57a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e57c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e57e:	68c6      	ldr	r6, [r0, #12]
 801e580:	141d      	asrs	r5, r3, #16
 801e582:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e584:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e588:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e58a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e58c:	1400      	asrs	r0, r0, #16
 801e58e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e592:	6892      	ldr	r2, [r2, #8]
 801e594:	f100 813e 	bmi.w	801e814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e598:	1e57      	subs	r7, r2, #1
 801e59a:	42b8      	cmp	r0, r7
 801e59c:	f280 813a 	bge.w	801e814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e5a0:	2d00      	cmp	r5, #0
 801e5a2:	f2c0 8137 	blt.w	801e814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e5a6:	1e77      	subs	r7, r6, #1
 801e5a8:	42bd      	cmp	r5, r7
 801e5aa:	f280 8133 	bge.w	801e814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801e5ae:	b212      	sxth	r2, r2
 801e5b0:	fb05 0002 	mla	r0, r5, r2, r0
 801e5b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e5b6:	f815 a000 	ldrb.w	sl, [r5, r0]
 801e5ba:	182e      	adds	r6, r5, r0
 801e5bc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801e5c0:	eb04 050a 	add.w	r5, r4, sl
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	f000 8117 	beq.w	801e7f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e5ca:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e5ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e5d2:	44a4      	add	ip, r4
 801e5d4:	2900      	cmp	r1, #0
 801e5d6:	f000 8117 	beq.w	801e808 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801e5da:	18b0      	adds	r0, r6, r2
 801e5dc:	5cb2      	ldrb	r2, [r6, r2]
 801e5de:	7840      	ldrb	r0, [r0, #1]
 801e5e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e5e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e5e8:	4422      	add	r2, r4
 801e5ea:	4420      	add	r0, r4
 801e5ec:	b29b      	uxth	r3, r3
 801e5ee:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801e5f2:	b289      	uxth	r1, r1
 801e5f4:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e5f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e5fa:	fb03 f901 	mul.w	r9, r3, r1
 801e5fe:	011b      	lsls	r3, r3, #4
 801e600:	f8b6 e000 	ldrh.w	lr, [r6]
 801e604:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e608:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801e60c:	eba3 0309 	sub.w	r3, r3, r9
 801e610:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801e614:	b289      	uxth	r1, r1
 801e616:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801e61a:	b29b      	uxth	r3, r3
 801e61c:	eba8 0801 	sub.w	r8, r8, r1
 801e620:	435f      	muls	r7, r3
 801e622:	fa1f f888 	uxth.w	r8, r8
 801e626:	9310      	str	r3, [sp, #64]	; 0x40
 801e628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e62a:	fb08 770b 	mla	r7, r8, fp, r7
 801e62e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801e632:	fb01 770b 	mla	r7, r1, fp, r7
 801e636:	f890 b002 	ldrb.w	fp, [r0, #2]
 801e63a:	fb09 770b 	mla	r7, r9, fp, r7
 801e63e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801e642:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801e646:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e64a:	fb1b fb03 	smulbb	fp, fp, r3
 801e64e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e650:	fb07 b706 	mla	r7, r7, r6, fp
 801e654:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e658:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e65c:	f89c c000 	ldrb.w	ip, [ip]
 801e660:	b2bf      	uxth	r7, r7
 801e662:	435d      	muls	r5, r3
 801e664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e666:	fb08 550b 	mla	r5, r8, fp, r5
 801e66a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e66e:	fb01 550b 	mla	r5, r1, fp, r5
 801e672:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e676:	fb09 550b 	mla	r5, r9, fp, r5
 801e67a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801e67e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e682:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e686:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e68a:	fa5f fe8e 	uxtb.w	lr, lr
 801e68e:	fb1b fb03 	smulbb	fp, fp, r3
 801e692:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e694:	fb03 f30c 	mul.w	r3, r3, ip
 801e698:	f892 c000 	ldrb.w	ip, [r2]
 801e69c:	fb05 b506 	mla	r5, r5, r6, fp
 801e6a0:	fb08 330a 	mla	r3, r8, sl, r3
 801e6a4:	b2ad      	uxth	r5, r5
 801e6a6:	fb01 330c 	mla	r3, r1, ip, r3
 801e6aa:	f890 c000 	ldrb.w	ip, [r0]
 801e6ae:	f105 0b01 	add.w	fp, r5, #1
 801e6b2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e6b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6b8:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e6bc:	fb1e fe03 	smulbb	lr, lr, r3
 801e6c0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e6c4:	1c7b      	adds	r3, r7, #1
 801e6c6:	096d      	lsrs	r5, r5, #5
 801e6c8:	fb0c e606 	mla	r6, ip, r6, lr
 801e6cc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e6d0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e6d4:	b2b6      	uxth	r6, r6
 801e6d6:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801e6da:	1c77      	adds	r7, r6, #1
 801e6dc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e6e0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e6e4:	431f      	orrs	r7, r3
 801e6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6e8:	433d      	orrs	r5, r7
 801e6ea:	801d      	strh	r5, [r3, #0]
 801e6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e6ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e6f0:	3302      	adds	r3, #2
 801e6f2:	930c      	str	r3, [sp, #48]	; 0x30
 801e6f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e6f6:	4413      	add	r3, r2
 801e6f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e6fa:	931f      	str	r3, [sp, #124]	; 0x7c
 801e6fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e6fe:	4413      	add	r3, r2
 801e700:	9320      	str	r3, [sp, #128]	; 0x80
 801e702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e704:	3b01      	subs	r3, #1
 801e706:	9311      	str	r3, [sp, #68]	; 0x44
 801e708:	e732      	b.n	801e570 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e70a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e70c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801e70e:	4433      	add	r3, r6
 801e710:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801e712:	931f      	str	r3, [sp, #124]	; 0x7c
 801e714:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e716:	4433      	add	r3, r6
 801e718:	9320      	str	r3, [sp, #128]	; 0x80
 801e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e71c:	3b01      	subs	r3, #1
 801e71e:	9309      	str	r3, [sp, #36]	; 0x24
 801e720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e722:	3302      	adds	r3, #2
 801e724:	930a      	str	r3, [sp, #40]	; 0x28
 801e726:	e702      	b.n	801e52e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e728:	d027      	beq.n	801e77a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801e72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e72c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801e72e:	3b01      	subs	r3, #1
 801e730:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801e732:	fb00 5003 	mla	r0, r0, r3, r5
 801e736:	1400      	asrs	r0, r0, #16
 801e738:	f53f af16 	bmi.w	801e568 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e73c:	3901      	subs	r1, #1
 801e73e:	4288      	cmp	r0, r1
 801e740:	f6bf af12 	bge.w	801e568 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e744:	9922      	ldr	r1, [sp, #136]	; 0x88
 801e746:	9820      	ldr	r0, [sp, #128]	; 0x80
 801e748:	fb01 0303 	mla	r3, r1, r3, r0
 801e74c:	141b      	asrs	r3, r3, #16
 801e74e:	f53f af0b 	bmi.w	801e568 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e752:	3a01      	subs	r2, #1
 801e754:	4293      	cmp	r3, r2
 801e756:	f6bf af07 	bge.w	801e568 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e75c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801e760:	9311      	str	r3, [sp, #68]	; 0x44
 801e762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e764:	930c      	str	r3, [sp, #48]	; 0x30
 801e766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e768:	2b00      	cmp	r3, #0
 801e76a:	dc70      	bgt.n	801e84e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801e76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e770:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e774:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e778:	930a      	str	r3, [sp, #40]	; 0x28
 801e77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	f340 8124 	ble.w	801e9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801e782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e788:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e78c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e790:	eef0 6a62 	vmov.f32	s13, s5
 801e794:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e798:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e79c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7a0:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801e7a4:	eef0 6a43 	vmov.f32	s13, s6
 801e7a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7ac:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801e7b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e7b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7c8:	ee12 2a90 	vmov	r2, s5
 801e7cc:	eef0 2a47 	vmov.f32	s5, s14
 801e7d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7d4:	ee13 2a10 	vmov	r2, s6
 801e7d8:	9321      	str	r3, [sp, #132]	; 0x84
 801e7da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e7dc:	eeb0 3a67 	vmov.f32	s6, s15
 801e7e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7e4:	9322      	str	r3, [sp, #136]	; 0x88
 801e7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e7e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7ea:	3b01      	subs	r3, #1
 801e7ec:	930e      	str	r3, [sp, #56]	; 0x38
 801e7ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e7f0:	bf08      	it	eq
 801e7f2:	4613      	moveq	r3, r2
 801e7f4:	9309      	str	r3, [sp, #36]	; 0x24
 801e7f6:	e68c      	b.n	801e512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e7f8:	b149      	cbz	r1, 801e80e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801e7fa:	5cb2      	ldrb	r2, [r6, r2]
 801e7fc:	4628      	mov	r0, r5
 801e7fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e802:	4422      	add	r2, r4
 801e804:	46ac      	mov	ip, r5
 801e806:	e6f1      	b.n	801e5ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e808:	4628      	mov	r0, r5
 801e80a:	462a      	mov	r2, r5
 801e80c:	e6ee      	b.n	801e5ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e80e:	4628      	mov	r0, r5
 801e810:	462a      	mov	r2, r5
 801e812:	e7f7      	b.n	801e804 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801e814:	1c47      	adds	r7, r0, #1
 801e816:	f53f af69 	bmi.w	801e6ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e81a:	42ba      	cmp	r2, r7
 801e81c:	f6ff af66 	blt.w	801e6ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e820:	1c6f      	adds	r7, r5, #1
 801e822:	f53f af63 	bmi.w	801e6ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e826:	42be      	cmp	r6, r7
 801e828:	f6ff af60 	blt.w	801e6ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e82c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e82e:	b236      	sxth	r6, r6
 801e830:	b212      	sxth	r2, r2
 801e832:	9002      	str	r0, [sp, #8]
 801e834:	9601      	str	r6, [sp, #4]
 801e836:	9200      	str	r2, [sp, #0]
 801e838:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e83a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801e83e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801e842:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801e846:	4623      	mov	r3, r4
 801e848:	f7ff fd59 	bl	801e2fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801e84c:	e74e      	b.n	801e6ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801e84e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e850:	9820      	ldr	r0, [sp, #128]	; 0x80
 801e852:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e856:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801e858:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e85a:	1400      	asrs	r0, r0, #16
 801e85c:	142d      	asrs	r5, r5, #16
 801e85e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e860:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e864:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e868:	fb02 5000 	mla	r0, r2, r0, r5
 801e86c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e86e:	f815 9000 	ldrb.w	r9, [r5, r0]
 801e872:	182e      	adds	r6, r5, r0
 801e874:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e878:	eb04 0509 	add.w	r5, r4, r9
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	f000 8096 	beq.w	801e9ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801e882:	7877      	ldrb	r7, [r6, #1]
 801e884:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e888:	4427      	add	r7, r4
 801e88a:	2900      	cmp	r1, #0
 801e88c:	f000 8097 	beq.w	801e9be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801e890:	18b0      	adds	r0, r6, r2
 801e892:	5cb2      	ldrb	r2, [r6, r2]
 801e894:	7840      	ldrb	r0, [r0, #1]
 801e896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e89a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e89e:	4422      	add	r2, r4
 801e8a0:	4420      	add	r0, r4
 801e8a2:	b29b      	uxth	r3, r3
 801e8a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e8a6:	b289      	uxth	r1, r1
 801e8a8:	f895 b002 	ldrb.w	fp, [r5, #2]
 801e8ac:	f8b6 c000 	ldrh.w	ip, [r6]
 801e8b0:	fb03 f801 	mul.w	r8, r3, r1
 801e8b4:	011b      	lsls	r3, r3, #4
 801e8b6:	78be      	ldrb	r6, [r7, #2]
 801e8b8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801e8bc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e8c0:	eba3 0308 	sub.w	r3, r3, r8
 801e8c4:	f814 9009 	ldrb.w	r9, [r4, r9]
 801e8c8:	b289      	uxth	r1, r1
 801e8ca:	b29b      	uxth	r3, r3
 801e8cc:	ebae 0e01 	sub.w	lr, lr, r1
 801e8d0:	435e      	muls	r6, r3
 801e8d2:	fa1f fe8e 	uxth.w	lr, lr
 801e8d6:	9310      	str	r3, [sp, #64]	; 0x40
 801e8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8da:	fb0e 660b 	mla	r6, lr, fp, r6
 801e8de:	f892 b002 	ldrb.w	fp, [r2, #2]
 801e8e2:	fb01 660b 	mla	r6, r1, fp, r6
 801e8e6:	f890 b002 	ldrb.w	fp, [r0, #2]
 801e8ea:	fb08 660b 	mla	r6, r8, fp, r6
 801e8ee:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801e8f2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801e8f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e8fa:	fb1b fb03 	smulbb	fp, fp, r3
 801e8fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e900:	fb06 b60a 	mla	r6, r6, sl, fp
 801e904:	f895 b001 	ldrb.w	fp, [r5, #1]
 801e908:	787d      	ldrb	r5, [r7, #1]
 801e90a:	783f      	ldrb	r7, [r7, #0]
 801e90c:	b2b6      	uxth	r6, r6
 801e90e:	435d      	muls	r5, r3
 801e910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e912:	fb0e 550b 	mla	r5, lr, fp, r5
 801e916:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e91a:	fb01 550b 	mla	r5, r1, fp, r5
 801e91e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e922:	fb08 550b 	mla	r5, r8, fp, r5
 801e926:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801e92a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e92e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801e932:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e936:	fa5f fc8c 	uxtb.w	ip, ip
 801e93a:	fb1b fb03 	smulbb	fp, fp, r3
 801e93e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e940:	437b      	muls	r3, r7
 801e942:	7817      	ldrb	r7, [r2, #0]
 801e944:	fb05 b50a 	mla	r5, r5, sl, fp
 801e948:	fb0e 3309 	mla	r3, lr, r9, r3
 801e94c:	b2ad      	uxth	r5, r5
 801e94e:	fb01 3307 	mla	r3, r1, r7, r3
 801e952:	7807      	ldrb	r7, [r0, #0]
 801e954:	f105 0b01 	add.w	fp, r5, #1
 801e958:	fb08 3707 	mla	r7, r8, r7, r3
 801e95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e95e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801e962:	fb1c fc03 	smulbb	ip, ip, r3
 801e966:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e96a:	1c73      	adds	r3, r6, #1
 801e96c:	096d      	lsrs	r5, r5, #5
 801e96e:	fb07 c70a 	mla	r7, r7, sl, ip
 801e972:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e976:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e97a:	b2bf      	uxth	r7, r7
 801e97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e97e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e982:	1c7a      	adds	r2, r7, #1
 801e984:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801e988:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e98c:	4316      	orrs	r6, r2
 801e98e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e990:	432e      	orrs	r6, r5
 801e992:	f823 6b02 	strh.w	r6, [r3], #2
 801e996:	930c      	str	r3, [sp, #48]	; 0x30
 801e998:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e99a:	4413      	add	r3, r2
 801e99c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e99e:	931f      	str	r3, [sp, #124]	; 0x7c
 801e9a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e9a2:	4413      	add	r3, r2
 801e9a4:	9320      	str	r3, [sp, #128]	; 0x80
 801e9a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e9a8:	3b01      	subs	r3, #1
 801e9aa:	9311      	str	r3, [sp, #68]	; 0x44
 801e9ac:	e6db      	b.n	801e766 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801e9ae:	b149      	cbz	r1, 801e9c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801e9b0:	5cb2      	ldrb	r2, [r6, r2]
 801e9b2:	4628      	mov	r0, r5
 801e9b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e9b8:	4422      	add	r2, r4
 801e9ba:	462f      	mov	r7, r5
 801e9bc:	e771      	b.n	801e8a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801e9be:	4628      	mov	r0, r5
 801e9c0:	462a      	mov	r2, r5
 801e9c2:	e76e      	b.n	801e8a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801e9c4:	4628      	mov	r0, r5
 801e9c6:	462a      	mov	r2, r5
 801e9c8:	e7f7      	b.n	801e9ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801e9ca:	b015      	add	sp, #84	; 0x54
 801e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801e9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9d4:	880f      	ldrh	r7, [r1, #0]
 801e9d6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801e9da:	023c      	lsls	r4, r7, #8
 801e9dc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801e9e0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801e9e4:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801e9e8:	017c      	lsls	r4, r7, #5
 801e9ea:	00ff      	lsls	r7, r7, #3
 801e9ec:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801e9f0:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801e9f4:	b2ff      	uxtb	r7, r7
 801e9f6:	ea4b 0404 	orr.w	r4, fp, r4
 801e9fa:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801e9fe:	4327      	orrs	r7, r4
 801ea00:	fb05 ca0e 	mla	sl, r5, lr, ip
 801ea04:	2d00      	cmp	r5, #0
 801ea06:	9701      	str	r7, [sp, #4]
 801ea08:	eb02 080a 	add.w	r8, r2, sl
 801ea0c:	db7e      	blt.n	801eb0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ea0e:	45a9      	cmp	r9, r5
 801ea10:	dd7c      	ble.n	801eb0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801ea12:	f1bc 0f00 	cmp.w	ip, #0
 801ea16:	db77      	blt.n	801eb08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ea18:	45e6      	cmp	lr, ip
 801ea1a:	dd75      	ble.n	801eb08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801ea1c:	f812 700a 	ldrb.w	r7, [r2, sl]
 801ea20:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ea24:	441f      	add	r7, r3
 801ea26:	f11c 0201 	adds.w	r2, ip, #1
 801ea2a:	d472      	bmi.n	801eb12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ea2c:	4596      	cmp	lr, r2
 801ea2e:	dd70      	ble.n	801eb12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ea30:	2800      	cmp	r0, #0
 801ea32:	d06e      	beq.n	801eb12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801ea34:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ea38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea3c:	441c      	add	r4, r3
 801ea3e:	3501      	adds	r5, #1
 801ea40:	d46b      	bmi.n	801eb1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ea42:	45a9      	cmp	r9, r5
 801ea44:	dd69      	ble.n	801eb1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ea46:	2e00      	cmp	r6, #0
 801ea48:	d067      	beq.n	801eb1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801ea4a:	f1bc 0f00 	cmp.w	ip, #0
 801ea4e:	db62      	blt.n	801eb16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ea50:	45e6      	cmp	lr, ip
 801ea52:	dd60      	ble.n	801eb16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801ea54:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ea58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ea5c:	441d      	add	r5, r3
 801ea5e:	f11c 0201 	adds.w	r2, ip, #1
 801ea62:	d45d      	bmi.n	801eb20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ea64:	4596      	cmp	lr, r2
 801ea66:	dd5b      	ble.n	801eb20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ea68:	2800      	cmp	r0, #0
 801ea6a:	d059      	beq.n	801eb20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801ea6c:	44c6      	add	lr, r8
 801ea6e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ea72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea76:	4413      	add	r3, r2
 801ea78:	b280      	uxth	r0, r0
 801ea7a:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ea7e:	b2b2      	uxth	r2, r6
 801ea80:	f897 9000 	ldrb.w	r9, [r7]
 801ea84:	787f      	ldrb	r7, [r7, #1]
 801ea86:	fb00 f602 	mul.w	r6, r0, r2
 801ea8a:	0100      	lsls	r0, r0, #4
 801ea8c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ea90:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801ea94:	1b80      	subs	r0, r0, r6
 801ea96:	fa1f fc82 	uxth.w	ip, r2
 801ea9a:	b282      	uxth	r2, r0
 801ea9c:	78a0      	ldrb	r0, [r4, #2]
 801ea9e:	eba8 080c 	sub.w	r8, r8, ip
 801eaa2:	4350      	muls	r0, r2
 801eaa4:	fa1f f888 	uxth.w	r8, r8
 801eaa8:	fb08 0e0e 	mla	lr, r8, lr, r0
 801eaac:	78a8      	ldrb	r0, [r5, #2]
 801eaae:	fb0c e000 	mla	r0, ip, r0, lr
 801eab2:	f893 e002 	ldrb.w	lr, [r3, #2]
 801eab6:	fb06 0e0e 	mla	lr, r6, lr, r0
 801eaba:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801eabe:	f894 e000 	ldrb.w	lr, [r4]
 801eac2:	fb02 fe0e 	mul.w	lr, r2, lr
 801eac6:	fb08 e909 	mla	r9, r8, r9, lr
 801eaca:	f895 e000 	ldrb.w	lr, [r5]
 801eace:	fb0c 990e 	mla	r9, ip, lr, r9
 801ead2:	f893 e000 	ldrb.w	lr, [r3]
 801ead6:	785b      	ldrb	r3, [r3, #1]
 801ead8:	fb06 9e0e 	mla	lr, r6, lr, r9
 801eadc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eae0:	ea4e 0e00 	orr.w	lr, lr, r0
 801eae4:	7860      	ldrb	r0, [r4, #1]
 801eae6:	4350      	muls	r0, r2
 801eae8:	786a      	ldrb	r2, [r5, #1]
 801eaea:	fb08 0007 	mla	r0, r8, r7, r0
 801eaee:	fb0c 0202 	mla	r2, ip, r2, r0
 801eaf2:	fb06 2303 	mla	r3, r6, r3, r2
 801eaf6:	095b      	lsrs	r3, r3, #5
 801eaf8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eafc:	ea4e 0303 	orr.w	r3, lr, r3
 801eb00:	800b      	strh	r3, [r1, #0]
 801eb02:	b003      	add	sp, #12
 801eb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb08:	af01      	add	r7, sp, #4
 801eb0a:	e78c      	b.n	801ea26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801eb0c:	ac01      	add	r4, sp, #4
 801eb0e:	4627      	mov	r7, r4
 801eb10:	e795      	b.n	801ea3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801eb12:	ac01      	add	r4, sp, #4
 801eb14:	e793      	b.n	801ea3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801eb16:	ad01      	add	r5, sp, #4
 801eb18:	e7a1      	b.n	801ea5e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801eb1a:	ab01      	add	r3, sp, #4
 801eb1c:	461d      	mov	r5, r3
 801eb1e:	e7ab      	b.n	801ea78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801eb20:	ab01      	add	r3, sp, #4
 801eb22:	e7a9      	b.n	801ea78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801eb24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb28:	b08f      	sub	sp, #60	; 0x3c
 801eb2a:	920c      	str	r2, [sp, #48]	; 0x30
 801eb2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801eb2e:	900d      	str	r0, [sp, #52]	; 0x34
 801eb30:	910a      	str	r1, [sp, #40]	; 0x28
 801eb32:	6850      	ldr	r0, [r2, #4]
 801eb34:	9306      	str	r3, [sp, #24]
 801eb36:	6812      	ldr	r2, [r2, #0]
 801eb38:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801eb3c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801eb40:	fb00 1303 	mla	r3, r0, r3, r1
 801eb44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eb48:	9307      	str	r3, [sp, #28]
 801eb4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	9308      	str	r3, [sp, #32]
 801eb50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eb52:	685c      	ldr	r4, [r3, #4]
 801eb54:	3404      	adds	r4, #4
 801eb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	dc03      	bgt.n	801eb64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801eb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	f340 81d5 	ble.w	801ef0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801eb64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801eb66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eb6a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eb6e:	1e48      	subs	r0, r1, #1
 801eb70:	1e56      	subs	r6, r2, #1
 801eb72:	9b06      	ldr	r3, [sp, #24]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	f340 80b6 	ble.w	801ece6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801eb7a:	ea5f 472b 	movs.w	r7, fp, asr #16
 801eb7e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801eb82:	d406      	bmi.n	801eb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb84:	4287      	cmp	r7, r0
 801eb86:	da04      	bge.n	801eb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	db02      	blt.n	801eb92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb8c:	42b3      	cmp	r3, r6
 801eb8e:	f2c0 80ab 	blt.w	801ece8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801eb92:	3701      	adds	r7, #1
 801eb94:	f100 809c 	bmi.w	801ecd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb98:	42b9      	cmp	r1, r7
 801eb9a:	f2c0 8099 	blt.w	801ecd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eb9e:	3301      	adds	r3, #1
 801eba0:	f100 8096 	bmi.w	801ecd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801eba4:	429a      	cmp	r2, r3
 801eba6:	f2c0 8093 	blt.w	801ecd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ebaa:	9b06      	ldr	r3, [sp, #24]
 801ebac:	930b      	str	r3, [sp, #44]	; 0x2c
 801ebae:	9b07      	ldr	r3, [sp, #28]
 801ebb0:	9309      	str	r3, [sp, #36]	; 0x24
 801ebb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	f340 80b4 	ble.w	801ed22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ebba:	9820      	ldr	r0, [sp, #128]	; 0x80
 801ebbc:	142e      	asrs	r6, r5, #16
 801ebbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ebc0:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ebc4:	68c7      	ldr	r7, [r0, #12]
 801ebc6:	ea5f 402b 	movs.w	r0, fp, asr #16
 801ebca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ebce:	6892      	ldr	r2, [r2, #8]
 801ebd0:	f100 80fb 	bmi.w	801edca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ebd4:	f102 3cff 	add.w	ip, r2, #4294967295
 801ebd8:	4560      	cmp	r0, ip
 801ebda:	f280 80f6 	bge.w	801edca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ebde:	2e00      	cmp	r6, #0
 801ebe0:	f2c0 80f3 	blt.w	801edca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ebe4:	f107 3cff 	add.w	ip, r7, #4294967295
 801ebe8:	4566      	cmp	r6, ip
 801ebea:	f280 80ee 	bge.w	801edca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ebee:	b212      	sxth	r2, r2
 801ebf0:	fb06 0002 	mla	r0, r6, r2, r0
 801ebf4:	9e08      	ldr	r6, [sp, #32]
 801ebf6:	1837      	adds	r7, r6, r0
 801ebf8:	5c30      	ldrb	r0, [r6, r0]
 801ebfa:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801ebfe:	eb04 0c08 	add.w	ip, r4, r8
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	f000 80d3 	beq.w	801edae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ec08:	787e      	ldrb	r6, [r7, #1]
 801ec0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec0e:	4426      	add	r6, r4
 801ec10:	2900      	cmp	r1, #0
 801ec12:	f000 80d4 	beq.w	801edbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ec16:	18b8      	adds	r0, r7, r2
 801ec18:	5cba      	ldrb	r2, [r7, r2]
 801ec1a:	7840      	ldrb	r0, [r0, #1]
 801ec1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec24:	4422      	add	r2, r4
 801ec26:	4420      	add	r0, r4
 801ec28:	b29b      	uxth	r3, r3
 801ec2a:	78b7      	ldrb	r7, [r6, #2]
 801ec2c:	b289      	uxth	r1, r1
 801ec2e:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ec32:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ec36:	fb03 f901 	mul.w	r9, r3, r1
 801ec3a:	011b      	lsls	r3, r3, #4
 801ec3c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ec40:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ec44:	eba3 0309 	sub.w	r3, r3, r9
 801ec48:	b289      	uxth	r1, r1
 801ec4a:	b29b      	uxth	r3, r3
 801ec4c:	ebae 0e01 	sub.w	lr, lr, r1
 801ec50:	435f      	muls	r7, r3
 801ec52:	fa1f fe8e 	uxth.w	lr, lr
 801ec56:	fb0e 770a 	mla	r7, lr, sl, r7
 801ec5a:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ec5e:	fb01 770a 	mla	r7, r1, sl, r7
 801ec62:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ec66:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ec6a:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ec6e:	f896 8000 	ldrb.w	r8, [r6]
 801ec72:	7876      	ldrb	r6, [r6, #1]
 801ec74:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ec78:	fb03 f808 	mul.w	r8, r3, r8
 801ec7c:	4373      	muls	r3, r6
 801ec7e:	fb0e 8807 	mla	r8, lr, r7, r8
 801ec82:	7817      	ldrb	r7, [r2, #0]
 801ec84:	fb0e 330c 	mla	r3, lr, ip, r3
 801ec88:	fb01 8807 	mla	r8, r1, r7, r8
 801ec8c:	7807      	ldrb	r7, [r0, #0]
 801ec8e:	fb09 8707 	mla	r7, r9, r7, r8
 801ec92:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801ec96:	ea47 070a 	orr.w	r7, r7, sl
 801ec9a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ec9e:	fb01 310a 	mla	r1, r1, sl, r3
 801eca2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801eca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eca8:	fb09 1a0a 	mla	sl, r9, sl, r1
 801ecac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ecb0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ecb4:	ea47 070a 	orr.w	r7, r7, sl
 801ecb8:	801f      	strh	r7, [r3, #0]
 801ecba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecbc:	3302      	adds	r3, #2
 801ecbe:	9309      	str	r3, [sp, #36]	; 0x24
 801ecc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ecc2:	449b      	add	fp, r3
 801ecc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ecc6:	441d      	add	r5, r3
 801ecc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecca:	3b01      	subs	r3, #1
 801eccc:	930b      	str	r3, [sp, #44]	; 0x2c
 801ecce:	e770      	b.n	801ebb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ecd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ecd2:	449b      	add	fp, r3
 801ecd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ecd6:	441d      	add	r5, r3
 801ecd8:	9b06      	ldr	r3, [sp, #24]
 801ecda:	3b01      	subs	r3, #1
 801ecdc:	9306      	str	r3, [sp, #24]
 801ecde:	9b07      	ldr	r3, [sp, #28]
 801ece0:	3302      	adds	r3, #2
 801ece2:	9307      	str	r3, [sp, #28]
 801ece4:	e745      	b.n	801eb72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ece6:	d023      	beq.n	801ed30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ece8:	9b06      	ldr	r3, [sp, #24]
 801ecea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ecec:	3b01      	subs	r3, #1
 801ecee:	fb00 b003 	mla	r0, r0, r3, fp
 801ecf2:	1400      	asrs	r0, r0, #16
 801ecf4:	f53f af59 	bmi.w	801ebaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ecf8:	3901      	subs	r1, #1
 801ecfa:	4288      	cmp	r0, r1
 801ecfc:	f6bf af55 	bge.w	801ebaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ed00:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ed02:	fb01 5303 	mla	r3, r1, r3, r5
 801ed06:	141b      	asrs	r3, r3, #16
 801ed08:	f53f af4f 	bmi.w	801ebaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ed0c:	3a01      	subs	r2, #1
 801ed0e:	4293      	cmp	r3, r2
 801ed10:	f6bf af4b 	bge.w	801ebaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ed14:	9b06      	ldr	r3, [sp, #24]
 801ed16:	9309      	str	r3, [sp, #36]	; 0x24
 801ed18:	9b07      	ldr	r3, [sp, #28]
 801ed1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	dc70      	bgt.n	801ee04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ed22:	9b06      	ldr	r3, [sp, #24]
 801ed24:	9a07      	ldr	r2, [sp, #28]
 801ed26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ed2e:	9307      	str	r3, [sp, #28]
 801ed30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	f340 80eb 	ble.w	801ef0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801ed38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ed3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ed3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed46:	eef0 6a62 	vmov.f32	s13, s5
 801ed4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ed4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed56:	ee16 ba90 	vmov	fp, s13
 801ed5a:	eef0 6a43 	vmov.f32	s13, s6
 801ed5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed62:	ee16 5a90 	vmov	r5, s13
 801ed66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed7e:	ee12 2a90 	vmov	r2, s5
 801ed82:	eef0 2a47 	vmov.f32	s5, s14
 801ed86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed8a:	ee13 2a10 	vmov	r2, s6
 801ed8e:	931b      	str	r3, [sp, #108]	; 0x6c
 801ed90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ed92:	eeb0 3a67 	vmov.f32	s6, s15
 801ed96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed9a:	931c      	str	r3, [sp, #112]	; 0x70
 801ed9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eda0:	3b01      	subs	r3, #1
 801eda2:	930a      	str	r3, [sp, #40]	; 0x28
 801eda4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eda6:	bf08      	it	eq
 801eda8:	4613      	moveq	r3, r2
 801edaa:	9306      	str	r3, [sp, #24]
 801edac:	e6d3      	b.n	801eb56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801edae:	b149      	cbz	r1, 801edc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801edb0:	5cba      	ldrb	r2, [r7, r2]
 801edb2:	4660      	mov	r0, ip
 801edb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801edb8:	4422      	add	r2, r4
 801edba:	4666      	mov	r6, ip
 801edbc:	e734      	b.n	801ec28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801edbe:	4660      	mov	r0, ip
 801edc0:	4662      	mov	r2, ip
 801edc2:	e731      	b.n	801ec28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801edc4:	4660      	mov	r0, ip
 801edc6:	4662      	mov	r2, ip
 801edc8:	e7f7      	b.n	801edba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801edca:	f110 0c01 	adds.w	ip, r0, #1
 801edce:	f53f af74 	bmi.w	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801edd2:	4562      	cmp	r2, ip
 801edd4:	f6ff af71 	blt.w	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801edd8:	f116 0c01 	adds.w	ip, r6, #1
 801eddc:	f53f af6d 	bmi.w	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ede0:	4567      	cmp	r7, ip
 801ede2:	f6ff af6a 	blt.w	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ede6:	b23f      	sxth	r7, r7
 801ede8:	b212      	sxth	r2, r2
 801edea:	9701      	str	r7, [sp, #4]
 801edec:	9200      	str	r2, [sp, #0]
 801edee:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801edf2:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801edf6:	4623      	mov	r3, r4
 801edf8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801edfa:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801edfe:	f7ff fde7 	bl	801e9d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801ee02:	e75a      	b.n	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ee04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ee06:	ea4f 462b 	mov.w	r6, fp, asr #16
 801ee0a:	1428      	asrs	r0, r5, #16
 801ee0c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801ee10:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ee14:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ee18:	fb02 6000 	mla	r0, r2, r0, r6
 801ee1c:	9e08      	ldr	r6, [sp, #32]
 801ee1e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ee22:	1837      	adds	r7, r6, r0
 801ee24:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ee28:	eb04 0c08 	add.w	ip, r4, r8
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	d060      	beq.n	801eef2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801ee30:	787e      	ldrb	r6, [r7, #1]
 801ee32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee36:	4426      	add	r6, r4
 801ee38:	2900      	cmp	r1, #0
 801ee3a:	d062      	beq.n	801ef02 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801ee3c:	18b8      	adds	r0, r7, r2
 801ee3e:	5cba      	ldrb	r2, [r7, r2]
 801ee40:	7840      	ldrb	r0, [r0, #1]
 801ee42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee4a:	4422      	add	r2, r4
 801ee4c:	4420      	add	r0, r4
 801ee4e:	b29b      	uxth	r3, r3
 801ee50:	78b7      	ldrb	r7, [r6, #2]
 801ee52:	b289      	uxth	r1, r1
 801ee54:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ee58:	f89c c001 	ldrb.w	ip, [ip, #1]
 801ee5c:	fb03 f901 	mul.w	r9, r3, r1
 801ee60:	011b      	lsls	r3, r3, #4
 801ee62:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ee66:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ee6a:	eba3 0309 	sub.w	r3, r3, r9
 801ee6e:	b289      	uxth	r1, r1
 801ee70:	b29b      	uxth	r3, r3
 801ee72:	ebae 0e01 	sub.w	lr, lr, r1
 801ee76:	435f      	muls	r7, r3
 801ee78:	fa1f fe8e 	uxth.w	lr, lr
 801ee7c:	fb0e 770a 	mla	r7, lr, sl, r7
 801ee80:	f892 a002 	ldrb.w	sl, [r2, #2]
 801ee84:	fb01 770a 	mla	r7, r1, sl, r7
 801ee88:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ee8c:	fb09 7a0a 	mla	sl, r9, sl, r7
 801ee90:	f814 7008 	ldrb.w	r7, [r4, r8]
 801ee94:	f896 8000 	ldrb.w	r8, [r6]
 801ee98:	7876      	ldrb	r6, [r6, #1]
 801ee9a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801ee9e:	fb03 f808 	mul.w	r8, r3, r8
 801eea2:	4373      	muls	r3, r6
 801eea4:	7856      	ldrb	r6, [r2, #1]
 801eea6:	fb0e 8807 	mla	r8, lr, r7, r8
 801eeaa:	7817      	ldrb	r7, [r2, #0]
 801eeac:	fb0e 330c 	mla	r3, lr, ip, r3
 801eeb0:	fb01 8807 	mla	r8, r1, r7, r8
 801eeb4:	7807      	ldrb	r7, [r0, #0]
 801eeb6:	fb01 3306 	mla	r3, r1, r6, r3
 801eeba:	fb09 8707 	mla	r7, r9, r7, r8
 801eebe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801eec2:	ea47 070a 	orr.w	r7, r7, sl
 801eec6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801eeca:	fb09 3a0a 	mla	sl, r9, sl, r3
 801eece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eed0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eed4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eed8:	ea47 070a 	orr.w	r7, r7, sl
 801eedc:	f823 7b02 	strh.w	r7, [r3], #2
 801eee0:	930b      	str	r3, [sp, #44]	; 0x2c
 801eee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eee4:	449b      	add	fp, r3
 801eee6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eee8:	441d      	add	r5, r3
 801eeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeec:	3b01      	subs	r3, #1
 801eeee:	9309      	str	r3, [sp, #36]	; 0x24
 801eef0:	e714      	b.n	801ed1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801eef2:	b149      	cbz	r1, 801ef08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801eef4:	5cba      	ldrb	r2, [r7, r2]
 801eef6:	4660      	mov	r0, ip
 801eef8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eefc:	4422      	add	r2, r4
 801eefe:	4666      	mov	r6, ip
 801ef00:	e7a5      	b.n	801ee4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ef02:	4660      	mov	r0, ip
 801ef04:	4662      	mov	r2, ip
 801ef06:	e7a2      	b.n	801ee4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801ef08:	4660      	mov	r0, ip
 801ef0a:	4662      	mov	r2, ip
 801ef0c:	e7f7      	b.n	801eefe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801ef0e:	b00f      	add	sp, #60	; 0x3c
 801ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef14 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801ef14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef18:	b085      	sub	sp, #20
 801ef1a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801ef1e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801ef22:	9102      	str	r1, [sp, #8]
 801ef24:	2c00      	cmp	r4, #0
 801ef26:	fb04 710c 	mla	r1, r4, ip, r7
 801ef2a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ef2e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801ef32:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801ef36:	eb02 0e01 	add.w	lr, r2, r1
 801ef3a:	f2c0 8122 	blt.w	801f182 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ef3e:	45a0      	cmp	r8, r4
 801ef40:	f340 811f 	ble.w	801f182 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801ef44:	2f00      	cmp	r7, #0
 801ef46:	f2c0 811a 	blt.w	801f17e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ef4a:	45bc      	cmp	ip, r7
 801ef4c:	f340 8117 	ble.w	801f17e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801ef50:	5c52      	ldrb	r2, [r2, r1]
 801ef52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ef56:	1c7a      	adds	r2, r7, #1
 801ef58:	f100 8116 	bmi.w	801f188 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ef5c:	4594      	cmp	ip, r2
 801ef5e:	f340 8113 	ble.w	801f188 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801ef62:	2e00      	cmp	r6, #0
 801ef64:	f000 8112 	beq.w	801f18c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801ef68:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ef6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ef70:	3401      	adds	r4, #1
 801ef72:	f100 810f 	bmi.w	801f194 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ef76:	45a0      	cmp	r8, r4
 801ef78:	f340 810c 	ble.w	801f194 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801ef7c:	2800      	cmp	r0, #0
 801ef7e:	f000 810c 	beq.w	801f19a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801ef82:	2f00      	cmp	r7, #0
 801ef84:	f2c0 8104 	blt.w	801f190 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ef88:	45bc      	cmp	ip, r7
 801ef8a:	f340 8101 	ble.w	801f190 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801ef8e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801ef92:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801ef96:	3701      	adds	r7, #1
 801ef98:	f100 8102 	bmi.w	801f1a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801ef9c:	45bc      	cmp	ip, r7
 801ef9e:	f340 80ff 	ble.w	801f1a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801efa2:	2e00      	cmp	r6, #0
 801efa4:	f000 80fe 	beq.w	801f1a4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801efa8:	44f4      	add	ip, lr
 801efaa:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801efae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801efb2:	b2b6      	uxth	r6, r6
 801efb4:	b280      	uxth	r0, r0
 801efb6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801efba:	fb00 fe06 	mul.w	lr, r0, r6
 801efbe:	0136      	lsls	r6, r6, #4
 801efc0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801efc4:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801efc8:	eba6 070e 	sub.w	r7, r6, lr
 801efcc:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801efd0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801efd4:	b280      	uxth	r0, r0
 801efd6:	b2bf      	uxth	r7, r7
 801efd8:	1a1b      	subs	r3, r3, r0
 801efda:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801efde:	fb0a f607 	mul.w	r6, sl, r7
 801efe2:	b29b      	uxth	r3, r3
 801efe4:	fb0b 6603 	mla	r6, fp, r3, r6
 801efe8:	fb00 6609 	mla	r6, r0, r9, r6
 801efec:	fb0e 6608 	mla	r6, lr, r8, r6
 801eff0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801eff4:	9600      	str	r6, [sp, #0]
 801eff6:	2e00      	cmp	r6, #0
 801eff8:	f000 80be 	beq.w	801f178 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801effc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f000:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f004:	9e02      	ldr	r6, [sp, #8]
 801f006:	fb0b fc0c 	mul.w	ip, fp, ip
 801f00a:	fb0b f505 	mul.w	r5, fp, r5
 801f00e:	8836      	ldrh	r6, [r6, #0]
 801f010:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f014:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f018:	9501      	str	r5, [sp, #4]
 801f01a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f01e:	44dc      	add	ip, fp
 801f020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f024:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f028:	9503      	str	r5, [sp, #12]
 801f02a:	9d01      	ldr	r5, [sp, #4]
 801f02c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f030:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f034:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801f038:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f03c:	fb0a fc0c 	mul.w	ip, sl, ip
 801f040:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f044:	fb0a fa01 	mul.w	sl, sl, r1
 801f048:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f04c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f050:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801f054:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f058:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f05c:	4465      	add	r5, ip
 801f05e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f062:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f066:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f06a:	fb09 fc0c 	mul.w	ip, r9, ip
 801f06e:	0a2d      	lsrs	r5, r5, #8
 801f070:	fb09 f904 	mul.w	r9, r9, r4
 801f074:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f078:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f07c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f080:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f084:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f088:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f08c:	437d      	muls	r5, r7
 801f08e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f092:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801f096:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f09a:	4461      	add	r1, ip
 801f09c:	fb08 f404 	mul.w	r4, r8, r4
 801f0a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f0a4:	fb08 f802 	mul.w	r8, r8, r2
 801f0a8:	0a09      	lsrs	r1, r1, #8
 801f0aa:	0a22      	lsrs	r2, r4, #8
 801f0ac:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f0b0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f0b4:	fb07 f70a 	mul.w	r7, r7, sl
 801f0b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f0bc:	4414      	add	r4, r2
 801f0be:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f0c2:	0a24      	lsrs	r4, r4, #8
 801f0c4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f0c8:	9a03      	ldr	r2, [sp, #12]
 801f0ca:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f0ce:	fb02 5503 	mla	r5, r2, r3, r5
 801f0d2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f0d6:	9a00      	ldr	r2, [sp, #0]
 801f0d8:	fb04 540e 	mla	r4, r4, lr, r5
 801f0dc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f0e0:	1235      	asrs	r5, r6, #8
 801f0e2:	fb01 4100 	mla	r1, r1, r0, r4
 801f0e6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f0ea:	0a09      	lsrs	r1, r1, #8
 801f0ec:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801f0f0:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801f0f4:	fb03 7101 	mla	r1, r3, r1, r7
 801f0f8:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f0fc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801f100:	fb00 e101 	mla	r1, r0, r1, lr
 801f104:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801f108:	b287      	uxth	r7, r0
 801f10a:	0a09      	lsrs	r1, r1, #8
 801f10c:	437a      	muls	r2, r7
 801f10e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f112:	1c53      	adds	r3, r2, #1
 801f114:	4321      	orrs	r1, r4
 801f116:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f11a:	0c0a      	lsrs	r2, r1, #16
 801f11c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801f120:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f124:	b2c8      	uxtb	r0, r1
 801f126:	fb12 f207 	smulbb	r2, r2, r7
 801f12a:	fb14 f407 	smulbb	r4, r4, r7
 801f12e:	b2db      	uxtb	r3, r3
 801f130:	fb10 f007 	smulbb	r0, r0, r7
 801f134:	fb05 2503 	mla	r5, r5, r3, r2
 801f138:	10f2      	asrs	r2, r6, #3
 801f13a:	00f6      	lsls	r6, r6, #3
 801f13c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f140:	b2ad      	uxth	r5, r5
 801f142:	b2f6      	uxtb	r6, r6
 801f144:	fb02 4203 	mla	r2, r2, r3, r4
 801f148:	fb06 0303 	mla	r3, r6, r3, r0
 801f14c:	b294      	uxth	r4, r2
 801f14e:	b299      	uxth	r1, r3
 801f150:	1c6b      	adds	r3, r5, #1
 801f152:	1c62      	adds	r2, r4, #1
 801f154:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f158:	1c4b      	adds	r3, r1, #1
 801f15a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f15e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f162:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f166:	0952      	lsrs	r2, r2, #5
 801f168:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f16c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f170:	432b      	orrs	r3, r5
 801f172:	4313      	orrs	r3, r2
 801f174:	9a02      	ldr	r2, [sp, #8]
 801f176:	8013      	strh	r3, [r2, #0]
 801f178:	b005      	add	sp, #20
 801f17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f17e:	2500      	movs	r5, #0
 801f180:	e6e9      	b.n	801ef56 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801f182:	2100      	movs	r1, #0
 801f184:	460d      	mov	r5, r1
 801f186:	e6f3      	b.n	801ef70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801f188:	2100      	movs	r1, #0
 801f18a:	e6f1      	b.n	801ef70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801f18c:	4631      	mov	r1, r6
 801f18e:	e6ef      	b.n	801ef70 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801f190:	2400      	movs	r4, #0
 801f192:	e700      	b.n	801ef96 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801f194:	2200      	movs	r2, #0
 801f196:	4614      	mov	r4, r2
 801f198:	e70b      	b.n	801efb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801f19a:	4602      	mov	r2, r0
 801f19c:	4604      	mov	r4, r0
 801f19e:	e708      	b.n	801efb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801f1a0:	2200      	movs	r2, #0
 801f1a2:	e706      	b.n	801efb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801f1a4:	4632      	mov	r2, r6
 801f1a6:	e704      	b.n	801efb2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801f1a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1ac:	b09f      	sub	sp, #124	; 0x7c
 801f1ae:	921b      	str	r2, [sp, #108]	; 0x6c
 801f1b0:	9309      	str	r3, [sp, #36]	; 0x24
 801f1b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f1b4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f1b8:	901d      	str	r0, [sp, #116]	; 0x74
 801f1ba:	931c      	str	r3, [sp, #112]	; 0x70
 801f1bc:	6850      	ldr	r0, [r2, #4]
 801f1be:	9119      	str	r1, [sp, #100]	; 0x64
 801f1c0:	6812      	ldr	r2, [r2, #0]
 801f1c2:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801f1c4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f1c8:	fb00 1303 	mla	r3, r0, r3, r1
 801f1cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f1d0:	930c      	str	r3, [sp, #48]	; 0x30
 801f1d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	9312      	str	r3, [sp, #72]	; 0x48
 801f1d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f1da:	685e      	ldr	r6, [r3, #4]
 801f1dc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f1e0:	3604      	adds	r6, #4
 801f1e2:	930d      	str	r3, [sp, #52]	; 0x34
 801f1e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	dc03      	bgt.n	801f1f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f1ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	f340 8387 	ble.w	801f900 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801f1f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f1f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f1fc:	1e48      	subs	r0, r1, #1
 801f1fe:	1e57      	subs	r7, r2, #1
 801f200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f202:	2b00      	cmp	r3, #0
 801f204:	f340 8194 	ble.w	801f530 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801f208:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f20a:	142b      	asrs	r3, r5, #16
 801f20c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f210:	d406      	bmi.n	801f220 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f212:	4584      	cmp	ip, r0
 801f214:	da04      	bge.n	801f220 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f216:	2b00      	cmp	r3, #0
 801f218:	db02      	blt.n	801f220 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f21a:	42bb      	cmp	r3, r7
 801f21c:	f2c0 8189 	blt.w	801f532 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f220:	f11c 0c01 	adds.w	ip, ip, #1
 801f224:	f100 8177 	bmi.w	801f516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f228:	4561      	cmp	r1, ip
 801f22a:	f2c0 8174 	blt.w	801f516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f22e:	3301      	adds	r3, #1
 801f230:	f100 8171 	bmi.w	801f516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f234:	429a      	cmp	r2, r3
 801f236:	f2c0 816e 	blt.w	801f516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f23c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f23e:	931a      	str	r3, [sp, #104]	; 0x68
 801f240:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f242:	2b00      	cmp	r3, #0
 801f244:	f340 8193 	ble.w	801f56e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f248:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f24a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f24e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f252:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f256:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f258:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f25c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f25e:	141b      	asrs	r3, r3, #16
 801f260:	f100 81d6 	bmi.w	801f610 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f264:	f100 38ff 	add.w	r8, r0, #4294967295
 801f268:	4543      	cmp	r3, r8
 801f26a:	f280 81d1 	bge.w	801f610 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f26e:	f1bc 0f00 	cmp.w	ip, #0
 801f272:	f2c0 81cd 	blt.w	801f610 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f276:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f27a:	45c4      	cmp	ip, r8
 801f27c:	f280 81c8 	bge.w	801f610 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801f280:	b200      	sxth	r0, r0
 801f282:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f284:	fb0c 3300 	mla	r3, ip, r0, r3
 801f288:	eb04 0803 	add.w	r8, r4, r3
 801f28c:	5ce3      	ldrb	r3, [r4, r3]
 801f28e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f292:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f296:	2a00      	cmp	r2, #0
 801f298:	f000 81af 	beq.w	801f5fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801f29c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f2a0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f2a4:	940e      	str	r4, [sp, #56]	; 0x38
 801f2a6:	0e24      	lsrs	r4, r4, #24
 801f2a8:	9415      	str	r4, [sp, #84]	; 0x54
 801f2aa:	b179      	cbz	r1, 801f2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f2ac:	eb08 0c00 	add.w	ip, r8, r0
 801f2b0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f2b4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f2b8:	900a      	str	r0, [sp, #40]	; 0x28
 801f2ba:	0e00      	lsrs	r0, r0, #24
 801f2bc:	9013      	str	r0, [sp, #76]	; 0x4c
 801f2be:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f2c2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f2c6:	900f      	str	r0, [sp, #60]	; 0x3c
 801f2c8:	0e00      	lsrs	r0, r0, #24
 801f2ca:	9016      	str	r0, [sp, #88]	; 0x58
 801f2cc:	b292      	uxth	r2, r2
 801f2ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f2d0:	b289      	uxth	r1, r1
 801f2d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2d4:	fb02 f901 	mul.w	r9, r2, r1
 801f2d8:	0112      	lsls	r2, r2, #4
 801f2da:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f2de:	eba2 0809 	sub.w	r8, r2, r9
 801f2e2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f2e6:	b289      	uxth	r1, r1
 801f2e8:	fa1f f888 	uxth.w	r8, r8
 801f2ec:	1a52      	subs	r2, r2, r1
 801f2ee:	fb08 f000 	mul.w	r0, r8, r0
 801f2f2:	b292      	uxth	r2, r2
 801f2f4:	fb02 000e 	mla	r0, r2, lr, r0
 801f2f8:	fb01 0004 	mla	r0, r1, r4, r0
 801f2fc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f2fe:	fb09 0004 	mla	r0, r9, r4, r0
 801f302:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f306:	2800      	cmp	r0, #0
 801f308:	f000 80fa 	beq.w	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f30c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f310:	d01b      	beq.n	801f34a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801f312:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f31a:	fb0e fa0a 	mul.w	sl, lr, sl
 801f31e:	fb0e fe03 	mul.w	lr, lr, r3
 801f322:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f326:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f32a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f32e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f332:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f336:	4453      	add	r3, sl
 801f338:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f33c:	0a1b      	lsrs	r3, r3, #8
 801f33e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f342:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f346:	ea43 030c 	orr.w	r3, r3, ip
 801f34a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f34c:	2cff      	cmp	r4, #255	; 0xff
 801f34e:	d021      	beq.n	801f394 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801f350:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f352:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f356:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f358:	fb04 fb0b 	mul.w	fp, r4, fp
 801f35c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f35e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f362:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f364:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f368:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f36c:	fb04 fa0a 	mul.w	sl, r4, sl
 801f370:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f374:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f378:	44de      	add	lr, fp
 801f37a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f37e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f382:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f386:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f38a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f38e:	ea4e 040a 	orr.w	r4, lr, sl
 801f392:	940e      	str	r4, [sp, #56]	; 0x38
 801f394:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f396:	2cff      	cmp	r4, #255	; 0xff
 801f398:	d021      	beq.n	801f3de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f39a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f39c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f3a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f3a2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f3a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f3a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f3ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f3ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f3b2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801f3ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f3c2:	44de      	add	lr, fp
 801f3c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f3c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f3d8:	ea4e 040a 	orr.w	r4, lr, sl
 801f3dc:	940a      	str	r4, [sp, #40]	; 0x28
 801f3de:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f3e0:	2cff      	cmp	r4, #255	; 0xff
 801f3e2:	d021      	beq.n	801f428 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801f3e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f3e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f3ea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f3ec:	fb04 fb0b 	mul.w	fp, r4, fp
 801f3f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f3f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f3f6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f3f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f3fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f400:	fb04 fa0a 	mul.w	sl, r4, sl
 801f404:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f408:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f40c:	44de      	add	lr, fp
 801f40e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f416:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f41a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f41e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f422:	ea4e 040a 	orr.w	r4, lr, sl
 801f426:	940f      	str	r4, [sp, #60]	; 0x3c
 801f428:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f42a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f42e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f432:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f438:	fb08 fc0c 	mul.w	ip, r8, ip
 801f43c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f440:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f444:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f446:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f44a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f44e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f450:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f454:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f458:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f45a:	fb08 f80e 	mul.w	r8, r8, lr
 801f45e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f462:	fb02 8303 	mla	r3, r2, r3, r8
 801f466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f468:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f46c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f472:	fb01 330a 	mla	r3, r1, sl, r3
 801f476:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f47a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f47c:	fb09 3901 	mla	r9, r9, r1, r3
 801f480:	883b      	ldrh	r3, [r7, #0]
 801f482:	4342      	muls	r2, r0
 801f484:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f488:	1c50      	adds	r0, r2, #1
 801f48a:	1219      	asrs	r1, r3, #8
 801f48c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f490:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f494:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f498:	ea4c 0c09 	orr.w	ip, ip, r9
 801f49c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f4a0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801f4a4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801f4a8:	b2c0      	uxtb	r0, r0
 801f4aa:	fb12 f204 	smulbb	r2, r2, r4
 801f4ae:	fa5f fc8c 	uxtb.w	ip, ip
 801f4b2:	fb1e fe04 	smulbb	lr, lr, r4
 801f4b6:	fb01 2100 	mla	r1, r1, r0, r2
 801f4ba:	10da      	asrs	r2, r3, #3
 801f4bc:	fb1c fc04 	smulbb	ip, ip, r4
 801f4c0:	00db      	lsls	r3, r3, #3
 801f4c2:	b289      	uxth	r1, r1
 801f4c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f4c8:	b2db      	uxtb	r3, r3
 801f4ca:	fb02 e200 	mla	r2, r2, r0, lr
 801f4ce:	fb03 c300 	mla	r3, r3, r0, ip
 801f4d2:	b292      	uxth	r2, r2
 801f4d4:	fa1f fc83 	uxth.w	ip, r3
 801f4d8:	1c4b      	adds	r3, r1, #1
 801f4da:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f4de:	f10c 0301 	add.w	r3, ip, #1
 801f4e2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801f4e6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801f4ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f4ee:	430b      	orrs	r3, r1
 801f4f0:	1c51      	adds	r1, r2, #1
 801f4f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f4f6:	0952      	lsrs	r2, r2, #5
 801f4f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f4fc:	4313      	orrs	r3, r2
 801f4fe:	803b      	strh	r3, [r7, #0]
 801f500:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f502:	3702      	adds	r7, #2
 801f504:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f506:	441a      	add	r2, r3
 801f508:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f50a:	441d      	add	r5, r3
 801f50c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f50e:	9229      	str	r2, [sp, #164]	; 0xa4
 801f510:	3b01      	subs	r3, #1
 801f512:	931a      	str	r3, [sp, #104]	; 0x68
 801f514:	e694      	b.n	801f240 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f516:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f518:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f51a:	441c      	add	r4, r3
 801f51c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f51e:	441d      	add	r5, r3
 801f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f522:	9429      	str	r4, [sp, #164]	; 0xa4
 801f524:	3b01      	subs	r3, #1
 801f526:	9309      	str	r3, [sp, #36]	; 0x24
 801f528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f52a:	3302      	adds	r3, #2
 801f52c:	930c      	str	r3, [sp, #48]	; 0x30
 801f52e:	e667      	b.n	801f200 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f530:	d024      	beq.n	801f57c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801f532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f534:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f536:	3b01      	subs	r3, #1
 801f538:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f53a:	fb00 4003 	mla	r0, r0, r3, r4
 801f53e:	1400      	asrs	r0, r0, #16
 801f540:	f53f ae7b 	bmi.w	801f23a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f544:	3901      	subs	r1, #1
 801f546:	4288      	cmp	r0, r1
 801f548:	f6bf ae77 	bge.w	801f23a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f54c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f54e:	fb01 5303 	mla	r3, r1, r3, r5
 801f552:	141b      	asrs	r3, r3, #16
 801f554:	f53f ae71 	bmi.w	801f23a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f558:	3a01      	subs	r2, #1
 801f55a:	4293      	cmp	r3, r2
 801f55c:	f6bf ae6d 	bge.w	801f23a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f560:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f564:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801f568:	f1bb 0f00 	cmp.w	fp, #0
 801f56c:	dc70      	bgt.n	801f650 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801f56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f570:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f576:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f57a:	930c      	str	r3, [sp, #48]	; 0x30
 801f57c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f57e:	2b00      	cmp	r3, #0
 801f580:	f340 81be 	ble.w	801f900 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801f584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f588:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f58a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f58e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f592:	eef0 6a62 	vmov.f32	s13, s5
 801f596:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f59a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f59e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5a2:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f5a6:	eef0 6a43 	vmov.f32	s13, s6
 801f5aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5ae:	ee16 5a90 	vmov	r5, s13
 801f5b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5ca:	ee12 2a90 	vmov	r2, s5
 801f5ce:	eef0 2a47 	vmov.f32	s5, s14
 801f5d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5d6:	ee13 2a10 	vmov	r2, s6
 801f5da:	932b      	str	r3, [sp, #172]	; 0xac
 801f5dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5de:	eeb0 3a67 	vmov.f32	s6, s15
 801f5e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5e6:	932c      	str	r3, [sp, #176]	; 0xb0
 801f5e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f5ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f5ec:	3b01      	subs	r3, #1
 801f5ee:	9319      	str	r3, [sp, #100]	; 0x64
 801f5f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5f2:	bf08      	it	eq
 801f5f4:	4613      	moveq	r3, r2
 801f5f6:	9309      	str	r3, [sp, #36]	; 0x24
 801f5f8:	e5f4      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f5fa:	2900      	cmp	r1, #0
 801f5fc:	f43f ae66 	beq.w	801f2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f600:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f604:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f608:	900a      	str	r0, [sp, #40]	; 0x28
 801f60a:	0e00      	lsrs	r0, r0, #24
 801f60c:	9013      	str	r0, [sp, #76]	; 0x4c
 801f60e:	e65d      	b.n	801f2cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801f610:	f113 0801 	adds.w	r8, r3, #1
 801f614:	f53f af74 	bmi.w	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f618:	4540      	cmp	r0, r8
 801f61a:	f6ff af71 	blt.w	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f61e:	f11c 0801 	adds.w	r8, ip, #1
 801f622:	f53f af6d 	bmi.w	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f626:	45c6      	cmp	lr, r8
 801f628:	f6ff af6a 	blt.w	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f62c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f62e:	b200      	sxth	r0, r0
 801f630:	9302      	str	r3, [sp, #8]
 801f632:	fa0f f38e 	sxth.w	r3, lr
 801f636:	9000      	str	r0, [sp, #0]
 801f638:	9301      	str	r3, [sp, #4]
 801f63a:	4633      	mov	r3, r6
 801f63c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f63e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f642:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f646:	4639      	mov	r1, r7
 801f648:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f64a:	f7ff fc63 	bl	801ef14 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801f64e:	e757      	b.n	801f500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801f650:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f652:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f656:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f658:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f65c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f65e:	1427      	asrs	r7, r4, #16
 801f660:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f662:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f666:	142b      	asrs	r3, r5, #16
 801f668:	fb01 7303 	mla	r3, r1, r3, r7
 801f66c:	18e7      	adds	r7, r4, r3
 801f66e:	5ce3      	ldrb	r3, [r4, r3]
 801f670:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f674:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f678:	2a00      	cmp	r2, #0
 801f67a:	f000 8137 	beq.w	801f8ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801f67e:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f682:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801f686:	9410      	str	r4, [sp, #64]	; 0x40
 801f688:	0e24      	lsrs	r4, r4, #24
 801f68a:	9417      	str	r4, [sp, #92]	; 0x5c
 801f68c:	b170      	cbz	r0, 801f6ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f68e:	eb07 0e01 	add.w	lr, r7, r1
 801f692:	5c79      	ldrb	r1, [r7, r1]
 801f694:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f698:	910b      	str	r1, [sp, #44]	; 0x2c
 801f69a:	0e09      	lsrs	r1, r1, #24
 801f69c:	9114      	str	r1, [sp, #80]	; 0x50
 801f69e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801f6a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f6a6:	9111      	str	r1, [sp, #68]	; 0x44
 801f6a8:	0e09      	lsrs	r1, r1, #24
 801f6aa:	9118      	str	r1, [sp, #96]	; 0x60
 801f6ac:	b292      	uxth	r2, r2
 801f6ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f6b0:	b280      	uxth	r0, r0
 801f6b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f6b4:	fb02 f800 	mul.w	r8, r2, r0
 801f6b8:	0112      	lsls	r2, r2, #4
 801f6ba:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801f6be:	eba2 0e08 	sub.w	lr, r2, r8
 801f6c2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f6c6:	b280      	uxth	r0, r0
 801f6c8:	fa1f fe8e 	uxth.w	lr, lr
 801f6cc:	1a12      	subs	r2, r2, r0
 801f6ce:	fb0e f101 	mul.w	r1, lr, r1
 801f6d2:	b292      	uxth	r2, r2
 801f6d4:	fb02 110c 	mla	r1, r2, ip, r1
 801f6d8:	fb00 1104 	mla	r1, r0, r4, r1
 801f6dc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f6de:	fb08 1104 	mla	r1, r8, r4, r1
 801f6e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f6e6:	2900      	cmp	r1, #0
 801f6e8:	f000 80f5 	beq.w	801f8d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801f6ec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f6f0:	d019      	beq.n	801f726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801f6f2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f6f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6fa:	fb0c fa0a 	mul.w	sl, ip, sl
 801f6fe:	fb0c fc03 	mul.w	ip, ip, r3
 801f702:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f706:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f70a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f70e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f712:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f716:	4453      	add	r3, sl
 801f718:	0a3f      	lsrs	r7, r7, #8
 801f71a:	0a1b      	lsrs	r3, r3, #8
 801f71c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f720:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f724:	433b      	orrs	r3, r7
 801f726:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f728:	2cff      	cmp	r4, #255	; 0xff
 801f72a:	d020      	beq.n	801f76e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801f72c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f72e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f732:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f734:	4367      	muls	r7, r4
 801f736:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f738:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f73c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f740:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f742:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f74a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f74e:	44bc      	add	ip, r7
 801f750:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f758:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f75c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f764:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f768:	ea4c 040a 	orr.w	r4, ip, sl
 801f76c:	9410      	str	r4, [sp, #64]	; 0x40
 801f76e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f770:	2cff      	cmp	r4, #255	; 0xff
 801f772:	d020      	beq.n	801f7b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801f774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f776:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f77a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f77c:	4367      	muls	r7, r4
 801f77e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f780:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f784:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f788:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f78a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f78e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f792:	fb04 fa0a 	mul.w	sl, r4, sl
 801f796:	44bc      	add	ip, r7
 801f798:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f79c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7a0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7b0:	ea4c 040a 	orr.w	r4, ip, sl
 801f7b4:	940b      	str	r4, [sp, #44]	; 0x2c
 801f7b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f7b8:	2cff      	cmp	r4, #255	; 0xff
 801f7ba:	d020      	beq.n	801f7fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801f7bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7be:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f7c2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f7c4:	4367      	muls	r7, r4
 801f7c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f7cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f7d0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f7d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f7d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7da:	fb04 fa0a 	mul.w	sl, r4, sl
 801f7de:	44bc      	add	ip, r7
 801f7e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f7e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7f8:	ea4c 040a 	orr.w	r4, ip, sl
 801f7fc:	9411      	str	r4, [sp, #68]	; 0x44
 801f7fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f800:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f804:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f808:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f80c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f80e:	fb0e f707 	mul.w	r7, lr, r7
 801f812:	fb02 770c 	mla	r7, r2, ip, r7
 801f816:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f81a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f81c:	fb00 770c 	mla	r7, r0, ip, r7
 801f820:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f824:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f826:	fb08 770c 	mla	r7, r8, ip, r7
 801f82a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f82e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f830:	fb0e fe0c 	mul.w	lr, lr, ip
 801f834:	0a3f      	lsrs	r7, r7, #8
 801f836:	fb02 e303 	mla	r3, r2, r3, lr
 801f83a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f83c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f840:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f844:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f846:	fb00 330a 	mla	r3, r0, sl, r3
 801f84a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f84e:	f8b9 0000 	ldrh.w	r0, [r9]
 801f852:	fb08 3c0c 	mla	ip, r8, ip, r3
 801f856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f858:	1202      	asrs	r2, r0, #8
 801f85a:	434b      	muls	r3, r1
 801f85c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f860:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801f864:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f868:	1c59      	adds	r1, r3, #1
 801f86a:	ea47 070c 	orr.w	r7, r7, ip
 801f86e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f872:	0c3b      	lsrs	r3, r7, #16
 801f874:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f878:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801f87c:	b2ff      	uxtb	r7, r7
 801f87e:	fb13 f304 	smulbb	r3, r3, r4
 801f882:	b2c9      	uxtb	r1, r1
 801f884:	fb1c fc04 	smulbb	ip, ip, r4
 801f888:	fb02 3201 	mla	r2, r2, r1, r3
 801f88c:	10c3      	asrs	r3, r0, #3
 801f88e:	fb17 f704 	smulbb	r7, r7, r4
 801f892:	00c0      	lsls	r0, r0, #3
 801f894:	b292      	uxth	r2, r2
 801f896:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f89a:	b2c0      	uxtb	r0, r0
 801f89c:	fb03 c301 	mla	r3, r3, r1, ip
 801f8a0:	f102 0c01 	add.w	ip, r2, #1
 801f8a4:	fb00 7001 	mla	r0, r0, r1, r7
 801f8a8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f8ac:	b280      	uxth	r0, r0
 801f8ae:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	1c42      	adds	r2, r0, #1
 801f8b6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f8ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f8be:	ea42 020c 	orr.w	r2, r2, ip
 801f8c2:	f103 0c01 	add.w	ip, r3, #1
 801f8c6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f8ca:	095b      	lsrs	r3, r3, #5
 801f8cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f8d0:	431a      	orrs	r2, r3
 801f8d2:	f8a9 2000 	strh.w	r2, [r9]
 801f8d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f8d8:	f109 0902 	add.w	r9, r9, #2
 801f8dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f8de:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8e2:	441a      	add	r2, r3
 801f8e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f8e6:	9229      	str	r2, [sp, #164]	; 0xa4
 801f8e8:	441d      	add	r5, r3
 801f8ea:	e63d      	b.n	801f568 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801f8ec:	2800      	cmp	r0, #0
 801f8ee:	f43f aedd 	beq.w	801f6ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f8f2:	5c79      	ldrb	r1, [r7, r1]
 801f8f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f8f8:	910b      	str	r1, [sp, #44]	; 0x2c
 801f8fa:	0e09      	lsrs	r1, r1, #24
 801f8fc:	9114      	str	r1, [sp, #80]	; 0x50
 801f8fe:	e6d5      	b.n	801f6ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f900:	b01f      	add	sp, #124	; 0x7c
 801f902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f906 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801f906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f90a:	b089      	sub	sp, #36	; 0x24
 801f90c:	9101      	str	r1, [sp, #4]
 801f90e:	9801      	ldr	r0, [sp, #4]
 801f910:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801f914:	8800      	ldrh	r0, [r0, #0]
 801f916:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801f91a:	1206      	asrs	r6, r0, #8
 801f91c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801f920:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801f924:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f928:	9602      	str	r6, [sp, #8]
 801f92a:	10c6      	asrs	r6, r0, #3
 801f92c:	00c0      	lsls	r0, r0, #3
 801f92e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f932:	b2c0      	uxtb	r0, r0
 801f934:	9603      	str	r6, [sp, #12]
 801f936:	9004      	str	r0, [sp, #16]
 801f938:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801f93c:	fb07 100c 	mla	r0, r7, ip, r1
 801f940:	2f00      	cmp	r7, #0
 801f942:	eb02 0e00 	add.w	lr, r2, r0
 801f946:	f2c0 810a 	blt.w	801fb5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801f94a:	45b8      	cmp	r8, r7
 801f94c:	f340 8107 	ble.w	801fb5e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801f950:	2900      	cmp	r1, #0
 801f952:	f2c0 8102 	blt.w	801fb5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801f956:	458c      	cmp	ip, r1
 801f958:	f340 80ff 	ble.w	801fb5a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801f95c:	5c12      	ldrb	r2, [r2, r0]
 801f95e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f962:	1c4a      	adds	r2, r1, #1
 801f964:	f100 80fe 	bmi.w	801fb64 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801f968:	4594      	cmp	ip, r2
 801f96a:	f340 80fb 	ble.w	801fb64 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801f96e:	2d00      	cmp	r5, #0
 801f970:	f000 80fa 	beq.w	801fb68 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801f974:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f978:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f97c:	3701      	adds	r7, #1
 801f97e:	f100 80f7 	bmi.w	801fb70 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801f982:	45b8      	cmp	r8, r7
 801f984:	f340 80f4 	ble.w	801fb70 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801f988:	2c00      	cmp	r4, #0
 801f98a:	f000 80f4 	beq.w	801fb76 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801f98e:	2900      	cmp	r1, #0
 801f990:	eb0e 020c 	add.w	r2, lr, ip
 801f994:	f2c0 80ea 	blt.w	801fb6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801f998:	458c      	cmp	ip, r1
 801f99a:	f340 80e7 	ble.w	801fb6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801f99e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801f9a2:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801f9a6:	3101      	adds	r1, #1
 801f9a8:	f100 80e8 	bmi.w	801fb7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801f9ac:	458c      	cmp	ip, r1
 801f9ae:	f340 80e5 	ble.w	801fb7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801f9b2:	2d00      	cmp	r5, #0
 801f9b4:	f000 80e4 	beq.w	801fb80 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801f9b8:	7852      	ldrb	r2, [r2, #1]
 801f9ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f9be:	0e0b      	lsrs	r3, r1, #24
 801f9c0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801f9c4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f9c8:	9300      	str	r3, [sp, #0]
 801f9ca:	b2a4      	uxth	r4, r4
 801f9cc:	b2ab      	uxth	r3, r5
 801f9ce:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f9d2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f9d6:	fb03 f904 	mul.w	r9, r3, r4
 801f9da:	011b      	lsls	r3, r3, #4
 801f9dc:	fb0a f505 	mul.w	r5, sl, r5
 801f9e0:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801f9e4:	eba3 0e09 	sub.w	lr, r3, r9
 801f9e8:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801f9ec:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801f9f0:	0a28      	lsrs	r0, r5, #8
 801f9f2:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f9f6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f9fa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f9fe:	fb0a f303 	mul.w	r3, sl, r3
 801fa02:	fb08 f707 	mul.w	r7, r8, r7
 801fa06:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801fa0a:	4405      	add	r5, r0
 801fa0c:	fb08 fc0c 	mul.w	ip, r8, ip
 801fa10:	b2a4      	uxth	r4, r4
 801fa12:	0a2d      	lsrs	r5, r5, #8
 801fa14:	fa1f fe8e 	uxth.w	lr, lr
 801fa18:	1b12      	subs	r2, r2, r4
 801fa1a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801fa1e:	b292      	uxth	r2, r2
 801fa20:	9005      	str	r0, [sp, #20]
 801fa22:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801fa26:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fa2a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801fa2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fa32:	0a1b      	lsrs	r3, r3, #8
 801fa34:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fa38:	9306      	str	r3, [sp, #24]
 801fa3a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801fa3e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fa42:	4460      	add	r0, ip
 801fa44:	fb0b f303 	mul.w	r3, fp, r3
 801fa48:	fb0b f606 	mul.w	r6, fp, r6
 801fa4c:	0a00      	lsrs	r0, r0, #8
 801fa4e:	0a1d      	lsrs	r5, r3, #8
 801fa50:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fa54:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fa58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fa5c:	441d      	add	r5, r3
 801fa5e:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801fa62:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fa66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801fa6a:	0a2d      	lsrs	r5, r5, #8
 801fa6c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801fa70:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801fa74:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fa78:	0a36      	lsrs	r6, r6, #8
 801fa7a:	0a1b      	lsrs	r3, r3, #8
 801fa7c:	fb05 f50e 	mul.w	r5, r5, lr
 801fa80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fa84:	9307      	str	r3, [sp, #28]
 801fa86:	0e0b      	lsrs	r3, r1, #24
 801fa88:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fa8c:	fb0e f606 	mul.w	r6, lr, r6
 801fa90:	435f      	muls	r7, r3
 801fa92:	4359      	muls	r1, r3
 801fa94:	9b05      	ldr	r3, [sp, #20]
 801fa96:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa9e:	fb03 5502 	mla	r5, r3, r2, r5
 801faa2:	9b06      	ldr	r3, [sp, #24]
 801faa4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801faa8:	fb0e fe0b 	mul.w	lr, lr, fp
 801faac:	44bc      	add	ip, r7
 801faae:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801fab2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fab6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801faba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fabe:	0a09      	lsrs	r1, r1, #8
 801fac0:	fb0c 5509 	mla	r5, ip, r9, r5
 801fac4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801fac8:	fb00 5504 	mla	r5, r0, r4, r5
 801facc:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801fad0:	9b07      	ldr	r3, [sp, #28]
 801fad2:	fb02 6000 	mla	r0, r2, r0, r6
 801fad6:	0a2d      	lsrs	r5, r5, #8
 801fad8:	fb02 e20a 	mla	r2, r2, sl, lr
 801fadc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fae0:	fb09 0001 	mla	r0, r9, r1, r0
 801fae4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fae8:	fb04 0003 	mla	r0, r4, r3, r0
 801faec:	9b00      	ldr	r3, [sp, #0]
 801faee:	fb04 2408 	mla	r4, r4, r8, r2
 801faf2:	9a04      	ldr	r2, [sp, #16]
 801faf4:	0a00      	lsrs	r0, r0, #8
 801faf6:	fb09 4903 	mla	r9, r9, r3, r4
 801fafa:	9b02      	ldr	r3, [sp, #8]
 801fafc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fb00:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801fb04:	4305      	orrs	r5, r0
 801fb06:	fa5f f989 	uxtb.w	r9, r9
 801fb0a:	fb03 f109 	mul.w	r1, r3, r9
 801fb0e:	9b03      	ldr	r3, [sp, #12]
 801fb10:	fb03 f309 	mul.w	r3, r3, r9
 801fb14:	fb02 f909 	mul.w	r9, r2, r9
 801fb18:	1c4a      	adds	r2, r1, #1
 801fb1a:	1c58      	adds	r0, r3, #1
 801fb1c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fb20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fb24:	0c2a      	lsrs	r2, r5, #16
 801fb26:	0a2b      	lsrs	r3, r5, #8
 801fb28:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801fb2c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fb30:	0212      	lsls	r2, r2, #8
 801fb32:	00db      	lsls	r3, r3, #3
 801fb34:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801fb38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb3c:	4313      	orrs	r3, r2
 801fb3e:	f109 0201 	add.w	r2, r9, #1
 801fb42:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801fb46:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801fb4a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fb4e:	431d      	orrs	r5, r3
 801fb50:	9b01      	ldr	r3, [sp, #4]
 801fb52:	801d      	strh	r5, [r3, #0]
 801fb54:	b009      	add	sp, #36	; 0x24
 801fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb5a:	2000      	movs	r0, #0
 801fb5c:	e701      	b.n	801f962 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801fb5e:	2600      	movs	r6, #0
 801fb60:	4630      	mov	r0, r6
 801fb62:	e70b      	b.n	801f97c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801fb64:	2600      	movs	r6, #0
 801fb66:	e709      	b.n	801f97c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801fb68:	462e      	mov	r6, r5
 801fb6a:	e707      	b.n	801f97c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801fb6c:	2700      	movs	r7, #0
 801fb6e:	e71a      	b.n	801f9a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801fb70:	2100      	movs	r1, #0
 801fb72:	460f      	mov	r7, r1
 801fb74:	e723      	b.n	801f9be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801fb76:	4621      	mov	r1, r4
 801fb78:	4627      	mov	r7, r4
 801fb7a:	e720      	b.n	801f9be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801fb7c:	2100      	movs	r1, #0
 801fb7e:	e71e      	b.n	801f9be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801fb80:	4629      	mov	r1, r5
 801fb82:	e71c      	b.n	801f9be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801fb84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb88:	b09b      	sub	sp, #108	; 0x6c
 801fb8a:	9218      	str	r2, [sp, #96]	; 0x60
 801fb8c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fb8e:	9019      	str	r0, [sp, #100]	; 0x64
 801fb90:	9116      	str	r1, [sp, #88]	; 0x58
 801fb92:	6850      	ldr	r0, [r2, #4]
 801fb94:	9307      	str	r3, [sp, #28]
 801fb96:	6812      	ldr	r2, [r2, #0]
 801fb98:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801fb9a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fb9e:	fb00 1303 	mla	r3, r0, r3, r1
 801fba2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fba6:	930a      	str	r3, [sp, #40]	; 0x28
 801fba8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	930f      	str	r3, [sp, #60]	; 0x3c
 801fbae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbb0:	685e      	ldr	r6, [r3, #4]
 801fbb2:	3604      	adds	r6, #4
 801fbb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	dc03      	bgt.n	801fbc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fbba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	f340 8373 	ble.w	80202a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801fbc2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fbc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fbcc:	1e48      	subs	r0, r1, #1
 801fbce:	1e57      	subs	r7, r2, #1
 801fbd0:	9b07      	ldr	r3, [sp, #28]
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	f340 818f 	ble.w	801fef6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801fbd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fbda:	142b      	asrs	r3, r5, #16
 801fbdc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fbe0:	d406      	bmi.n	801fbf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbe2:	4584      	cmp	ip, r0
 801fbe4:	da04      	bge.n	801fbf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	db02      	blt.n	801fbf0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fbea:	42bb      	cmp	r3, r7
 801fbec:	f2c0 8184 	blt.w	801fef8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801fbf0:	f11c 0c01 	adds.w	ip, ip, #1
 801fbf4:	f100 8172 	bmi.w	801fedc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fbf8:	4561      	cmp	r1, ip
 801fbfa:	f2c0 816f 	blt.w	801fedc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fbfe:	3301      	adds	r3, #1
 801fc00:	f100 816c 	bmi.w	801fedc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fc04:	429a      	cmp	r2, r3
 801fc06:	f2c0 8169 	blt.w	801fedc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801fc0a:	9b07      	ldr	r3, [sp, #28]
 801fc0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fc0e:	9317      	str	r3, [sp, #92]	; 0x5c
 801fc10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	f340 818e 	ble.w	801ff34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801fc18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fc1a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fc1e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fc22:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fc26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc28:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801fc2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fc2e:	141b      	asrs	r3, r3, #16
 801fc30:	f100 81d1 	bmi.w	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fc34:	f101 38ff 	add.w	r8, r1, #4294967295
 801fc38:	4543      	cmp	r3, r8
 801fc3a:	f280 81cc 	bge.w	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fc3e:	f1bc 0f00 	cmp.w	ip, #0
 801fc42:	f2c0 81c8 	blt.w	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fc46:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fc4a:	45c4      	cmp	ip, r8
 801fc4c:	f280 81c3 	bge.w	801ffd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fc50:	b209      	sxth	r1, r1
 801fc52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fc54:	fb0c 3301 	mla	r3, ip, r1, r3
 801fc58:	eb04 0803 	add.w	r8, r4, r3
 801fc5c:	5ce3      	ldrb	r3, [r4, r3]
 801fc5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fc62:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fc66:	2a00      	cmp	r2, #0
 801fc68:	f000 81aa 	beq.w	801ffc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801fc6c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fc70:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fc74:	940b      	str	r4, [sp, #44]	; 0x2c
 801fc76:	0e24      	lsrs	r4, r4, #24
 801fc78:	9412      	str	r4, [sp, #72]	; 0x48
 801fc7a:	b178      	cbz	r0, 801fc9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fc7c:	eb08 0c01 	add.w	ip, r8, r1
 801fc80:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fc84:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc88:	9108      	str	r1, [sp, #32]
 801fc8a:	0e09      	lsrs	r1, r1, #24
 801fc8c:	9110      	str	r1, [sp, #64]	; 0x40
 801fc8e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801fc92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc96:	910c      	str	r1, [sp, #48]	; 0x30
 801fc98:	0e09      	lsrs	r1, r1, #24
 801fc9a:	9113      	str	r1, [sp, #76]	; 0x4c
 801fc9c:	b292      	uxth	r2, r2
 801fc9e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fca0:	b280      	uxth	r0, r0
 801fca2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fca4:	fb02 f900 	mul.w	r9, r2, r0
 801fca8:	0112      	lsls	r2, r2, #4
 801fcaa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fcae:	eba2 0809 	sub.w	r8, r2, r9
 801fcb2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fcb6:	b280      	uxth	r0, r0
 801fcb8:	fa1f f888 	uxth.w	r8, r8
 801fcbc:	1a12      	subs	r2, r2, r0
 801fcbe:	fb08 f101 	mul.w	r1, r8, r1
 801fcc2:	b292      	uxth	r2, r2
 801fcc4:	fb02 110e 	mla	r1, r2, lr, r1
 801fcc8:	fb00 1104 	mla	r1, r0, r4, r1
 801fccc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fcce:	fb09 1104 	mla	r1, r9, r4, r1
 801fcd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fcd6:	2900      	cmp	r1, #0
 801fcd8:	f000 80f5 	beq.w	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fcdc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fce0:	d01b      	beq.n	801fd1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801fce2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fcea:	fb0e fa0a 	mul.w	sl, lr, sl
 801fcee:	fb0e fe03 	mul.w	lr, lr, r3
 801fcf2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fcf6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fcfa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fcfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd02:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fd06:	4453      	add	r3, sl
 801fd08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd0c:	0a1b      	lsrs	r3, r3, #8
 801fd0e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fd12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fd16:	ea43 030c 	orr.w	r3, r3, ip
 801fd1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd1c:	2cff      	cmp	r4, #255	; 0xff
 801fd1e:	d021      	beq.n	801fd64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fd20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fd22:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fd26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd28:	fb04 fb0b 	mul.w	fp, r4, fp
 801fd2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fd2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fd34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fd38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd3c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fd48:	44de      	add	lr, fp
 801fd4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fd4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd5e:	ea4e 040a 	orr.w	r4, lr, sl
 801fd62:	940b      	str	r4, [sp, #44]	; 0x2c
 801fd64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fd66:	2cff      	cmp	r4, #255	; 0xff
 801fd68:	d021      	beq.n	801fdae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801fd6a:	9c08      	ldr	r4, [sp, #32]
 801fd6c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fd70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fd72:	fb04 fb0b 	mul.w	fp, r4, fp
 801fd76:	9c08      	ldr	r4, [sp, #32]
 801fd78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fd7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fd7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fd82:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd86:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fd92:	44de      	add	lr, fp
 801fd94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fd98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fda0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fda4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fda8:	ea4e 040a 	orr.w	r4, lr, sl
 801fdac:	9408      	str	r4, [sp, #32]
 801fdae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdb0:	2cff      	cmp	r4, #255	; 0xff
 801fdb2:	d021      	beq.n	801fdf8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fdb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fdb6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fdba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdbc:	fb04 fb0b 	mul.w	fp, r4, fp
 801fdc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fdc2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fdc6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fdc8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fdcc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fdd0:	fb04 fa0a 	mul.w	sl, r4, sl
 801fdd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fdd8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fddc:	44de      	add	lr, fp
 801fdde:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fde2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fde6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fdea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fdee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fdf2:	ea4e 040a 	orr.w	r4, lr, sl
 801fdf6:	940c      	str	r4, [sp, #48]	; 0x30
 801fdf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fdfa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fdfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe02:	43c9      	mvns	r1, r1
 801fe04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fe08:	9c08      	ldr	r4, [sp, #32]
 801fe0a:	fb08 fc0c 	mul.w	ip, r8, ip
 801fe0e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fe12:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fe16:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fe18:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fe1c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fe20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fe22:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fe26:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fe2a:	fb08 f80e 	mul.w	r8, r8, lr
 801fe2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe32:	fa5f fe81 	uxtb.w	lr, r1
 801fe36:	fb02 8303 	mla	r3, r2, r3, r8
 801fe3a:	9a08      	ldr	r2, [sp, #32]
 801fe3c:	f8b7 8000 	ldrh.w	r8, [r7]
 801fe40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe44:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fe48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801fe4e:	fb00 330a 	mla	r3, r0, sl, r3
 801fe52:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801fe56:	ea4f 2228 	mov.w	r2, r8, asr #8
 801fe5a:	fb09 3900 	mla	r9, r9, r0, r3
 801fe5e:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801fe62:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801fe66:	b2c9      	uxtb	r1, r1
 801fe68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe6c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fe70:	fb02 f20e 	mul.w	r2, r2, lr
 801fe74:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fe78:	fb00 f00e 	mul.w	r0, r0, lr
 801fe7c:	1c53      	adds	r3, r2, #1
 801fe7e:	fb01 f10e 	mul.w	r1, r1, lr
 801fe82:	ea4c 0c09 	orr.w	ip, ip, r9
 801fe86:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fe8a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801fe8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe92:	4a60      	ldr	r2, [pc, #384]	; (8020014 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801fe94:	b2db      	uxtb	r3, r3
 801fe96:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801fe9a:	1c43      	adds	r3, r0, #1
 801fe9c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fea0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fea4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801fea8:	00db      	lsls	r3, r3, #3
 801feaa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feae:	4313      	orrs	r3, r2
 801feb0:	1c4a      	adds	r2, r1, #1
 801feb2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801feb6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801feba:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801febe:	ea4c 0c03 	orr.w	ip, ip, r3
 801fec2:	f8a7 c000 	strh.w	ip, [r7]
 801fec6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fec8:	3702      	adds	r7, #2
 801feca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fecc:	441a      	add	r2, r3
 801fece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fed0:	441d      	add	r5, r3
 801fed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fed4:	9225      	str	r2, [sp, #148]	; 0x94
 801fed6:	3b01      	subs	r3, #1
 801fed8:	9317      	str	r3, [sp, #92]	; 0x5c
 801feda:	e699      	b.n	801fc10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fedc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fede:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fee0:	441c      	add	r4, r3
 801fee2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fee4:	441d      	add	r5, r3
 801fee6:	9b07      	ldr	r3, [sp, #28]
 801fee8:	9425      	str	r4, [sp, #148]	; 0x94
 801feea:	3b01      	subs	r3, #1
 801feec:	9307      	str	r3, [sp, #28]
 801feee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fef0:	3302      	adds	r3, #2
 801fef2:	930a      	str	r3, [sp, #40]	; 0x28
 801fef4:	e66c      	b.n	801fbd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fef6:	d024      	beq.n	801ff42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801fef8:	9b07      	ldr	r3, [sp, #28]
 801fefa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fefc:	3b01      	subs	r3, #1
 801fefe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ff00:	fb00 4003 	mla	r0, r0, r3, r4
 801ff04:	1400      	asrs	r0, r0, #16
 801ff06:	f53f ae80 	bmi.w	801fc0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff0a:	3901      	subs	r1, #1
 801ff0c:	4288      	cmp	r0, r1
 801ff0e:	f6bf ae7c 	bge.w	801fc0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff12:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ff14:	fb01 5303 	mla	r3, r1, r3, r5
 801ff18:	141b      	asrs	r3, r3, #16
 801ff1a:	f53f ae76 	bmi.w	801fc0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff1e:	3a01      	subs	r2, #1
 801ff20:	4293      	cmp	r3, r2
 801ff22:	f6bf ae72 	bge.w	801fc0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ff26:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ff2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ff2e:	f1bb 0f00 	cmp.w	fp, #0
 801ff32:	dc71      	bgt.n	8020018 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ff34:	9b07      	ldr	r3, [sp, #28]
 801ff36:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ff3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff3c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ff40:	930a      	str	r3, [sp, #40]	; 0x28
 801ff42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	f340 81af 	ble.w	80202a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801ff4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ff4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff50:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff54:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff58:	eef0 6a62 	vmov.f32	s13, s5
 801ff5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ff60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff68:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801ff6c:	eef0 6a43 	vmov.f32	s13, s6
 801ff70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ff74:	ee16 5a90 	vmov	r5, s13
 801ff78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff90:	ee12 2a90 	vmov	r2, s5
 801ff94:	eef0 2a47 	vmov.f32	s5, s14
 801ff98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff9c:	ee13 2a10 	vmov	r2, s6
 801ffa0:	9327      	str	r3, [sp, #156]	; 0x9c
 801ffa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ffa4:	eeb0 3a67 	vmov.f32	s6, s15
 801ffa8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffac:	9328      	str	r3, [sp, #160]	; 0xa0
 801ffae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ffb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ffb2:	3b01      	subs	r3, #1
 801ffb4:	9316      	str	r3, [sp, #88]	; 0x58
 801ffb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ffb8:	bf08      	it	eq
 801ffba:	4613      	moveq	r3, r2
 801ffbc:	9307      	str	r3, [sp, #28]
 801ffbe:	e5f9      	b.n	801fbb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ffc0:	2800      	cmp	r0, #0
 801ffc2:	f43f ae6b 	beq.w	801fc9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ffc6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ffca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ffce:	9108      	str	r1, [sp, #32]
 801ffd0:	0e09      	lsrs	r1, r1, #24
 801ffd2:	9110      	str	r1, [sp, #64]	; 0x40
 801ffd4:	e662      	b.n	801fc9c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ffd6:	f113 0801 	adds.w	r8, r3, #1
 801ffda:	f53f af74 	bmi.w	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ffde:	4541      	cmp	r1, r8
 801ffe0:	f6ff af71 	blt.w	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ffe4:	f11c 0801 	adds.w	r8, ip, #1
 801ffe8:	f53f af6d 	bmi.w	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ffec:	45c6      	cmp	lr, r8
 801ffee:	f6ff af6a 	blt.w	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801fff2:	b209      	sxth	r1, r1
 801fff4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801fff8:	fa0f f38e 	sxth.w	r3, lr
 801fffc:	9100      	str	r1, [sp, #0]
 801fffe:	4639      	mov	r1, r7
 8020000:	9301      	str	r3, [sp, #4]
 8020002:	4633      	mov	r3, r6
 8020004:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802000a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802000c:	f7ff fc7b 	bl	801f906 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8020010:	e759      	b.n	801fec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8020012:	bf00      	nop
 8020014:	fffff800 	.word	0xfffff800
 8020018:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802001a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802001e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020020:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020024:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020026:	1427      	asrs	r7, r4, #16
 8020028:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802002a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802002e:	142b      	asrs	r3, r5, #16
 8020030:	fb01 7303 	mla	r3, r1, r3, r7
 8020034:	18e7      	adds	r7, r4, r3
 8020036:	5ce3      	ldrb	r3, [r4, r3]
 8020038:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802003c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020040:	2a00      	cmp	r2, #0
 8020042:	f000 8127 	beq.w	8020294 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8020046:	f897 e001 	ldrb.w	lr, [r7, #1]
 802004a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802004e:	940d      	str	r4, [sp, #52]	; 0x34
 8020050:	0e24      	lsrs	r4, r4, #24
 8020052:	9414      	str	r4, [sp, #80]	; 0x50
 8020054:	b170      	cbz	r0, 8020074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8020056:	eb07 0e01 	add.w	lr, r7, r1
 802005a:	5c79      	ldrb	r1, [r7, r1]
 802005c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020060:	9109      	str	r1, [sp, #36]	; 0x24
 8020062:	0e09      	lsrs	r1, r1, #24
 8020064:	9111      	str	r1, [sp, #68]	; 0x44
 8020066:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802006a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802006e:	910e      	str	r1, [sp, #56]	; 0x38
 8020070:	0e09      	lsrs	r1, r1, #24
 8020072:	9115      	str	r1, [sp, #84]	; 0x54
 8020074:	b292      	uxth	r2, r2
 8020076:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020078:	b280      	uxth	r0, r0
 802007a:	fb02 f800 	mul.w	r8, r2, r0
 802007e:	0112      	lsls	r2, r2, #4
 8020080:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8020084:	eba2 0e08 	sub.w	lr, r2, r8
 8020088:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802008c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802008e:	b280      	uxth	r0, r0
 8020090:	fa1f fe8e 	uxth.w	lr, lr
 8020094:	1a09      	subs	r1, r1, r0
 8020096:	fb0e f202 	mul.w	r2, lr, r2
 802009a:	b289      	uxth	r1, r1
 802009c:	fb01 220c 	mla	r2, r1, ip, r2
 80200a0:	fb00 2204 	mla	r2, r0, r4, r2
 80200a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80200a6:	fb08 2204 	mla	r2, r8, r4, r2
 80200aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80200ae:	2a00      	cmp	r2, #0
 80200b0:	f000 80e5 	beq.w	802027e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80200b4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80200b8:	d019      	beq.n	80200ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80200ba:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80200be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200c2:	fb0c fa0a 	mul.w	sl, ip, sl
 80200c6:	fb0c fc03 	mul.w	ip, ip, r3
 80200ca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80200ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80200d2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80200d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200da:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80200de:	4453      	add	r3, sl
 80200e0:	0a3f      	lsrs	r7, r7, #8
 80200e2:	0a1b      	lsrs	r3, r3, #8
 80200e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80200e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200ec:	433b      	orrs	r3, r7
 80200ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80200f0:	2cff      	cmp	r4, #255	; 0xff
 80200f2:	d020      	beq.n	8020136 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80200f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80200f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80200fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80200fc:	4367      	muls	r7, r4
 80200fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020100:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020104:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020108:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802010a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802010e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020112:	fb04 fa0a 	mul.w	sl, r4, sl
 8020116:	44bc      	add	ip, r7
 8020118:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802011c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020120:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020124:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020128:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802012c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020130:	ea4c 040a 	orr.w	r4, ip, sl
 8020134:	940d      	str	r4, [sp, #52]	; 0x34
 8020136:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020138:	2cff      	cmp	r4, #255	; 0xff
 802013a:	d020      	beq.n	802017e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802013c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802013e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020142:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020144:	4367      	muls	r7, r4
 8020146:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020148:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802014c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020150:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020152:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802015a:	fb04 fa0a 	mul.w	sl, r4, sl
 802015e:	44bc      	add	ip, r7
 8020160:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020164:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020168:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802016c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020170:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020174:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020178:	ea4c 040a 	orr.w	r4, ip, sl
 802017c:	9409      	str	r4, [sp, #36]	; 0x24
 802017e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020180:	2cff      	cmp	r4, #255	; 0xff
 8020182:	d020      	beq.n	80201c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8020184:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020186:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802018a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802018c:	4367      	muls	r7, r4
 802018e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020190:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020194:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020198:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802019a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802019e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80201a6:	44bc      	add	ip, r7
 80201a8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80201ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80201b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80201bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80201c0:	ea4c 040a 	orr.w	r4, ip, sl
 80201c4:	940e      	str	r4, [sp, #56]	; 0x38
 80201c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80201c8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80201cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80201d0:	43d2      	mvns	r2, r2
 80201d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80201d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80201d8:	b2d2      	uxtb	r2, r2
 80201da:	fb0e f707 	mul.w	r7, lr, r7
 80201de:	fb01 770c 	mla	r7, r1, ip, r7
 80201e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80201e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80201e8:	fb00 770c 	mla	r7, r0, ip, r7
 80201ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80201f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80201f2:	fb08 770c 	mla	r7, r8, ip, r7
 80201f6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80201fa:	fb0e fe0c 	mul.w	lr, lr, ip
 80201fe:	0a3f      	lsrs	r7, r7, #8
 8020200:	fb01 e303 	mla	r3, r1, r3, lr
 8020204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020206:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802020a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802020e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020210:	fb00 330a 	mla	r3, r0, sl, r3
 8020214:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020218:	fb08 3c0c 	mla	ip, r8, ip, r3
 802021c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020220:	1218      	asrs	r0, r3, #8
 8020222:	10d9      	asrs	r1, r3, #3
 8020224:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020228:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802022c:	00db      	lsls	r3, r3, #3
 802022e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020232:	4350      	muls	r0, r2
 8020234:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020238:	b2db      	uxtb	r3, r3
 802023a:	4351      	muls	r1, r2
 802023c:	ea47 070c 	orr.w	r7, r7, ip
 8020240:	4353      	muls	r3, r2
 8020242:	1c42      	adds	r2, r0, #1
 8020244:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020248:	0c3a      	lsrs	r2, r7, #16
 802024a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802024e:	4a18      	ldr	r2, [pc, #96]	; (80202b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8020250:	b2c0      	uxtb	r0, r0
 8020252:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8020256:	1c4a      	adds	r2, r1, #1
 8020258:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802025c:	0a3a      	lsrs	r2, r7, #8
 802025e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020262:	00c9      	lsls	r1, r1, #3
 8020264:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020268:	4301      	orrs	r1, r0
 802026a:	1c58      	adds	r0, r3, #1
 802026c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020270:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020274:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8020278:	4308      	orrs	r0, r1
 802027a:	f8a9 0000 	strh.w	r0, [r9]
 802027e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020280:	f109 0902 	add.w	r9, r9, #2
 8020284:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020286:	f10b 3bff 	add.w	fp, fp, #4294967295
 802028a:	441a      	add	r2, r3
 802028c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802028e:	9225      	str	r2, [sp, #148]	; 0x94
 8020290:	441d      	add	r5, r3
 8020292:	e64c      	b.n	801ff2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020294:	2800      	cmp	r0, #0
 8020296:	f43f aeed 	beq.w	8020074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802029a:	5c79      	ldrb	r1, [r7, r1]
 802029c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202a0:	9109      	str	r1, [sp, #36]	; 0x24
 80202a2:	0e09      	lsrs	r1, r1, #24
 80202a4:	9111      	str	r1, [sp, #68]	; 0x44
 80202a6:	e6e5      	b.n	8020074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80202a8:	b01b      	add	sp, #108	; 0x6c
 80202aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202ae:	bf00      	nop
 80202b0:	fffff800 	.word	0xfffff800

080202b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80202b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202b8:	b085      	sub	sp, #20
 80202ba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80202be:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80202c2:	2800      	cmp	r0, #0
 80202c4:	9103      	str	r1, [sp, #12]
 80202c6:	fb00 7406 	mla	r4, r0, r6, r7
 80202ca:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80202ce:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80202d2:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80202d6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80202da:	eb03 0904 	add.w	r9, r3, r4
 80202de:	9501      	str	r5, [sp, #4]
 80202e0:	f2c0 8150 	blt.w	8020584 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80202e4:	4583      	cmp	fp, r0
 80202e6:	f340 814d 	ble.w	8020584 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80202ea:	2f00      	cmp	r7, #0
 80202ec:	f2c0 8146 	blt.w	802057c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80202f0:	42be      	cmp	r6, r7
 80202f2:	f340 8143 	ble.w	802057c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80202f6:	f813 c004 	ldrb.w	ip, [r3, r4]
 80202fa:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80202fe:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8020302:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020306:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802030a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802030e:	4355      	muls	r5, r2
 8020310:	fb0c f203 	mul.w	r2, ip, r3
 8020314:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020318:	f605 0501 	addw	r5, r5, #2049	; 0x801
 802031c:	441d      	add	r5, r3
 802031e:	f102 0320 	add.w	r3, r2, #32
 8020322:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020326:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802032a:	0a1b      	lsrs	r3, r3, #8
 802032c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020330:	431c      	orrs	r4, r3
 8020332:	1c7b      	adds	r3, r7, #1
 8020334:	f100 812b 	bmi.w	802058e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8020338:	429e      	cmp	r6, r3
 802033a:	f340 8128 	ble.w	802058e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802033e:	2900      	cmp	r1, #0
 8020340:	f000 8128 	beq.w	8020594 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8020344:	9a01      	ldr	r2, [sp, #4]
 8020346:	f899 3001 	ldrb.w	r3, [r9, #1]
 802034a:	8855      	ldrh	r5, [r2, #2]
 802034c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020350:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8020354:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020358:	fb08 f802 	mul.w	r8, r8, r2
 802035c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020360:	435d      	muls	r5, r3
 8020362:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020366:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802036a:	44d0      	add	r8, sl
 802036c:	f105 0a20 	add.w	sl, r5, #32
 8020370:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020374:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020378:	0a2d      	lsrs	r5, r5, #8
 802037a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802037e:	432a      	orrs	r2, r5
 8020380:	3001      	adds	r0, #1
 8020382:	f100 810d 	bmi.w	80205a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8020386:	4583      	cmp	fp, r0
 8020388:	f340 810a 	ble.w	80205a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802038c:	f1be 0f00 	cmp.w	lr, #0
 8020390:	f000 810b 	beq.w	80205aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8020394:	2f00      	cmp	r7, #0
 8020396:	f2c0 8100 	blt.w	802059a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802039a:	42be      	cmp	r6, r7
 802039c:	f340 80fd 	ble.w	802059a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 80203a0:	9801      	ldr	r0, [sp, #4]
 80203a2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80203a6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80203aa:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 80203ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80203b2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80203b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80203ba:	fb0a fa00 	mul.w	sl, sl, r0
 80203be:	fb05 f808 	mul.w	r8, r5, r8
 80203c2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80203c6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80203ca:	4482      	add	sl, r0
 80203cc:	f108 0020 	add.w	r0, r8, #32
 80203d0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80203d4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80203d8:	0a00      	lsrs	r0, r0, #8
 80203da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80203de:	ea4b 0b00 	orr.w	fp, fp, r0
 80203e2:	3701      	adds	r7, #1
 80203e4:	f100 80e6 	bmi.w	80205b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80203e8:	42be      	cmp	r6, r7
 80203ea:	f340 80e3 	ble.w	80205b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80203ee:	2900      	cmp	r1, #0
 80203f0:	f000 80e3 	beq.w	80205ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80203f4:	3601      	adds	r6, #1
 80203f6:	9801      	ldr	r0, [sp, #4]
 80203f8:	f819 7006 	ldrb.w	r7, [r9, r6]
 80203fc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8020400:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8020404:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8020408:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802040c:	fb09 f906 	mul.w	r9, r9, r6
 8020410:	fb07 f800 	mul.w	r8, r7, r0
 8020414:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8020418:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802041c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8020420:	44d1      	add	r9, sl
 8020422:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8020426:	f108 0020 	add.w	r0, r8, #32
 802042a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802042e:	0a00      	lsrs	r0, r0, #8
 8020430:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020434:	4330      	orrs	r0, r6
 8020436:	b28e      	uxth	r6, r1
 8020438:	fa1f f98e 	uxth.w	r9, lr
 802043c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8020440:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8020444:	fb06 f809 	mul.w	r8, r6, r9
 8020448:	0136      	lsls	r6, r6, #4
 802044a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802044e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020452:	9601      	str	r6, [sp, #4]
 8020454:	ea4a 0404 	orr.w	r4, sl, r4
 8020458:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802045c:	fa1f f689 	uxth.w	r6, r9
 8020460:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020464:	fb11 f90e 	smulbb	r9, r1, lr
 8020468:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802046c:	9602      	str	r6, [sp, #8]
 802046e:	4626      	mov	r6, r4
 8020470:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8020474:	f1ce 0410 	rsb	r4, lr, #16
 8020478:	ea4a 0202 	orr.w	r2, sl, r2
 802047c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020480:	1a64      	subs	r4, r4, r1
 8020482:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8020486:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802048a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802048e:	434a      	muls	r2, r1
 8020490:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020494:	ea4a 0000 	orr.w	r0, sl, r0
 8020498:	9903      	ldr	r1, [sp, #12]
 802049a:	fb04 2406 	mla	r4, r4, r6, r2
 802049e:	9e02      	ldr	r6, [sp, #8]
 80204a0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80204a4:	fb09 4200 	mla	r2, r9, r0, r4
 80204a8:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80204ac:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80204b0:	8808      	ldrh	r0, [r1, #0]
 80204b2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80204b6:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80204ba:	ea44 0b0b 	orr.w	fp, r4, fp
 80204be:	9c01      	ldr	r4, [sp, #4]
 80204c0:	b289      	uxth	r1, r1
 80204c2:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80204c6:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80204ca:	1ba4      	subs	r4, r4, r6
 80204cc:	9e01      	ldr	r6, [sp, #4]
 80204ce:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80204d2:	eba6 0608 	sub.w	r6, r6, r8
 80204d6:	b2a4      	uxth	r4, r4
 80204d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80204dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80204e0:	b2b6      	uxth	r6, r6
 80204e2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80204e6:	4373      	muls	r3, r6
 80204e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80204ec:	fb0c 3304 	mla	r3, ip, r4, r3
 80204f0:	9c02      	ldr	r4, [sp, #8]
 80204f2:	fa1f f28e 	uxth.w	r2, lr
 80204f6:	fb04 3505 	mla	r5, r4, r5, r3
 80204fa:	10d4      	asrs	r4, r2, #3
 80204fc:	fb08 5707 	mla	r7, r8, r7, r5
 8020500:	1215      	asrs	r5, r2, #8
 8020502:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8020506:	00d2      	lsls	r2, r2, #3
 8020508:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802050c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020510:	b2d2      	uxtb	r2, r2
 8020512:	434f      	muls	r7, r1
 8020514:	1c7b      	adds	r3, r7, #1
 8020516:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802051a:	1203      	asrs	r3, r0, #8
 802051c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8020520:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020524:	b2ff      	uxtb	r7, r7
 8020526:	fb13 f307 	smulbb	r3, r3, r7
 802052a:	fb05 3501 	mla	r5, r5, r1, r3
 802052e:	10c3      	asrs	r3, r0, #3
 8020530:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020534:	b2ad      	uxth	r5, r5
 8020536:	fb13 f307 	smulbb	r3, r3, r7
 802053a:	fb04 3401 	mla	r4, r4, r1, r3
 802053e:	00c3      	lsls	r3, r0, #3
 8020540:	b2db      	uxtb	r3, r3
 8020542:	b2a4      	uxth	r4, r4
 8020544:	fb13 f307 	smulbb	r3, r3, r7
 8020548:	fb02 3101 	mla	r1, r2, r1, r3
 802054c:	1c6b      	adds	r3, r5, #1
 802054e:	1c62      	adds	r2, r4, #1
 8020550:	b289      	uxth	r1, r1
 8020552:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020556:	1c4b      	adds	r3, r1, #1
 8020558:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802055c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020560:	9a03      	ldr	r2, [sp, #12]
 8020562:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020566:	0964      	lsrs	r4, r4, #5
 8020568:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802056c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8020570:	432b      	orrs	r3, r5
 8020572:	4323      	orrs	r3, r4
 8020574:	8013      	strh	r3, [r2, #0]
 8020576:	b005      	add	sp, #20
 8020578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802057c:	f04f 0c00 	mov.w	ip, #0
 8020580:	4664      	mov	r4, ip
 8020582:	e6d6      	b.n	8020332 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8020584:	2300      	movs	r3, #0
 8020586:	469c      	mov	ip, r3
 8020588:	461a      	mov	r2, r3
 802058a:	461c      	mov	r4, r3
 802058c:	e6f8      	b.n	8020380 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802058e:	2300      	movs	r3, #0
 8020590:	461a      	mov	r2, r3
 8020592:	e6f5      	b.n	8020380 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8020594:	460b      	mov	r3, r1
 8020596:	460a      	mov	r2, r1
 8020598:	e6f2      	b.n	8020380 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802059a:	2500      	movs	r5, #0
 802059c:	46ab      	mov	fp, r5
 802059e:	e720      	b.n	80203e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 80205a0:	2700      	movs	r7, #0
 80205a2:	463d      	mov	r5, r7
 80205a4:	4638      	mov	r0, r7
 80205a6:	46bb      	mov	fp, r7
 80205a8:	e745      	b.n	8020436 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80205aa:	4677      	mov	r7, lr
 80205ac:	4675      	mov	r5, lr
 80205ae:	4670      	mov	r0, lr
 80205b0:	46f3      	mov	fp, lr
 80205b2:	e740      	b.n	8020436 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80205b4:	2700      	movs	r7, #0
 80205b6:	4638      	mov	r0, r7
 80205b8:	e73d      	b.n	8020436 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80205ba:	460f      	mov	r7, r1
 80205bc:	4608      	mov	r0, r1
 80205be:	e73a      	b.n	8020436 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080205c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205c4:	b097      	sub	sp, #92	; 0x5c
 80205c6:	9214      	str	r2, [sp, #80]	; 0x50
 80205c8:	9308      	str	r3, [sp, #32]
 80205ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80205cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80205d0:	9015      	str	r0, [sp, #84]	; 0x54
 80205d2:	9312      	str	r3, [sp, #72]	; 0x48
 80205d4:	6850      	ldr	r0, [r2, #4]
 80205d6:	9111      	str	r1, [sp, #68]	; 0x44
 80205d8:	6812      	ldr	r2, [r2, #0]
 80205da:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80205de:	fb00 1303 	mla	r3, r0, r3, r1
 80205e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80205e6:	9309      	str	r3, [sp, #36]	; 0x24
 80205e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80205ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205f0:	685b      	ldr	r3, [r3, #4]
 80205f2:	930c      	str	r3, [sp, #48]	; 0x30
 80205f4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80205f8:	930a      	str	r3, [sp, #40]	; 0x28
 80205fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	dc03      	bgt.n	8020608 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020600:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020602:	2b00      	cmp	r3, #0
 8020604:	f340 83cd 	ble.w	8020da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8020608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802060a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802060e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020612:	1e48      	subs	r0, r1, #1
 8020614:	1e55      	subs	r5, r2, #1
 8020616:	9b08      	ldr	r3, [sp, #32]
 8020618:	2b00      	cmp	r3, #0
 802061a:	f340 81a5 	ble.w	8020968 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802061e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8020620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020622:	1436      	asrs	r6, r6, #16
 8020624:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020628:	d406      	bmi.n	8020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802062a:	4286      	cmp	r6, r0
 802062c:	da04      	bge.n	8020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802062e:	2b00      	cmp	r3, #0
 8020630:	db02      	blt.n	8020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020632:	42ab      	cmp	r3, r5
 8020634:	f2c0 8199 	blt.w	802096a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020638:	3601      	adds	r6, #1
 802063a:	f100 8186 	bmi.w	802094a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802063e:	42b1      	cmp	r1, r6
 8020640:	f2c0 8183 	blt.w	802094a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020644:	3301      	adds	r3, #1
 8020646:	f100 8180 	bmi.w	802094a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802064a:	429a      	cmp	r2, r3
 802064c:	f2c0 817d 	blt.w	802094a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020650:	9b08      	ldr	r3, [sp, #32]
 8020652:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020656:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020658:	9313      	str	r3, [sp, #76]	; 0x4c
 802065a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802065c:	2b00      	cmp	r3, #0
 802065e:	f340 81a6 	ble.w	80209ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020664:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8020666:	1418      	asrs	r0, r3, #16
 8020668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802066a:	142d      	asrs	r5, r5, #16
 802066c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8020670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020672:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8020676:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020678:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802067c:	f100 81fa 	bmi.w	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020680:	f102 3eff 	add.w	lr, r2, #4294967295
 8020684:	4575      	cmp	r5, lr
 8020686:	f280 81f5 	bge.w	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802068a:	2800      	cmp	r0, #0
 802068c:	f2c0 81f2 	blt.w	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020690:	f103 3eff 	add.w	lr, r3, #4294967295
 8020694:	4570      	cmp	r0, lr
 8020696:	f280 81ed 	bge.w	8020a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802069a:	b212      	sxth	r2, r2
 802069c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802069e:	fa1f fe81 	uxth.w	lr, r1
 80206a2:	fb00 5002 	mla	r0, r0, r2, r5
 80206a6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80206aa:	eb03 0a00 	add.w	sl, r3, r0
 80206ae:	f813 9000 	ldrb.w	r9, [r3, r0]
 80206b2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80206b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80206ba:	b29b      	uxth	r3, r3
 80206bc:	f1bc 0f00 	cmp.w	ip, #0
 80206c0:	f000 81bb 	beq.w	8020a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80206c4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80206c8:	eb0a 0b02 	add.w	fp, sl, r2
 80206cc:	fa1f fa8c 	uxth.w	sl, ip
 80206d0:	940d      	str	r4, [sp, #52]	; 0x34
 80206d2:	fb0a fe0e 	mul.w	lr, sl, lr
 80206d6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80206da:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80206de:	eba5 050e 	sub.w	r5, r5, lr
 80206e2:	940e      	str	r4, [sp, #56]	; 0x38
 80206e4:	fa1f fa8a 	uxth.w	sl, sl
 80206e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80206ea:	b2ad      	uxth	r5, r5
 80206ec:	eba3 030a 	sub.w	r3, r3, sl
 80206f0:	fb08 f505 	mul.w	r5, r8, r5
 80206f4:	b29b      	uxth	r3, r3
 80206f6:	fb09 5303 	mla	r3, r9, r3, r5
 80206fa:	fb0a 3304 	mla	r3, sl, r4, r3
 80206fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020700:	fb0e 3304 	mla	r3, lr, r4, r3
 8020704:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020708:	2b00      	cmp	r3, #0
 802070a:	f000 8111 	beq.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802070e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020710:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020714:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8020718:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802071c:	f000 8192 	beq.w	8020a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8020720:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020724:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020728:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802072c:	fb0a fe0e 	mul.w	lr, sl, lr
 8020730:	fb09 f000 	mul.w	r0, r9, r0
 8020734:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8020738:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802073c:	f100 0b20 	add.w	fp, r0, #32
 8020740:	44ce      	add	lr, r9
 8020742:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8020746:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802074a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802074e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020752:	ea4e 0909 	orr.w	r9, lr, r9
 8020756:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802075a:	8868      	ldrh	r0, [r5, #2]
 802075c:	d019      	beq.n	8020792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802075e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8020762:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020766:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802076a:	fb0a fe0e 	mul.w	lr, sl, lr
 802076e:	fb08 f800 	mul.w	r8, r8, r0
 8020772:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8020776:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802077a:	f108 0b20 	add.w	fp, r8, #32
 802077e:	4486      	add	lr, r0
 8020780:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8020784:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8020788:	0a00      	lsrs	r0, r0, #8
 802078a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802078e:	ea4e 0000 	orr.w	r0, lr, r0
 8020792:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8020796:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802079a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802079e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80207a2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80207a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80207aa:	ea4e 0909 	orr.w	r9, lr, r9
 80207ae:	ea4a 0000 	orr.w	r0, sl, r0
 80207b2:	f1bc 0f00 	cmp.w	ip, #0
 80207b6:	f000 8147 	beq.w	8020a48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80207ba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80207be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80207c0:	3a01      	subs	r2, #1
 80207c2:	2cff      	cmp	r4, #255	; 0xff
 80207c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80207c8:	f102 0202 	add.w	r2, r2, #2
 80207cc:	eb05 0e02 	add.w	lr, r5, r2
 80207d0:	5aaa      	ldrh	r2, [r5, r2]
 80207d2:	d018      	beq.n	8020806 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80207d4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80207d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80207dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80207e0:	fb04 fa02 	mul.w	sl, r4, r2
 80207e4:	fb08 f805 	mul.w	r8, r8, r5
 80207e8:	f10a 0520 	add.w	r5, sl, #32
 80207ec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80207f0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80207f4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80207f8:	4442      	add	r2, r8
 80207fa:	0a2d      	lsrs	r5, r5, #8
 80207fc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020800:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020804:	432a      	orrs	r2, r5
 8020806:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020808:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802080c:	2cff      	cmp	r4, #255	; 0xff
 802080e:	d01a      	beq.n	8020846 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8020810:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8020814:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020818:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802081c:	fb04 fa05 	mul.w	sl, r4, r5
 8020820:	fb08 f80e 	mul.w	r8, r8, lr
 8020824:	f10a 0e20 	add.w	lr, sl, #32
 8020828:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802082c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020830:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8020834:	4445      	add	r5, r8
 8020836:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802083a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802083e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8020842:	ea45 050e 	orr.w	r5, r5, lr
 8020846:	fb1c fe01 	smulbb	lr, ip, r1
 802084a:	f1cc 0810 	rsb	r8, ip, #16
 802084e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020852:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020856:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802085a:	eba8 0801 	sub.w	r8, r8, r1
 802085e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8020862:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020866:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802086a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802086e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8020872:	ea4a 0202 	orr.w	r2, sl, r2
 8020876:	4341      	muls	r1, r0
 8020878:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802087c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020880:	fb09 1108 	mla	r1, r9, r8, r1
 8020884:	ea4b 0505 	orr.w	r5, fp, r5
 8020888:	fb0c 1102 	mla	r1, ip, r2, r1
 802088c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8020890:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020894:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020898:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802089c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80208a0:	ea42 0e0e 	orr.w	lr, r2, lr
 80208a4:	fa1f f28e 	uxth.w	r2, lr
 80208a8:	2bff      	cmp	r3, #255	; 0xff
 80208aa:	d103      	bne.n	80208b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80208ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80208ae:	29ff      	cmp	r1, #255	; 0xff
 80208b0:	f000 80de 	beq.w	8020a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80208b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80208b6:	1215      	asrs	r5, r2, #8
 80208b8:	8838      	ldrh	r0, [r7, #0]
 80208ba:	434b      	muls	r3, r1
 80208bc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80208c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80208c2:	f103 0c01 	add.w	ip, r3, #1
 80208c6:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 80208ca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80208ce:	fa5f fc83 	uxtb.w	ip, r3
 80208d2:	1203      	asrs	r3, r0, #8
 80208d4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80208d8:	fb13 f30c 	smulbb	r3, r3, ip
 80208dc:	fb05 3501 	mla	r5, r5, r1, r3
 80208e0:	10c3      	asrs	r3, r0, #3
 80208e2:	10d1      	asrs	r1, r2, #3
 80208e4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80208e8:	00d2      	lsls	r2, r2, #3
 80208ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80208ee:	b2ad      	uxth	r5, r5
 80208f0:	fb13 f30c 	smulbb	r3, r3, ip
 80208f4:	b2d2      	uxtb	r2, r2
 80208f6:	fb01 3104 	mla	r1, r1, r4, r3
 80208fa:	00c3      	lsls	r3, r0, #3
 80208fc:	b2db      	uxtb	r3, r3
 80208fe:	b289      	uxth	r1, r1
 8020900:	fb13 f30c 	smulbb	r3, r3, ip
 8020904:	fb02 3304 	mla	r3, r2, r4, r3
 8020908:	b29a      	uxth	r2, r3
 802090a:	1c6b      	adds	r3, r5, #1
 802090c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020910:	1c53      	adds	r3, r2, #1
 8020912:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020916:	1c4a      	adds	r2, r1, #1
 8020918:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802091c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020920:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020924:	0949      	lsrs	r1, r1, #5
 8020926:	432b      	orrs	r3, r5
 8020928:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802092c:	430b      	orrs	r3, r1
 802092e:	803b      	strh	r3, [r7, #0]
 8020930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020932:	3702      	adds	r7, #2
 8020934:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020936:	4413      	add	r3, r2
 8020938:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802093a:	9321      	str	r3, [sp, #132]	; 0x84
 802093c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802093e:	441a      	add	r2, r3
 8020940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020942:	3b01      	subs	r3, #1
 8020944:	9222      	str	r2, [sp, #136]	; 0x88
 8020946:	9313      	str	r3, [sp, #76]	; 0x4c
 8020948:	e687      	b.n	802065a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802094a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802094c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802094e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8020950:	4433      	add	r3, r6
 8020952:	9321      	str	r3, [sp, #132]	; 0x84
 8020954:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020956:	441c      	add	r4, r3
 8020958:	9b08      	ldr	r3, [sp, #32]
 802095a:	3b01      	subs	r3, #1
 802095c:	9422      	str	r4, [sp, #136]	; 0x88
 802095e:	9308      	str	r3, [sp, #32]
 8020960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020962:	3302      	adds	r3, #2
 8020964:	9309      	str	r3, [sp, #36]	; 0x24
 8020966:	e656      	b.n	8020616 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020968:	d028      	beq.n	80209bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802096a:	9b08      	ldr	r3, [sp, #32]
 802096c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802096e:	3b01      	subs	r3, #1
 8020970:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8020972:	fb00 5003 	mla	r0, r0, r3, r5
 8020976:	1400      	asrs	r0, r0, #16
 8020978:	f53f ae6a 	bmi.w	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802097c:	3901      	subs	r1, #1
 802097e:	4288      	cmp	r0, r1
 8020980:	f6bf ae66 	bge.w	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020984:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020986:	9822      	ldr	r0, [sp, #136]	; 0x88
 8020988:	fb01 0303 	mla	r3, r1, r3, r0
 802098c:	141b      	asrs	r3, r3, #16
 802098e:	f53f ae5f 	bmi.w	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020992:	3a01      	subs	r2, #1
 8020994:	4293      	cmp	r3, r2
 8020996:	f6bf ae5b 	bge.w	8020650 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802099a:	9b08      	ldr	r3, [sp, #32]
 802099c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80209a0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80209a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80209a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	f300 8082 	bgt.w	8020ab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80209ae:	9b08      	ldr	r3, [sp, #32]
 80209b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80209b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80209ba:	9309      	str	r3, [sp, #36]	; 0x24
 80209bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80209be:	2b00      	cmp	r3, #0
 80209c0:	f340 81ef 	ble.w	8020da2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80209c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80209c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80209ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209d2:	eef0 6a62 	vmov.f32	s13, s5
 80209d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209e2:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80209e6:	eef0 6a43 	vmov.f32	s13, s6
 80209ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209ee:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80209f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a0a:	ee12 2a90 	vmov	r2, s5
 8020a0e:	eef0 2a47 	vmov.f32	s5, s14
 8020a12:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a16:	ee13 2a10 	vmov	r2, s6
 8020a1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8020a1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a1e:	eeb0 3a67 	vmov.f32	s6, s15
 8020a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a26:	9324      	str	r3, [sp, #144]	; 0x90
 8020a28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a2c:	3b01      	subs	r3, #1
 8020a2e:	9311      	str	r3, [sp, #68]	; 0x44
 8020a30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a32:	bf08      	it	eq
 8020a34:	4613      	moveq	r3, r2
 8020a36:	9308      	str	r3, [sp, #32]
 8020a38:	e5df      	b.n	80205fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020a3a:	fb08 f505 	mul.w	r5, r8, r5
 8020a3e:	fb09 5303 	mla	r3, r9, r3, r5
 8020a42:	e65f      	b.n	8020704 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8020a44:	4681      	mov	r9, r0
 8020a46:	e686      	b.n	8020756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020a48:	f1c1 0210 	rsb	r2, r1, #16
 8020a4c:	4341      	muls	r1, r0
 8020a4e:	fb09 1902 	mla	r9, r9, r2, r1
 8020a52:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020a56:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8020a5a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020a5e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020a66:	ea42 0909 	orr.w	r9, r2, r9
 8020a6a:	fa1f f289 	uxth.w	r2, r9
 8020a6e:	e71b      	b.n	80208a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020a70:	803a      	strh	r2, [r7, #0]
 8020a72:	e75d      	b.n	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a74:	f115 0e01 	adds.w	lr, r5, #1
 8020a78:	f53f af5a 	bmi.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a7c:	4572      	cmp	r2, lr
 8020a7e:	f6ff af57 	blt.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a82:	f110 0e01 	adds.w	lr, r0, #1
 8020a86:	f53f af53 	bmi.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a8a:	4573      	cmp	r3, lr
 8020a8c:	f6ff af50 	blt.w	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020a90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020a92:	b21b      	sxth	r3, r3
 8020a94:	b212      	sxth	r2, r2
 8020a96:	9502      	str	r5, [sp, #8]
 8020a98:	9301      	str	r3, [sp, #4]
 8020a9a:	9200      	str	r2, [sp, #0]
 8020a9c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8020aa0:	e9cd c405 	strd	ip, r4, [sp, #20]
 8020aa4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8020aa8:	4639      	mov	r1, r7
 8020aaa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020aac:	f7ff fc02 	bl	80202b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8020ab0:	e73e      	b.n	8020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ab4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020aba:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8020abe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ac0:	fa1f fc82 	uxth.w	ip, r2
 8020ac4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020aca:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8020ace:	141f      	asrs	r7, r3, #16
 8020ad0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ad2:	141b      	asrs	r3, r3, #16
 8020ad4:	fb01 3707 	mla	r7, r1, r7, r3
 8020ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ada:	eb03 0a07 	add.w	sl, r3, r7
 8020ade:	f813 9007 	ldrb.w	r9, [r3, r7]
 8020ae2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020ae6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020aea:	b29b      	uxth	r3, r3
 8020aec:	2d00      	cmp	r5, #0
 8020aee:	f000 813d 	beq.w	8020d6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8020af2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8020af6:	eb0a 0b01 	add.w	fp, sl, r1
 8020afa:	fa1f fa85 	uxth.w	sl, r5
 8020afe:	940f      	str	r4, [sp, #60]	; 0x3c
 8020b00:	fb0a fc0c 	mul.w	ip, sl, ip
 8020b04:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020b08:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8020b0c:	eba0 000c 	sub.w	r0, r0, ip
 8020b10:	9410      	str	r4, [sp, #64]	; 0x40
 8020b12:	fa1f fa8a 	uxth.w	sl, sl
 8020b16:	b280      	uxth	r0, r0
 8020b18:	eba3 030a 	sub.w	r3, r3, sl
 8020b1c:	fb08 f000 	mul.w	r0, r8, r0
 8020b20:	b29b      	uxth	r3, r3
 8020b22:	fb09 0303 	mla	r3, r9, r3, r0
 8020b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020b28:	fb0a 3300 	mla	r3, sl, r0, r3
 8020b2c:	fb0c 3304 	mla	r3, ip, r4, r3
 8020b30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	f000 810b 	beq.w	8020d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8020b3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020b3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020b40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020b42:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8020b46:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8020b4a:	f000 8114 	beq.w	8020d76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8020b4e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020b52:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020b56:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020b5a:	fb0a fc0c 	mul.w	ip, sl, ip
 8020b5e:	fb09 f707 	mul.w	r7, r9, r7
 8020b62:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8020b66:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8020b6a:	f107 0b20 	add.w	fp, r7, #32
 8020b6e:	44cc      	add	ip, r9
 8020b70:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8020b74:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020b78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b7c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020b80:	ea4c 0909 	orr.w	r9, ip, r9
 8020b84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020b88:	8847      	ldrh	r7, [r0, #2]
 8020b8a:	d019      	beq.n	8020bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8020b8c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020b90:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020b94:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020b98:	fb0a fc0c 	mul.w	ip, sl, ip
 8020b9c:	fb08 f807 	mul.w	r8, r8, r7
 8020ba0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8020ba4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8020ba8:	f108 0b20 	add.w	fp, r8, #32
 8020bac:	44bc      	add	ip, r7
 8020bae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8020bb2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020bb6:	0a3f      	lsrs	r7, r7, #8
 8020bb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020bbc:	ea4c 0707 	orr.w	r7, ip, r7
 8020bc0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8020bc4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020bc8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8020bcc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020bd0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020bd4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020bd8:	ea4c 0909 	orr.w	r9, ip, r9
 8020bdc:	ea4a 0707 	orr.w	r7, sl, r7
 8020be0:	2d00      	cmp	r5, #0
 8020be2:	f000 80ca 	beq.w	8020d7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8020be6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020bea:	3901      	subs	r1, #1
 8020bec:	0049      	lsls	r1, r1, #1
 8020bee:	3102      	adds	r1, #2
 8020bf0:	eb00 0c01 	add.w	ip, r0, r1
 8020bf4:	5a41      	ldrh	r1, [r0, r1]
 8020bf6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020bf8:	28ff      	cmp	r0, #255	; 0xff
 8020bfa:	d019      	beq.n	8020c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8020bfc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020c00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020c02:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020c06:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020c0a:	fb04 fa01 	mul.w	sl, r4, r1
 8020c0e:	fb08 f800 	mul.w	r8, r8, r0
 8020c12:	f10a 0020 	add.w	r0, sl, #32
 8020c16:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8020c1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020c1e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020c22:	4441      	add	r1, r8
 8020c24:	0a00      	lsrs	r0, r0, #8
 8020c26:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8020c2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020c2e:	4301      	orrs	r1, r0
 8020c30:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020c32:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020c36:	2cff      	cmp	r4, #255	; 0xff
 8020c38:	d01a      	beq.n	8020c70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8020c3a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8020c3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020c42:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020c46:	fb04 fa00 	mul.w	sl, r4, r0
 8020c4a:	fb08 f80c 	mul.w	r8, r8, ip
 8020c4e:	f10a 0c20 	add.w	ip, sl, #32
 8020c52:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020c56:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020c5a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8020c5e:	4440      	add	r0, r8
 8020c60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c64:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020c68:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020c6c:	ea40 000c 	orr.w	r0, r0, ip
 8020c70:	fb15 fc02 	smulbb	ip, r5, r2
 8020c74:	f1c5 0810 	rsb	r8, r5, #16
 8020c78:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020c7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020c80:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8020c84:	eba8 0802 	sub.w	r8, r8, r2
 8020c88:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020c8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020c90:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8020c94:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020c98:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8020c9c:	ea4a 0101 	orr.w	r1, sl, r1
 8020ca0:	437a      	muls	r2, r7
 8020ca2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8020ca6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020caa:	fb09 2208 	mla	r2, r9, r8, r2
 8020cae:	ea4b 0000 	orr.w	r0, fp, r0
 8020cb2:	fb05 2201 	mla	r2, r5, r1, r2
 8020cb6:	fb0c 2200 	mla	r2, ip, r0, r2
 8020cba:	0d57      	lsrs	r7, r2, #21
 8020cbc:	0952      	lsrs	r2, r2, #5
 8020cbe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020cc2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020cc6:	433a      	orrs	r2, r7
 8020cc8:	2bff      	cmp	r3, #255	; 0xff
 8020cca:	b292      	uxth	r2, r2
 8020ccc:	d102      	bne.n	8020cd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8020cce:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020cd0:	29ff      	cmp	r1, #255	; 0xff
 8020cd2:	d063      	beq.n	8020d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8020cd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020cd6:	1215      	asrs	r5, r2, #8
 8020cd8:	f8be 1000 	ldrh.w	r1, [lr]
 8020cdc:	4343      	muls	r3, r0
 8020cde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020ce0:	10cf      	asrs	r7, r1, #3
 8020ce2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020ce6:	1c58      	adds	r0, r3, #1
 8020ce8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020cec:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8020cf0:	1208      	asrs	r0, r1, #8
 8020cf2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8020cf6:	00c9      	lsls	r1, r1, #3
 8020cf8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020cfc:	b2db      	uxtb	r3, r3
 8020cfe:	b2c9      	uxtb	r1, r1
 8020d00:	fb10 f003 	smulbb	r0, r0, r3
 8020d04:	fb11 f103 	smulbb	r1, r1, r3
 8020d08:	fb05 0504 	mla	r5, r5, r4, r0
 8020d0c:	10d0      	asrs	r0, r2, #3
 8020d0e:	fb17 f703 	smulbb	r7, r7, r3
 8020d12:	00d2      	lsls	r2, r2, #3
 8020d14:	b2ad      	uxth	r5, r5
 8020d16:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020d1a:	b2d2      	uxtb	r2, r2
 8020d1c:	fb00 7004 	mla	r0, r0, r4, r7
 8020d20:	1c6b      	adds	r3, r5, #1
 8020d22:	fb02 1204 	mla	r2, r2, r4, r1
 8020d26:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020d2a:	b292      	uxth	r2, r2
 8020d2c:	b280      	uxth	r0, r0
 8020d2e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020d32:	1c57      	adds	r7, r2, #1
 8020d34:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020d38:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020d3c:	433d      	orrs	r5, r7
 8020d3e:	1c47      	adds	r7, r0, #1
 8020d40:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8020d44:	097f      	lsrs	r7, r7, #5
 8020d46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020d4a:	433d      	orrs	r5, r7
 8020d4c:	f8ae 5000 	strh.w	r5, [lr]
 8020d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d52:	f10e 0e02 	add.w	lr, lr, #2
 8020d56:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020d58:	4413      	add	r3, r2
 8020d5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020d5c:	9321      	str	r3, [sp, #132]	; 0x84
 8020d5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020d60:	441a      	add	r2, r3
 8020d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d64:	3b01      	subs	r3, #1
 8020d66:	9222      	str	r2, [sp, #136]	; 0x88
 8020d68:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d6a:	e61c      	b.n	80209a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8020d6c:	fb08 f000 	mul.w	r0, r8, r0
 8020d70:	fb09 0303 	mla	r3, r9, r3, r0
 8020d74:	e6dc      	b.n	8020b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8020d76:	46b9      	mov	r9, r7
 8020d78:	e704      	b.n	8020b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8020d7a:	f1c2 0110 	rsb	r1, r2, #16
 8020d7e:	437a      	muls	r2, r7
 8020d80:	fb09 2901 	mla	r9, r9, r1, r2
 8020d84:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020d88:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020d8c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020d90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020d94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020d98:	4302      	orrs	r2, r0
 8020d9a:	e795      	b.n	8020cc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8020d9c:	f8ae 2000 	strh.w	r2, [lr]
 8020da0:	e7d6      	b.n	8020d50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8020da2:	b017      	add	sp, #92	; 0x5c
 8020da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020da8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8020da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dac:	b085      	sub	sp, #20
 8020dae:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8020db2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8020db6:	2800      	cmp	r0, #0
 8020db8:	9103      	str	r1, [sp, #12]
 8020dba:	fb00 7406 	mla	r4, r0, r6, r7
 8020dbe:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8020dc2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8020dc6:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8020dca:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8020dce:	eb02 0904 	add.w	r9, r2, r4
 8020dd2:	9501      	str	r5, [sp, #4]
 8020dd4:	f2c0 8141 	blt.w	802105a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8020dd8:	4583      	cmp	fp, r0
 8020dda:	f340 813e 	ble.w	802105a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8020dde:	2f00      	cmp	r7, #0
 8020de0:	f2c0 8137 	blt.w	8021052 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8020de4:	42be      	cmp	r6, r7
 8020de6:	f340 8134 	ble.w	8021052 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8020dea:	f812 c004 	ldrb.w	ip, [r2, r4]
 8020dee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8020df2:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8020df6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8020dfa:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8020dfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e02:	4355      	muls	r5, r2
 8020e04:	fb0c f203 	mul.w	r2, ip, r3
 8020e08:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8020e0c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8020e10:	441d      	add	r5, r3
 8020e12:	f102 0320 	add.w	r3, r2, #32
 8020e16:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020e1a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8020e1e:	0a1b      	lsrs	r3, r3, #8
 8020e20:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e24:	431c      	orrs	r4, r3
 8020e26:	1c7b      	adds	r3, r7, #1
 8020e28:	f100 811c 	bmi.w	8021064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8020e2c:	429e      	cmp	r6, r3
 8020e2e:	f340 8119 	ble.w	8021064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8020e32:	2900      	cmp	r1, #0
 8020e34:	f000 8119 	beq.w	802106a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8020e38:	9a01      	ldr	r2, [sp, #4]
 8020e3a:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020e3e:	8855      	ldrh	r5, [r2, #2]
 8020e40:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8020e44:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8020e48:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e4c:	fb08 f802 	mul.w	r8, r8, r2
 8020e50:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8020e54:	435d      	muls	r5, r3
 8020e56:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8020e5a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020e5e:	44d0      	add	r8, sl
 8020e60:	f105 0a20 	add.w	sl, r5, #32
 8020e64:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020e68:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8020e6c:	0a2d      	lsrs	r5, r5, #8
 8020e6e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e72:	432a      	orrs	r2, r5
 8020e74:	3001      	adds	r0, #1
 8020e76:	f100 80fe 	bmi.w	8021076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8020e7a:	4583      	cmp	fp, r0
 8020e7c:	f340 80fb 	ble.w	8021076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8020e80:	f1be 0f00 	cmp.w	lr, #0
 8020e84:	f000 80fc 	beq.w	8021080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8020e88:	2f00      	cmp	r7, #0
 8020e8a:	f2c0 80f1 	blt.w	8021070 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8020e8e:	42be      	cmp	r6, r7
 8020e90:	f340 80ee 	ble.w	8021070 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8020e94:	9801      	ldr	r0, [sp, #4]
 8020e96:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8020e9a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8020e9e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8020ea2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020ea6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8020eaa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020eae:	fb0a fa00 	mul.w	sl, sl, r0
 8020eb2:	fb05 f808 	mul.w	r8, r5, r8
 8020eb6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8020eba:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8020ebe:	4482      	add	sl, r0
 8020ec0:	f108 0020 	add.w	r0, r8, #32
 8020ec4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020ec8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8020ecc:	0a00      	lsrs	r0, r0, #8
 8020ece:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020ed2:	ea4b 0b00 	orr.w	fp, fp, r0
 8020ed6:	3701      	adds	r7, #1
 8020ed8:	f100 80d7 	bmi.w	802108a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8020edc:	42be      	cmp	r6, r7
 8020ede:	f340 80d4 	ble.w	802108a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8020ee2:	2900      	cmp	r1, #0
 8020ee4:	f000 80d4 	beq.w	8021090 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8020ee8:	3601      	adds	r6, #1
 8020eea:	9801      	ldr	r0, [sp, #4]
 8020eec:	f819 7006 	ldrb.w	r7, [r9, r6]
 8020ef0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8020ef4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8020ef8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8020efc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f00:	fb09 f906 	mul.w	r9, r9, r6
 8020f04:	fb07 f800 	mul.w	r8, r7, r0
 8020f08:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8020f0c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8020f10:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8020f14:	44d1      	add	r9, sl
 8020f16:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8020f1a:	f108 0020 	add.w	r0, r8, #32
 8020f1e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8020f22:	0a00      	lsrs	r0, r0, #8
 8020f24:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f28:	4330      	orrs	r0, r6
 8020f2a:	b28e      	uxth	r6, r1
 8020f2c:	fa1f f98e 	uxth.w	r9, lr
 8020f30:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8020f34:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8020f38:	fb06 f809 	mul.w	r8, r6, r9
 8020f3c:	0136      	lsls	r6, r6, #4
 8020f3e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020f42:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8020f46:	9601      	str	r6, [sp, #4]
 8020f48:	ea4a 0404 	orr.w	r4, sl, r4
 8020f4c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8020f50:	fa1f f689 	uxth.w	r6, r9
 8020f54:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020f58:	fb11 f90e 	smulbb	r9, r1, lr
 8020f5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020f60:	9602      	str	r6, [sp, #8]
 8020f62:	4626      	mov	r6, r4
 8020f64:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8020f68:	f1ce 0410 	rsb	r4, lr, #16
 8020f6c:	ea4a 0202 	orr.w	r2, sl, r2
 8020f70:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8020f74:	1a64      	subs	r4, r4, r1
 8020f76:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8020f7a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020f7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020f82:	434a      	muls	r2, r1
 8020f84:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8020f88:	ea4a 0000 	orr.w	r0, sl, r0
 8020f8c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8020f90:	fb04 2406 	mla	r4, r4, r6, r2
 8020f94:	9903      	ldr	r1, [sp, #12]
 8020f96:	fb09 4200 	mla	r2, r9, r0, r4
 8020f9a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8020f9e:	9801      	ldr	r0, [sp, #4]
 8020fa0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020fa4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020fa8:	8809      	ldrh	r1, [r1, #0]
 8020faa:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020fae:	ea44 0b0b 	orr.w	fp, r4, fp
 8020fb2:	9c02      	ldr	r4, [sp, #8]
 8020fb4:	1b00      	subs	r0, r0, r4
 8020fb6:	9c01      	ldr	r4, [sp, #4]
 8020fb8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8020fbc:	eba4 0608 	sub.w	r6, r4, r8
 8020fc0:	b280      	uxth	r0, r0
 8020fc2:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8020fc6:	b2b6      	uxth	r6, r6
 8020fc8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8020fcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020fd0:	4373      	muls	r3, r6
 8020fd2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8020fd6:	fb0c 3300 	mla	r3, ip, r0, r3
 8020fda:	9802      	ldr	r0, [sp, #8]
 8020fdc:	ea42 0e0e 	orr.w	lr, r2, lr
 8020fe0:	fb00 3505 	mla	r5, r0, r5, r3
 8020fe4:	120b      	asrs	r3, r1, #8
 8020fe6:	10c8      	asrs	r0, r1, #3
 8020fe8:	fb08 5707 	mla	r7, r8, r7, r5
 8020fec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020ff0:	00c9      	lsls	r1, r1, #3
 8020ff2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020ff6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8020ffa:	fa1f f28e 	uxth.w	r2, lr
 8020ffe:	b2c9      	uxtb	r1, r1
 8021000:	b2ff      	uxtb	r7, r7
 8021002:	437b      	muls	r3, r7
 8021004:	4378      	muls	r0, r7
 8021006:	434f      	muls	r7, r1
 8021008:	1c59      	adds	r1, r3, #1
 802100a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802100e:	1213      	asrs	r3, r2, #8
 8021010:	f023 0307 	bic.w	r3, r3, #7
 8021014:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021018:	1c41      	adds	r1, r0, #1
 802101a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802101e:	10d1      	asrs	r1, r2, #3
 8021020:	021b      	lsls	r3, r3, #8
 8021022:	f021 0103 	bic.w	r1, r1, #3
 8021026:	00d2      	lsls	r2, r2, #3
 8021028:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802102c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021030:	00c9      	lsls	r1, r1, #3
 8021032:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021036:	430b      	orrs	r3, r1
 8021038:	1c79      	adds	r1, r7, #1
 802103a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802103e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8021042:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021046:	431a      	orrs	r2, r3
 8021048:	9b03      	ldr	r3, [sp, #12]
 802104a:	801a      	strh	r2, [r3, #0]
 802104c:	b005      	add	sp, #20
 802104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021052:	f04f 0c00 	mov.w	ip, #0
 8021056:	4664      	mov	r4, ip
 8021058:	e6e5      	b.n	8020e26 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802105a:	2300      	movs	r3, #0
 802105c:	469c      	mov	ip, r3
 802105e:	461a      	mov	r2, r3
 8021060:	461c      	mov	r4, r3
 8021062:	e707      	b.n	8020e74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021064:	2300      	movs	r3, #0
 8021066:	461a      	mov	r2, r3
 8021068:	e704      	b.n	8020e74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802106a:	460b      	mov	r3, r1
 802106c:	460a      	mov	r2, r1
 802106e:	e701      	b.n	8020e74 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8021070:	2500      	movs	r5, #0
 8021072:	46ab      	mov	fp, r5
 8021074:	e72f      	b.n	8020ed6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8021076:	2700      	movs	r7, #0
 8021078:	463d      	mov	r5, r7
 802107a:	4638      	mov	r0, r7
 802107c:	46bb      	mov	fp, r7
 802107e:	e754      	b.n	8020f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021080:	4677      	mov	r7, lr
 8021082:	4675      	mov	r5, lr
 8021084:	4670      	mov	r0, lr
 8021086:	46f3      	mov	fp, lr
 8021088:	e74f      	b.n	8020f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802108a:	2700      	movs	r7, #0
 802108c:	4638      	mov	r0, r7
 802108e:	e74c      	b.n	8020f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8021090:	460f      	mov	r7, r1
 8021092:	4608      	mov	r0, r1
 8021094:	e749      	b.n	8020f2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08021098 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802109c:	b093      	sub	sp, #76	; 0x4c
 802109e:	9210      	str	r2, [sp, #64]	; 0x40
 80210a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80210a2:	9011      	str	r0, [sp, #68]	; 0x44
 80210a4:	910e      	str	r1, [sp, #56]	; 0x38
 80210a6:	6850      	ldr	r0, [r2, #4]
 80210a8:	9306      	str	r3, [sp, #24]
 80210aa:	6812      	ldr	r2, [r2, #0]
 80210ac:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80210b0:	fb00 1303 	mla	r3, r0, r3, r1
 80210b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80210b8:	9307      	str	r3, [sp, #28]
 80210ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	9308      	str	r3, [sp, #32]
 80210c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210c2:	685b      	ldr	r3, [r3, #4]
 80210c4:	9309      	str	r3, [sp, #36]	; 0x24
 80210c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	dc03      	bgt.n	80210d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80210cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	f340 83b6 	ble.w	8021840 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80210d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80210d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80210da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80210de:	1e48      	subs	r0, r1, #1
 80210e0:	1e55      	subs	r5, r2, #1
 80210e2:	9b06      	ldr	r3, [sp, #24]
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	f340 8165 	ble.w	80213b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80210ea:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80210ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80210ee:	1436      	asrs	r6, r6, #16
 80210f0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80210f4:	d406      	bmi.n	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80210f6:	4286      	cmp	r6, r0
 80210f8:	da04      	bge.n	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	db02      	blt.n	8021104 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80210fe:	42ab      	cmp	r3, r5
 8021100:	f2c0 8159 	blt.w	80213b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021104:	3601      	adds	r6, #1
 8021106:	f100 8146 	bmi.w	8021396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802110a:	42b1      	cmp	r1, r6
 802110c:	f2c0 8143 	blt.w	8021396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021110:	3301      	adds	r3, #1
 8021112:	f100 8140 	bmi.w	8021396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021116:	429a      	cmp	r2, r3
 8021118:	f2c0 813d 	blt.w	8021396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802111c:	9b06      	ldr	r3, [sp, #24]
 802111e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8021122:	9f07      	ldr	r7, [sp, #28]
 8021124:	930f      	str	r3, [sp, #60]	; 0x3c
 8021126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021128:	2b00      	cmp	r3, #0
 802112a:	f340 8166 	ble.w	80213fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802112e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021130:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8021132:	1418      	asrs	r0, r3, #16
 8021134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021136:	142d      	asrs	r5, r5, #16
 8021138:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802113c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802113e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8021142:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021144:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021148:	f100 81f0 	bmi.w	802152c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802114c:	f102 3eff 	add.w	lr, r2, #4294967295
 8021150:	4575      	cmp	r5, lr
 8021152:	f280 81eb 	bge.w	802152c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021156:	2800      	cmp	r0, #0
 8021158:	f2c0 81e8 	blt.w	802152c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802115c:	f103 3eff 	add.w	lr, r3, #4294967295
 8021160:	4570      	cmp	r0, lr
 8021162:	f280 81e3 	bge.w	802152c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8021166:	b212      	sxth	r2, r2
 8021168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802116a:	fa1f fe81 	uxth.w	lr, r1
 802116e:	fb00 5002 	mla	r0, r0, r2, r5
 8021172:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8021176:	eb03 0a00 	add.w	sl, r3, r0
 802117a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802117e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8021182:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021186:	b29b      	uxth	r3, r3
 8021188:	f1bc 0f00 	cmp.w	ip, #0
 802118c:	f000 817b 	beq.w	8021486 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021190:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8021194:	eb0a 0b02 	add.w	fp, sl, r2
 8021198:	fa1f fa8c 	uxth.w	sl, ip
 802119c:	940a      	str	r4, [sp, #40]	; 0x28
 802119e:	fb0a fe0e 	mul.w	lr, sl, lr
 80211a2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80211a6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80211aa:	eba5 050e 	sub.w	r5, r5, lr
 80211ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80211b0:	fa1f fa8a 	uxth.w	sl, sl
 80211b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211b6:	b2ad      	uxth	r5, r5
 80211b8:	eba3 030a 	sub.w	r3, r3, sl
 80211bc:	fb08 f505 	mul.w	r5, r8, r5
 80211c0:	b29b      	uxth	r3, r3
 80211c2:	fb09 5303 	mla	r3, r9, r3, r5
 80211c6:	fb0a 3304 	mla	r3, sl, r4, r3
 80211ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80211cc:	fb0e 3304 	mla	r3, lr, r4, r3
 80211d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	f000 80d1 	beq.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80211da:	9c08      	ldr	r4, [sp, #32]
 80211dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80211e0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80211e4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80211e8:	f000 8152 	beq.w	8021490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80211ec:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80211f0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80211f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80211f8:	fb0a fe0e 	mul.w	lr, sl, lr
 80211fc:	fb09 f000 	mul.w	r0, r9, r0
 8021200:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8021204:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021208:	f100 0b20 	add.w	fp, r0, #32
 802120c:	44ce      	add	lr, r9
 802120e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8021212:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021216:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802121a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802121e:	ea4e 0909 	orr.w	r9, lr, r9
 8021222:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021226:	8868      	ldrh	r0, [r5, #2]
 8021228:	d019      	beq.n	802125e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802122a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802122e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021232:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021236:	fb0a fe0e 	mul.w	lr, sl, lr
 802123a:	fb08 f800 	mul.w	r8, r8, r0
 802123e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8021242:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8021246:	f108 0b20 	add.w	fp, r8, #32
 802124a:	4486      	add	lr, r0
 802124c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8021250:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8021254:	0a00      	lsrs	r0, r0, #8
 8021256:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802125a:	ea4e 0000 	orr.w	r0, lr, r0
 802125e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021262:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8021266:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802126a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802126e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021272:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021276:	ea4e 0909 	orr.w	r9, lr, r9
 802127a:	ea4a 0000 	orr.w	r0, sl, r0
 802127e:	f1bc 0f00 	cmp.w	ip, #0
 8021282:	f000 8107 	beq.w	8021494 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8021286:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802128a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802128c:	3a01      	subs	r2, #1
 802128e:	2cff      	cmp	r4, #255	; 0xff
 8021290:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021294:	f102 0202 	add.w	r2, r2, #2
 8021298:	eb05 0e02 	add.w	lr, r5, r2
 802129c:	5aaa      	ldrh	r2, [r5, r2]
 802129e:	d018      	beq.n	80212d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80212a0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80212a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80212a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80212ac:	fb04 fa02 	mul.w	sl, r4, r2
 80212b0:	fb08 f805 	mul.w	r8, r8, r5
 80212b4:	f10a 0520 	add.w	r5, sl, #32
 80212b8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80212bc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80212c0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80212c4:	4442      	add	r2, r8
 80212c6:	0a2d      	lsrs	r5, r5, #8
 80212c8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80212cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80212d0:	432a      	orrs	r2, r5
 80212d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80212d4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80212d8:	2cff      	cmp	r4, #255	; 0xff
 80212da:	d01a      	beq.n	8021312 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80212dc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80212e0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80212e4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80212e8:	fb04 fa05 	mul.w	sl, r4, r5
 80212ec:	fb08 f80e 	mul.w	r8, r8, lr
 80212f0:	f10a 0e20 	add.w	lr, sl, #32
 80212f4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80212f8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80212fc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8021300:	4445      	add	r5, r8
 8021302:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021306:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802130a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802130e:	ea45 050e 	orr.w	r5, r5, lr
 8021312:	fb1c fe01 	smulbb	lr, ip, r1
 8021316:	f1cc 0810 	rsb	r8, ip, #16
 802131a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802131e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021322:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8021326:	eba8 0801 	sub.w	r8, r8, r1
 802132a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802132e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021332:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8021336:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802133a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802133e:	ea4a 0202 	orr.w	r2, sl, r2
 8021342:	4341      	muls	r1, r0
 8021344:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8021348:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802134c:	fb09 1108 	mla	r1, r9, r8, r1
 8021350:	ea4b 0505 	orr.w	r5, fp, r5
 8021354:	fb0c 1102 	mla	r1, ip, r2, r1
 8021358:	fb0e 1e05 	mla	lr, lr, r5, r1
 802135c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8021360:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8021364:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021368:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802136c:	ea42 0e0e 	orr.w	lr, r2, lr
 8021370:	fa1f f28e 	uxth.w	r2, lr
 8021374:	2bff      	cmp	r3, #255	; 0xff
 8021376:	f040 80a1 	bne.w	80214bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802137a:	803a      	strh	r2, [r7, #0]
 802137c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802137e:	3702      	adds	r7, #2
 8021380:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021382:	4413      	add	r3, r2
 8021384:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021386:	931d      	str	r3, [sp, #116]	; 0x74
 8021388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802138a:	441a      	add	r2, r3
 802138c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802138e:	3b01      	subs	r3, #1
 8021390:	921e      	str	r2, [sp, #120]	; 0x78
 8021392:	930f      	str	r3, [sp, #60]	; 0x3c
 8021394:	e6c7      	b.n	8021126 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021396:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021398:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802139a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802139c:	4433      	add	r3, r6
 802139e:	931d      	str	r3, [sp, #116]	; 0x74
 80213a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80213a2:	441c      	add	r4, r3
 80213a4:	9b06      	ldr	r3, [sp, #24]
 80213a6:	3b01      	subs	r3, #1
 80213a8:	941e      	str	r4, [sp, #120]	; 0x78
 80213aa:	9306      	str	r3, [sp, #24]
 80213ac:	9b07      	ldr	r3, [sp, #28]
 80213ae:	3302      	adds	r3, #2
 80213b0:	9307      	str	r3, [sp, #28]
 80213b2:	e696      	b.n	80210e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80213b4:	d028      	beq.n	8021408 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80213b6:	9b06      	ldr	r3, [sp, #24]
 80213b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80213ba:	3b01      	subs	r3, #1
 80213bc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80213be:	fb00 5003 	mla	r0, r0, r3, r5
 80213c2:	1400      	asrs	r0, r0, #16
 80213c4:	f53f aeaa 	bmi.w	802111c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213c8:	3901      	subs	r1, #1
 80213ca:	4288      	cmp	r0, r1
 80213cc:	f6bf aea6 	bge.w	802111c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80213d2:	981e      	ldr	r0, [sp, #120]	; 0x78
 80213d4:	fb01 0303 	mla	r3, r1, r3, r0
 80213d8:	141b      	asrs	r3, r3, #16
 80213da:	f53f ae9f 	bmi.w	802111c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213de:	3a01      	subs	r2, #1
 80213e0:	4293      	cmp	r3, r2
 80213e2:	f6bf ae9b 	bge.w	802111c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213e6:	9b06      	ldr	r3, [sp, #24]
 80213e8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80213ec:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80213f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80213f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f300 80b6 	bgt.w	8021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80213fa:	9b06      	ldr	r3, [sp, #24]
 80213fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021400:	9b07      	ldr	r3, [sp, #28]
 8021402:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021406:	9307      	str	r3, [sp, #28]
 8021408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802140a:	2b00      	cmp	r3, #0
 802140c:	f340 8218 	ble.w	8021840 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8021410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021414:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021416:	ee30 0a04 	vadd.f32	s0, s0, s8
 802141a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802141e:	eef0 6a62 	vmov.f32	s13, s5
 8021422:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021426:	ee31 1a05 	vadd.f32	s2, s2, s10
 802142a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802142e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8021432:	eef0 6a43 	vmov.f32	s13, s6
 8021436:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802143a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802143e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021442:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021446:	ee77 2a62 	vsub.f32	s5, s14, s5
 802144a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802144e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021452:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021456:	ee12 2a90 	vmov	r2, s5
 802145a:	eef0 2a47 	vmov.f32	s5, s14
 802145e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021462:	ee13 2a10 	vmov	r2, s6
 8021466:	931f      	str	r3, [sp, #124]	; 0x7c
 8021468:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802146a:	eeb0 3a67 	vmov.f32	s6, s15
 802146e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021472:	9320      	str	r3, [sp, #128]	; 0x80
 8021474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021476:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021478:	3b01      	subs	r3, #1
 802147a:	930e      	str	r3, [sp, #56]	; 0x38
 802147c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802147e:	bf08      	it	eq
 8021480:	4613      	moveq	r3, r2
 8021482:	9306      	str	r3, [sp, #24]
 8021484:	e61f      	b.n	80210c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021486:	fb08 f505 	mul.w	r5, r8, r5
 802148a:	fb09 5303 	mla	r3, r9, r3, r5
 802148e:	e69f      	b.n	80211d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021490:	4681      	mov	r9, r0
 8021492:	e6c6      	b.n	8021222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8021494:	f1c1 0210 	rsb	r2, r1, #16
 8021498:	4341      	muls	r1, r0
 802149a:	fb09 1902 	mla	r9, r9, r2, r1
 802149e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80214a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80214a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80214aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80214ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80214b2:	ea42 0909 	orr.w	r9, r2, r9
 80214b6:	fa1f f289 	uxth.w	r2, r9
 80214ba:	e75b      	b.n	8021374 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80214bc:	f8b7 c000 	ldrh.w	ip, [r7]
 80214c0:	43db      	mvns	r3, r3
 80214c2:	ea4f 202c 	mov.w	r0, ip, asr #8
 80214c6:	fa5f fe83 	uxtb.w	lr, r3
 80214ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80214ce:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80214d2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80214d6:	fb00 f00e 	mul.w	r0, r0, lr
 80214da:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80214de:	b2db      	uxtb	r3, r3
 80214e0:	1c41      	adds	r1, r0, #1
 80214e2:	fb05 f50e 	mul.w	r5, r5, lr
 80214e6:	fb03 f30e 	mul.w	r3, r3, lr
 80214ea:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80214ee:	1211      	asrs	r1, r2, #8
 80214f0:	f021 0107 	bic.w	r1, r1, #7
 80214f4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80214f8:	48d3      	ldr	r0, [pc, #844]	; (8021848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80214fa:	b2c9      	uxtb	r1, r1
 80214fc:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8021500:	1c69      	adds	r1, r5, #1
 8021502:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021506:	10d1      	asrs	r1, r2, #3
 8021508:	00d2      	lsls	r2, r2, #3
 802150a:	f021 0103 	bic.w	r1, r1, #3
 802150e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021512:	00c9      	lsls	r1, r1, #3
 8021514:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021518:	4301      	orrs	r1, r0
 802151a:	1c58      	adds	r0, r3, #1
 802151c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021520:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021524:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021528:	430a      	orrs	r2, r1
 802152a:	e726      	b.n	802137a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802152c:	f115 0e01 	adds.w	lr, r5, #1
 8021530:	f53f af24 	bmi.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021534:	4572      	cmp	r2, lr
 8021536:	f6ff af21 	blt.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802153a:	f110 0e01 	adds.w	lr, r0, #1
 802153e:	f53f af1d 	bmi.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021542:	4573      	cmp	r3, lr
 8021544:	f6ff af1a 	blt.w	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021548:	b21b      	sxth	r3, r3
 802154a:	b212      	sxth	r2, r2
 802154c:	9301      	str	r3, [sp, #4]
 802154e:	9200      	str	r2, [sp, #0]
 8021550:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8021554:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8021558:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802155c:	4639      	mov	r1, r7
 802155e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021560:	f7ff fc22 	bl	8020da8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021564:	e70a      	b.n	802137c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021568:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802156c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802156e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8021572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021574:	fa1f fc82 	uxth.w	ip, r2
 8021578:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802157c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802157e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8021582:	141f      	asrs	r7, r3, #16
 8021584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021586:	141b      	asrs	r3, r3, #16
 8021588:	fb01 3707 	mla	r7, r1, r7, r3
 802158c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802158e:	eb03 0a07 	add.w	sl, r3, r7
 8021592:	f813 9007 	ldrb.w	r9, [r3, r7]
 8021596:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802159a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802159e:	b29b      	uxth	r3, r3
 80215a0:	2d00      	cmp	r5, #0
 80215a2:	f000 80fe 	beq.w	80217a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80215a6:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80215aa:	eb0a 0b01 	add.w	fp, sl, r1
 80215ae:	fa1f fa85 	uxth.w	sl, r5
 80215b2:	940c      	str	r4, [sp, #48]	; 0x30
 80215b4:	fb0a fc0c 	mul.w	ip, sl, ip
 80215b8:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80215bc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80215c0:	eba0 000c 	sub.w	r0, r0, ip
 80215c4:	940d      	str	r4, [sp, #52]	; 0x34
 80215c6:	fa1f fa8a 	uxth.w	sl, sl
 80215ca:	b280      	uxth	r0, r0
 80215cc:	eba3 030a 	sub.w	r3, r3, sl
 80215d0:	fb08 f000 	mul.w	r0, r8, r0
 80215d4:	b29b      	uxth	r3, r3
 80215d6:	fb09 0303 	mla	r3, r9, r3, r0
 80215da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80215dc:	fb0a 3300 	mla	r3, sl, r0, r3
 80215e0:	fb0c 3304 	mla	r3, ip, r4, r3
 80215e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	f000 80cc 	beq.w	8021786 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80215ee:	9808      	ldr	r0, [sp, #32]
 80215f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80215f4:	9c08      	ldr	r4, [sp, #32]
 80215f6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80215fa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80215fe:	f000 80d5 	beq.w	80217ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8021602:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021606:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802160a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802160e:	fb0a fc0c 	mul.w	ip, sl, ip
 8021612:	fb09 f707 	mul.w	r7, r9, r7
 8021616:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802161a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802161e:	f107 0b20 	add.w	fp, r7, #32
 8021622:	44cc      	add	ip, r9
 8021624:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8021628:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802162c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021630:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021634:	ea4c 0909 	orr.w	r9, ip, r9
 8021638:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802163c:	8847      	ldrh	r7, [r0, #2]
 802163e:	d019      	beq.n	8021674 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8021640:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8021644:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8021648:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802164c:	fb0a fc0c 	mul.w	ip, sl, ip
 8021650:	fb08 f807 	mul.w	r8, r8, r7
 8021654:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8021658:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802165c:	f108 0b20 	add.w	fp, r8, #32
 8021660:	44bc      	add	ip, r7
 8021662:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8021666:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802166a:	0a3f      	lsrs	r7, r7, #8
 802166c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021670:	ea4c 0707 	orr.w	r7, ip, r7
 8021674:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8021678:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802167c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8021680:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021684:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021688:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802168c:	ea4c 0909 	orr.w	r9, ip, r9
 8021690:	ea4a 0707 	orr.w	r7, sl, r7
 8021694:	2d00      	cmp	r5, #0
 8021696:	f000 808b 	beq.w	80217b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802169a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802169e:	3901      	subs	r1, #1
 80216a0:	0049      	lsls	r1, r1, #1
 80216a2:	3102      	adds	r1, #2
 80216a4:	eb00 0c01 	add.w	ip, r0, r1
 80216a8:	5a41      	ldrh	r1, [r0, r1]
 80216aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80216ac:	28ff      	cmp	r0, #255	; 0xff
 80216ae:	d019      	beq.n	80216e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80216b0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80216b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80216b6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80216ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80216be:	fb04 fa01 	mul.w	sl, r4, r1
 80216c2:	fb08 f800 	mul.w	r8, r8, r0
 80216c6:	f10a 0020 	add.w	r0, sl, #32
 80216ca:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80216ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80216d2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80216d6:	4441      	add	r1, r8
 80216d8:	0a00      	lsrs	r0, r0, #8
 80216da:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80216de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80216e2:	4301      	orrs	r1, r0
 80216e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80216e6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80216ea:	2cff      	cmp	r4, #255	; 0xff
 80216ec:	d01a      	beq.n	8021724 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80216ee:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80216f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80216f6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80216fa:	fb04 fa00 	mul.w	sl, r4, r0
 80216fe:	fb08 f80c 	mul.w	r8, r8, ip
 8021702:	f10a 0c20 	add.w	ip, sl, #32
 8021706:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802170a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802170e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8021712:	4440      	add	r0, r8
 8021714:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021718:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802171c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021720:	ea40 000c 	orr.w	r0, r0, ip
 8021724:	fb15 fc02 	smulbb	ip, r5, r2
 8021728:	f1c5 0810 	rsb	r8, r5, #16
 802172c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021730:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021734:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8021738:	eba8 0802 	sub.w	r8, r8, r2
 802173c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021740:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021744:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8021748:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802174c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8021750:	ea4a 0101 	orr.w	r1, sl, r1
 8021754:	437a      	muls	r2, r7
 8021756:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802175a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802175e:	fb09 2208 	mla	r2, r9, r8, r2
 8021762:	ea4b 0000 	orr.w	r0, fp, r0
 8021766:	fb05 2201 	mla	r2, r5, r1, r2
 802176a:	fb0c 2200 	mla	r2, ip, r0, r2
 802176e:	0d57      	lsrs	r7, r2, #21
 8021770:	0952      	lsrs	r2, r2, #5
 8021772:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021776:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802177a:	433a      	orrs	r2, r7
 802177c:	2bff      	cmp	r3, #255	; 0xff
 802177e:	b292      	uxth	r2, r2
 8021780:	d127      	bne.n	80217d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8021782:	f8ae 2000 	strh.w	r2, [lr]
 8021786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021788:	f10e 0e02 	add.w	lr, lr, #2
 802178c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802178e:	4413      	add	r3, r2
 8021790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021792:	931d      	str	r3, [sp, #116]	; 0x74
 8021794:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021796:	441a      	add	r2, r3
 8021798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802179a:	3b01      	subs	r3, #1
 802179c:	921e      	str	r2, [sp, #120]	; 0x78
 802179e:	930f      	str	r3, [sp, #60]	; 0x3c
 80217a0:	e627      	b.n	80213f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80217a2:	fb08 f000 	mul.w	r0, r8, r0
 80217a6:	fb09 0303 	mla	r3, r9, r3, r0
 80217aa:	e71b      	b.n	80215e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80217ac:	46b9      	mov	r9, r7
 80217ae:	e743      	b.n	8021638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80217b0:	f1c2 0110 	rsb	r1, r2, #16
 80217b4:	437a      	muls	r2, r7
 80217b6:	fb09 2901 	mla	r9, r9, r1, r2
 80217ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80217be:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80217c2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80217c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80217ca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80217ce:	4302      	orrs	r2, r0
 80217d0:	e7d4      	b.n	802177c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 80217d2:	f8be 7000 	ldrh.w	r7, [lr]
 80217d6:	43db      	mvns	r3, r3
 80217d8:	4c1b      	ldr	r4, [pc, #108]	; (8021848 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80217da:	1238      	asrs	r0, r7, #8
 80217dc:	fa5f fc83 	uxtb.w	ip, r3
 80217e0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80217e4:	10fd      	asrs	r5, r7, #3
 80217e6:	00fb      	lsls	r3, r7, #3
 80217e8:	fb00 f00c 	mul.w	r0, r0, ip
 80217ec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80217f0:	b2db      	uxtb	r3, r3
 80217f2:	fb05 f10c 	mul.w	r1, r5, ip
 80217f6:	1c45      	adds	r5, r0, #1
 80217f8:	fb03 f30c 	mul.w	r3, r3, ip
 80217fc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021800:	1215      	asrs	r5, r2, #8
 8021802:	f025 0507 	bic.w	r5, r5, #7
 8021806:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802180a:	1c4d      	adds	r5, r1, #1
 802180c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8021810:	10d1      	asrs	r1, r2, #3
 8021812:	b2c0      	uxtb	r0, r0
 8021814:	f021 0103 	bic.w	r1, r1, #3
 8021818:	00d2      	lsls	r2, r2, #3
 802181a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802181e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8021822:	00c9      	lsls	r1, r1, #3
 8021824:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021828:	4308      	orrs	r0, r1
 802182a:	1c59      	adds	r1, r3, #1
 802182c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021830:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021834:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8021838:	4318      	orrs	r0, r3
 802183a:	f8ae 0000 	strh.w	r0, [lr]
 802183e:	e7a2      	b.n	8021786 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8021840:	b013      	add	sp, #76	; 0x4c
 8021842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021846:	bf00      	nop
 8021848:	fffff800 	.word	0xfffff800

0802184c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021850:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8021854:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8021858:	fb05 4c03 	mla	ip, r5, r3, r4
 802185c:	2d00      	cmp	r5, #0
 802185e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8021862:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021866:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802186a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802186e:	8808      	ldrh	r0, [r1, #0]
 8021870:	f2c0 80a7 	blt.w	80219c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8021874:	45aa      	cmp	sl, r5
 8021876:	f340 80a4 	ble.w	80219c2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802187a:	2c00      	cmp	r4, #0
 802187c:	f2c0 809f 	blt.w	80219be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8021880:	42a3      	cmp	r3, r4
 8021882:	f340 809c 	ble.w	80219be <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8021886:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802188a:	1c62      	adds	r2, r4, #1
 802188c:	f100 809c 	bmi.w	80219c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8021890:	4293      	cmp	r3, r2
 8021892:	f340 8099 	ble.w	80219c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8021896:	f1b9 0f00 	cmp.w	r9, #0
 802189a:	f000 8095 	beq.w	80219c8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802189e:	f8be c002 	ldrh.w	ip, [lr, #2]
 80218a2:	3501      	adds	r5, #1
 80218a4:	f100 8094 	bmi.w	80219d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80218a8:	45aa      	cmp	sl, r5
 80218aa:	f340 8091 	ble.w	80219d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80218ae:	2f00      	cmp	r7, #0
 80218b0:	f000 808e 	beq.w	80219d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80218b4:	2c00      	cmp	r4, #0
 80218b6:	f2c0 8089 	blt.w	80219cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80218ba:	42a3      	cmp	r3, r4
 80218bc:	f340 8086 	ble.w	80219cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 80218c0:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 80218c4:	3401      	adds	r4, #1
 80218c6:	f100 8086 	bmi.w	80219d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80218ca:	42a3      	cmp	r3, r4
 80218cc:	f340 8083 	ble.w	80219d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80218d0:	f1b9 0f00 	cmp.w	r9, #0
 80218d4:	d07f      	beq.n	80219d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 80218d6:	3301      	adds	r3, #1
 80218d8:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 80218dc:	ea4f 4408 	mov.w	r4, r8, lsl #16
 80218e0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80218e4:	fb19 fe07 	smulbb	lr, r9, r7
 80218e8:	f1c7 0210 	rsb	r2, r7, #16
 80218ec:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80218f0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 80218f4:	eba2 0209 	sub.w	r2, r2, r9
 80218f8:	ea44 0808 	orr.w	r8, r4, r8
 80218fc:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8021900:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021904:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8021908:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802190c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8021910:	ea44 0c0c 	orr.w	ip, r4, ip
 8021914:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8021918:	fb04 f40c 	mul.w	r4, r4, ip
 802191c:	fb02 4808 	mla	r8, r2, r8, r4
 8021920:	041a      	lsls	r2, r3, #16
 8021922:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021926:	b2b4      	uxth	r4, r6
 8021928:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802192c:	43f6      	mvns	r6, r6
 802192e:	4313      	orrs	r3, r2
 8021930:	042a      	lsls	r2, r5, #16
 8021932:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021936:	b2f6      	uxtb	r6, r6
 8021938:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802193c:	fb0e 8303 	mla	r3, lr, r3, r8
 8021940:	432a      	orrs	r2, r5
 8021942:	fb07 3202 	mla	r2, r7, r2, r3
 8021946:	10c7      	asrs	r7, r0, #3
 8021948:	0d53      	lsrs	r3, r2, #21
 802194a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802194e:	0952      	lsrs	r2, r2, #5
 8021950:	fb17 f706 	smulbb	r7, r7, r6
 8021954:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021958:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802195c:	431a      	orrs	r2, r3
 802195e:	b293      	uxth	r3, r2
 8021960:	1202      	asrs	r2, r0, #8
 8021962:	121d      	asrs	r5, r3, #8
 8021964:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021968:	00c0      	lsls	r0, r0, #3
 802196a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802196e:	fb12 f206 	smulbb	r2, r2, r6
 8021972:	b2c0      	uxtb	r0, r0
 8021974:	fb05 2504 	mla	r5, r5, r4, r2
 8021978:	10da      	asrs	r2, r3, #3
 802197a:	fb10 f006 	smulbb	r0, r0, r6
 802197e:	00db      	lsls	r3, r3, #3
 8021980:	b2ad      	uxth	r5, r5
 8021982:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021986:	b2db      	uxtb	r3, r3
 8021988:	fb02 7204 	mla	r2, r2, r4, r7
 802198c:	fb03 0004 	mla	r0, r3, r4, r0
 8021990:	1c6b      	adds	r3, r5, #1
 8021992:	b292      	uxth	r2, r2
 8021994:	b280      	uxth	r0, r0
 8021996:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802199a:	1c43      	adds	r3, r0, #1
 802199c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80219a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80219a4:	1c50      	adds	r0, r2, #1
 80219a6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80219aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80219ae:	0952      	lsrs	r2, r2, #5
 80219b0:	432b      	orrs	r3, r5
 80219b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80219b6:	4313      	orrs	r3, r2
 80219b8:	800b      	strh	r3, [r1, #0]
 80219ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219be:	4680      	mov	r8, r0
 80219c0:	e763      	b.n	802188a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 80219c2:	4684      	mov	ip, r0
 80219c4:	4680      	mov	r8, r0
 80219c6:	e76c      	b.n	80218a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80219c8:	4684      	mov	ip, r0
 80219ca:	e76a      	b.n	80218a2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 80219cc:	4605      	mov	r5, r0
 80219ce:	e779      	b.n	80218c4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 80219d0:	4603      	mov	r3, r0
 80219d2:	4605      	mov	r5, r0
 80219d4:	e782      	b.n	80218dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 80219d6:	4603      	mov	r3, r0
 80219d8:	e780      	b.n	80218dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

080219da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80219da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219de:	b093      	sub	sp, #76	; 0x4c
 80219e0:	461d      	mov	r5, r3
 80219e2:	9210      	str	r2, [sp, #64]	; 0x40
 80219e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80219e6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80219ea:	910a      	str	r1, [sp, #40]	; 0x28
 80219ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80219ee:	6859      	ldr	r1, [r3, #4]
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	9011      	str	r0, [sp, #68]	; 0x44
 80219f4:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 80219f8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80219fc:	fb01 2707 	mla	r7, r1, r7, r2
 8021a00:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8021a04:	9307      	str	r3, [sp, #28]
 8021a06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8021a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a0e:	43db      	mvns	r3, r3
 8021a10:	b2db      	uxtb	r3, r3
 8021a12:	9308      	str	r3, [sp, #32]
 8021a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	dc03      	bgt.n	8021a22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	f340 8205 	ble.w	8021e2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021a22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a24:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021a28:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021a2c:	1e48      	subs	r0, r1, #1
 8021a2e:	f102 3cff 	add.w	ip, r2, #4294967295
 8021a32:	2d00      	cmp	r5, #0
 8021a34:	f340 80da 	ble.w	8021bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8021a38:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021a3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021a40:	d406      	bmi.n	8021a50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a42:	4586      	cmp	lr, r0
 8021a44:	da04      	bge.n	8021a50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	db02      	blt.n	8021a50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a4a:	4563      	cmp	r3, ip
 8021a4c:	f2c0 80cf 	blt.w	8021bee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021a50:	f11e 0e01 	adds.w	lr, lr, #1
 8021a54:	f100 80c1 	bmi.w	8021bda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021a58:	4571      	cmp	r1, lr
 8021a5a:	f2c0 80be 	blt.w	8021bda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021a5e:	3301      	adds	r3, #1
 8021a60:	f100 80bb 	bmi.w	8021bda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021a64:	429a      	cmp	r2, r3
 8021a66:	f2c0 80b8 	blt.w	8021bda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021a6a:	46a9      	mov	r9, r5
 8021a6c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8021a70:	f1b9 0f00 	cmp.w	r9, #0
 8021a74:	f340 80d8 	ble.w	8021c28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8021a78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021a7a:	1421      	asrs	r1, r4, #16
 8021a7c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021a80:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021a84:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021a88:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021a8c:	f100 8112 	bmi.w	8021cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021a90:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021a94:	4551      	cmp	r1, sl
 8021a96:	f280 810d 	bge.w	8021cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021a9a:	2800      	cmp	r0, #0
 8021a9c:	f2c0 810a 	blt.w	8021cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021aa0:	f103 3aff 	add.w	sl, r3, #4294967295
 8021aa4:	4550      	cmp	r0, sl
 8021aa6:	f280 8105 	bge.w	8021cb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021aaa:	fa0f f38e 	sxth.w	r3, lr
 8021aae:	fb00 1103 	mla	r1, r0, r3, r1
 8021ab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021ab4:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8021ab8:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8021abc:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8021ac0:	f1bc 0f00 	cmp.w	ip, #0
 8021ac4:	d007      	beq.n	8021ad6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8021ac6:	005b      	lsls	r3, r3, #1
 8021ac8:	eb0a 0003 	add.w	r0, sl, r3
 8021acc:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8021ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8021ad2:	8843      	ldrh	r3, [r0, #2]
 8021ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8021ad6:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8021ada:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021ade:	fb12 f30c 	smulbb	r3, r2, ip
 8021ae2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8021ae6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021aea:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021aee:	10db      	asrs	r3, r3, #3
 8021af0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021af4:	ea40 000e 	orr.w	r0, r0, lr
 8021af8:	f1cc 0e10 	rsb	lr, ip, #16
 8021afc:	ea4a 0101 	orr.w	r1, sl, r1
 8021b00:	9f08      	ldr	r7, [sp, #32]
 8021b02:	ebae 0e02 	sub.w	lr, lr, r2
 8021b06:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021b0a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8021b0e:	4351      	muls	r1, r2
 8021b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021b12:	fb0e 1e00 	mla	lr, lr, r0, r1
 8021b16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021b18:	0410      	lsls	r0, r2, #16
 8021b1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b1e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021b22:	4310      	orrs	r0, r2
 8021b24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b26:	0412      	lsls	r2, r2, #16
 8021b28:	fb03 e000 	mla	r0, r3, r0, lr
 8021b2c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8021b30:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021b34:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021b38:	ea42 020e 	orr.w	r2, r2, lr
 8021b3c:	fb03 0302 	mla	r3, r3, r2, r0
 8021b40:	f8b8 0000 	ldrh.w	r0, [r8]
 8021b44:	0d5a      	lsrs	r2, r3, #21
 8021b46:	095b      	lsrs	r3, r3, #5
 8021b48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b4c:	1201      	asrs	r1, r0, #8
 8021b4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021b52:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8021b56:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021b5a:	00c0      	lsls	r0, r0, #3
 8021b5c:	4313      	orrs	r3, r2
 8021b5e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8021b62:	fb11 f107 	smulbb	r1, r1, r7
 8021b66:	b2c0      	uxtb	r0, r0
 8021b68:	b29b      	uxth	r3, r3
 8021b6a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021b6e:	fb10 f007 	smulbb	r0, r0, r7
 8021b72:	fb1e fe07 	smulbb	lr, lr, r7
 8021b76:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021b7a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021b7e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8021b82:	10d9      	asrs	r1, r3, #3
 8021b84:	00db      	lsls	r3, r3, #3
 8021b86:	fa1f fc8c 	uxth.w	ip, ip
 8021b8a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021b8e:	b2db      	uxtb	r3, r3
 8021b90:	fb01 e102 	mla	r1, r1, r2, lr
 8021b94:	fb03 0302 	mla	r3, r3, r2, r0
 8021b98:	b289      	uxth	r1, r1
 8021b9a:	b29a      	uxth	r2, r3
 8021b9c:	f10c 0301 	add.w	r3, ip, #1
 8021ba0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021ba4:	1c53      	adds	r3, r2, #1
 8021ba6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021baa:	1c4a      	adds	r2, r1, #1
 8021bac:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021bb0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021bb4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021bb8:	0949      	lsrs	r1, r1, #5
 8021bba:	ea43 030c 	orr.w	r3, r3, ip
 8021bbe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021bc2:	430b      	orrs	r3, r1
 8021bc4:	f8a8 3000 	strh.w	r3, [r8]
 8021bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021bca:	f108 0802 	add.w	r8, r8, #2
 8021bce:	f109 39ff 	add.w	r9, r9, #4294967295
 8021bd2:	441c      	add	r4, r3
 8021bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021bd6:	441e      	add	r6, r3
 8021bd8:	e74a      	b.n	8021a70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021bda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021bdc:	3d01      	subs	r5, #1
 8021bde:	441c      	add	r4, r3
 8021be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021be2:	441e      	add	r6, r3
 8021be4:	9b07      	ldr	r3, [sp, #28]
 8021be6:	3302      	adds	r3, #2
 8021be8:	9307      	str	r3, [sp, #28]
 8021bea:	e722      	b.n	8021a32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021bec:	d022      	beq.n	8021c34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021bee:	1e6b      	subs	r3, r5, #1
 8021bf0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021bf2:	fb00 4003 	mla	r0, r0, r3, r4
 8021bf6:	1400      	asrs	r0, r0, #16
 8021bf8:	f53f af37 	bmi.w	8021a6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021bfc:	3901      	subs	r1, #1
 8021bfe:	4288      	cmp	r0, r1
 8021c00:	f6bf af33 	bge.w	8021a6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c04:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021c06:	fb01 6303 	mla	r3, r1, r3, r6
 8021c0a:	141b      	asrs	r3, r3, #16
 8021c0c:	f53f af2d 	bmi.w	8021a6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c10:	3a01      	subs	r2, #1
 8021c12:	4293      	cmp	r3, r2
 8021c14:	f6bf af29 	bge.w	8021a6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c18:	46a8      	mov	r8, r5
 8021c1a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8021c1e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8021c22:	f1b8 0f00 	cmp.w	r8, #0
 8021c26:	dc60      	bgt.n	8021cea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8021c28:	9b07      	ldr	r3, [sp, #28]
 8021c2a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021c2e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021c32:	9307      	str	r3, [sp, #28]
 8021c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c36:	2b00      	cmp	r3, #0
 8021c38:	f340 80f8 	ble.w	8021e2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021c42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c4a:	eef0 6a62 	vmov.f32	s13, s5
 8021c4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021c52:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c5a:	ee16 4a90 	vmov	r4, s13
 8021c5e:	eef0 6a43 	vmov.f32	s13, s6
 8021c62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c66:	ee16 6a90 	vmov	r6, s13
 8021c6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c82:	ee12 2a90 	vmov	r2, s5
 8021c86:	eef0 2a47 	vmov.f32	s5, s14
 8021c8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c8e:	ee13 2a10 	vmov	r2, s6
 8021c92:	931f      	str	r3, [sp, #124]	; 0x7c
 8021c94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021c96:	eeb0 3a67 	vmov.f32	s6, s15
 8021c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c9e:	9320      	str	r3, [sp, #128]	; 0x80
 8021ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ca4:	3b01      	subs	r3, #1
 8021ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ca8:	bf08      	it	eq
 8021caa:	4615      	moveq	r5, r2
 8021cac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021cae:	bf18      	it	ne
 8021cb0:	461d      	movne	r5, r3
 8021cb2:	e6af      	b.n	8021a14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021cb4:	f111 0a01 	adds.w	sl, r1, #1
 8021cb8:	d486      	bmi.n	8021bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021cba:	45d6      	cmp	lr, sl
 8021cbc:	db84      	blt.n	8021bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021cbe:	f110 0a01 	adds.w	sl, r0, #1
 8021cc2:	d481      	bmi.n	8021bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021cc4:	4553      	cmp	r3, sl
 8021cc6:	f6ff af7f 	blt.w	8021bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021cca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021ccc:	b21b      	sxth	r3, r3
 8021cce:	9101      	str	r1, [sp, #4]
 8021cd0:	4641      	mov	r1, r8
 8021cd2:	9300      	str	r3, [sp, #0]
 8021cd4:	fa0f f38e 	sxth.w	r3, lr
 8021cd8:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8021cdc:	e9cd c704 	strd	ip, r7, [sp, #16]
 8021ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ce2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021ce4:	f7ff fdb2 	bl	802184c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8021ce8:	e76e      	b.n	8021bc8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8021cea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cec:	1430      	asrs	r0, r6, #16
 8021cee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021cf0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8021cf4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021cf8:	1423      	asrs	r3, r4, #16
 8021cfa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021cfe:	fb01 3000 	mla	r0, r1, r0, r3
 8021d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d04:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8021d08:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8021d0c:	8858      	ldrh	r0, [r3, #2]
 8021d0e:	f1be 0f00 	cmp.w	lr, #0
 8021d12:	d00b      	beq.n	8021d2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8021d14:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8021d18:	3901      	subs	r1, #1
 8021d1a:	0049      	lsls	r1, r1, #1
 8021d1c:	3102      	adds	r1, #2
 8021d1e:	eb03 0b01 	add.w	fp, r3, r1
 8021d22:	5a5b      	ldrh	r3, [r3, r1]
 8021d24:	930e      	str	r3, [sp, #56]	; 0x38
 8021d26:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8021d2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d2c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8021d30:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021d34:	fb12 f30e 	smulbb	r3, r2, lr
 8021d38:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8021d3c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8021d40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d44:	10db      	asrs	r3, r3, #3
 8021d46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021d4a:	ea41 010c 	orr.w	r1, r1, ip
 8021d4e:	f1ce 0c10 	rsb	ip, lr, #16
 8021d52:	ea4b 0000 	orr.w	r0, fp, r0
 8021d56:	9f08      	ldr	r7, [sp, #32]
 8021d58:	ebac 0c02 	sub.w	ip, ip, r2
 8021d5c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8021d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8021d64:	4350      	muls	r0, r2
 8021d66:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8021d6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021d6c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021d70:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021d72:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8021d76:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8021d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d7c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d80:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021d84:	0412      	lsls	r2, r2, #16
 8021d86:	ea4b 0101 	orr.w	r1, fp, r1
 8021d8a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021d8e:	fb03 c101 	mla	r1, r3, r1, ip
 8021d92:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8021d96:	4302      	orrs	r2, r0
 8021d98:	fb03 1202 	mla	r2, r3, r2, r1
 8021d9c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8021da0:	0952      	lsrs	r2, r2, #5
 8021da2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021da6:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8021daa:	f8b9 2000 	ldrh.w	r2, [r9]
 8021dae:	ea4b 0303 	orr.w	r3, fp, r3
 8021db2:	1211      	asrs	r1, r2, #8
 8021db4:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8021db8:	b29b      	uxth	r3, r3
 8021dba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021dbe:	00d2      	lsls	r2, r2, #3
 8021dc0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021dc4:	fb11 f107 	smulbb	r1, r1, r7
 8021dc8:	1218      	asrs	r0, r3, #8
 8021dca:	fb1c fc07 	smulbb	ip, ip, r7
 8021dce:	b2d2      	uxtb	r2, r2
 8021dd0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021dd4:	fb12 f207 	smulbb	r2, r2, r7
 8021dd8:	fb00 100a 	mla	r0, r0, sl, r1
 8021ddc:	10d9      	asrs	r1, r3, #3
 8021dde:	00db      	lsls	r3, r3, #3
 8021de0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021de4:	b280      	uxth	r0, r0
 8021de6:	b2db      	uxtb	r3, r3
 8021de8:	fb01 c10a 	mla	r1, r1, sl, ip
 8021dec:	fb03 230a 	mla	r3, r3, sl, r2
 8021df0:	1c42      	adds	r2, r0, #1
 8021df2:	b289      	uxth	r1, r1
 8021df4:	b29b      	uxth	r3, r3
 8021df6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021dfa:	f101 0c01 	add.w	ip, r1, #1
 8021dfe:	1c5a      	adds	r2, r3, #1
 8021e00:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021e04:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021e08:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021e0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021e0e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021e12:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021e16:	441c      	add	r4, r3
 8021e18:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8021e1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021e1e:	4310      	orrs	r0, r2
 8021e20:	441e      	add	r6, r3
 8021e22:	ea40 000c 	orr.w	r0, r0, ip
 8021e26:	f829 0b02 	strh.w	r0, [r9], #2
 8021e2a:	e6fa      	b.n	8021c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e2c:	b013      	add	sp, #76	; 0x4c
 8021e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e32 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8021e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021e36:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8021e3a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8021e3e:	fb0e 4703 	mla	r7, lr, r3, r4
 8021e42:	f1be 0f00 	cmp.w	lr, #0
 8021e46:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8021e4a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8021e4e:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8021e52:	8808      	ldrh	r0, [r1, #0]
 8021e54:	db60      	blt.n	8021f18 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8021e56:	45f1      	cmp	r9, lr
 8021e58:	dd5e      	ble.n	8021f18 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8021e5a:	2c00      	cmp	r4, #0
 8021e5c:	db5a      	blt.n	8021f14 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8021e5e:	42a3      	cmp	r3, r4
 8021e60:	dd58      	ble.n	8021f14 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8021e62:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8021e66:	1c62      	adds	r2, r4, #1
 8021e68:	d459      	bmi.n	8021f1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021e6a:	4293      	cmp	r3, r2
 8021e6c:	dd57      	ble.n	8021f1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021e6e:	2d00      	cmp	r5, #0
 8021e70:	d055      	beq.n	8021f1e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8021e72:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8021e76:	f11e 0e01 	adds.w	lr, lr, #1
 8021e7a:	d454      	bmi.n	8021f26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021e7c:	45f1      	cmp	r9, lr
 8021e7e:	dd52      	ble.n	8021f26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021e80:	2e00      	cmp	r6, #0
 8021e82:	d050      	beq.n	8021f26 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8021e84:	2c00      	cmp	r4, #0
 8021e86:	db4c      	blt.n	8021f22 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8021e88:	42a3      	cmp	r3, r4
 8021e8a:	dd4a      	ble.n	8021f22 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8021e8c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8021e90:	3401      	adds	r4, #1
 8021e92:	d405      	bmi.n	8021ea0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021e94:	42a3      	cmp	r3, r4
 8021e96:	dd03      	ble.n	8021ea0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021e98:	b115      	cbz	r5, 8021ea0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8021e9a:	3301      	adds	r3, #1
 8021e9c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8021ea0:	fb15 f406 	smulbb	r4, r5, r6
 8021ea4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8021ea8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8021eac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021eb0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021eb4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8021eb8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021ebc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021ec0:	ea43 0c0c 	orr.w	ip, r3, ip
 8021ec4:	f1c6 0310 	rsb	r3, r6, #16
 8021ec8:	ea4e 0707 	orr.w	r7, lr, r7
 8021ecc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8021ed0:	1b5b      	subs	r3, r3, r5
 8021ed2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8021ed6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021eda:	437d      	muls	r5, r7
 8021edc:	fb03 5c0c 	mla	ip, r3, ip, r5
 8021ee0:	0403      	lsls	r3, r0, #16
 8021ee2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021ee6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021eea:	4318      	orrs	r0, r3
 8021eec:	0413      	lsls	r3, r2, #16
 8021eee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021ef2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021ef6:	fb04 c000 	mla	r0, r4, r0, ip
 8021efa:	4313      	orrs	r3, r2
 8021efc:	fb06 0003 	mla	r0, r6, r3, r0
 8021f00:	0d43      	lsrs	r3, r0, #21
 8021f02:	0940      	lsrs	r0, r0, #5
 8021f04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f08:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021f0c:	4318      	orrs	r0, r3
 8021f0e:	8008      	strh	r0, [r1, #0]
 8021f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f14:	4684      	mov	ip, r0
 8021f16:	e7a6      	b.n	8021e66 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8021f18:	4607      	mov	r7, r0
 8021f1a:	4684      	mov	ip, r0
 8021f1c:	e7ab      	b.n	8021e76 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8021f1e:	4607      	mov	r7, r0
 8021f20:	e7a9      	b.n	8021e76 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8021f22:	4602      	mov	r2, r0
 8021f24:	e7b4      	b.n	8021e90 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8021f26:	4602      	mov	r2, r0
 8021f28:	e7ba      	b.n	8021ea0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08021f2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f2e:	b08f      	sub	sp, #60	; 0x3c
 8021f30:	461d      	mov	r5, r3
 8021f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021f34:	9107      	str	r1, [sp, #28]
 8021f36:	920c      	str	r2, [sp, #48]	; 0x30
 8021f38:	6859      	ldr	r1, [r3, #4]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	900d      	str	r0, [sp, #52]	; 0x34
 8021f3e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8021f42:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8021f46:	fb01 2707 	mla	r7, r1, r7, r2
 8021f4a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8021f4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f50:	f8d3 8000 	ldr.w	r8, [r3]
 8021f54:	9b07      	ldr	r3, [sp, #28]
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	dc03      	bgt.n	8021f62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	f340 8182 	ble.w	8022266 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8021f62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f6c:	1e48      	subs	r0, r1, #1
 8021f6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8021f72:	2d00      	cmp	r5, #0
 8021f74:	f340 809b 	ble.w	80220ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8021f78:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021f7c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021f80:	d406      	bmi.n	8021f90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021f82:	4586      	cmp	lr, r0
 8021f84:	da04      	bge.n	8021f90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021f86:	2b00      	cmp	r3, #0
 8021f88:	db02      	blt.n	8021f90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021f8a:	4563      	cmp	r3, ip
 8021f8c:	f2c0 8090 	blt.w	80220b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f90:	f11e 0e01 	adds.w	lr, lr, #1
 8021f94:	f100 8084 	bmi.w	80220a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021f98:	4571      	cmp	r1, lr
 8021f9a:	f2c0 8081 	blt.w	80220a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021f9e:	3301      	adds	r3, #1
 8021fa0:	d47e      	bmi.n	80220a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021fa2:	429a      	cmp	r2, r3
 8021fa4:	db7c      	blt.n	80220a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8021fa6:	46aa      	mov	sl, r5
 8021fa8:	46b9      	mov	r9, r7
 8021faa:	f1ba 0f00 	cmp.w	sl, #0
 8021fae:	f340 8099 	ble.w	80220e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8021fb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021fb4:	1421      	asrs	r1, r4, #16
 8021fb6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021fba:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021fbe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021fc2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021fc6:	f100 80d1 	bmi.w	802216c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021fca:	f10e 3bff 	add.w	fp, lr, #4294967295
 8021fce:	4559      	cmp	r1, fp
 8021fd0:	f280 80cc 	bge.w	802216c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021fd4:	2800      	cmp	r0, #0
 8021fd6:	f2c0 80c9 	blt.w	802216c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021fda:	f103 3bff 	add.w	fp, r3, #4294967295
 8021fde:	4558      	cmp	r0, fp
 8021fe0:	f280 80c4 	bge.w	802216c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021fe4:	fa0f fe8e 	sxth.w	lr, lr
 8021fe8:	fb00 110e 	mla	r1, r0, lr, r1
 8021fec:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8021ff0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8021ff4:	8841      	ldrh	r1, [r0, #2]
 8021ff6:	f1bc 0f00 	cmp.w	ip, #0
 8021ffa:	d00b      	beq.n	8022014 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8021ffc:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8022000:	3b01      	subs	r3, #1
 8022002:	005b      	lsls	r3, r3, #1
 8022004:	3302      	adds	r3, #2
 8022006:	eb00 0e03 	add.w	lr, r0, r3
 802200a:	5ac3      	ldrh	r3, [r0, r3]
 802200c:	9308      	str	r3, [sp, #32]
 802200e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8022012:	9309      	str	r3, [sp, #36]	; 0x24
 8022014:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8022018:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802201c:	fb12 f30c 	smulbb	r3, r2, ip
 8022020:	f1cc 0e10 	rsb	lr, ip, #16
 8022024:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022028:	10db      	asrs	r3, r3, #3
 802202a:	ebae 0e02 	sub.w	lr, lr, r2
 802202e:	ea40 000b 	orr.w	r0, r0, fp
 8022032:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022036:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802203a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802203e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8022042:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8022046:	ea4b 0101 	orr.w	r1, fp, r1
 802204a:	4351      	muls	r1, r2
 802204c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802204e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8022052:	0410      	lsls	r0, r2, #16
 8022054:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022058:	9908      	ldr	r1, [sp, #32]
 802205a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802205e:	4310      	orrs	r0, r2
 8022060:	9a08      	ldr	r2, [sp, #32]
 8022062:	0412      	lsls	r2, r2, #16
 8022064:	fb03 e000 	mla	r0, r3, r0, lr
 8022068:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802206c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8022070:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022074:	ea42 020e 	orr.w	r2, r2, lr
 8022078:	fb03 0302 	mla	r3, r3, r2, r0
 802207c:	0d5a      	lsrs	r2, r3, #21
 802207e:	095b      	lsrs	r3, r3, #5
 8022080:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022084:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022088:	4313      	orrs	r3, r2
 802208a:	f8a9 3000 	strh.w	r3, [r9]
 802208e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022090:	f109 0902 	add.w	r9, r9, #2
 8022094:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022098:	441c      	add	r4, r3
 802209a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802209c:	441e      	add	r6, r3
 802209e:	e784      	b.n	8021faa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80220a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80220a2:	3d01      	subs	r5, #1
 80220a4:	3702      	adds	r7, #2
 80220a6:	441c      	add	r4, r3
 80220a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80220aa:	441e      	add	r6, r3
 80220ac:	e761      	b.n	8021f72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80220ae:	d01d      	beq.n	80220ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80220b0:	1e6b      	subs	r3, r5, #1
 80220b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80220b4:	fb00 4003 	mla	r0, r0, r3, r4
 80220b8:	1400      	asrs	r0, r0, #16
 80220ba:	f53f af74 	bmi.w	8021fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220be:	3901      	subs	r1, #1
 80220c0:	4288      	cmp	r0, r1
 80220c2:	f6bf af70 	bge.w	8021fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80220c8:	fb01 6303 	mla	r3, r1, r3, r6
 80220cc:	141b      	asrs	r3, r3, #16
 80220ce:	f53f af6a 	bmi.w	8021fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220d2:	3a01      	subs	r2, #1
 80220d4:	4293      	cmp	r3, r2
 80220d6:	f6bf af66 	bge.w	8021fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220da:	46a9      	mov	r9, r5
 80220dc:	46ba      	mov	sl, r7
 80220de:	f1b9 0f00 	cmp.w	r9, #0
 80220e2:	dc5b      	bgt.n	802219c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80220e4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80220e8:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80220ec:	9b07      	ldr	r3, [sp, #28]
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	f340 80b9 	ble.w	8022266 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80220f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80220f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80220fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022102:	eef0 6a62 	vmov.f32	s13, s5
 8022106:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802210a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802210e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022112:	ee16 4a90 	vmov	r4, s13
 8022116:	eef0 6a43 	vmov.f32	s13, s6
 802211a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802211e:	ee16 6a90 	vmov	r6, s13
 8022122:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022126:	ee61 7a27 	vmul.f32	s15, s2, s15
 802212a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802212e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022132:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022136:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802213a:	ee12 2a90 	vmov	r2, s5
 802213e:	eef0 2a47 	vmov.f32	s5, s14
 8022142:	fb92 f3f3 	sdiv	r3, r2, r3
 8022146:	ee13 2a10 	vmov	r2, s6
 802214a:	931b      	str	r3, [sp, #108]	; 0x6c
 802214c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802214e:	eeb0 3a67 	vmov.f32	s6, s15
 8022152:	fb92 f3f3 	sdiv	r3, r2, r3
 8022156:	931c      	str	r3, [sp, #112]	; 0x70
 8022158:	9b07      	ldr	r3, [sp, #28]
 802215a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802215c:	3b01      	subs	r3, #1
 802215e:	9307      	str	r3, [sp, #28]
 8022160:	bf08      	it	eq
 8022162:	4615      	moveq	r5, r2
 8022164:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022166:	bf18      	it	ne
 8022168:	461d      	movne	r5, r3
 802216a:	e6f3      	b.n	8021f54 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802216c:	f111 0b01 	adds.w	fp, r1, #1
 8022170:	d48d      	bmi.n	802208e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022172:	45de      	cmp	lr, fp
 8022174:	db8b      	blt.n	802208e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022176:	f110 0b01 	adds.w	fp, r0, #1
 802217a:	d488      	bmi.n	802208e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802217c:	455b      	cmp	r3, fp
 802217e:	db86      	blt.n	802208e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022180:	b21b      	sxth	r3, r3
 8022182:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8022186:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802218a:	9300      	str	r3, [sp, #0]
 802218c:	4642      	mov	r2, r8
 802218e:	fa0f f38e 	sxth.w	r3, lr
 8022192:	4649      	mov	r1, r9
 8022194:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022196:	f7ff fe4c 	bl	8021e32 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802219a:	e778      	b.n	802208e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802219c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802219e:	1420      	asrs	r0, r4, #16
 80221a0:	1431      	asrs	r1, r6, #16
 80221a2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80221a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80221aa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80221ae:	fb03 0101 	mla	r1, r3, r1, r0
 80221b2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80221b6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80221ba:	8841      	ldrh	r1, [r0, #2]
 80221bc:	f1be 0f00 	cmp.w	lr, #0
 80221c0:	d00b      	beq.n	80221da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80221c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80221c6:	3b01      	subs	r3, #1
 80221c8:	005b      	lsls	r3, r3, #1
 80221ca:	3302      	adds	r3, #2
 80221cc:	eb00 0b03 	add.w	fp, r0, r3
 80221d0:	5ac3      	ldrh	r3, [r0, r3]
 80221d2:	930a      	str	r3, [sp, #40]	; 0x28
 80221d4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80221d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80221da:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80221de:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80221e2:	fb12 f30e 	smulbb	r3, r2, lr
 80221e6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80221ea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80221ee:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80221f2:	10db      	asrs	r3, r3, #3
 80221f4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80221f8:	ea40 000c 	orr.w	r0, r0, ip
 80221fc:	f1ce 0c10 	rsb	ip, lr, #16
 8022200:	ea4b 0101 	orr.w	r1, fp, r1
 8022204:	f109 39ff 	add.w	r9, r9, #4294967295
 8022208:	ebac 0c02 	sub.w	ip, ip, r2
 802220c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8022210:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8022214:	4351      	muls	r1, r2
 8022216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022218:	fb0c 1c00 	mla	ip, ip, r0, r1
 802221c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802221e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8022222:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8022226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022228:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802222c:	0412      	lsls	r2, r2, #16
 802222e:	ea4b 0000 	orr.w	r0, fp, r0
 8022232:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8022236:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802223a:	fb03 c000 	mla	r0, r3, r0, ip
 802223e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8022242:	ea42 0b0b 	orr.w	fp, r2, fp
 8022246:	fb03 000b 	mla	r0, r3, fp, r0
 802224a:	0d43      	lsrs	r3, r0, #21
 802224c:	0940      	lsrs	r0, r0, #5
 802224e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022252:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022256:	4318      	orrs	r0, r3
 8022258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802225a:	441c      	add	r4, r3
 802225c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802225e:	f82a 0b02 	strh.w	r0, [sl], #2
 8022262:	441e      	add	r6, r3
 8022264:	e73b      	b.n	80220de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022266:	b00f      	add	sp, #60	; 0x3c
 8022268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802226c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022270:	b085      	sub	sp, #20
 8022272:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022276:	9102      	str	r1, [sp, #8]
 8022278:	2c00      	cmp	r4, #0
 802227a:	fb04 7103 	mla	r1, r4, r3, r7
 802227e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022282:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022286:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802228a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802228e:	f2c0 811b 	blt.w	80224c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022292:	45a6      	cmp	lr, r4
 8022294:	f340 8118 	ble.w	80224c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8022298:	2f00      	cmp	r7, #0
 802229a:	f2c0 8113 	blt.w	80224c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802229e:	42bb      	cmp	r3, r7
 80222a0:	f340 8110 	ble.w	80224c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 80222a4:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80222a8:	1c7a      	adds	r2, r7, #1
 80222aa:	f100 8110 	bmi.w	80224ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80222ae:	4293      	cmp	r3, r2
 80222b0:	f340 810d 	ble.w	80224ce <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 80222b4:	2e00      	cmp	r6, #0
 80222b6:	f000 810c 	beq.w	80224d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 80222ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80222be:	3401      	adds	r4, #1
 80222c0:	f100 810b 	bmi.w	80224da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80222c4:	45a6      	cmp	lr, r4
 80222c6:	f340 8108 	ble.w	80224da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80222ca:	2800      	cmp	r0, #0
 80222cc:	f000 8108 	beq.w	80224e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80222d0:	2f00      	cmp	r7, #0
 80222d2:	f2c0 8100 	blt.w	80224d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80222d6:	42bb      	cmp	r3, r7
 80222d8:	f340 80fd 	ble.w	80224d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80222dc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80222e0:	3701      	adds	r7, #1
 80222e2:	f100 8100 	bmi.w	80224e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80222e6:	42bb      	cmp	r3, r7
 80222e8:	f340 80fd 	ble.w	80224e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80222ec:	2e00      	cmp	r6, #0
 80222ee:	f000 80fc 	beq.w	80224ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80222f2:	3301      	adds	r3, #1
 80222f4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80222f8:	b2b6      	uxth	r6, r6
 80222fa:	b280      	uxth	r0, r0
 80222fc:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022300:	fb00 fe06 	mul.w	lr, r0, r6
 8022304:	0136      	lsls	r6, r6, #4
 8022306:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802230a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802230e:	eba6 070e 	sub.w	r7, r6, lr
 8022312:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022316:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802231a:	b280      	uxth	r0, r0
 802231c:	b2bf      	uxth	r7, r7
 802231e:	1a1b      	subs	r3, r3, r0
 8022320:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022324:	fb0a f607 	mul.w	r6, sl, r7
 8022328:	b29b      	uxth	r3, r3
 802232a:	fb0b 6603 	mla	r6, fp, r3, r6
 802232e:	fb00 6609 	mla	r6, r0, r9, r6
 8022332:	fb0e 6608 	mla	r6, lr, r8, r6
 8022336:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802233a:	9600      	str	r6, [sp, #0]
 802233c:	2e00      	cmp	r6, #0
 802233e:	f000 80be 	beq.w	80224be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8022342:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022346:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802234a:	9e02      	ldr	r6, [sp, #8]
 802234c:	fb0b fc0c 	mul.w	ip, fp, ip
 8022350:	fb0b f505 	mul.w	r5, fp, r5
 8022354:	8836      	ldrh	r6, [r6, #0]
 8022356:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802235a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802235e:	9501      	str	r5, [sp, #4]
 8022360:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022364:	44dc      	add	ip, fp
 8022366:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802236a:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802236e:	9503      	str	r5, [sp, #12]
 8022370:	9d01      	ldr	r5, [sp, #4]
 8022372:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022376:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802237a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802237e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022382:	fb0a fc0c 	mul.w	ip, sl, ip
 8022386:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802238a:	fb0a fa01 	mul.w	sl, sl, r1
 802238e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022392:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022396:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802239a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802239e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80223a2:	4465      	add	r5, ip
 80223a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80223a8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80223ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80223b0:	fb09 fc0c 	mul.w	ip, r9, ip
 80223b4:	0a2d      	lsrs	r5, r5, #8
 80223b6:	fb09 f904 	mul.w	r9, r9, r4
 80223ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80223be:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80223c2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80223c6:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80223ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80223ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80223d2:	437d      	muls	r5, r7
 80223d4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80223d8:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80223dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223e0:	4461      	add	r1, ip
 80223e2:	fb08 f404 	mul.w	r4, r8, r4
 80223e6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80223ea:	fb08 f802 	mul.w	r8, r8, r2
 80223ee:	0a09      	lsrs	r1, r1, #8
 80223f0:	0a22      	lsrs	r2, r4, #8
 80223f2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80223f6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80223fa:	fb07 f70a 	mul.w	r7, r7, sl
 80223fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022402:	4414      	add	r4, r2
 8022404:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022408:	0a24      	lsrs	r4, r4, #8
 802240a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802240e:	9a03      	ldr	r2, [sp, #12]
 8022410:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022414:	fb02 5503 	mla	r5, r2, r3, r5
 8022418:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802241c:	9a00      	ldr	r2, [sp, #0]
 802241e:	fb04 540e 	mla	r4, r4, lr, r5
 8022422:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022426:	1235      	asrs	r5, r6, #8
 8022428:	fb01 4100 	mla	r1, r1, r0, r4
 802242c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022430:	0a09      	lsrs	r1, r1, #8
 8022432:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8022436:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802243a:	fb03 7101 	mla	r1, r3, r1, r7
 802243e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022442:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8022446:	fb00 e101 	mla	r1, r0, r1, lr
 802244a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802244e:	b287      	uxth	r7, r0
 8022450:	0a09      	lsrs	r1, r1, #8
 8022452:	437a      	muls	r2, r7
 8022454:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022458:	1c53      	adds	r3, r2, #1
 802245a:	4321      	orrs	r1, r4
 802245c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022460:	0c0a      	lsrs	r2, r1, #16
 8022462:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8022466:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802246a:	b2c8      	uxtb	r0, r1
 802246c:	fb12 f207 	smulbb	r2, r2, r7
 8022470:	fb14 f407 	smulbb	r4, r4, r7
 8022474:	b2db      	uxtb	r3, r3
 8022476:	fb10 f007 	smulbb	r0, r0, r7
 802247a:	fb05 2503 	mla	r5, r5, r3, r2
 802247e:	10f2      	asrs	r2, r6, #3
 8022480:	00f6      	lsls	r6, r6, #3
 8022482:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022486:	b2ad      	uxth	r5, r5
 8022488:	b2f6      	uxtb	r6, r6
 802248a:	fb02 4203 	mla	r2, r2, r3, r4
 802248e:	fb06 0303 	mla	r3, r6, r3, r0
 8022492:	b294      	uxth	r4, r2
 8022494:	b299      	uxth	r1, r3
 8022496:	1c6b      	adds	r3, r5, #1
 8022498:	1c62      	adds	r2, r4, #1
 802249a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802249e:	1c4b      	adds	r3, r1, #1
 80224a0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80224a4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80224a8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80224ac:	0952      	lsrs	r2, r2, #5
 80224ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80224b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80224b6:	432b      	orrs	r3, r5
 80224b8:	4313      	orrs	r3, r2
 80224ba:	9a02      	ldr	r2, [sp, #8]
 80224bc:	8013      	strh	r3, [r2, #0]
 80224be:	b005      	add	sp, #20
 80224c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224c4:	2500      	movs	r5, #0
 80224c6:	e6ef      	b.n	80222a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80224c8:	2100      	movs	r1, #0
 80224ca:	460d      	mov	r5, r1
 80224cc:	e6f7      	b.n	80222be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80224ce:	2100      	movs	r1, #0
 80224d0:	e6f5      	b.n	80222be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80224d2:	4631      	mov	r1, r6
 80224d4:	e6f3      	b.n	80222be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80224d6:	2400      	movs	r4, #0
 80224d8:	e702      	b.n	80222e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80224da:	2200      	movs	r2, #0
 80224dc:	4614      	mov	r4, r2
 80224de:	e70b      	b.n	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80224e0:	4602      	mov	r2, r0
 80224e2:	4604      	mov	r4, r0
 80224e4:	e708      	b.n	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80224e6:	2200      	movs	r2, #0
 80224e8:	e706      	b.n	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80224ea:	4632      	mov	r2, r6
 80224ec:	e704      	b.n	80222f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080224ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f2:	b09d      	sub	sp, #116	; 0x74
 80224f4:	9219      	str	r2, [sp, #100]	; 0x64
 80224f6:	9307      	str	r3, [sp, #28]
 80224f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80224fa:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80224fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8022500:	931a      	str	r3, [sp, #104]	; 0x68
 8022502:	6850      	ldr	r0, [r2, #4]
 8022504:	9117      	str	r1, [sp, #92]	; 0x5c
 8022506:	6812      	ldr	r2, [r2, #0]
 8022508:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802250c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8022510:	fb00 1303 	mla	r3, r0, r3, r1
 8022514:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022518:	930a      	str	r3, [sp, #40]	; 0x28
 802251a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	9310      	str	r3, [sp, #64]	; 0x40
 8022520:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022524:	930b      	str	r3, [sp, #44]	; 0x2c
 8022526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022528:	2b00      	cmp	r3, #0
 802252a:	dc03      	bgt.n	8022534 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802252c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802252e:	2b00      	cmp	r3, #0
 8022530:	f340 8375 	ble.w	8022c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8022534:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022536:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802253a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802253e:	1e48      	subs	r0, r1, #1
 8022540:	1e57      	subs	r7, r2, #1
 8022542:	9b07      	ldr	r3, [sp, #28]
 8022544:	2b00      	cmp	r3, #0
 8022546:	f340 818e 	ble.w	8022866 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802254a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802254e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022552:	d406      	bmi.n	8022562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022554:	4584      	cmp	ip, r0
 8022556:	da04      	bge.n	8022562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022558:	2b00      	cmp	r3, #0
 802255a:	db02      	blt.n	8022562 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802255c:	42bb      	cmp	r3, r7
 802255e:	f2c0 8183 	blt.w	8022868 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022562:	f11c 0c01 	adds.w	ip, ip, #1
 8022566:	f100 8173 	bmi.w	8022850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802256a:	4561      	cmp	r1, ip
 802256c:	f2c0 8170 	blt.w	8022850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022570:	3301      	adds	r3, #1
 8022572:	f100 816d 	bmi.w	8022850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8022576:	429a      	cmp	r2, r3
 8022578:	f2c0 816a 	blt.w	8022850 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802257c:	9b07      	ldr	r3, [sp, #28]
 802257e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022580:	9318      	str	r3, [sp, #96]	; 0x60
 8022582:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022584:	2b00      	cmp	r3, #0
 8022586:	f340 818c 	ble.w	80228a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802258a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802258c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022590:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022592:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022596:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802259a:	1422      	asrs	r2, r4, #16
 802259c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80225a0:	689b      	ldr	r3, [r3, #8]
 80225a2:	f100 81cd 	bmi.w	8022940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80225a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80225aa:	4542      	cmp	r2, r8
 80225ac:	f280 81c8 	bge.w	8022940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80225b0:	f1bc 0f00 	cmp.w	ip, #0
 80225b4:	f2c0 81c4 	blt.w	8022940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80225b8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80225bc:	45c4      	cmp	ip, r8
 80225be:	f280 81bf 	bge.w	8022940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80225c2:	b21b      	sxth	r3, r3
 80225c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80225c6:	fb0c 2203 	mla	r2, ip, r3, r2
 80225ca:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80225ce:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80225d2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80225d6:	2800      	cmp	r0, #0
 80225d8:	f000 81a9 	beq.w	802292e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80225dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80225e0:	950c      	str	r5, [sp, #48]	; 0x30
 80225e2:	0e2d      	lsrs	r5, r5, #24
 80225e4:	9513      	str	r5, [sp, #76]	; 0x4c
 80225e6:	b181      	cbz	r1, 802260a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80225e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80225ec:	3b01      	subs	r3, #1
 80225ee:	009b      	lsls	r3, r3, #2
 80225f0:	3304      	adds	r3, #4
 80225f2:	eb08 0c03 	add.w	ip, r8, r3
 80225f6:	f858 3003 	ldr.w	r3, [r8, r3]
 80225fa:	9308      	str	r3, [sp, #32]
 80225fc:	0e1b      	lsrs	r3, r3, #24
 80225fe:	9311      	str	r3, [sp, #68]	; 0x44
 8022600:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022604:	930d      	str	r3, [sp, #52]	; 0x34
 8022606:	0e1b      	lsrs	r3, r3, #24
 8022608:	9314      	str	r3, [sp, #80]	; 0x50
 802260a:	b280      	uxth	r0, r0
 802260c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802260e:	b289      	uxth	r1, r1
 8022610:	fb00 f901 	mul.w	r9, r0, r1
 8022614:	0100      	lsls	r0, r0, #4
 8022616:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802261a:	eba0 0809 	sub.w	r8, r0, r9
 802261e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8022622:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022624:	b289      	uxth	r1, r1
 8022626:	fa1f f888 	uxth.w	r8, r8
 802262a:	1a5b      	subs	r3, r3, r1
 802262c:	fb08 f000 	mul.w	r0, r8, r0
 8022630:	b29b      	uxth	r3, r3
 8022632:	fb03 000e 	mla	r0, r3, lr, r0
 8022636:	fb01 0005 	mla	r0, r1, r5, r0
 802263a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802263c:	fb09 0005 	mla	r0, r9, r5, r0
 8022640:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022644:	2800      	cmp	r0, #0
 8022646:	f000 80fa 	beq.w	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802264a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802264e:	d01b      	beq.n	8022688 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8022650:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022658:	fb0e fa0a 	mul.w	sl, lr, sl
 802265c:	fb0e fe02 	mul.w	lr, lr, r2
 8022660:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022664:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022668:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802266c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022670:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022674:	4452      	add	r2, sl
 8022676:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802267a:	0a12      	lsrs	r2, r2, #8
 802267c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022680:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022684:	ea42 020c 	orr.w	r2, r2, ip
 8022688:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802268a:	2dff      	cmp	r5, #255	; 0xff
 802268c:	d021      	beq.n	80226d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802268e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022690:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022694:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022696:	fb05 fb0b 	mul.w	fp, r5, fp
 802269a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802269c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80226a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80226a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80226a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80226aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80226ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80226b6:	44de      	add	lr, fp
 80226b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80226bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80226c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226cc:	ea4e 050a 	orr.w	r5, lr, sl
 80226d0:	950c      	str	r5, [sp, #48]	; 0x30
 80226d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80226d4:	2dff      	cmp	r5, #255	; 0xff
 80226d6:	d021      	beq.n	802271c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80226d8:	9d08      	ldr	r5, [sp, #32]
 80226da:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80226de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80226e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80226e4:	9d08      	ldr	r5, [sp, #32]
 80226e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80226ea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80226ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80226f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80226f4:	fb05 fa0a 	mul.w	sl, r5, sl
 80226f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80226fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022700:	44de      	add	lr, fp
 8022702:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022706:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802270a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802270e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022712:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022716:	ea4e 050a 	orr.w	r5, lr, sl
 802271a:	9508      	str	r5, [sp, #32]
 802271c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802271e:	2dff      	cmp	r5, #255	; 0xff
 8022720:	d021      	beq.n	8022766 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8022722:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022724:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8022728:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802272a:	fb05 fb0b 	mul.w	fp, r5, fp
 802272e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022730:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022734:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022736:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802273a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802273e:	fb05 fa0a 	mul.w	sl, r5, sl
 8022742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022746:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802274a:	44de      	add	lr, fp
 802274c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022750:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022754:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022758:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802275c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022760:	ea4e 050a 	orr.w	r5, lr, sl
 8022764:	950d      	str	r5, [sp, #52]	; 0x34
 8022766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022768:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802276c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022770:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022774:	9d08      	ldr	r5, [sp, #32]
 8022776:	fb08 fc0c 	mul.w	ip, r8, ip
 802277a:	fb03 cc0e 	mla	ip, r3, lr, ip
 802277e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8022782:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022784:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022788:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802278c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802278e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022792:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8022796:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022798:	fb08 f80e 	mul.w	r8, r8, lr
 802279c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227a0:	fb03 8202 	mla	r2, r3, r2, r8
 80227a4:	9b08      	ldr	r3, [sp, #32]
 80227a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80227aa:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80227ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227b0:	fb01 220a 	mla	r2, r1, sl, r2
 80227b4:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80227b8:	883b      	ldrh	r3, [r7, #0]
 80227ba:	fb09 2901 	mla	r9, r9, r1, r2
 80227be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80227c0:	1219      	asrs	r1, r3, #8
 80227c2:	4342      	muls	r2, r0
 80227c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80227c8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80227cc:	1c50      	adds	r0, r2, #1
 80227ce:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80227d2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80227d6:	ea4c 0c09 	orr.w	ip, ip, r9
 80227da:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80227de:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80227e2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80227e6:	fa5f fc8c 	uxtb.w	ip, ip
 80227ea:	fb12 f205 	smulbb	r2, r2, r5
 80227ee:	b2c0      	uxtb	r0, r0
 80227f0:	fb1c fc05 	smulbb	ip, ip, r5
 80227f4:	fb01 2100 	mla	r1, r1, r0, r2
 80227f8:	10da      	asrs	r2, r3, #3
 80227fa:	fb1e fe05 	smulbb	lr, lr, r5
 80227fe:	00db      	lsls	r3, r3, #3
 8022800:	b289      	uxth	r1, r1
 8022802:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022806:	b2db      	uxtb	r3, r3
 8022808:	fb02 e200 	mla	r2, r2, r0, lr
 802280c:	fb03 c300 	mla	r3, r3, r0, ip
 8022810:	b292      	uxth	r2, r2
 8022812:	fa1f fc83 	uxth.w	ip, r3
 8022816:	1c4b      	adds	r3, r1, #1
 8022818:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802281c:	f10c 0301 	add.w	r3, ip, #1
 8022820:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8022824:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022828:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802282c:	430b      	orrs	r3, r1
 802282e:	1c51      	adds	r1, r2, #1
 8022830:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022834:	0952      	lsrs	r2, r2, #5
 8022836:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802283a:	4313      	orrs	r3, r2
 802283c:	803b      	strh	r3, [r7, #0]
 802283e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022840:	3702      	adds	r7, #2
 8022842:	441c      	add	r4, r3
 8022844:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022846:	441e      	add	r6, r3
 8022848:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802284a:	3b01      	subs	r3, #1
 802284c:	9318      	str	r3, [sp, #96]	; 0x60
 802284e:	e698      	b.n	8022582 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022850:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022852:	441c      	add	r4, r3
 8022854:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022856:	441e      	add	r6, r3
 8022858:	9b07      	ldr	r3, [sp, #28]
 802285a:	3b01      	subs	r3, #1
 802285c:	9307      	str	r3, [sp, #28]
 802285e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022860:	3302      	adds	r3, #2
 8022862:	930a      	str	r3, [sp, #40]	; 0x28
 8022864:	e66d      	b.n	8022542 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022866:	d023      	beq.n	80228b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022868:	9b07      	ldr	r3, [sp, #28]
 802286a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802286c:	3b01      	subs	r3, #1
 802286e:	fb00 4003 	mla	r0, r0, r3, r4
 8022872:	1400      	asrs	r0, r0, #16
 8022874:	f53f ae82 	bmi.w	802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022878:	3901      	subs	r1, #1
 802287a:	4288      	cmp	r0, r1
 802287c:	f6bf ae7e 	bge.w	802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022880:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022882:	fb01 6303 	mla	r3, r1, r3, r6
 8022886:	141b      	asrs	r3, r3, #16
 8022888:	f53f ae78 	bmi.w	802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802288c:	3a01      	subs	r2, #1
 802288e:	4293      	cmp	r3, r2
 8022890:	f6bf ae74 	bge.w	802257c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022894:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022898:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802289c:	f1bb 0f00 	cmp.w	fp, #0
 80228a0:	dc6c      	bgt.n	802297c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80228a2:	9b07      	ldr	r3, [sp, #28]
 80228a4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80228a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80228aa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80228ae:	930a      	str	r3, [sp, #40]	; 0x28
 80228b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	f340 81b3 	ble.w	8022c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80228b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80228be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228c6:	eef0 6a62 	vmov.f32	s13, s5
 80228ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80228ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80228d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228d6:	ee16 4a90 	vmov	r4, s13
 80228da:	eef0 6a43 	vmov.f32	s13, s6
 80228de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80228e2:	ee16 6a90 	vmov	r6, s13
 80228e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80228ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80228ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80228f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80228f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80228fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80228fe:	ee12 2a90 	vmov	r2, s5
 8022902:	eef0 2a47 	vmov.f32	s5, s14
 8022906:	fb92 f3f3 	sdiv	r3, r2, r3
 802290a:	ee13 2a10 	vmov	r2, s6
 802290e:	9329      	str	r3, [sp, #164]	; 0xa4
 8022910:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022912:	eeb0 3a67 	vmov.f32	s6, s15
 8022916:	fb92 f3f3 	sdiv	r3, r2, r3
 802291a:	932a      	str	r3, [sp, #168]	; 0xa8
 802291c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802291e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022920:	3b01      	subs	r3, #1
 8022922:	9317      	str	r3, [sp, #92]	; 0x5c
 8022924:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022926:	bf08      	it	eq
 8022928:	4613      	moveq	r3, r2
 802292a:	9307      	str	r3, [sp, #28]
 802292c:	e5fb      	b.n	8022526 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802292e:	2900      	cmp	r1, #0
 8022930:	f43f ae6b 	beq.w	802260a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022934:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022938:	9308      	str	r3, [sp, #32]
 802293a:	0e1b      	lsrs	r3, r3, #24
 802293c:	9311      	str	r3, [sp, #68]	; 0x44
 802293e:	e664      	b.n	802260a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022940:	f112 0801 	adds.w	r8, r2, #1
 8022944:	f53f af7b 	bmi.w	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022948:	4543      	cmp	r3, r8
 802294a:	f6ff af78 	blt.w	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802294e:	f11c 0801 	adds.w	r8, ip, #1
 8022952:	f53f af74 	bmi.w	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8022956:	45c6      	cmp	lr, r8
 8022958:	f6ff af71 	blt.w	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802295c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802295e:	b21b      	sxth	r3, r3
 8022960:	9201      	str	r2, [sp, #4]
 8022962:	fa0f f28e 	sxth.w	r2, lr
 8022966:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802296a:	e9cd c002 	strd	ip, r0, [sp, #8]
 802296e:	9200      	str	r2, [sp, #0]
 8022970:	4639      	mov	r1, r7
 8022972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022974:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022976:	f7ff fc79 	bl	802226c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802297a:	e760      	b.n	802283e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802297c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802297e:	1427      	asrs	r7, r4, #16
 8022980:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022982:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022986:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802298a:	1433      	asrs	r3, r6, #16
 802298c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022990:	fb01 7303 	mla	r3, r1, r3, r7
 8022994:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8022998:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802299c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80229a0:	2a00      	cmp	r2, #0
 80229a2:	f000 8133 	beq.w	8022c0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80229a6:	687d      	ldr	r5, [r7, #4]
 80229a8:	950e      	str	r5, [sp, #56]	; 0x38
 80229aa:	0e2d      	lsrs	r5, r5, #24
 80229ac:	9515      	str	r5, [sp, #84]	; 0x54
 80229ae:	b178      	cbz	r0, 80229d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80229b0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80229b4:	3901      	subs	r1, #1
 80229b6:	0089      	lsls	r1, r1, #2
 80229b8:	3104      	adds	r1, #4
 80229ba:	eb07 0e01 	add.w	lr, r7, r1
 80229be:	5879      	ldr	r1, [r7, r1]
 80229c0:	9109      	str	r1, [sp, #36]	; 0x24
 80229c2:	0e09      	lsrs	r1, r1, #24
 80229c4:	9112      	str	r1, [sp, #72]	; 0x48
 80229c6:	f8de 1004 	ldr.w	r1, [lr, #4]
 80229ca:	910f      	str	r1, [sp, #60]	; 0x3c
 80229cc:	0e09      	lsrs	r1, r1, #24
 80229ce:	9116      	str	r1, [sp, #88]	; 0x58
 80229d0:	b292      	uxth	r2, r2
 80229d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80229d4:	b280      	uxth	r0, r0
 80229d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80229d8:	fb02 f800 	mul.w	r8, r2, r0
 80229dc:	0112      	lsls	r2, r2, #4
 80229de:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80229e2:	eba2 0e08 	sub.w	lr, r2, r8
 80229e6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80229ea:	b280      	uxth	r0, r0
 80229ec:	fa1f fe8e 	uxth.w	lr, lr
 80229f0:	1a12      	subs	r2, r2, r0
 80229f2:	fb0e f101 	mul.w	r1, lr, r1
 80229f6:	b292      	uxth	r2, r2
 80229f8:	fb02 110c 	mla	r1, r2, ip, r1
 80229fc:	fb00 1105 	mla	r1, r0, r5, r1
 8022a00:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022a02:	fb08 1105 	mla	r1, r8, r5, r1
 8022a06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022a0a:	2900      	cmp	r1, #0
 8022a0c:	f000 80f5 	beq.w	8022bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8022a10:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022a14:	d019      	beq.n	8022a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8022a16:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022a1e:	fb0c fa0a 	mul.w	sl, ip, sl
 8022a22:	fb0c fc03 	mul.w	ip, ip, r3
 8022a26:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022a2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022a2e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8022a32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a36:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022a3a:	4453      	add	r3, sl
 8022a3c:	0a3f      	lsrs	r7, r7, #8
 8022a3e:	0a1b      	lsrs	r3, r3, #8
 8022a40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022a44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022a48:	433b      	orrs	r3, r7
 8022a4a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022a4c:	2dff      	cmp	r5, #255	; 0xff
 8022a4e:	d020      	beq.n	8022a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8022a50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022a52:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022a56:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022a58:	436f      	muls	r7, r5
 8022a5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022a5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022a60:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022a64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022a66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022a6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a6e:	fb05 fa0a 	mul.w	sl, r5, sl
 8022a72:	44bc      	add	ip, r7
 8022a74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022a78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022a7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022a80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022a84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022a88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022a8c:	ea4c 050a 	orr.w	r5, ip, sl
 8022a90:	950e      	str	r5, [sp, #56]	; 0x38
 8022a92:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022a94:	2dff      	cmp	r5, #255	; 0xff
 8022a96:	d020      	beq.n	8022ada <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8022a98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022a9a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022a9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022aa0:	436f      	muls	r7, r5
 8022aa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022aa4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022aa8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022aac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022aae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022ab2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022ab6:	fb05 fa0a 	mul.w	sl, r5, sl
 8022aba:	44bc      	add	ip, r7
 8022abc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022ac0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ac4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022ac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022acc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ad0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ad4:	ea4c 050a 	orr.w	r5, ip, sl
 8022ad8:	9509      	str	r5, [sp, #36]	; 0x24
 8022ada:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022adc:	2dff      	cmp	r5, #255	; 0xff
 8022ade:	d020      	beq.n	8022b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8022ae0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022ae2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022ae6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022ae8:	436f      	muls	r7, r5
 8022aea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022aec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022af0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022af4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022af6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022afa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022afe:	fb05 fa0a 	mul.w	sl, r5, sl
 8022b02:	44bc      	add	ip, r7
 8022b04:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022b08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b0c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022b10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022b14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b1c:	ea4c 050a 	orr.w	r5, ip, sl
 8022b20:	950f      	str	r5, [sp, #60]	; 0x3c
 8022b22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022b24:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022b28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b2c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022b30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022b32:	fb0e f707 	mul.w	r7, lr, r7
 8022b36:	fb02 770c 	mla	r7, r2, ip, r7
 8022b3a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022b3e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022b40:	fb00 770c 	mla	r7, r0, ip, r7
 8022b44:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022b48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022b4a:	fb08 770c 	mla	r7, r8, ip, r7
 8022b4e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8022b52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022b54:	fb0e fe0c 	mul.w	lr, lr, ip
 8022b58:	0a3f      	lsrs	r7, r7, #8
 8022b5a:	fb02 e303 	mla	r3, r2, r3, lr
 8022b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022b60:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022b64:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022b6a:	fb00 330a 	mla	r3, r0, sl, r3
 8022b6e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022b72:	f8b9 0000 	ldrh.w	r0, [r9]
 8022b76:	fb08 3c0c 	mla	ip, r8, ip, r3
 8022b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b7c:	1202      	asrs	r2, r0, #8
 8022b7e:	4359      	muls	r1, r3
 8022b80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b84:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022b88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022b8c:	1c4b      	adds	r3, r1, #1
 8022b8e:	ea47 070c 	orr.w	r7, r7, ip
 8022b92:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022b96:	0c3b      	lsrs	r3, r7, #16
 8022b98:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022b9c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8022ba0:	b2ff      	uxtb	r7, r7
 8022ba2:	fb13 f305 	smulbb	r3, r3, r5
 8022ba6:	b2c9      	uxtb	r1, r1
 8022ba8:	fb17 f705 	smulbb	r7, r7, r5
 8022bac:	fb02 3201 	mla	r2, r2, r1, r3
 8022bb0:	10c3      	asrs	r3, r0, #3
 8022bb2:	fb1c fc05 	smulbb	ip, ip, r5
 8022bb6:	00c0      	lsls	r0, r0, #3
 8022bb8:	b292      	uxth	r2, r2
 8022bba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8022bbe:	b2c0      	uxtb	r0, r0
 8022bc0:	fb03 c301 	mla	r3, r3, r1, ip
 8022bc4:	fb00 7001 	mla	r0, r0, r1, r7
 8022bc8:	1c51      	adds	r1, r2, #1
 8022bca:	b29b      	uxth	r3, r3
 8022bcc:	b280      	uxth	r0, r0
 8022bce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022bd2:	f100 0c01 	add.w	ip, r0, #1
 8022bd6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8022bda:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8022bde:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022be2:	ea4c 0202 	orr.w	r2, ip, r2
 8022be6:	f103 0c01 	add.w	ip, r3, #1
 8022bea:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8022bee:	095b      	lsrs	r3, r3, #5
 8022bf0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022bf4:	431a      	orrs	r2, r3
 8022bf6:	f8a9 2000 	strh.w	r2, [r9]
 8022bfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022bfc:	f109 0902 	add.w	r9, r9, #2
 8022c00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022c04:	441c      	add	r4, r3
 8022c06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022c08:	441e      	add	r6, r3
 8022c0a:	e647      	b.n	802289c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8022c0c:	2800      	cmp	r0, #0
 8022c0e:	f43f aedf 	beq.w	80229d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8022c12:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8022c16:	9109      	str	r1, [sp, #36]	; 0x24
 8022c18:	0e09      	lsrs	r1, r1, #24
 8022c1a:	9112      	str	r1, [sp, #72]	; 0x48
 8022c1c:	e6d8      	b.n	80229d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8022c1e:	b01d      	add	sp, #116	; 0x74
 8022c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c24 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8022c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c28:	b085      	sub	sp, #20
 8022c2a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8022c2e:	9102      	str	r1, [sp, #8]
 8022c30:	2c00      	cmp	r4, #0
 8022c32:	fb04 7103 	mla	r1, r4, r3, r7
 8022c36:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8022c3a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8022c3e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8022c42:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022c46:	f2c0 810c 	blt.w	8022e62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8022c4a:	45a6      	cmp	lr, r4
 8022c4c:	f340 8109 	ble.w	8022e62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8022c50:	2f00      	cmp	r7, #0
 8022c52:	f2c0 8104 	blt.w	8022e5e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8022c56:	42bb      	cmp	r3, r7
 8022c58:	f340 8101 	ble.w	8022e5e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8022c5c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8022c60:	1c7a      	adds	r2, r7, #1
 8022c62:	f100 8101 	bmi.w	8022e68 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8022c66:	4293      	cmp	r3, r2
 8022c68:	f340 80fe 	ble.w	8022e68 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8022c6c:	2e00      	cmp	r6, #0
 8022c6e:	f000 80fd 	beq.w	8022e6c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8022c72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8022c76:	3401      	adds	r4, #1
 8022c78:	f100 80fc 	bmi.w	8022e74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8022c7c:	45a6      	cmp	lr, r4
 8022c7e:	f340 80f9 	ble.w	8022e74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8022c82:	2800      	cmp	r0, #0
 8022c84:	f000 80f9 	beq.w	8022e7a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8022c88:	2f00      	cmp	r7, #0
 8022c8a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8022c8e:	f2c0 80ef 	blt.w	8022e70 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8022c92:	42bb      	cmp	r3, r7
 8022c94:	f340 80ec 	ble.w	8022e70 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8022c98:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022c9c:	3701      	adds	r7, #1
 8022c9e:	f100 80ef 	bmi.w	8022e80 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8022ca2:	42bb      	cmp	r3, r7
 8022ca4:	f340 80ec 	ble.w	8022e80 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8022ca8:	2e00      	cmp	r6, #0
 8022caa:	f000 80eb 	beq.w	8022e84 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8022cae:	6852      	ldr	r2, [r2, #4]
 8022cb0:	b2b6      	uxth	r6, r6
 8022cb2:	b280      	uxth	r0, r0
 8022cb4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022cb8:	fb00 fe06 	mul.w	lr, r0, r6
 8022cbc:	0136      	lsls	r6, r6, #4
 8022cbe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022cc2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022cc6:	eba6 070e 	sub.w	r7, r6, lr
 8022cca:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022cce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022cd2:	b280      	uxth	r0, r0
 8022cd4:	b2bf      	uxth	r7, r7
 8022cd6:	1a1b      	subs	r3, r3, r0
 8022cd8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022cdc:	fb07 f60a 	mul.w	r6, r7, sl
 8022ce0:	b29b      	uxth	r3, r3
 8022ce2:	fb0b 6603 	mla	r6, fp, r3, r6
 8022ce6:	fb00 6609 	mla	r6, r0, r9, r6
 8022cea:	fb0e 6608 	mla	r6, lr, r8, r6
 8022cee:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022cf2:	9600      	str	r6, [sp, #0]
 8022cf4:	2e00      	cmp	r6, #0
 8022cf6:	f000 80af 	beq.w	8022e58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8022cfa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022cfe:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022d02:	9e02      	ldr	r6, [sp, #8]
 8022d04:	fb0b fc0c 	mul.w	ip, fp, ip
 8022d08:	fb0b f505 	mul.w	r5, fp, r5
 8022d0c:	8836      	ldrh	r6, [r6, #0]
 8022d0e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022d12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d16:	9501      	str	r5, [sp, #4]
 8022d18:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022d1c:	44dc      	add	ip, fp
 8022d1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d22:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022d26:	9503      	str	r5, [sp, #12]
 8022d28:	9d01      	ldr	r5, [sp, #4]
 8022d2a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022d2e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022d32:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022d36:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022d3a:	fb0a fc0c 	mul.w	ip, sl, ip
 8022d3e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022d42:	fb0a fa01 	mul.w	sl, sl, r1
 8022d46:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022d4a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d4e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8022d52:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022d56:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022d5a:	4465      	add	r5, ip
 8022d5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022d60:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022d64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d68:	fb09 fc0c 	mul.w	ip, r9, ip
 8022d6c:	0a2d      	lsrs	r5, r5, #8
 8022d6e:	fb09 f904 	mul.w	r9, r9, r4
 8022d72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022d76:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022d7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022d7e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022d82:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022d86:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022d8a:	437d      	muls	r5, r7
 8022d8c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022d90:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022d94:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d98:	4461      	add	r1, ip
 8022d9a:	fb08 f404 	mul.w	r4, r8, r4
 8022d9e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022da2:	fb08 f802 	mul.w	r8, r8, r2
 8022da6:	0a09      	lsrs	r1, r1, #8
 8022da8:	0a22      	lsrs	r2, r4, #8
 8022daa:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022dae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022db2:	fb07 f70a 	mul.w	r7, r7, sl
 8022db6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022dba:	4414      	add	r4, r2
 8022dbc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022dc0:	0a24      	lsrs	r4, r4, #8
 8022dc2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022dc6:	9a03      	ldr	r2, [sp, #12]
 8022dc8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022dcc:	fb02 5503 	mla	r5, r2, r3, r5
 8022dd0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022dd4:	fb04 540e 	mla	r4, r4, lr, r5
 8022dd8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022ddc:	fb01 4100 	mla	r1, r1, r0, r4
 8022de0:	0a09      	lsrs	r1, r1, #8
 8022de2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8022de6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8022dea:	fb03 7101 	mla	r1, r3, r1, r7
 8022dee:	9b00      	ldr	r3, [sp, #0]
 8022df0:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022df4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8022df8:	43da      	mvns	r2, r3
 8022dfa:	1233      	asrs	r3, r6, #8
 8022dfc:	fb00 e101 	mla	r1, r0, r1, lr
 8022e00:	10f0      	asrs	r0, r6, #3
 8022e02:	b2d2      	uxtb	r2, r2
 8022e04:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8022e08:	0a09      	lsrs	r1, r1, #8
 8022e0a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022e0e:	00f6      	lsls	r6, r6, #3
 8022e10:	4353      	muls	r3, r2
 8022e12:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022e16:	4350      	muls	r0, r2
 8022e18:	b2f6      	uxtb	r6, r6
 8022e1a:	4321      	orrs	r1, r4
 8022e1c:	4356      	muls	r6, r2
 8022e1e:	1c5a      	adds	r2, r3, #1
 8022e20:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e24:	0c0b      	lsrs	r3, r1, #16
 8022e26:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e2a:	1c42      	adds	r2, r0, #1
 8022e2c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022e30:	0a0a      	lsrs	r2, r1, #8
 8022e32:	021b      	lsls	r3, r3, #8
 8022e34:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022e38:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022e3c:	00d2      	lsls	r2, r2, #3
 8022e3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e42:	4313      	orrs	r3, r2
 8022e44:	1c72      	adds	r2, r6, #1
 8022e46:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8022e4a:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8022e4e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022e52:	4319      	orrs	r1, r3
 8022e54:	9b02      	ldr	r3, [sp, #8]
 8022e56:	8019      	strh	r1, [r3, #0]
 8022e58:	b005      	add	sp, #20
 8022e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e5e:	2500      	movs	r5, #0
 8022e60:	e6fe      	b.n	8022c60 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8022e62:	2100      	movs	r1, #0
 8022e64:	460d      	mov	r5, r1
 8022e66:	e706      	b.n	8022c76 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022e68:	2100      	movs	r1, #0
 8022e6a:	e704      	b.n	8022c76 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022e6c:	4631      	mov	r1, r6
 8022e6e:	e702      	b.n	8022c76 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8022e70:	2400      	movs	r4, #0
 8022e72:	e713      	b.n	8022c9c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8022e74:	2200      	movs	r2, #0
 8022e76:	4614      	mov	r4, r2
 8022e78:	e71a      	b.n	8022cb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022e7a:	4602      	mov	r2, r0
 8022e7c:	4604      	mov	r4, r0
 8022e7e:	e717      	b.n	8022cb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022e80:	2200      	movs	r2, #0
 8022e82:	e715      	b.n	8022cb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8022e84:	4632      	mov	r2, r6
 8022e86:	e713      	b.n	8022cb0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08022e88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e8c:	b09b      	sub	sp, #108	; 0x6c
 8022e8e:	9218      	str	r2, [sp, #96]	; 0x60
 8022e90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022e92:	9019      	str	r0, [sp, #100]	; 0x64
 8022e94:	9116      	str	r1, [sp, #88]	; 0x58
 8022e96:	6850      	ldr	r0, [r2, #4]
 8022e98:	9307      	str	r3, [sp, #28]
 8022e9a:	6812      	ldr	r2, [r2, #0]
 8022e9c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8022ea0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8022ea4:	fb00 1303 	mla	r3, r0, r3, r1
 8022ea8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022eac:	930a      	str	r3, [sp, #40]	; 0x28
 8022eae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022eb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	dc03      	bgt.n	8022ec2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022eba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	f340 8387 	ble.w	80235d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8022ec2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022ec4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022ec8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022ecc:	1e48      	subs	r0, r1, #1
 8022ece:	1e57      	subs	r7, r2, #1
 8022ed0:	9b07      	ldr	r3, [sp, #28]
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	f340 8166 	ble.w	80231a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8022ed8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022edc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022ee0:	d406      	bmi.n	8022ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022ee2:	4584      	cmp	ip, r0
 8022ee4:	da04      	bge.n	8022ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	db02      	blt.n	8022ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022eea:	42bb      	cmp	r3, r7
 8022eec:	f2c0 815b 	blt.w	80231a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022ef0:	f11c 0c01 	adds.w	ip, ip, #1
 8022ef4:	f100 814b 	bmi.w	802318e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022ef8:	4561      	cmp	r1, ip
 8022efa:	f2c0 8148 	blt.w	802318e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022efe:	3301      	adds	r3, #1
 8022f00:	f100 8145 	bmi.w	802318e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022f04:	429a      	cmp	r2, r3
 8022f06:	f2c0 8142 	blt.w	802318e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8022f0a:	9b07      	ldr	r3, [sp, #28]
 8022f0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022f0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8022f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022f12:	2b00      	cmp	r3, #0
 8022f14:	f340 8165 	ble.w	80231e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8022f18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022f1a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022f1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022f20:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022f24:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022f28:	1422      	asrs	r2, r4, #16
 8022f2a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022f2e:	689b      	ldr	r3, [r3, #8]
 8022f30:	f100 81d5 	bmi.w	80232de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022f34:	f103 38ff 	add.w	r8, r3, #4294967295
 8022f38:	4542      	cmp	r2, r8
 8022f3a:	f280 81d0 	bge.w	80232de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022f3e:	f1bc 0f00 	cmp.w	ip, #0
 8022f42:	f2c0 81cc 	blt.w	80232de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022f46:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022f4a:	45c4      	cmp	ip, r8
 8022f4c:	f280 81c7 	bge.w	80232de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8022f50:	b21b      	sxth	r3, r3
 8022f52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022f54:	fb0c 2203 	mla	r2, ip, r3, r2
 8022f58:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8022f5c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8022f60:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022f64:	2900      	cmp	r1, #0
 8022f66:	f000 8182 	beq.w	802326e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8022f6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8022f6e:	950b      	str	r5, [sp, #44]	; 0x2c
 8022f70:	0e2d      	lsrs	r5, r5, #24
 8022f72:	9512      	str	r5, [sp, #72]	; 0x48
 8022f74:	b180      	cbz	r0, 8022f98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8022f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022f7a:	3b01      	subs	r3, #1
 8022f7c:	009b      	lsls	r3, r3, #2
 8022f7e:	3304      	adds	r3, #4
 8022f80:	eb08 0c03 	add.w	ip, r8, r3
 8022f84:	f858 3003 	ldr.w	r3, [r8, r3]
 8022f88:	9308      	str	r3, [sp, #32]
 8022f8a:	0e1b      	lsrs	r3, r3, #24
 8022f8c:	9310      	str	r3, [sp, #64]	; 0x40
 8022f8e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022f92:	930c      	str	r3, [sp, #48]	; 0x30
 8022f94:	0e1b      	lsrs	r3, r3, #24
 8022f96:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f98:	b289      	uxth	r1, r1
 8022f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022f9c:	b280      	uxth	r0, r0
 8022f9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022fa0:	fb01 f900 	mul.w	r9, r1, r0
 8022fa4:	0109      	lsls	r1, r1, #4
 8022fa6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022faa:	eba1 0809 	sub.w	r8, r1, r9
 8022fae:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022fb2:	b280      	uxth	r0, r0
 8022fb4:	fa1f f888 	uxth.w	r8, r8
 8022fb8:	1a09      	subs	r1, r1, r0
 8022fba:	fb08 f303 	mul.w	r3, r8, r3
 8022fbe:	b289      	uxth	r1, r1
 8022fc0:	fb01 330e 	mla	r3, r1, lr, r3
 8022fc4:	fb00 3305 	mla	r3, r0, r5, r3
 8022fc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022fca:	fb09 3305 	mla	r3, r9, r5, r3
 8022fce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	f000 80d2 	beq.w	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022fd8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022fdc:	d01b      	beq.n	8023016 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8022fde:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022fe2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022fe6:	fb0e fa0a 	mul.w	sl, lr, sl
 8022fea:	fb0e fe02 	mul.w	lr, lr, r2
 8022fee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022ff2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022ff6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022ffa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022ffe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023002:	4452      	add	r2, sl
 8023004:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023008:	0a12      	lsrs	r2, r2, #8
 802300a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802300e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023012:	ea42 020c 	orr.w	r2, r2, ip
 8023016:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023018:	2dff      	cmp	r5, #255	; 0xff
 802301a:	d021      	beq.n	8023060 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802301c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802301e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8023022:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023024:	fb05 fb0b 	mul.w	fp, r5, fp
 8023028:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802302a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802302e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023030:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023034:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023038:	fb05 fa0a 	mul.w	sl, r5, sl
 802303c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023040:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023044:	44de      	add	lr, fp
 8023046:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802304a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802304e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023052:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023056:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802305a:	ea4e 050a 	orr.w	r5, lr, sl
 802305e:	950b      	str	r5, [sp, #44]	; 0x2c
 8023060:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023062:	2dff      	cmp	r5, #255	; 0xff
 8023064:	d021      	beq.n	80230aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8023066:	9d08      	ldr	r5, [sp, #32]
 8023068:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802306c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802306e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023072:	9d08      	ldr	r5, [sp, #32]
 8023074:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023078:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802307a:	fb05 fa0e 	mul.w	sl, r5, lr
 802307e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023082:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023086:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802308a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802308e:	44de      	add	lr, fp
 8023090:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023094:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023098:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802309c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230a4:	ea4e 050a 	orr.w	r5, lr, sl
 80230a8:	9508      	str	r5, [sp, #32]
 80230aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80230ac:	2dff      	cmp	r5, #255	; 0xff
 80230ae:	d021      	beq.n	80230f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80230b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80230b2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80230b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80230b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80230bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80230be:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80230c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80230c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80230d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230d8:	44de      	add	lr, fp
 80230da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80230ee:	ea4e 050a 	orr.w	r5, lr, sl
 80230f2:	950c      	str	r5, [sp, #48]	; 0x30
 80230f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80230f6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80230fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80230fe:	2bff      	cmp	r3, #255	; 0xff
 8023100:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023104:	9d08      	ldr	r5, [sp, #32]
 8023106:	fb08 fc0c 	mul.w	ip, r8, ip
 802310a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802310e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023114:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023118:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802311c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802311e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023122:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8023126:	fb08 f80e 	mul.w	r8, r8, lr
 802312a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802312e:	fb01 8202 	mla	r2, r1, r2, r8
 8023132:	9908      	ldr	r1, [sp, #32]
 8023134:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023138:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802313c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802313e:	fb00 220a 	mla	r2, r0, sl, r2
 8023142:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023146:	fb09 2900 	mla	r9, r9, r0, r2
 802314a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802314e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023152:	ea4c 0c09 	orr.w	ip, ip, r9
 8023156:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802315a:	f040 8091 	bne.w	8023280 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802315e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8023162:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8023166:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802316a:	f022 0207 	bic.w	r2, r2, #7
 802316e:	431a      	orrs	r2, r3
 8023170:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023174:	ea4c 0c02 	orr.w	ip, ip, r2
 8023178:	f8a7 c000 	strh.w	ip, [r7]
 802317c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802317e:	3702      	adds	r7, #2
 8023180:	441c      	add	r4, r3
 8023182:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023184:	441e      	add	r6, r3
 8023186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023188:	3b01      	subs	r3, #1
 802318a:	9317      	str	r3, [sp, #92]	; 0x5c
 802318c:	e6c0      	b.n	8022f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802318e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023190:	441c      	add	r4, r3
 8023192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023194:	441e      	add	r6, r3
 8023196:	9b07      	ldr	r3, [sp, #28]
 8023198:	3b01      	subs	r3, #1
 802319a:	9307      	str	r3, [sp, #28]
 802319c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802319e:	3302      	adds	r3, #2
 80231a0:	930a      	str	r3, [sp, #40]	; 0x28
 80231a2:	e695      	b.n	8022ed0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80231a4:	d024      	beq.n	80231f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80231a6:	9b07      	ldr	r3, [sp, #28]
 80231a8:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80231aa:	3b01      	subs	r3, #1
 80231ac:	fb00 4003 	mla	r0, r0, r3, r4
 80231b0:	1400      	asrs	r0, r0, #16
 80231b2:	f53f aeaa 	bmi.w	8022f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80231b6:	3901      	subs	r1, #1
 80231b8:	4288      	cmp	r0, r1
 80231ba:	f6bf aea6 	bge.w	8022f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80231be:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80231c0:	fb01 6303 	mla	r3, r1, r3, r6
 80231c4:	141b      	asrs	r3, r3, #16
 80231c6:	f53f aea0 	bmi.w	8022f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80231ca:	3a01      	subs	r2, #1
 80231cc:	4293      	cmp	r3, r2
 80231ce:	f6bf ae9c 	bge.w	8022f0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80231d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80231d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80231da:	f1bb 0f00 	cmp.w	fp, #0
 80231de:	f300 809a 	bgt.w	8023316 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80231e2:	9b07      	ldr	r3, [sp, #28]
 80231e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80231e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80231ee:	930a      	str	r3, [sp, #40]	; 0x28
 80231f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	f340 81ec 	ble.w	80235d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80231f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023202:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023206:	eef0 6a62 	vmov.f32	s13, s5
 802320a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802320e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023212:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023216:	ee16 4a90 	vmov	r4, s13
 802321a:	eef0 6a43 	vmov.f32	s13, s6
 802321e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023222:	ee16 6a90 	vmov	r6, s13
 8023226:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802322a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802322e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023232:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023236:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802323a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802323e:	ee12 2a90 	vmov	r2, s5
 8023242:	eef0 2a47 	vmov.f32	s5, s14
 8023246:	fb92 f3f3 	sdiv	r3, r2, r3
 802324a:	ee13 2a10 	vmov	r2, s6
 802324e:	9327      	str	r3, [sp, #156]	; 0x9c
 8023250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023252:	eeb0 3a67 	vmov.f32	s6, s15
 8023256:	fb92 f3f3 	sdiv	r3, r2, r3
 802325a:	9328      	str	r3, [sp, #160]	; 0xa0
 802325c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802325e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023260:	3b01      	subs	r3, #1
 8023262:	9316      	str	r3, [sp, #88]	; 0x58
 8023264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023266:	bf08      	it	eq
 8023268:	4613      	moveq	r3, r2
 802326a:	9307      	str	r3, [sp, #28]
 802326c:	e622      	b.n	8022eb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802326e:	2800      	cmp	r0, #0
 8023270:	f43f ae92 	beq.w	8022f98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023274:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023278:	9308      	str	r3, [sp, #32]
 802327a:	0e1b      	lsrs	r3, r3, #24
 802327c:	9310      	str	r3, [sp, #64]	; 0x40
 802327e:	e68b      	b.n	8022f98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023280:	8839      	ldrh	r1, [r7, #0]
 8023282:	43db      	mvns	r3, r3
 8023284:	4dd4      	ldr	r5, [pc, #848]	; (80235d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8023286:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802328a:	fa5f f883 	uxtb.w	r8, r3
 802328e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023292:	10c8      	asrs	r0, r1, #3
 8023294:	00cb      	lsls	r3, r1, #3
 8023296:	fb0e fe08 	mul.w	lr, lr, r8
 802329a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802329e:	b2db      	uxtb	r3, r3
 80232a0:	f10e 0101 	add.w	r1, lr, #1
 80232a4:	fb00 f008 	mul.w	r0, r0, r8
 80232a8:	fb03 f308 	mul.w	r3, r3, r8
 80232ac:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80232b0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80232b4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80232b8:	f100 0e01 	add.w	lr, r0, #1
 80232bc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80232c0:	b2c9      	uxtb	r1, r1
 80232c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80232c6:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80232ca:	00d2      	lsls	r2, r2, #3
 80232cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80232d0:	430a      	orrs	r2, r1
 80232d2:	1c59      	adds	r1, r3, #1
 80232d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80232d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80232dc:	e748      	b.n	8023170 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80232de:	f112 0801 	adds.w	r8, r2, #1
 80232e2:	f53f af4b 	bmi.w	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80232e6:	4543      	cmp	r3, r8
 80232e8:	f6ff af48 	blt.w	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80232ec:	f11c 0801 	adds.w	r8, ip, #1
 80232f0:	f53f af44 	bmi.w	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80232f4:	45c6      	cmp	lr, r8
 80232f6:	f6ff af41 	blt.w	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80232fa:	b21b      	sxth	r3, r3
 80232fc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023300:	fa0f f28e 	sxth.w	r2, lr
 8023304:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023308:	9200      	str	r2, [sp, #0]
 802330a:	4639      	mov	r1, r7
 802330c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802330e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023310:	f7ff fc88 	bl	8022c24 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8023314:	e732      	b.n	802317c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023316:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023318:	1421      	asrs	r1, r4, #16
 802331a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802331c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023320:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8023324:	1433      	asrs	r3, r6, #16
 8023326:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802332a:	fb07 1303 	mla	r3, r7, r3, r1
 802332e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023330:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023334:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8023338:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802333c:	2a00      	cmp	r2, #0
 802333e:	f000 8108 	beq.w	8023552 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8023342:	684d      	ldr	r5, [r1, #4]
 8023344:	950d      	str	r5, [sp, #52]	; 0x34
 8023346:	0e2d      	lsrs	r5, r5, #24
 8023348:	9514      	str	r5, [sp, #80]	; 0x50
 802334a:	b178      	cbz	r0, 802336c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802334c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8023350:	3f01      	subs	r7, #1
 8023352:	00bf      	lsls	r7, r7, #2
 8023354:	3704      	adds	r7, #4
 8023356:	eb01 0e07 	add.w	lr, r1, r7
 802335a:	59c9      	ldr	r1, [r1, r7]
 802335c:	9109      	str	r1, [sp, #36]	; 0x24
 802335e:	0e09      	lsrs	r1, r1, #24
 8023360:	9111      	str	r1, [sp, #68]	; 0x44
 8023362:	f8de 1004 	ldr.w	r1, [lr, #4]
 8023366:	910e      	str	r1, [sp, #56]	; 0x38
 8023368:	0e09      	lsrs	r1, r1, #24
 802336a:	9115      	str	r1, [sp, #84]	; 0x54
 802336c:	b292      	uxth	r2, r2
 802336e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023370:	b280      	uxth	r0, r0
 8023372:	fb02 f900 	mul.w	r9, r2, r0
 8023376:	0112      	lsls	r2, r2, #4
 8023378:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802337c:	eba2 0e09 	sub.w	lr, r2, r9
 8023380:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023386:	b280      	uxth	r0, r0
 8023388:	fa1f fe8e 	uxth.w	lr, lr
 802338c:	1a09      	subs	r1, r1, r0
 802338e:	fb0e f202 	mul.w	r2, lr, r2
 8023392:	b289      	uxth	r1, r1
 8023394:	fb01 220c 	mla	r2, r1, ip, r2
 8023398:	fb00 2205 	mla	r2, r0, r5, r2
 802339c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802339e:	fb09 2205 	mla	r2, r9, r5, r2
 80233a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80233a6:	2a00      	cmp	r2, #0
 80233a8:	f000 80ca 	beq.w	8023540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80233ac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80233b0:	d019      	beq.n	80233e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80233b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80233b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80233ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80233be:	fb0c fc03 	mul.w	ip, ip, r3
 80233c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80233c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80233ca:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80233ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80233d6:	4453      	add	r3, sl
 80233d8:	0a3f      	lsrs	r7, r7, #8
 80233da:	0a1b      	lsrs	r3, r3, #8
 80233dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80233e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80233e4:	433b      	orrs	r3, r7
 80233e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80233e8:	2dff      	cmp	r5, #255	; 0xff
 80233ea:	d020      	beq.n	802342e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80233ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80233ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80233f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80233f4:	436f      	muls	r7, r5
 80233f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80233f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80233fc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023400:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023402:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802340a:	fb05 fa0a 	mul.w	sl, r5, sl
 802340e:	44bc      	add	ip, r7
 8023410:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023414:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023418:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802341c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023420:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023424:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023428:	ea4c 050a 	orr.w	r5, ip, sl
 802342c:	950d      	str	r5, [sp, #52]	; 0x34
 802342e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023430:	2dff      	cmp	r5, #255	; 0xff
 8023432:	d020      	beq.n	8023476 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8023434:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023436:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802343a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802343c:	436f      	muls	r7, r5
 802343e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023440:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8023444:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023446:	fb05 fa0c 	mul.w	sl, r5, ip
 802344a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802344e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023452:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023456:	44bc      	add	ip, r7
 8023458:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802345c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023464:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023468:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802346c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023470:	ea4c 050a 	orr.w	r5, ip, sl
 8023474:	9509      	str	r5, [sp, #36]	; 0x24
 8023476:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023478:	2dff      	cmp	r5, #255	; 0xff
 802347a:	d020      	beq.n	80234be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802347c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802347e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8023482:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023484:	436f      	muls	r7, r5
 8023486:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023488:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802348c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8023490:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023492:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023496:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802349a:	fb05 fa0a 	mul.w	sl, r5, sl
 802349e:	44bc      	add	ip, r7
 80234a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234b8:	ea4c 050a 	orr.w	r5, ip, sl
 80234bc:	950e      	str	r5, [sp, #56]	; 0x38
 80234be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80234c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80234c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234c8:	2aff      	cmp	r2, #255	; 0xff
 80234ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80234ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80234d0:	fb0e f707 	mul.w	r7, lr, r7
 80234d4:	fb01 770c 	mla	r7, r1, ip, r7
 80234d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80234dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80234de:	fb00 770c 	mla	r7, r0, ip, r7
 80234e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80234e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80234e8:	fb09 770c 	mla	r7, r9, ip, r7
 80234ec:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80234f0:	fb0e fe0c 	mul.w	lr, lr, ip
 80234f4:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80234f8:	fb01 e303 	mla	r3, r1, r3, lr
 80234fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80234fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023502:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023506:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023508:	fb00 330a 	mla	r3, r0, sl, r3
 802350c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023510:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023514:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023518:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802351c:	ea47 070c 	orr.w	r7, r7, ip
 8023520:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8023524:	d11e      	bne.n	8023564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8023526:	097a      	lsrs	r2, r7, #5
 8023528:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802352c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8023530:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023534:	f023 0307 	bic.w	r3, r3, #7
 8023538:	4313      	orrs	r3, r2
 802353a:	431f      	orrs	r7, r3
 802353c:	f8a8 7000 	strh.w	r7, [r8]
 8023540:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023542:	f108 0802 	add.w	r8, r8, #2
 8023546:	f10b 3bff 	add.w	fp, fp, #4294967295
 802354a:	441c      	add	r4, r3
 802354c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802354e:	441e      	add	r6, r3
 8023550:	e643      	b.n	80231da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023552:	2800      	cmp	r0, #0
 8023554:	f43f af0a 	beq.w	802336c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023558:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802355c:	9109      	str	r1, [sp, #36]	; 0x24
 802355e:	0e09      	lsrs	r1, r1, #24
 8023560:	9111      	str	r1, [sp, #68]	; 0x44
 8023562:	e703      	b.n	802336c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023564:	f8b8 1000 	ldrh.w	r1, [r8]
 8023568:	43d2      	mvns	r2, r2
 802356a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802356e:	fa5f fe82 	uxtb.w	lr, r2
 8023572:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023576:	10c8      	asrs	r0, r1, #3
 8023578:	00ca      	lsls	r2, r1, #3
 802357a:	fb0c fc0e 	mul.w	ip, ip, lr
 802357e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023582:	b2d2      	uxtb	r2, r2
 8023584:	f10c 0101 	add.w	r1, ip, #1
 8023588:	fb00 f00e 	mul.w	r0, r0, lr
 802358c:	fb02 f20e 	mul.w	r2, r2, lr
 8023590:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023594:	0c39      	lsrs	r1, r7, #16
 8023596:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802359a:	490f      	ldr	r1, [pc, #60]	; (80235d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802359c:	fa5f fc8c 	uxtb.w	ip, ip
 80235a0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80235a4:	1c41      	adds	r1, r0, #1
 80235a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80235aa:	1c51      	adds	r1, r2, #1
 80235ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80235b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80235b4:	00c0      	lsls	r0, r0, #3
 80235b6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80235ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80235be:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80235c2:	ea4c 0c00 	orr.w	ip, ip, r0
 80235c6:	ea47 0c0c 	orr.w	ip, r7, ip
 80235ca:	f8a8 c000 	strh.w	ip, [r8]
 80235ce:	e7b7      	b.n	8023540 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80235d0:	b01b      	add	sp, #108	; 0x6c
 80235d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235d6:	bf00      	nop
 80235d8:	fffff800 	.word	0xfffff800

080235dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80235dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235e0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80235e4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80235e8:	2d00      	cmp	r5, #0
 80235ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80235ee:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80235f2:	fb05 0e03 	mla	lr, r5, r3, r0
 80235f6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80235fa:	f2c0 808c 	blt.w	8023716 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80235fe:	45a9      	cmp	r9, r5
 8023600:	f340 8089 	ble.w	8023716 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8023604:	2800      	cmp	r0, #0
 8023606:	f2c0 8084 	blt.w	8023712 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802360a:	4580      	cmp	r8, r0
 802360c:	f340 8081 	ble.w	8023712 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8023610:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023614:	f01e 0f01 	tst.w	lr, #1
 8023618:	5d16      	ldrb	r6, [r2, r4]
 802361a:	bf0c      	ite	eq
 802361c:	f006 060f 	andeq.w	r6, r6, #15
 8023620:	1136      	asrne	r6, r6, #4
 8023622:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023626:	b2f6      	uxtb	r6, r6
 8023628:	1c44      	adds	r4, r0, #1
 802362a:	d477      	bmi.n	802371c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802362c:	45a0      	cmp	r8, r4
 802362e:	dd75      	ble.n	802371c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8023630:	2f00      	cmp	r7, #0
 8023632:	d075      	beq.n	8023720 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8023634:	f10e 0a01 	add.w	sl, lr, #1
 8023638:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802363c:	f01a 0f01 	tst.w	sl, #1
 8023640:	5d14      	ldrb	r4, [r2, r4]
 8023642:	bf0c      	ite	eq
 8023644:	f004 040f 	andeq.w	r4, r4, #15
 8023648:	1124      	asrne	r4, r4, #4
 802364a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802364e:	b2e4      	uxtb	r4, r4
 8023650:	3501      	adds	r5, #1
 8023652:	d469      	bmi.n	8023728 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8023654:	45a9      	cmp	r9, r5
 8023656:	dd67      	ble.n	8023728 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8023658:	f1bc 0f00 	cmp.w	ip, #0
 802365c:	d067      	beq.n	802372e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802365e:	2800      	cmp	r0, #0
 8023660:	db60      	blt.n	8023724 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8023662:	4580      	cmp	r8, r0
 8023664:	dd5e      	ble.n	8023724 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8023666:	eb03 090e 	add.w	r9, r3, lr
 802366a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802366e:	f019 0f01 	tst.w	r9, #1
 8023672:	5d55      	ldrb	r5, [r2, r5]
 8023674:	bf0c      	ite	eq
 8023676:	f005 050f 	andeq.w	r5, r5, #15
 802367a:	112d      	asrne	r5, r5, #4
 802367c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023680:	b2ed      	uxtb	r5, r5
 8023682:	3001      	adds	r0, #1
 8023684:	d456      	bmi.n	8023734 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8023686:	4580      	cmp	r8, r0
 8023688:	dd54      	ble.n	8023734 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802368a:	2f00      	cmp	r7, #0
 802368c:	d054      	beq.n	8023738 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802368e:	3301      	adds	r3, #1
 8023690:	449e      	add	lr, r3
 8023692:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023696:	f01e 0f01 	tst.w	lr, #1
 802369a:	5cd0      	ldrb	r0, [r2, r3]
 802369c:	bf0c      	ite	eq
 802369e:	f000 000f 	andeq.w	r0, r0, #15
 80236a2:	1100      	asrne	r0, r0, #4
 80236a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80236a8:	b2c3      	uxtb	r3, r0
 80236aa:	b2ba      	uxth	r2, r7
 80236ac:	fa1f fc8c 	uxth.w	ip, ip
 80236b0:	fb02 f00c 	mul.w	r0, r2, ip
 80236b4:	0112      	lsls	r2, r2, #4
 80236b6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80236ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80236be:	1a12      	subs	r2, r2, r0
 80236c0:	fa1f fc8c 	uxth.w	ip, ip
 80236c4:	b292      	uxth	r2, r2
 80236c6:	eba7 070c 	sub.w	r7, r7, ip
 80236ca:	4362      	muls	r2, r4
 80236cc:	b2bf      	uxth	r7, r7
 80236ce:	fb06 2207 	mla	r2, r6, r7, r2
 80236d2:	fb0c 2505 	mla	r5, ip, r5, r2
 80236d6:	fb00 5303 	mla	r3, r0, r3, r5
 80236da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80236de:	b1b3      	cbz	r3, 802370e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80236e0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80236e4:	435a      	muls	r2, r3
 80236e6:	1c53      	adds	r3, r2, #1
 80236e8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80236ec:	4a2d      	ldr	r2, [pc, #180]	; (80237a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80236ee:	121b      	asrs	r3, r3, #8
 80236f0:	6812      	ldr	r2, [r2, #0]
 80236f2:	2bff      	cmp	r3, #255	; 0xff
 80236f4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80236f8:	d120      	bne.n	802373c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80236fa:	0950      	lsrs	r0, r2, #5
 80236fc:	4b2a      	ldr	r3, [pc, #168]	; (80237a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80236fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023702:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023706:	4033      	ands	r3, r6
 8023708:	4318      	orrs	r0, r3
 802370a:	4302      	orrs	r2, r0
 802370c:	800a      	strh	r2, [r1, #0]
 802370e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023712:	2600      	movs	r6, #0
 8023714:	e788      	b.n	8023628 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8023716:	2400      	movs	r4, #0
 8023718:	4626      	mov	r6, r4
 802371a:	e799      	b.n	8023650 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802371c:	2400      	movs	r4, #0
 802371e:	e797      	b.n	8023650 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023720:	463c      	mov	r4, r7
 8023722:	e795      	b.n	8023650 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8023724:	2500      	movs	r5, #0
 8023726:	e7ac      	b.n	8023682 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8023728:	2300      	movs	r3, #0
 802372a:	461d      	mov	r5, r3
 802372c:	e7bd      	b.n	80236aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802372e:	4663      	mov	r3, ip
 8023730:	4665      	mov	r5, ip
 8023732:	e7ba      	b.n	80236aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8023734:	2300      	movs	r3, #0
 8023736:	e7b8      	b.n	80236aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8023738:	463b      	mov	r3, r7
 802373a:	e7b6      	b.n	80236aa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802373c:	880d      	ldrh	r5, [r1, #0]
 802373e:	b29f      	uxth	r7, r3
 8023740:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8023744:	43db      	mvns	r3, r3
 8023746:	122c      	asrs	r4, r5, #8
 8023748:	fb10 f007 	smulbb	r0, r0, r7
 802374c:	b2db      	uxtb	r3, r3
 802374e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023752:	b2f6      	uxtb	r6, r6
 8023754:	b2d2      	uxtb	r2, r2
 8023756:	fb04 0403 	mla	r4, r4, r3, r0
 802375a:	10e8      	asrs	r0, r5, #3
 802375c:	fb12 f207 	smulbb	r2, r2, r7
 8023760:	00ed      	lsls	r5, r5, #3
 8023762:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023766:	b2a4      	uxth	r4, r4
 8023768:	fb16 f607 	smulbb	r6, r6, r7
 802376c:	b2ed      	uxtb	r5, r5
 802376e:	fb00 6603 	mla	r6, r0, r3, r6
 8023772:	fb05 2303 	mla	r3, r5, r3, r2
 8023776:	b2b0      	uxth	r0, r6
 8023778:	b29a      	uxth	r2, r3
 802377a:	1c63      	adds	r3, r4, #1
 802377c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023780:	1c53      	adds	r3, r2, #1
 8023782:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023786:	1c42      	adds	r2, r0, #1
 8023788:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802378c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023790:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023794:	0940      	lsrs	r0, r0, #5
 8023796:	4323      	orrs	r3, r4
 8023798:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802379c:	4303      	orrs	r3, r0
 802379e:	800b      	strh	r3, [r1, #0]
 80237a0:	e7b5      	b.n	802370e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80237a2:	bf00      	nop
 80237a4:	24041b14 	.word	0x24041b14
 80237a8:	00fff800 	.word	0x00fff800

080237ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b0:	b097      	sub	sp, #92	; 0x5c
 80237b2:	9214      	str	r2, [sp, #80]	; 0x50
 80237b4:	9309      	str	r3, [sp, #36]	; 0x24
 80237b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80237b8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80237bc:	9015      	str	r0, [sp, #84]	; 0x54
 80237be:	910d      	str	r1, [sp, #52]	; 0x34
 80237c0:	6850      	ldr	r0, [r2, #4]
 80237c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80237c4:	6812      	ldr	r2, [r2, #0]
 80237c6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80237ca:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80237ce:	fb00 1303 	mla	r3, r0, r3, r1
 80237d2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80237d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237d8:	689b      	ldr	r3, [r3, #8]
 80237da:	3301      	adds	r3, #1
 80237dc:	f023 0301 	bic.w	r3, r3, #1
 80237e0:	930a      	str	r3, [sp, #40]	; 0x28
 80237e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237e4:	681f      	ldr	r7, [r3, #0]
 80237e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237e8:	2b00      	cmp	r3, #0
 80237ea:	dc03      	bgt.n	80237f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80237ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	f340 8289 	ble.w	8023d06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80237f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80237fe:	1e48      	subs	r0, r1, #1
 8023800:	f102 3cff 	add.w	ip, r2, #4294967295
 8023804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023806:	2b00      	cmp	r3, #0
 8023808:	f340 80c5 	ble.w	8023996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802380c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023810:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023814:	d406      	bmi.n	8023824 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023816:	4586      	cmp	lr, r0
 8023818:	da04      	bge.n	8023824 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802381a:	2b00      	cmp	r3, #0
 802381c:	db02      	blt.n	8023824 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802381e:	4563      	cmp	r3, ip
 8023820:	f2c0 80ba 	blt.w	8023998 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8023824:	f11e 0e01 	adds.w	lr, lr, #1
 8023828:	f100 80ab 	bmi.w	8023982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802382c:	4571      	cmp	r1, lr
 802382e:	f2c0 80a8 	blt.w	8023982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023832:	3301      	adds	r3, #1
 8023834:	f100 80a5 	bmi.w	8023982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8023838:	429a      	cmp	r2, r3
 802383a:	f2c0 80a2 	blt.w	8023982 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802383e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023840:	46c8      	mov	r8, r9
 8023842:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8023846:	930e      	str	r3, [sp, #56]	; 0x38
 8023848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802384a:	2b00      	cmp	r3, #0
 802384c:	f340 80c4 	ble.w	80239d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8023850:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023852:	1430      	asrs	r0, r6, #16
 8023854:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023858:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802385c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023860:	1423      	asrs	r3, r4, #16
 8023862:	f100 814f 	bmi.w	8023b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023866:	f10c 3bff 	add.w	fp, ip, #4294967295
 802386a:	455b      	cmp	r3, fp
 802386c:	f280 814a 	bge.w	8023b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023870:	2800      	cmp	r0, #0
 8023872:	f2c0 8147 	blt.w	8023b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023876:	f10e 3bff 	add.w	fp, lr, #4294967295
 802387a:	4558      	cmp	r0, fp
 802387c:	f280 8142 	bge.w	8023b04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023880:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023882:	fb00 3305 	mla	r3, r0, r5, r3
 8023886:	0858      	lsrs	r0, r3, #1
 8023888:	07dd      	lsls	r5, r3, #31
 802388a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802388e:	bf54      	ite	pl
 8023890:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023894:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023898:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802389c:	fa5f fc8c 	uxtb.w	ip, ip
 80238a0:	2a00      	cmp	r2, #0
 80238a2:	f000 80dd 	beq.w	8023a60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80238a6:	1c58      	adds	r0, r3, #1
 80238a8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80238ac:	07c0      	lsls	r0, r0, #31
 80238ae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80238b2:	bf54      	ite	pl
 80238b4:	f00e 0e0f 	andpl.w	lr, lr, #15
 80238b8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80238bc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80238c0:	fa5f f08e 	uxtb.w	r0, lr
 80238c4:	9010      	str	r0, [sp, #64]	; 0x40
 80238c6:	b1d9      	cbz	r1, 8023900 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80238c8:	4453      	add	r3, sl
 80238ca:	0858      	lsrs	r0, r3, #1
 80238cc:	07dd      	lsls	r5, r3, #31
 80238ce:	f103 0301 	add.w	r3, r3, #1
 80238d2:	5c38      	ldrb	r0, [r7, r0]
 80238d4:	bf54      	ite	pl
 80238d6:	f000 000f 	andpl.w	r0, r0, #15
 80238da:	1100      	asrmi	r0, r0, #4
 80238dc:	07dd      	lsls	r5, r3, #31
 80238de:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80238e2:	b2c0      	uxtb	r0, r0
 80238e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80238e6:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80238ea:	f817 e000 	ldrb.w	lr, [r7, r0]
 80238ee:	bf54      	ite	pl
 80238f0:	f00e 030f 	andpl.w	r3, lr, #15
 80238f4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80238f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80238fc:	b2db      	uxtb	r3, r3
 80238fe:	9311      	str	r3, [sp, #68]	; 0x44
 8023900:	b292      	uxth	r2, r2
 8023902:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023904:	b289      	uxth	r1, r1
 8023906:	fb02 f301 	mul.w	r3, r2, r1
 802390a:	0112      	lsls	r2, r2, #4
 802390c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023910:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023914:	1ad2      	subs	r2, r2, r3
 8023916:	b289      	uxth	r1, r1
 8023918:	b292      	uxth	r2, r2
 802391a:	1a40      	subs	r0, r0, r1
 802391c:	436a      	muls	r2, r5
 802391e:	b280      	uxth	r0, r0
 8023920:	fb0c 2c00 	mla	ip, ip, r0, r2
 8023924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023926:	fb01 c102 	mla	r1, r1, r2, ip
 802392a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802392c:	fb03 1302 	mla	r3, r3, r2, r1
 8023930:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023934:	b1db      	cbz	r3, 802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023938:	4353      	muls	r3, r2
 802393a:	1c5a      	adds	r2, r3, #1
 802393c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023940:	4ac6      	ldr	r2, [pc, #792]	; (8023c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023942:	121b      	asrs	r3, r3, #8
 8023944:	6812      	ldr	r2, [r2, #0]
 8023946:	2bff      	cmp	r3, #255	; 0xff
 8023948:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802394c:	f040 8099 	bne.w	8023a82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8023950:	0953      	lsrs	r3, r2, #5
 8023952:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8023956:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802395a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802395e:	f02c 0c07 	bic.w	ip, ip, #7
 8023962:	ea43 0c0c 	orr.w	ip, r3, ip
 8023966:	ea4c 0202 	orr.w	r2, ip, r2
 802396a:	f8a8 2000 	strh.w	r2, [r8]
 802396e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023970:	f108 0802 	add.w	r8, r8, #2
 8023974:	441c      	add	r4, r3
 8023976:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023978:	441e      	add	r6, r3
 802397a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802397c:	3b01      	subs	r3, #1
 802397e:	930e      	str	r3, [sp, #56]	; 0x38
 8023980:	e762      	b.n	8023848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8023982:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023984:	f109 0902 	add.w	r9, r9, #2
 8023988:	441c      	add	r4, r3
 802398a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802398c:	441e      	add	r6, r3
 802398e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023990:	3b01      	subs	r3, #1
 8023992:	9309      	str	r3, [sp, #36]	; 0x24
 8023994:	e736      	b.n	8023804 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023996:	d024      	beq.n	80239e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802399a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802399c:	3b01      	subs	r3, #1
 802399e:	fb00 4003 	mla	r0, r0, r3, r4
 80239a2:	1400      	asrs	r0, r0, #16
 80239a4:	f53f af4b 	bmi.w	802383e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80239a8:	3901      	subs	r1, #1
 80239aa:	4288      	cmp	r0, r1
 80239ac:	f6bf af47 	bge.w	802383e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80239b0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80239b2:	fb01 6303 	mla	r3, r1, r3, r6
 80239b6:	141b      	asrs	r3, r3, #16
 80239b8:	f53f af41 	bmi.w	802383e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80239bc:	3a01      	subs	r2, #1
 80239be:	4293      	cmp	r3, r2
 80239c0:	f6bf af3d 	bge.w	802383e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80239c4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80239c8:	46c8      	mov	r8, r9
 80239ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80239ce:	930e      	str	r3, [sp, #56]	; 0x38
 80239d0:	f1bb 0f00 	cmp.w	fp, #0
 80239d4:	f300 80b7 	bgt.w	8023b46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80239d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239da:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80239de:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80239e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	f340 818e 	ble.w	8023d06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 80239ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80239ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80239f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80239f8:	eef0 6a62 	vmov.f32	s13, s5
 80239fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023a00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023a04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a08:	ee16 4a90 	vmov	r4, s13
 8023a0c:	eef0 6a43 	vmov.f32	s13, s6
 8023a10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a14:	ee16 6a90 	vmov	r6, s13
 8023a18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023a1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023a30:	ee12 2a90 	vmov	r2, s5
 8023a34:	eef0 2a47 	vmov.f32	s5, s14
 8023a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a3c:	ee13 2a10 	vmov	r2, s6
 8023a40:	9323      	str	r3, [sp, #140]	; 0x8c
 8023a42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a44:	eeb0 3a67 	vmov.f32	s6, s15
 8023a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a4c:	9324      	str	r3, [sp, #144]	; 0x90
 8023a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a52:	3b01      	subs	r3, #1
 8023a54:	930d      	str	r3, [sp, #52]	; 0x34
 8023a56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023a58:	bf08      	it	eq
 8023a5a:	4613      	moveq	r3, r2
 8023a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a5e:	e6c2      	b.n	80237e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023a60:	2900      	cmp	r1, #0
 8023a62:	f43f af4d 	beq.w	8023900 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023a66:	eb0a 0003 	add.w	r0, sl, r3
 8023a6a:	0843      	lsrs	r3, r0, #1
 8023a6c:	07c0      	lsls	r0, r0, #31
 8023a6e:	5cfb      	ldrb	r3, [r7, r3]
 8023a70:	bf54      	ite	pl
 8023a72:	f003 030f 	andpl.w	r3, r3, #15
 8023a76:	111b      	asrmi	r3, r3, #4
 8023a78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023a7c:	b2db      	uxtb	r3, r3
 8023a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a80:	e73e      	b.n	8023900 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023a82:	f8b8 e000 	ldrh.w	lr, [r8]
 8023a86:	fa1f fb83 	uxth.w	fp, r3
 8023a8a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023a8e:	43db      	mvns	r3, r3
 8023a90:	ea4f 202e 	mov.w	r0, lr, asr #8
 8023a94:	fb11 f10b 	smulbb	r1, r1, fp
 8023a98:	b2db      	uxtb	r3, r3
 8023a9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023a9e:	fa5f fc8c 	uxtb.w	ip, ip
 8023aa2:	b2d2      	uxtb	r2, r2
 8023aa4:	fb00 1003 	mla	r0, r0, r3, r1
 8023aa8:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8023aac:	fb1c fc0b 	smulbb	ip, ip, fp
 8023ab0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023ab4:	b280      	uxth	r0, r0
 8023ab6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023aba:	fb12 fb0b 	smulbb	fp, r2, fp
 8023abe:	fa5f fe8e 	uxtb.w	lr, lr
 8023ac2:	fb01 cc03 	mla	ip, r1, r3, ip
 8023ac6:	fb0e bb03 	mla	fp, lr, r3, fp
 8023aca:	1c43      	adds	r3, r0, #1
 8023acc:	fa1f fc8c 	uxth.w	ip, ip
 8023ad0:	fa1f fb8b 	uxth.w	fp, fp
 8023ad4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023ad8:	f10c 0101 	add.w	r1, ip, #1
 8023adc:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8023ae0:	f10b 0001 	add.w	r0, fp, #1
 8023ae4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023ae8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8023aec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023af0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8023af4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023af8:	4318      	orrs	r0, r3
 8023afa:	ea40 000c 	orr.w	r0, r0, ip
 8023afe:	f8a8 0000 	strh.w	r0, [r8]
 8023b02:	e734      	b.n	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b04:	f113 0b01 	adds.w	fp, r3, #1
 8023b08:	f53f af31 	bmi.w	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b0c:	45dc      	cmp	ip, fp
 8023b0e:	f6ff af2e 	blt.w	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b12:	f110 0b01 	adds.w	fp, r0, #1
 8023b16:	f53f af2a 	bmi.w	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b1a:	45de      	cmp	lr, fp
 8023b1c:	f6ff af27 	blt.w	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b20:	9302      	str	r3, [sp, #8]
 8023b22:	fa0f f38e 	sxth.w	r3, lr
 8023b26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023b28:	9301      	str	r3, [sp, #4]
 8023b2a:	fa0f f38c 	sxth.w	r3, ip
 8023b2e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023b32:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023b36:	9300      	str	r3, [sp, #0]
 8023b38:	463a      	mov	r2, r7
 8023b3a:	4653      	mov	r3, sl
 8023b3c:	4641      	mov	r1, r8
 8023b3e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023b40:	f7ff fd4c 	bl	80235dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8023b44:	e713      	b.n	802396e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023b46:	1422      	asrs	r2, r4, #16
 8023b48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023b4a:	1433      	asrs	r3, r6, #16
 8023b4c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8023b50:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b54:	fb05 2303 	mla	r3, r5, r3, r2
 8023b58:	085a      	lsrs	r2, r3, #1
 8023b5a:	07dd      	lsls	r5, r3, #31
 8023b5c:	5cba      	ldrb	r2, [r7, r2]
 8023b5e:	bf54      	ite	pl
 8023b60:	f002 020f 	andpl.w	r2, r2, #15
 8023b64:	1112      	asrmi	r2, r2, #4
 8023b66:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b6a:	b2d2      	uxtb	r2, r2
 8023b6c:	2900      	cmp	r1, #0
 8023b6e:	d077      	beq.n	8023c60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023b70:	f103 0e01 	add.w	lr, r3, #1
 8023b74:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8023b78:	f01e 0f01 	tst.w	lr, #1
 8023b7c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023b80:	bf0c      	ite	eq
 8023b82:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023b86:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023b8a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023b8e:	fa5f f58c 	uxtb.w	r5, ip
 8023b92:	9512      	str	r5, [sp, #72]	; 0x48
 8023b94:	b308      	cbz	r0, 8023bda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023b96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023b98:	442b      	add	r3, r5
 8023b9a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023b9e:	07dd      	lsls	r5, r3, #31
 8023ba0:	f103 0301 	add.w	r3, r3, #1
 8023ba4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023ba8:	bf54      	ite	pl
 8023baa:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023bae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023bb2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023bb6:	fa5f f58c 	uxtb.w	r5, ip
 8023bba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023bbe:	950c      	str	r5, [sp, #48]	; 0x30
 8023bc0:	07dd      	lsls	r5, r3, #31
 8023bc2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023bc6:	bf54      	ite	pl
 8023bc8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023bcc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023bd0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023bd4:	fa5f f38c 	uxtb.w	r3, ip
 8023bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8023bda:	b289      	uxth	r1, r1
 8023bdc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023bde:	b280      	uxth	r0, r0
 8023be0:	fb01 f300 	mul.w	r3, r1, r0
 8023be4:	0109      	lsls	r1, r1, #4
 8023be6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023bea:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8023bee:	1ac9      	subs	r1, r1, r3
 8023bf0:	b280      	uxth	r0, r0
 8023bf2:	b289      	uxth	r1, r1
 8023bf4:	ebac 0c00 	sub.w	ip, ip, r0
 8023bf8:	4369      	muls	r1, r5
 8023bfa:	fa1f fc8c 	uxth.w	ip, ip
 8023bfe:	fb02 120c 	mla	r2, r2, ip, r1
 8023c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c04:	fb00 2001 	mla	r0, r0, r1, r2
 8023c08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023c0a:	fb03 0302 	mla	r3, r3, r2, r0
 8023c0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023c12:	b1d3      	cbz	r3, 8023c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023c14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023c16:	4353      	muls	r3, r2
 8023c18:	1c5a      	adds	r2, r3, #1
 8023c1a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c1e:	4a0f      	ldr	r2, [pc, #60]	; (8023c5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023c20:	121b      	asrs	r3, r3, #8
 8023c22:	6812      	ldr	r2, [r2, #0]
 8023c24:	2bff      	cmp	r3, #255	; 0xff
 8023c26:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8023c2a:	d12d      	bne.n	8023c88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8023c2c:	0953      	lsrs	r3, r2, #5
 8023c2e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8023c32:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023c36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023c3a:	f02c 0c07 	bic.w	ip, ip, #7
 8023c3e:	ea43 0c0c 	orr.w	ip, r3, ip
 8023c42:	ea4c 0202 	orr.w	r2, ip, r2
 8023c46:	f8a8 2000 	strh.w	r2, [r8]
 8023c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023c4c:	f108 0802 	add.w	r8, r8, #2
 8023c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023c54:	441c      	add	r4, r3
 8023c56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023c58:	441e      	add	r6, r3
 8023c5a:	e6b9      	b.n	80239d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023c5c:	24041b14 	.word	0x24041b14
 8023c60:	2800      	cmp	r0, #0
 8023c62:	d0ba      	beq.n	8023bda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023c64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023c66:	442b      	add	r3, r5
 8023c68:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023c6c:	07db      	lsls	r3, r3, #31
 8023c6e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c72:	bf54      	ite	pl
 8023c74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023c78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023c7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c80:	fa5f f38c 	uxtb.w	r3, ip
 8023c84:	930c      	str	r3, [sp, #48]	; 0x30
 8023c86:	e7a8      	b.n	8023bda <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8023c88:	f8b8 e000 	ldrh.w	lr, [r8]
 8023c8c:	fa1f fa83 	uxth.w	sl, r3
 8023c90:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8023c94:	43db      	mvns	r3, r3
 8023c96:	ea4f 202e 	mov.w	r0, lr, asr #8
 8023c9a:	fb11 f10a 	smulbb	r1, r1, sl
 8023c9e:	b2db      	uxtb	r3, r3
 8023ca0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023ca4:	b2d2      	uxtb	r2, r2
 8023ca6:	fa5f fc8c 	uxtb.w	ip, ip
 8023caa:	fb00 1003 	mla	r0, r0, r3, r1
 8023cae:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8023cb2:	fb12 f20a 	smulbb	r2, r2, sl
 8023cb6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023cba:	b280      	uxth	r0, r0
 8023cbc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023cc0:	fb1c fc0a 	smulbb	ip, ip, sl
 8023cc4:	fa5f fe8e 	uxtb.w	lr, lr
 8023cc8:	fb0e 2203 	mla	r2, lr, r3, r2
 8023ccc:	fb01 cc03 	mla	ip, r1, r3, ip
 8023cd0:	1c43      	adds	r3, r0, #1
 8023cd2:	b292      	uxth	r2, r2
 8023cd4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023cd8:	1c51      	adds	r1, r2, #1
 8023cda:	fa1f fc8c 	uxth.w	ip, ip
 8023cde:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023ce2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8023ce6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8023cea:	4308      	orrs	r0, r1
 8023cec:	f10c 0101 	add.w	r1, ip, #1
 8023cf0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8023cf4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023cf8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023cfc:	ea40 000c 	orr.w	r0, r0, ip
 8023d00:	f8a8 0000 	strh.w	r0, [r8]
 8023d04:	e7a1      	b.n	8023c4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023d06:	b017      	add	sp, #92	; 0x5c
 8023d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d0c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8023d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d10:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8023d14:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8023d18:	2d00      	cmp	r5, #0
 8023d1a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023d1e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8023d22:	fb05 0e03 	mla	lr, r5, r3, r0
 8023d26:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8023d2a:	f2c0 80b0 	blt.w	8023e8e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8023d2e:	45a9      	cmp	r9, r5
 8023d30:	f340 80ad 	ble.w	8023e8e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8023d34:	2800      	cmp	r0, #0
 8023d36:	f2c0 80a8 	blt.w	8023e8a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8023d3a:	4580      	cmp	r8, r0
 8023d3c:	f340 80a5 	ble.w	8023e8a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8023d40:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023d44:	f01e 0f01 	tst.w	lr, #1
 8023d48:	5d16      	ldrb	r6, [r2, r4]
 8023d4a:	bf0c      	ite	eq
 8023d4c:	f006 060f 	andeq.w	r6, r6, #15
 8023d50:	1136      	asrne	r6, r6, #4
 8023d52:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023d56:	b2f6      	uxtb	r6, r6
 8023d58:	1c44      	adds	r4, r0, #1
 8023d5a:	f100 809b 	bmi.w	8023e94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8023d5e:	45a0      	cmp	r8, r4
 8023d60:	f340 8098 	ble.w	8023e94 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8023d64:	2f00      	cmp	r7, #0
 8023d66:	f000 8097 	beq.w	8023e98 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8023d6a:	f10e 0a01 	add.w	sl, lr, #1
 8023d6e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8023d72:	f01a 0f01 	tst.w	sl, #1
 8023d76:	5d14      	ldrb	r4, [r2, r4]
 8023d78:	bf0c      	ite	eq
 8023d7a:	f004 040f 	andeq.w	r4, r4, #15
 8023d7e:	1124      	asrne	r4, r4, #4
 8023d80:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023d84:	b2e4      	uxtb	r4, r4
 8023d86:	3501      	adds	r5, #1
 8023d88:	f100 808a 	bmi.w	8023ea0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8023d8c:	45a9      	cmp	r9, r5
 8023d8e:	f340 8087 	ble.w	8023ea0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8023d92:	f1bc 0f00 	cmp.w	ip, #0
 8023d96:	f000 8086 	beq.w	8023ea6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8023d9a:	2800      	cmp	r0, #0
 8023d9c:	db7e      	blt.n	8023e9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8023d9e:	4580      	cmp	r8, r0
 8023da0:	dd7c      	ble.n	8023e9c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8023da2:	eb03 090e 	add.w	r9, r3, lr
 8023da6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8023daa:	f019 0f01 	tst.w	r9, #1
 8023dae:	5d55      	ldrb	r5, [r2, r5]
 8023db0:	bf0c      	ite	eq
 8023db2:	f005 050f 	andeq.w	r5, r5, #15
 8023db6:	112d      	asrne	r5, r5, #4
 8023db8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023dbc:	b2ed      	uxtb	r5, r5
 8023dbe:	3001      	adds	r0, #1
 8023dc0:	d474      	bmi.n	8023eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8023dc2:	4580      	cmp	r8, r0
 8023dc4:	dd72      	ble.n	8023eac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8023dc6:	2f00      	cmp	r7, #0
 8023dc8:	d072      	beq.n	8023eb0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8023dca:	3301      	adds	r3, #1
 8023dcc:	449e      	add	lr, r3
 8023dce:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023dd2:	f01e 0f01 	tst.w	lr, #1
 8023dd6:	5cd0      	ldrb	r0, [r2, r3]
 8023dd8:	bf0c      	ite	eq
 8023dda:	f000 000f 	andeq.w	r0, r0, #15
 8023dde:	1100      	asrne	r0, r0, #4
 8023de0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023de4:	b2c3      	uxtb	r3, r0
 8023de6:	b2ba      	uxth	r2, r7
 8023de8:	fa1f fc8c 	uxth.w	ip, ip
 8023dec:	fb02 f00c 	mul.w	r0, r2, ip
 8023df0:	0112      	lsls	r2, r2, #4
 8023df2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023df6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023dfa:	1a12      	subs	r2, r2, r0
 8023dfc:	fa1f fc8c 	uxth.w	ip, ip
 8023e00:	b292      	uxth	r2, r2
 8023e02:	eba7 070c 	sub.w	r7, r7, ip
 8023e06:	4362      	muls	r2, r4
 8023e08:	b2bf      	uxth	r7, r7
 8023e0a:	fb06 2207 	mla	r2, r6, r7, r2
 8023e0e:	fb0c 2505 	mla	r5, ip, r5, r2
 8023e12:	fb00 5303 	mla	r3, r0, r3, r5
 8023e16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023e1a:	b3a3      	cbz	r3, 8023e86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8023e1c:	4a25      	ldr	r2, [pc, #148]	; (8023eb4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8023e1e:	880e      	ldrh	r6, [r1, #0]
 8023e20:	6815      	ldr	r5, [r2, #0]
 8023e22:	b29a      	uxth	r2, r3
 8023e24:	1234      	asrs	r4, r6, #8
 8023e26:	43db      	mvns	r3, r3
 8023e28:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8023e2c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8023e30:	b2db      	uxtb	r3, r3
 8023e32:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023e36:	fb10 f002 	smulbb	r0, r0, r2
 8023e3a:	b2ed      	uxtb	r5, r5
 8023e3c:	fb17 f702 	smulbb	r7, r7, r2
 8023e40:	fb04 0403 	mla	r4, r4, r3, r0
 8023e44:	10f0      	asrs	r0, r6, #3
 8023e46:	fb15 f202 	smulbb	r2, r5, r2
 8023e4a:	00f6      	lsls	r6, r6, #3
 8023e4c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023e50:	b2a4      	uxth	r4, r4
 8023e52:	b2f6      	uxtb	r6, r6
 8023e54:	fb00 7003 	mla	r0, r0, r3, r7
 8023e58:	fb06 2303 	mla	r3, r6, r3, r2
 8023e5c:	b280      	uxth	r0, r0
 8023e5e:	b29a      	uxth	r2, r3
 8023e60:	1c63      	adds	r3, r4, #1
 8023e62:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023e66:	1c53      	adds	r3, r2, #1
 8023e68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023e6c:	1c42      	adds	r2, r0, #1
 8023e6e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8023e72:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023e76:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023e7a:	0940      	lsrs	r0, r0, #5
 8023e7c:	4323      	orrs	r3, r4
 8023e7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8023e82:	4303      	orrs	r3, r0
 8023e84:	800b      	strh	r3, [r1, #0]
 8023e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023e8a:	2600      	movs	r6, #0
 8023e8c:	e764      	b.n	8023d58 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8023e8e:	2400      	movs	r4, #0
 8023e90:	4626      	mov	r6, r4
 8023e92:	e778      	b.n	8023d86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023e94:	2400      	movs	r4, #0
 8023e96:	e776      	b.n	8023d86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023e98:	463c      	mov	r4, r7
 8023e9a:	e774      	b.n	8023d86 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8023e9c:	2500      	movs	r5, #0
 8023e9e:	e78e      	b.n	8023dbe <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8023ea0:	2300      	movs	r3, #0
 8023ea2:	461d      	mov	r5, r3
 8023ea4:	e79f      	b.n	8023de6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023ea6:	4663      	mov	r3, ip
 8023ea8:	4665      	mov	r5, ip
 8023eaa:	e79c      	b.n	8023de6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023eac:	2300      	movs	r3, #0
 8023eae:	e79a      	b.n	8023de6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023eb0:	463b      	mov	r3, r7
 8023eb2:	e798      	b.n	8023de6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8023eb4:	24041b14 	.word	0x24041b14

08023eb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ebc:	b093      	sub	sp, #76	; 0x4c
 8023ebe:	461d      	mov	r5, r3
 8023ec0:	920c      	str	r2, [sp, #48]	; 0x30
 8023ec2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023ec4:	9011      	str	r0, [sp, #68]	; 0x44
 8023ec6:	9107      	str	r1, [sp, #28]
 8023ec8:	6850      	ldr	r0, [r2, #4]
 8023eca:	6812      	ldr	r2, [r2, #0]
 8023ecc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023ed0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023ed4:	fb00 1303 	mla	r3, r0, r3, r1
 8023ed8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023edc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ede:	689b      	ldr	r3, [r3, #8]
 8023ee0:	3301      	adds	r3, #1
 8023ee2:	f023 0301 	bic.w	r3, r3, #1
 8023ee6:	9306      	str	r3, [sp, #24]
 8023ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023eea:	681f      	ldr	r7, [r3, #0]
 8023eec:	9b07      	ldr	r3, [sp, #28]
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	dc03      	bgt.n	8023efa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	f340 8267 	ble.w	80243c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8023efa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023efc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023f04:	1e48      	subs	r0, r1, #1
 8023f06:	f102 3cff 	add.w	ip, r2, #4294967295
 8023f0a:	2d00      	cmp	r5, #0
 8023f0c:	f340 80b7 	ble.w	802407e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023f10:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023f14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023f18:	d406      	bmi.n	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023f1a:	4586      	cmp	lr, r0
 8023f1c:	da04      	bge.n	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	db02      	blt.n	8023f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023f22:	4563      	cmp	r3, ip
 8023f24:	f2c0 80ac 	blt.w	8024080 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8023f28:	f11e 0e01 	adds.w	lr, lr, #1
 8023f2c:	f100 809f 	bmi.w	802406e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023f30:	4571      	cmp	r1, lr
 8023f32:	f2c0 809c 	blt.w	802406e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023f36:	3301      	adds	r3, #1
 8023f38:	f100 8099 	bmi.w	802406e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023f3c:	429a      	cmp	r2, r3
 8023f3e:	f2c0 8096 	blt.w	802406e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8023f42:	46c8      	mov	r8, r9
 8023f44:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8023f48:	9509      	str	r5, [sp, #36]	; 0x24
 8023f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	f340 80b5 	ble.w	80240bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023f52:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8023f56:	1430      	asrs	r0, r6, #16
 8023f58:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023f5c:	9308      	str	r3, [sp, #32]
 8023f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023f60:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023f64:	1423      	asrs	r3, r4, #16
 8023f66:	f100 813f 	bmi.w	80241e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023f6a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023f6e:	455b      	cmp	r3, fp
 8023f70:	f280 813a 	bge.w	80241e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023f74:	2800      	cmp	r0, #0
 8023f76:	f2c0 8137 	blt.w	80241e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023f7a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023f7e:	4558      	cmp	r0, fp
 8023f80:	f280 8132 	bge.w	80241e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8023f84:	9a06      	ldr	r2, [sp, #24]
 8023f86:	fb00 3302 	mla	r3, r0, r2, r3
 8023f8a:	0858      	lsrs	r0, r3, #1
 8023f8c:	07da      	lsls	r2, r3, #31
 8023f8e:	9a08      	ldr	r2, [sp, #32]
 8023f90:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023f94:	bf54      	ite	pl
 8023f96:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023f9a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023f9e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023fa2:	fa5f fc8c 	uxtb.w	ip, ip
 8023fa6:	2a00      	cmp	r2, #0
 8023fa8:	f000 80cc 	beq.w	8024144 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023fac:	1c58      	adds	r0, r3, #1
 8023fae:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023fb2:	07c0      	lsls	r0, r0, #31
 8023fb4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023fb8:	bf54      	ite	pl
 8023fba:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023fbe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023fc2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023fc6:	fa5f fe8e 	uxtb.w	lr, lr
 8023fca:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023fce:	b1b9      	cbz	r1, 8024000 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023fd0:	4453      	add	r3, sl
 8023fd2:	0858      	lsrs	r0, r3, #1
 8023fd4:	07da      	lsls	r2, r3, #31
 8023fd6:	5c38      	ldrb	r0, [r7, r0]
 8023fd8:	bf54      	ite	pl
 8023fda:	f000 000f 	andpl.w	r0, r0, #15
 8023fde:	1100      	asrmi	r0, r0, #4
 8023fe0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023fe4:	b2c0      	uxtb	r0, r0
 8023fe6:	900a      	str	r0, [sp, #40]	; 0x28
 8023fe8:	1c58      	adds	r0, r3, #1
 8023fea:	0843      	lsrs	r3, r0, #1
 8023fec:	07c2      	lsls	r2, r0, #31
 8023fee:	5cfb      	ldrb	r3, [r7, r3]
 8023ff0:	bf54      	ite	pl
 8023ff2:	f003 030f 	andpl.w	r3, r3, #15
 8023ff6:	111b      	asrmi	r3, r3, #4
 8023ff8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023ffc:	b2db      	uxtb	r3, r3
 8023ffe:	930e      	str	r3, [sp, #56]	; 0x38
 8024000:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024004:	b289      	uxth	r1, r1
 8024006:	fb02 f301 	mul.w	r3, r2, r1
 802400a:	0112      	lsls	r2, r2, #4
 802400c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024010:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8024014:	1ad2      	subs	r2, r2, r3
 8024016:	b289      	uxth	r1, r1
 8024018:	b292      	uxth	r2, r2
 802401a:	1a40      	subs	r0, r0, r1
 802401c:	fa1f fe80 	uxth.w	lr, r0
 8024020:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024022:	4342      	muls	r2, r0
 8024024:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802402a:	fb01 c102 	mla	r1, r1, r2, ip
 802402e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024030:	fb03 1302 	mla	r3, r3, r2, r1
 8024034:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024038:	2bff      	cmp	r3, #255	; 0xff
 802403a:	f040 8094 	bne.w	8024166 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802403e:	4bbf      	ldr	r3, [pc, #764]	; (802433c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8024040:	681a      	ldr	r2, [r3, #0]
 8024042:	4bbf      	ldr	r3, [pc, #764]	; (8024340 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8024044:	0951      	lsrs	r1, r2, #5
 8024046:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802404a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802404e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024052:	430b      	orrs	r3, r1
 8024054:	4313      	orrs	r3, r2
 8024056:	f8a8 3000 	strh.w	r3, [r8]
 802405a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802405c:	f108 0802 	add.w	r8, r8, #2
 8024060:	441c      	add	r4, r3
 8024062:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024064:	441e      	add	r6, r3
 8024066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024068:	3b01      	subs	r3, #1
 802406a:	9309      	str	r3, [sp, #36]	; 0x24
 802406c:	e76d      	b.n	8023f4a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802406e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024070:	3d01      	subs	r5, #1
 8024072:	f109 0902 	add.w	r9, r9, #2
 8024076:	441c      	add	r4, r3
 8024078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802407a:	441e      	add	r6, r3
 802407c:	e745      	b.n	8023f0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802407e:	d021      	beq.n	80240c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8024080:	1e6b      	subs	r3, r5, #1
 8024082:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8024084:	fb00 4003 	mla	r0, r0, r3, r4
 8024088:	1400      	asrs	r0, r0, #16
 802408a:	f53f af5a 	bmi.w	8023f42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802408e:	3901      	subs	r1, #1
 8024090:	4288      	cmp	r0, r1
 8024092:	f6bf af56 	bge.w	8023f42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024096:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024098:	fb01 6303 	mla	r3, r1, r3, r6
 802409c:	141b      	asrs	r3, r3, #16
 802409e:	f53f af50 	bmi.w	8023f42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240a2:	3a01      	subs	r2, #1
 80240a4:	4293      	cmp	r3, r2
 80240a6:	f6bf af4c 	bge.w	8023f42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80240ae:	46a8      	mov	r8, r5
 80240b0:	46ce      	mov	lr, r9
 80240b2:	9308      	str	r3, [sp, #32]
 80240b4:	f1b8 0f00 	cmp.w	r8, #0
 80240b8:	f300 80b6 	bgt.w	8024228 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80240bc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80240c0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80240c4:	9b07      	ldr	r3, [sp, #28]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	f340 817e 	ble.w	80243c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80240cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80240d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80240da:	eef0 6a62 	vmov.f32	s13, s5
 80240de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80240e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80240e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240ea:	ee16 4a90 	vmov	r4, s13
 80240ee:	eef0 6a43 	vmov.f32	s13, s6
 80240f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240f6:	ee16 6a90 	vmov	r6, s13
 80240fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80240fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024102:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024106:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802410a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802410e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024112:	ee12 2a90 	vmov	r2, s5
 8024116:	eef0 2a47 	vmov.f32	s5, s14
 802411a:	fb92 f3f3 	sdiv	r3, r2, r3
 802411e:	ee13 2a10 	vmov	r2, s6
 8024122:	931f      	str	r3, [sp, #124]	; 0x7c
 8024124:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024126:	eeb0 3a67 	vmov.f32	s6, s15
 802412a:	fb92 f3f3 	sdiv	r3, r2, r3
 802412e:	9320      	str	r3, [sp, #128]	; 0x80
 8024130:	9b07      	ldr	r3, [sp, #28]
 8024132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024134:	3b01      	subs	r3, #1
 8024136:	9307      	str	r3, [sp, #28]
 8024138:	bf08      	it	eq
 802413a:	4615      	moveq	r5, r2
 802413c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802413e:	bf18      	it	ne
 8024140:	461d      	movne	r5, r3
 8024142:	e6d3      	b.n	8023eec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024144:	2900      	cmp	r1, #0
 8024146:	f43f af5b 	beq.w	8024000 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802414a:	eb0a 0003 	add.w	r0, sl, r3
 802414e:	0843      	lsrs	r3, r0, #1
 8024150:	07c0      	lsls	r0, r0, #31
 8024152:	5cfb      	ldrb	r3, [r7, r3]
 8024154:	bf54      	ite	pl
 8024156:	f003 030f 	andpl.w	r3, r3, #15
 802415a:	111b      	asrmi	r3, r3, #4
 802415c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024160:	b2db      	uxtb	r3, r3
 8024162:	930a      	str	r3, [sp, #40]	; 0x28
 8024164:	e74c      	b.n	8024000 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024166:	2b00      	cmp	r3, #0
 8024168:	f43f af77 	beq.w	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802416c:	4a73      	ldr	r2, [pc, #460]	; (802433c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802416e:	fa1f fe83 	uxth.w	lr, r3
 8024172:	f8b8 c000 	ldrh.w	ip, [r8]
 8024176:	43db      	mvns	r3, r3
 8024178:	6810      	ldr	r0, [r2, #0]
 802417a:	ea4f 212c 	mov.w	r1, ip, asr #8
 802417e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024182:	b2db      	uxtb	r3, r3
 8024184:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024188:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802418c:	fb12 f20e 	smulbb	r2, r2, lr
 8024190:	b2c0      	uxtb	r0, r0
 8024192:	fb1b fb0e 	smulbb	fp, fp, lr
 8024196:	fb01 2103 	mla	r1, r1, r3, r2
 802419a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802419e:	fb10 fe0e 	smulbb	lr, r0, lr
 80241a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80241a6:	b289      	uxth	r1, r1
 80241a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80241ac:	fa5f fc8c 	uxtb.w	ip, ip
 80241b0:	fb02 b203 	mla	r2, r2, r3, fp
 80241b4:	1c48      	adds	r0, r1, #1
 80241b6:	fb0c e303 	mla	r3, ip, r3, lr
 80241ba:	b292      	uxth	r2, r2
 80241bc:	b29b      	uxth	r3, r3
 80241be:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80241c2:	f102 0b01 	add.w	fp, r2, #1
 80241c6:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80241ca:	1c59      	adds	r1, r3, #1
 80241cc:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80241d0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80241d4:	0952      	lsrs	r2, r2, #5
 80241d6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80241da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80241de:	4301      	orrs	r1, r0
 80241e0:	4311      	orrs	r1, r2
 80241e2:	f8a8 1000 	strh.w	r1, [r8]
 80241e6:	e738      	b.n	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241e8:	f113 0b01 	adds.w	fp, r3, #1
 80241ec:	f53f af35 	bmi.w	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241f0:	45dc      	cmp	ip, fp
 80241f2:	f6ff af32 	blt.w	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241f6:	f110 0b01 	adds.w	fp, r0, #1
 80241fa:	f53f af2e 	bmi.w	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241fe:	45de      	cmp	lr, fp
 8024200:	f6ff af2b 	blt.w	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024204:	9302      	str	r3, [sp, #8]
 8024206:	fa0f f38e 	sxth.w	r3, lr
 802420a:	9a08      	ldr	r2, [sp, #32]
 802420c:	9301      	str	r3, [sp, #4]
 802420e:	fa0f f38c 	sxth.w	r3, ip
 8024212:	9105      	str	r1, [sp, #20]
 8024214:	4641      	mov	r1, r8
 8024216:	9300      	str	r3, [sp, #0]
 8024218:	4653      	mov	r3, sl
 802421a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802421e:	463a      	mov	r2, r7
 8024220:	9811      	ldr	r0, [sp, #68]	; 0x44
 8024222:	f7ff fd73 	bl	8023d0c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8024226:	e718      	b.n	802405a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8024228:	1422      	asrs	r2, r4, #16
 802422a:	9906      	ldr	r1, [sp, #24]
 802422c:	1433      	asrs	r3, r6, #16
 802422e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024232:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024236:	fb01 2303 	mla	r3, r1, r3, r2
 802423a:	085a      	lsrs	r2, r3, #1
 802423c:	07d9      	lsls	r1, r3, #31
 802423e:	5cba      	ldrb	r2, [r7, r2]
 8024240:	bf54      	ite	pl
 8024242:	f002 020f 	andpl.w	r2, r2, #15
 8024246:	1112      	asrmi	r2, r2, #4
 8024248:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802424c:	b2d2      	uxtb	r2, r2
 802424e:	2800      	cmp	r0, #0
 8024250:	d063      	beq.n	802431a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8024252:	f103 0a01 	add.w	sl, r3, #1
 8024256:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802425a:	f01a 0f01 	tst.w	sl, #1
 802425e:	5c79      	ldrb	r1, [r7, r1]
 8024260:	bf0c      	ite	eq
 8024262:	f001 010f 	andeq.w	r1, r1, #15
 8024266:	1109      	asrne	r1, r1, #4
 8024268:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802426c:	b2c9      	uxtb	r1, r1
 802426e:	910f      	str	r1, [sp, #60]	; 0x3c
 8024270:	f1bc 0f00 	cmp.w	ip, #0
 8024274:	d01a      	beq.n	80242ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024276:	9908      	ldr	r1, [sp, #32]
 8024278:	440b      	add	r3, r1
 802427a:	0859      	lsrs	r1, r3, #1
 802427c:	f013 0f01 	tst.w	r3, #1
 8024280:	f103 0301 	add.w	r3, r3, #1
 8024284:	5c79      	ldrb	r1, [r7, r1]
 8024286:	bf0c      	ite	eq
 8024288:	f001 010f 	andeq.w	r1, r1, #15
 802428c:	1109      	asrne	r1, r1, #4
 802428e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024292:	b2c9      	uxtb	r1, r1
 8024294:	910b      	str	r1, [sp, #44]	; 0x2c
 8024296:	0859      	lsrs	r1, r3, #1
 8024298:	07db      	lsls	r3, r3, #31
 802429a:	5c79      	ldrb	r1, [r7, r1]
 802429c:	bf54      	ite	pl
 802429e:	f001 010f 	andpl.w	r1, r1, #15
 80242a2:	1109      	asrmi	r1, r1, #4
 80242a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80242a8:	b2c9      	uxtb	r1, r1
 80242aa:	9110      	str	r1, [sp, #64]	; 0x40
 80242ac:	b280      	uxth	r0, r0
 80242ae:	fa1f fc8c 	uxth.w	ip, ip
 80242b2:	fb00 f30c 	mul.w	r3, r0, ip
 80242b6:	0100      	lsls	r0, r0, #4
 80242b8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 80242bc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80242c0:	1ac0      	subs	r0, r0, r3
 80242c2:	fa1f fc8c 	uxth.w	ip, ip
 80242c6:	b280      	uxth	r0, r0
 80242c8:	eba1 010c 	sub.w	r1, r1, ip
 80242cc:	fa1f fa81 	uxth.w	sl, r1
 80242d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80242d2:	4348      	muls	r0, r1
 80242d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80242d6:	fb02 020a 	mla	r2, r2, sl, r0
 80242da:	fb0c 2c01 	mla	ip, ip, r1, r2
 80242de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80242e0:	fb03 c302 	mla	r3, r3, r2, ip
 80242e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242e8:	2bff      	cmp	r3, #255	; 0xff
 80242ea:	d12b      	bne.n	8024344 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80242ec:	4b13      	ldr	r3, [pc, #76]	; (802433c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80242ee:	681a      	ldr	r2, [r3, #0]
 80242f0:	4b13      	ldr	r3, [pc, #76]	; (8024340 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80242f2:	0951      	lsrs	r1, r2, #5
 80242f4:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80242f8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80242fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024300:	430b      	orrs	r3, r1
 8024302:	4313      	orrs	r3, r2
 8024304:	f8ae 3000 	strh.w	r3, [lr]
 8024308:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802430a:	f10e 0e02 	add.w	lr, lr, #2
 802430e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024312:	441c      	add	r4, r3
 8024314:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024316:	441e      	add	r6, r3
 8024318:	e6cc      	b.n	80240b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802431a:	f1bc 0f00 	cmp.w	ip, #0
 802431e:	d0c5      	beq.n	80242ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8024320:	9908      	ldr	r1, [sp, #32]
 8024322:	440b      	add	r3, r1
 8024324:	0859      	lsrs	r1, r3, #1
 8024326:	07db      	lsls	r3, r3, #31
 8024328:	5c79      	ldrb	r1, [r7, r1]
 802432a:	bf54      	ite	pl
 802432c:	f001 010f 	andpl.w	r1, r1, #15
 8024330:	1109      	asrmi	r1, r1, #4
 8024332:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024336:	b2c9      	uxtb	r1, r1
 8024338:	910b      	str	r1, [sp, #44]	; 0x2c
 802433a:	e7b7      	b.n	80242ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802433c:	24041b14 	.word	0x24041b14
 8024340:	fffff800 	.word	0xfffff800
 8024344:	2b00      	cmp	r3, #0
 8024346:	d0df      	beq.n	8024308 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8024348:	4a21      	ldr	r2, [pc, #132]	; (80243d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802434a:	fa1f fa83 	uxth.w	sl, r3
 802434e:	f8be c000 	ldrh.w	ip, [lr]
 8024352:	43db      	mvns	r3, r3
 8024354:	6810      	ldr	r0, [r2, #0]
 8024356:	ea4f 212c 	mov.w	r1, ip, asr #8
 802435a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802435e:	b2db      	uxtb	r3, r3
 8024360:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024364:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8024368:	fb12 f20a 	smulbb	r2, r2, sl
 802436c:	b2c0      	uxtb	r0, r0
 802436e:	fb1b fb0a 	smulbb	fp, fp, sl
 8024372:	fb01 2103 	mla	r1, r1, r3, r2
 8024376:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802437a:	fb10 f00a 	smulbb	r0, r0, sl
 802437e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024382:	b289      	uxth	r1, r1
 8024384:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024388:	fa5f fc8c 	uxtb.w	ip, ip
 802438c:	fb02 b203 	mla	r2, r2, r3, fp
 8024390:	fb0c 0003 	mla	r0, ip, r3, r0
 8024394:	1c4b      	adds	r3, r1, #1
 8024396:	b292      	uxth	r2, r2
 8024398:	b280      	uxth	r0, r0
 802439a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802439e:	f100 0b01 	add.w	fp, r0, #1
 80243a2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80243a6:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80243aa:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80243ae:	ea4b 0101 	orr.w	r1, fp, r1
 80243b2:	f102 0b01 	add.w	fp, r2, #1
 80243b6:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80243ba:	0952      	lsrs	r2, r2, #5
 80243bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80243c0:	4311      	orrs	r1, r2
 80243c2:	f8ae 1000 	strh.w	r1, [lr]
 80243c6:	e79f      	b.n	8024308 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80243c8:	b013      	add	sp, #76	; 0x4c
 80243ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243ce:	bf00      	nop
 80243d0:	24041b14 	.word	0x24041b14

080243d4 <CRC_Lock>:
 80243d4:	4a20      	ldr	r2, [pc, #128]	; (8024458 <CRC_Lock+0x84>)
 80243d6:	b530      	push	{r4, r5, lr}
 80243d8:	6813      	ldr	r3, [r2, #0]
 80243da:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80243de:	f24c 2540 	movw	r5, #49728	; 0xc240
 80243e2:	f023 0301 	bic.w	r3, r3, #1
 80243e6:	6013      	str	r3, [r2, #0]
 80243e8:	4b1c      	ldr	r3, [pc, #112]	; (802445c <CRC_Lock+0x88>)
 80243ea:	681a      	ldr	r2, [r3, #0]
 80243ec:	4022      	ands	r2, r4
 80243ee:	42aa      	cmp	r2, r5
 80243f0:	d005      	beq.n	80243fe <CRC_Lock+0x2a>
 80243f2:	681b      	ldr	r3, [r3, #0]
 80243f4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80243f8:	4023      	ands	r3, r4
 80243fa:	4293      	cmp	r3, r2
 80243fc:	d124      	bne.n	8024448 <CRC_Lock+0x74>
 80243fe:	4b18      	ldr	r3, [pc, #96]	; (8024460 <CRC_Lock+0x8c>)
 8024400:	681b      	ldr	r3, [r3, #0]
 8024402:	bb0b      	cbnz	r3, 8024448 <CRC_Lock+0x74>
 8024404:	4b17      	ldr	r3, [pc, #92]	; (8024464 <CRC_Lock+0x90>)
 8024406:	681a      	ldr	r2, [r3, #0]
 8024408:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802440c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8024410:	d00d      	beq.n	802442e <CRC_Lock+0x5a>
 8024412:	681a      	ldr	r2, [r3, #0]
 8024414:	f240 4483 	movw	r4, #1155	; 0x483
 8024418:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802441c:	42a2      	cmp	r2, r4
 802441e:	d006      	beq.n	802442e <CRC_Lock+0x5a>
 8024420:	681b      	ldr	r3, [r3, #0]
 8024422:	f240 4285 	movw	r2, #1157	; 0x485
 8024426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802442a:	4293      	cmp	r3, r2
 802442c:	d10c      	bne.n	8024448 <CRC_Lock+0x74>
 802442e:	4b0e      	ldr	r3, [pc, #56]	; (8024468 <CRC_Lock+0x94>)
 8024430:	2201      	movs	r2, #1
 8024432:	601a      	str	r2, [r3, #0]
 8024434:	681a      	ldr	r2, [r3, #0]
 8024436:	2a00      	cmp	r2, #0
 8024438:	d1fc      	bne.n	8024434 <CRC_Lock+0x60>
 802443a:	4b0c      	ldr	r3, [pc, #48]	; (802446c <CRC_Lock+0x98>)
 802443c:	6018      	str	r0, [r3, #0]
 802443e:	6818      	ldr	r0, [r3, #0]
 8024440:	1a43      	subs	r3, r0, r1
 8024442:	4258      	negs	r0, r3
 8024444:	4158      	adcs	r0, r3
 8024446:	bd30      	pop	{r4, r5, pc}
 8024448:	4b09      	ldr	r3, [pc, #36]	; (8024470 <CRC_Lock+0x9c>)
 802444a:	2201      	movs	r2, #1
 802444c:	601a      	str	r2, [r3, #0]
 802444e:	681a      	ldr	r2, [r3, #0]
 8024450:	2a00      	cmp	r2, #0
 8024452:	d1fc      	bne.n	802444e <CRC_Lock+0x7a>
 8024454:	4b07      	ldr	r3, [pc, #28]	; (8024474 <CRC_Lock+0xa0>)
 8024456:	e7f1      	b.n	802443c <CRC_Lock+0x68>
 8024458:	e0002000 	.word	0xe0002000
 802445c:	e000ed00 	.word	0xe000ed00
 8024460:	e0042000 	.word	0xe0042000
 8024464:	5c001000 	.word	0x5c001000
 8024468:	58024c08 	.word	0x58024c08
 802446c:	58024c00 	.word	0x58024c00
 8024470:	40023008 	.word	0x40023008
 8024474:	40023000 	.word	0x40023000

08024478 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024478:	6101      	str	r1, [r0, #16]
 802447a:	4770      	bx	lr

0802447c <_ZN8touchgfx8Gestures4tickEv>:
 802447c:	7b83      	ldrb	r3, [r0, #14]
 802447e:	b14b      	cbz	r3, 8024494 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024480:	8903      	ldrh	r3, [r0, #8]
 8024482:	3301      	adds	r3, #1
 8024484:	b29b      	uxth	r3, r3
 8024486:	2b07      	cmp	r3, #7
 8024488:	8103      	strh	r3, [r0, #8]
 802448a:	bf81      	itttt	hi
 802448c:	2300      	movhi	r3, #0
 802448e:	8143      	strhhi	r3, [r0, #10]
 8024490:	8183      	strhhi	r3, [r0, #12]
 8024492:	7383      	strbhi	r3, [r0, #14]
 8024494:	4770      	bx	lr
	...

08024498 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024498:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802449c:	4698      	mov	r8, r3
 802449e:	8883      	ldrh	r3, [r0, #4]
 80244a0:	4604      	mov	r4, r0
 80244a2:	4617      	mov	r7, r2
 80244a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80244a8:	eba8 0303 	sub.w	r3, r8, r3
 80244ac:	4a19      	ldr	r2, [pc, #100]	; (8024514 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80244ae:	460e      	mov	r6, r1
 80244b0:	b21b      	sxth	r3, r3
 80244b2:	88c1      	ldrh	r1, [r0, #6]
 80244b4:	9200      	str	r2, [sp, #0]
 80244b6:	2000      	movs	r0, #0
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	8aa2      	ldrh	r2, [r4, #20]
 80244bc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80244c0:	bfb8      	it	lt
 80244c2:	425b      	neglt	r3, r3
 80244c4:	f88d 0004 	strb.w	r0, [sp, #4]
 80244c8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80244cc:	b21b      	sxth	r3, r3
 80244ce:	f8ad 800a 	strh.w	r8, [sp, #10]
 80244d2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80244d6:	4293      	cmp	r3, r2
 80244d8:	dc07      	bgt.n	80244ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80244da:	1a69      	subs	r1, r5, r1
 80244dc:	b209      	sxth	r1, r1
 80244de:	2900      	cmp	r1, #0
 80244e0:	bfb8      	it	lt
 80244e2:	4249      	neglt	r1, r1
 80244e4:	b209      	sxth	r1, r1
 80244e6:	428a      	cmp	r2, r1
 80244e8:	da10      	bge.n	802450c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80244ea:	6920      	ldr	r0, [r4, #16]
 80244ec:	4669      	mov	r1, sp
 80244ee:	eba8 0606 	sub.w	r6, r8, r6
 80244f2:	1bef      	subs	r7, r5, r7
 80244f4:	6803      	ldr	r3, [r0, #0]
 80244f6:	685b      	ldr	r3, [r3, #4]
 80244f8:	4798      	blx	r3
 80244fa:	2300      	movs	r3, #0
 80244fc:	2001      	movs	r0, #1
 80244fe:	8166      	strh	r6, [r4, #10]
 8024500:	8123      	strh	r3, [r4, #8]
 8024502:	81a7      	strh	r7, [r4, #12]
 8024504:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024508:	80e5      	strh	r5, [r4, #6]
 802450a:	73a0      	strb	r0, [r4, #14]
 802450c:	b004      	add	sp, #16
 802450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024512:	bf00      	nop
 8024514:	08028d88 	.word	0x08028d88

08024518 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024518:	b5f0      	push	{r4, r5, r6, r7, lr}
 802451a:	461e      	mov	r6, r3
 802451c:	1e4b      	subs	r3, r1, #1
 802451e:	b085      	sub	sp, #20
 8024520:	4604      	mov	r4, r0
 8024522:	2b01      	cmp	r3, #1
 8024524:	460d      	mov	r5, r1
 8024526:	4617      	mov	r7, r2
 8024528:	d84b      	bhi.n	80245c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802452a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802452e:	1cd3      	adds	r3, r2, #3
 8024530:	b29b      	uxth	r3, r3
 8024532:	2b06      	cmp	r3, #6
 8024534:	d916      	bls.n	8024564 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024536:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80245d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802453a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802453e:	f8cd c004 	str.w	ip, [sp, #4]
 8024542:	f04f 0c00 	mov.w	ip, #0
 8024546:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802454a:	6900      	ldr	r0, [r0, #16]
 802454c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024550:	a901      	add	r1, sp, #4
 8024552:	f88d c008 	strb.w	ip, [sp, #8]
 8024556:	f8ad 200a 	strh.w	r2, [sp, #10]
 802455a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802455e:	6803      	ldr	r3, [r0, #0]
 8024560:	689b      	ldr	r3, [r3, #8]
 8024562:	4798      	blx	r3
 8024564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024568:	1cd3      	adds	r3, r2, #3
 802456a:	b29b      	uxth	r3, r3
 802456c:	2b06      	cmp	r3, #6
 802456e:	d916      	bls.n	802459e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024570:	f8df c064 	ldr.w	ip, [pc, #100]	; 80245d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024574:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024578:	f8cd c004 	str.w	ip, [sp, #4]
 802457c:	f04f 0c01 	mov.w	ip, #1
 8024580:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024584:	6920      	ldr	r0, [r4, #16]
 8024586:	f8ad 100c 	strh.w	r1, [sp, #12]
 802458a:	a901      	add	r1, sp, #4
 802458c:	f88d c008 	strb.w	ip, [sp, #8]
 8024590:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024594:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024598:	6803      	ldr	r3, [r0, #0]
 802459a:	689b      	ldr	r3, [r3, #8]
 802459c:	4798      	blx	r3
 802459e:	4b0d      	ldr	r3, [pc, #52]	; (80245d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80245a0:	a901      	add	r1, sp, #4
 80245a2:	6920      	ldr	r0, [r4, #16]
 80245a4:	9301      	str	r3, [sp, #4]
 80245a6:	2300      	movs	r3, #0
 80245a8:	f88d 5008 	strb.w	r5, [sp, #8]
 80245ac:	f8ad 700a 	strh.w	r7, [sp, #10]
 80245b0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80245b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80245b8:	6803      	ldr	r3, [r0, #0]
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	4798      	blx	r3
 80245be:	b005      	add	sp, #20
 80245c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245c2:	2900      	cmp	r1, #0
 80245c4:	d1eb      	bne.n	802459e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80245c6:	80a2      	strh	r2, [r4, #4]
 80245c8:	80c6      	strh	r6, [r0, #6]
 80245ca:	60a1      	str	r1, [r4, #8]
 80245cc:	81a1      	strh	r1, [r4, #12]
 80245ce:	73a1      	strb	r1, [r4, #14]
 80245d0:	e7e5      	b.n	802459e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80245d2:	bf00      	nop
 80245d4:	08028d74 	.word	0x08028d74
 80245d8:	08028d9c 	.word	0x08028d9c

080245dc <__aeabi_atexit>:
 80245dc:	460b      	mov	r3, r1
 80245de:	4601      	mov	r1, r0
 80245e0:	4618      	mov	r0, r3
 80245e2:	f000 b853 	b.w	802468c <__cxa_atexit>

080245e6 <_ZdlPvj>:
 80245e6:	f000 b812 	b.w	802460e <_ZdlPv>

080245ea <__cxa_guard_acquire>:
 80245ea:	6803      	ldr	r3, [r0, #0]
 80245ec:	07db      	lsls	r3, r3, #31
 80245ee:	d406      	bmi.n	80245fe <__cxa_guard_acquire+0x14>
 80245f0:	7843      	ldrb	r3, [r0, #1]
 80245f2:	b103      	cbz	r3, 80245f6 <__cxa_guard_acquire+0xc>
 80245f4:	deff      	udf	#255	; 0xff
 80245f6:	2301      	movs	r3, #1
 80245f8:	7043      	strb	r3, [r0, #1]
 80245fa:	4618      	mov	r0, r3
 80245fc:	4770      	bx	lr
 80245fe:	2000      	movs	r0, #0
 8024600:	4770      	bx	lr

08024602 <__cxa_guard_release>:
 8024602:	2301      	movs	r3, #1
 8024604:	6003      	str	r3, [r0, #0]
 8024606:	4770      	bx	lr

08024608 <__cxa_pure_virtual>:
 8024608:	b508      	push	{r3, lr}
 802460a:	f000 f80f 	bl	802462c <_ZSt9terminatev>

0802460e <_ZdlPv>:
 802460e:	f000 b989 	b.w	8024924 <free>

08024612 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024612:	b508      	push	{r3, lr}
 8024614:	4780      	blx	r0
 8024616:	f000 f80e 	bl	8024636 <abort>
	...

0802461c <_ZSt13get_terminatev>:
 802461c:	4b02      	ldr	r3, [pc, #8]	; (8024628 <_ZSt13get_terminatev+0xc>)
 802461e:	6818      	ldr	r0, [r3, #0]
 8024620:	f3bf 8f5b 	dmb	ish
 8024624:	4770      	bx	lr
 8024626:	bf00      	nop
 8024628:	240000ac 	.word	0x240000ac

0802462c <_ZSt9terminatev>:
 802462c:	b508      	push	{r3, lr}
 802462e:	f7ff fff5 	bl	802461c <_ZSt13get_terminatev>
 8024632:	f7ff ffee 	bl	8024612 <_ZN10__cxxabiv111__terminateEPFvvE>

08024636 <abort>:
 8024636:	b508      	push	{r3, lr}
 8024638:	2006      	movs	r0, #6
 802463a:	f000 fe01 	bl	8025240 <raise>
 802463e:	2001      	movs	r0, #1
 8024640:	f7dc fd76 	bl	8001130 <_exit>

08024644 <__assert_func>:
 8024644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024646:	4614      	mov	r4, r2
 8024648:	461a      	mov	r2, r3
 802464a:	4b09      	ldr	r3, [pc, #36]	; (8024670 <__assert_func+0x2c>)
 802464c:	681b      	ldr	r3, [r3, #0]
 802464e:	4605      	mov	r5, r0
 8024650:	68d8      	ldr	r0, [r3, #12]
 8024652:	b14c      	cbz	r4, 8024668 <__assert_func+0x24>
 8024654:	4b07      	ldr	r3, [pc, #28]	; (8024674 <__assert_func+0x30>)
 8024656:	9100      	str	r1, [sp, #0]
 8024658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802465c:	4906      	ldr	r1, [pc, #24]	; (8024678 <__assert_func+0x34>)
 802465e:	462b      	mov	r3, r5
 8024660:	f000 f8fe 	bl	8024860 <fiprintf>
 8024664:	f7ff ffe7 	bl	8024636 <abort>
 8024668:	4b04      	ldr	r3, [pc, #16]	; (802467c <__assert_func+0x38>)
 802466a:	461c      	mov	r4, r3
 802466c:	e7f3      	b.n	8024656 <__assert_func+0x12>
 802466e:	bf00      	nop
 8024670:	240000b0 	.word	0x240000b0
 8024674:	08029064 	.word	0x08029064
 8024678:	08029071 	.word	0x08029071
 802467c:	0802909f 	.word	0x0802909f

08024680 <atexit>:
 8024680:	2300      	movs	r3, #0
 8024682:	4601      	mov	r1, r0
 8024684:	461a      	mov	r2, r3
 8024686:	4618      	mov	r0, r3
 8024688:	f000 bf20 	b.w	80254cc <__register_exitproc>

0802468c <__cxa_atexit>:
 802468c:	b510      	push	{r4, lr}
 802468e:	4c05      	ldr	r4, [pc, #20]	; (80246a4 <__cxa_atexit+0x18>)
 8024690:	4613      	mov	r3, r2
 8024692:	b12c      	cbz	r4, 80246a0 <__cxa_atexit+0x14>
 8024694:	460a      	mov	r2, r1
 8024696:	4601      	mov	r1, r0
 8024698:	2002      	movs	r0, #2
 802469a:	f000 ff17 	bl	80254cc <__register_exitproc>
 802469e:	bd10      	pop	{r4, pc}
 80246a0:	4620      	mov	r0, r4
 80246a2:	e7fc      	b.n	802469e <__cxa_atexit+0x12>
 80246a4:	080254cd 	.word	0x080254cd

080246a8 <__errno>:
 80246a8:	4b01      	ldr	r3, [pc, #4]	; (80246b0 <__errno+0x8>)
 80246aa:	6818      	ldr	r0, [r3, #0]
 80246ac:	4770      	bx	lr
 80246ae:	bf00      	nop
 80246b0:	240000b0 	.word	0x240000b0

080246b4 <std>:
 80246b4:	2300      	movs	r3, #0
 80246b6:	b510      	push	{r4, lr}
 80246b8:	4604      	mov	r4, r0
 80246ba:	e9c0 3300 	strd	r3, r3, [r0]
 80246be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80246c2:	6083      	str	r3, [r0, #8]
 80246c4:	8181      	strh	r1, [r0, #12]
 80246c6:	6643      	str	r3, [r0, #100]	; 0x64
 80246c8:	81c2      	strh	r2, [r0, #14]
 80246ca:	6183      	str	r3, [r0, #24]
 80246cc:	4619      	mov	r1, r3
 80246ce:	2208      	movs	r2, #8
 80246d0:	305c      	adds	r0, #92	; 0x5c
 80246d2:	f000 f93d 	bl	8024950 <memset>
 80246d6:	4b05      	ldr	r3, [pc, #20]	; (80246ec <std+0x38>)
 80246d8:	6263      	str	r3, [r4, #36]	; 0x24
 80246da:	4b05      	ldr	r3, [pc, #20]	; (80246f0 <std+0x3c>)
 80246dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80246de:	4b05      	ldr	r3, [pc, #20]	; (80246f4 <std+0x40>)
 80246e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80246e2:	4b05      	ldr	r3, [pc, #20]	; (80246f8 <std+0x44>)
 80246e4:	6224      	str	r4, [r4, #32]
 80246e6:	6323      	str	r3, [r4, #48]	; 0x30
 80246e8:	bd10      	pop	{r4, pc}
 80246ea:	bf00      	nop
 80246ec:	08025279 	.word	0x08025279
 80246f0:	0802529b 	.word	0x0802529b
 80246f4:	080252d3 	.word	0x080252d3
 80246f8:	080252f7 	.word	0x080252f7

080246fc <_cleanup_r>:
 80246fc:	4901      	ldr	r1, [pc, #4]	; (8024704 <_cleanup_r+0x8>)
 80246fe:	f000 b8c1 	b.w	8024884 <_fwalk_reent>
 8024702:	bf00      	nop
 8024704:	080256bd 	.word	0x080256bd

08024708 <__sfmoreglue>:
 8024708:	b570      	push	{r4, r5, r6, lr}
 802470a:	2268      	movs	r2, #104	; 0x68
 802470c:	1e4d      	subs	r5, r1, #1
 802470e:	4355      	muls	r5, r2
 8024710:	460e      	mov	r6, r1
 8024712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024716:	f000 f98f 	bl	8024a38 <_malloc_r>
 802471a:	4604      	mov	r4, r0
 802471c:	b140      	cbz	r0, 8024730 <__sfmoreglue+0x28>
 802471e:	2100      	movs	r1, #0
 8024720:	e9c0 1600 	strd	r1, r6, [r0]
 8024724:	300c      	adds	r0, #12
 8024726:	60a0      	str	r0, [r4, #8]
 8024728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802472c:	f000 f910 	bl	8024950 <memset>
 8024730:	4620      	mov	r0, r4
 8024732:	bd70      	pop	{r4, r5, r6, pc}

08024734 <__sfp_lock_acquire>:
 8024734:	4801      	ldr	r0, [pc, #4]	; (802473c <__sfp_lock_acquire+0x8>)
 8024736:	f000 b8ea 	b.w	802490e <__retarget_lock_acquire_recursive>
 802473a:	bf00      	nop
 802473c:	24041c0a 	.word	0x24041c0a

08024740 <__sfp_lock_release>:
 8024740:	4801      	ldr	r0, [pc, #4]	; (8024748 <__sfp_lock_release+0x8>)
 8024742:	f000 b8e6 	b.w	8024912 <__retarget_lock_release_recursive>
 8024746:	bf00      	nop
 8024748:	24041c0a 	.word	0x24041c0a

0802474c <__sinit_lock_acquire>:
 802474c:	4801      	ldr	r0, [pc, #4]	; (8024754 <__sinit_lock_acquire+0x8>)
 802474e:	f000 b8de 	b.w	802490e <__retarget_lock_acquire_recursive>
 8024752:	bf00      	nop
 8024754:	24041c0b 	.word	0x24041c0b

08024758 <__sinit_lock_release>:
 8024758:	4801      	ldr	r0, [pc, #4]	; (8024760 <__sinit_lock_release+0x8>)
 802475a:	f000 b8da 	b.w	8024912 <__retarget_lock_release_recursive>
 802475e:	bf00      	nop
 8024760:	24041c0b 	.word	0x24041c0b

08024764 <__sinit>:
 8024764:	b510      	push	{r4, lr}
 8024766:	4604      	mov	r4, r0
 8024768:	f7ff fff0 	bl	802474c <__sinit_lock_acquire>
 802476c:	69a3      	ldr	r3, [r4, #24]
 802476e:	b11b      	cbz	r3, 8024778 <__sinit+0x14>
 8024770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024774:	f7ff bff0 	b.w	8024758 <__sinit_lock_release>
 8024778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802477c:	6523      	str	r3, [r4, #80]	; 0x50
 802477e:	4b13      	ldr	r3, [pc, #76]	; (80247cc <__sinit+0x68>)
 8024780:	4a13      	ldr	r2, [pc, #76]	; (80247d0 <__sinit+0x6c>)
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	62a2      	str	r2, [r4, #40]	; 0x28
 8024786:	42a3      	cmp	r3, r4
 8024788:	bf04      	itt	eq
 802478a:	2301      	moveq	r3, #1
 802478c:	61a3      	streq	r3, [r4, #24]
 802478e:	4620      	mov	r0, r4
 8024790:	f000 f820 	bl	80247d4 <__sfp>
 8024794:	6060      	str	r0, [r4, #4]
 8024796:	4620      	mov	r0, r4
 8024798:	f000 f81c 	bl	80247d4 <__sfp>
 802479c:	60a0      	str	r0, [r4, #8]
 802479e:	4620      	mov	r0, r4
 80247a0:	f000 f818 	bl	80247d4 <__sfp>
 80247a4:	2200      	movs	r2, #0
 80247a6:	60e0      	str	r0, [r4, #12]
 80247a8:	2104      	movs	r1, #4
 80247aa:	6860      	ldr	r0, [r4, #4]
 80247ac:	f7ff ff82 	bl	80246b4 <std>
 80247b0:	68a0      	ldr	r0, [r4, #8]
 80247b2:	2201      	movs	r2, #1
 80247b4:	2109      	movs	r1, #9
 80247b6:	f7ff ff7d 	bl	80246b4 <std>
 80247ba:	68e0      	ldr	r0, [r4, #12]
 80247bc:	2202      	movs	r2, #2
 80247be:	2112      	movs	r1, #18
 80247c0:	f7ff ff78 	bl	80246b4 <std>
 80247c4:	2301      	movs	r3, #1
 80247c6:	61a3      	str	r3, [r4, #24]
 80247c8:	e7d2      	b.n	8024770 <__sinit+0xc>
 80247ca:	bf00      	nop
 80247cc:	08029100 	.word	0x08029100
 80247d0:	080246fd 	.word	0x080246fd

080247d4 <__sfp>:
 80247d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247d6:	4607      	mov	r7, r0
 80247d8:	f7ff ffac 	bl	8024734 <__sfp_lock_acquire>
 80247dc:	4b1e      	ldr	r3, [pc, #120]	; (8024858 <__sfp+0x84>)
 80247de:	681e      	ldr	r6, [r3, #0]
 80247e0:	69b3      	ldr	r3, [r6, #24]
 80247e2:	b913      	cbnz	r3, 80247ea <__sfp+0x16>
 80247e4:	4630      	mov	r0, r6
 80247e6:	f7ff ffbd 	bl	8024764 <__sinit>
 80247ea:	3648      	adds	r6, #72	; 0x48
 80247ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80247f0:	3b01      	subs	r3, #1
 80247f2:	d503      	bpl.n	80247fc <__sfp+0x28>
 80247f4:	6833      	ldr	r3, [r6, #0]
 80247f6:	b30b      	cbz	r3, 802483c <__sfp+0x68>
 80247f8:	6836      	ldr	r6, [r6, #0]
 80247fa:	e7f7      	b.n	80247ec <__sfp+0x18>
 80247fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024800:	b9d5      	cbnz	r5, 8024838 <__sfp+0x64>
 8024802:	4b16      	ldr	r3, [pc, #88]	; (802485c <__sfp+0x88>)
 8024804:	60e3      	str	r3, [r4, #12]
 8024806:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802480a:	6665      	str	r5, [r4, #100]	; 0x64
 802480c:	f000 f87e 	bl	802490c <__retarget_lock_init_recursive>
 8024810:	f7ff ff96 	bl	8024740 <__sfp_lock_release>
 8024814:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024818:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802481c:	6025      	str	r5, [r4, #0]
 802481e:	61a5      	str	r5, [r4, #24]
 8024820:	2208      	movs	r2, #8
 8024822:	4629      	mov	r1, r5
 8024824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024828:	f000 f892 	bl	8024950 <memset>
 802482c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024834:	4620      	mov	r0, r4
 8024836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024838:	3468      	adds	r4, #104	; 0x68
 802483a:	e7d9      	b.n	80247f0 <__sfp+0x1c>
 802483c:	2104      	movs	r1, #4
 802483e:	4638      	mov	r0, r7
 8024840:	f7ff ff62 	bl	8024708 <__sfmoreglue>
 8024844:	4604      	mov	r4, r0
 8024846:	6030      	str	r0, [r6, #0]
 8024848:	2800      	cmp	r0, #0
 802484a:	d1d5      	bne.n	80247f8 <__sfp+0x24>
 802484c:	f7ff ff78 	bl	8024740 <__sfp_lock_release>
 8024850:	230c      	movs	r3, #12
 8024852:	603b      	str	r3, [r7, #0]
 8024854:	e7ee      	b.n	8024834 <__sfp+0x60>
 8024856:	bf00      	nop
 8024858:	08029100 	.word	0x08029100
 802485c:	ffff0001 	.word	0xffff0001

08024860 <fiprintf>:
 8024860:	b40e      	push	{r1, r2, r3}
 8024862:	b503      	push	{r0, r1, lr}
 8024864:	4601      	mov	r1, r0
 8024866:	ab03      	add	r3, sp, #12
 8024868:	4805      	ldr	r0, [pc, #20]	; (8024880 <fiprintf+0x20>)
 802486a:	f853 2b04 	ldr.w	r2, [r3], #4
 802486e:	6800      	ldr	r0, [r0, #0]
 8024870:	9301      	str	r3, [sp, #4]
 8024872:	f000 f97f 	bl	8024b74 <_vfiprintf_r>
 8024876:	b002      	add	sp, #8
 8024878:	f85d eb04 	ldr.w	lr, [sp], #4
 802487c:	b003      	add	sp, #12
 802487e:	4770      	bx	lr
 8024880:	240000b0 	.word	0x240000b0

08024884 <_fwalk_reent>:
 8024884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024888:	4606      	mov	r6, r0
 802488a:	4688      	mov	r8, r1
 802488c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024890:	2700      	movs	r7, #0
 8024892:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024896:	f1b9 0901 	subs.w	r9, r9, #1
 802489a:	d505      	bpl.n	80248a8 <_fwalk_reent+0x24>
 802489c:	6824      	ldr	r4, [r4, #0]
 802489e:	2c00      	cmp	r4, #0
 80248a0:	d1f7      	bne.n	8024892 <_fwalk_reent+0xe>
 80248a2:	4638      	mov	r0, r7
 80248a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80248a8:	89ab      	ldrh	r3, [r5, #12]
 80248aa:	2b01      	cmp	r3, #1
 80248ac:	d907      	bls.n	80248be <_fwalk_reent+0x3a>
 80248ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80248b2:	3301      	adds	r3, #1
 80248b4:	d003      	beq.n	80248be <_fwalk_reent+0x3a>
 80248b6:	4629      	mov	r1, r5
 80248b8:	4630      	mov	r0, r6
 80248ba:	47c0      	blx	r8
 80248bc:	4307      	orrs	r7, r0
 80248be:	3568      	adds	r5, #104	; 0x68
 80248c0:	e7e9      	b.n	8024896 <_fwalk_reent+0x12>
	...

080248c4 <__libc_init_array>:
 80248c4:	b570      	push	{r4, r5, r6, lr}
 80248c6:	4d0d      	ldr	r5, [pc, #52]	; (80248fc <__libc_init_array+0x38>)
 80248c8:	4c0d      	ldr	r4, [pc, #52]	; (8024900 <__libc_init_array+0x3c>)
 80248ca:	1b64      	subs	r4, r4, r5
 80248cc:	10a4      	asrs	r4, r4, #2
 80248ce:	2600      	movs	r6, #0
 80248d0:	42a6      	cmp	r6, r4
 80248d2:	d109      	bne.n	80248e8 <__libc_init_array+0x24>
 80248d4:	4d0b      	ldr	r5, [pc, #44]	; (8024904 <__libc_init_array+0x40>)
 80248d6:	4c0c      	ldr	r4, [pc, #48]	; (8024908 <__libc_init_array+0x44>)
 80248d8:	f000 ffe4 	bl	80258a4 <_init>
 80248dc:	1b64      	subs	r4, r4, r5
 80248de:	10a4      	asrs	r4, r4, #2
 80248e0:	2600      	movs	r6, #0
 80248e2:	42a6      	cmp	r6, r4
 80248e4:	d105      	bne.n	80248f2 <__libc_init_array+0x2e>
 80248e6:	bd70      	pop	{r4, r5, r6, pc}
 80248e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80248ec:	4798      	blx	r3
 80248ee:	3601      	adds	r6, #1
 80248f0:	e7ee      	b.n	80248d0 <__libc_init_array+0xc>
 80248f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80248f6:	4798      	blx	r3
 80248f8:	3601      	adds	r6, #1
 80248fa:	e7f2      	b.n	80248e2 <__libc_init_array+0x1e>
 80248fc:	08029154 	.word	0x08029154
 8024900:	08029154 	.word	0x08029154
 8024904:	08029154 	.word	0x08029154
 8024908:	08029170 	.word	0x08029170

0802490c <__retarget_lock_init_recursive>:
 802490c:	4770      	bx	lr

0802490e <__retarget_lock_acquire_recursive>:
 802490e:	4770      	bx	lr

08024910 <__retarget_lock_release>:
 8024910:	4770      	bx	lr

08024912 <__retarget_lock_release_recursive>:
 8024912:	4770      	bx	lr

08024914 <malloc>:
 8024914:	4b02      	ldr	r3, [pc, #8]	; (8024920 <malloc+0xc>)
 8024916:	4601      	mov	r1, r0
 8024918:	6818      	ldr	r0, [r3, #0]
 802491a:	f000 b88d 	b.w	8024a38 <_malloc_r>
 802491e:	bf00      	nop
 8024920:	240000b0 	.word	0x240000b0

08024924 <free>:
 8024924:	4b02      	ldr	r3, [pc, #8]	; (8024930 <free+0xc>)
 8024926:	4601      	mov	r1, r0
 8024928:	6818      	ldr	r0, [r3, #0]
 802492a:	f000 b819 	b.w	8024960 <_free_r>
 802492e:	bf00      	nop
 8024930:	240000b0 	.word	0x240000b0

08024934 <memcpy>:
 8024934:	440a      	add	r2, r1
 8024936:	4291      	cmp	r1, r2
 8024938:	f100 33ff 	add.w	r3, r0, #4294967295
 802493c:	d100      	bne.n	8024940 <memcpy+0xc>
 802493e:	4770      	bx	lr
 8024940:	b510      	push	{r4, lr}
 8024942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024946:	f803 4f01 	strb.w	r4, [r3, #1]!
 802494a:	4291      	cmp	r1, r2
 802494c:	d1f9      	bne.n	8024942 <memcpy+0xe>
 802494e:	bd10      	pop	{r4, pc}

08024950 <memset>:
 8024950:	4402      	add	r2, r0
 8024952:	4603      	mov	r3, r0
 8024954:	4293      	cmp	r3, r2
 8024956:	d100      	bne.n	802495a <memset+0xa>
 8024958:	4770      	bx	lr
 802495a:	f803 1b01 	strb.w	r1, [r3], #1
 802495e:	e7f9      	b.n	8024954 <memset+0x4>

08024960 <_free_r>:
 8024960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024962:	2900      	cmp	r1, #0
 8024964:	d044      	beq.n	80249f0 <_free_r+0x90>
 8024966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802496a:	9001      	str	r0, [sp, #4]
 802496c:	2b00      	cmp	r3, #0
 802496e:	f1a1 0404 	sub.w	r4, r1, #4
 8024972:	bfb8      	it	lt
 8024974:	18e4      	addlt	r4, r4, r3
 8024976:	f000 ff55 	bl	8025824 <__malloc_lock>
 802497a:	4a1e      	ldr	r2, [pc, #120]	; (80249f4 <_free_r+0x94>)
 802497c:	9801      	ldr	r0, [sp, #4]
 802497e:	6813      	ldr	r3, [r2, #0]
 8024980:	b933      	cbnz	r3, 8024990 <_free_r+0x30>
 8024982:	6063      	str	r3, [r4, #4]
 8024984:	6014      	str	r4, [r2, #0]
 8024986:	b003      	add	sp, #12
 8024988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802498c:	f000 bf50 	b.w	8025830 <__malloc_unlock>
 8024990:	42a3      	cmp	r3, r4
 8024992:	d908      	bls.n	80249a6 <_free_r+0x46>
 8024994:	6825      	ldr	r5, [r4, #0]
 8024996:	1961      	adds	r1, r4, r5
 8024998:	428b      	cmp	r3, r1
 802499a:	bf01      	itttt	eq
 802499c:	6819      	ldreq	r1, [r3, #0]
 802499e:	685b      	ldreq	r3, [r3, #4]
 80249a0:	1949      	addeq	r1, r1, r5
 80249a2:	6021      	streq	r1, [r4, #0]
 80249a4:	e7ed      	b.n	8024982 <_free_r+0x22>
 80249a6:	461a      	mov	r2, r3
 80249a8:	685b      	ldr	r3, [r3, #4]
 80249aa:	b10b      	cbz	r3, 80249b0 <_free_r+0x50>
 80249ac:	42a3      	cmp	r3, r4
 80249ae:	d9fa      	bls.n	80249a6 <_free_r+0x46>
 80249b0:	6811      	ldr	r1, [r2, #0]
 80249b2:	1855      	adds	r5, r2, r1
 80249b4:	42a5      	cmp	r5, r4
 80249b6:	d10b      	bne.n	80249d0 <_free_r+0x70>
 80249b8:	6824      	ldr	r4, [r4, #0]
 80249ba:	4421      	add	r1, r4
 80249bc:	1854      	adds	r4, r2, r1
 80249be:	42a3      	cmp	r3, r4
 80249c0:	6011      	str	r1, [r2, #0]
 80249c2:	d1e0      	bne.n	8024986 <_free_r+0x26>
 80249c4:	681c      	ldr	r4, [r3, #0]
 80249c6:	685b      	ldr	r3, [r3, #4]
 80249c8:	6053      	str	r3, [r2, #4]
 80249ca:	4421      	add	r1, r4
 80249cc:	6011      	str	r1, [r2, #0]
 80249ce:	e7da      	b.n	8024986 <_free_r+0x26>
 80249d0:	d902      	bls.n	80249d8 <_free_r+0x78>
 80249d2:	230c      	movs	r3, #12
 80249d4:	6003      	str	r3, [r0, #0]
 80249d6:	e7d6      	b.n	8024986 <_free_r+0x26>
 80249d8:	6825      	ldr	r5, [r4, #0]
 80249da:	1961      	adds	r1, r4, r5
 80249dc:	428b      	cmp	r3, r1
 80249de:	bf04      	itt	eq
 80249e0:	6819      	ldreq	r1, [r3, #0]
 80249e2:	685b      	ldreq	r3, [r3, #4]
 80249e4:	6063      	str	r3, [r4, #4]
 80249e6:	bf04      	itt	eq
 80249e8:	1949      	addeq	r1, r1, r5
 80249ea:	6021      	streq	r1, [r4, #0]
 80249ec:	6054      	str	r4, [r2, #4]
 80249ee:	e7ca      	b.n	8024986 <_free_r+0x26>
 80249f0:	b003      	add	sp, #12
 80249f2:	bd30      	pop	{r4, r5, pc}
 80249f4:	24041c0c 	.word	0x24041c0c

080249f8 <sbrk_aligned>:
 80249f8:	b570      	push	{r4, r5, r6, lr}
 80249fa:	4e0e      	ldr	r6, [pc, #56]	; (8024a34 <sbrk_aligned+0x3c>)
 80249fc:	460c      	mov	r4, r1
 80249fe:	6831      	ldr	r1, [r6, #0]
 8024a00:	4605      	mov	r5, r0
 8024a02:	b911      	cbnz	r1, 8024a0a <sbrk_aligned+0x12>
 8024a04:	f000 fbe4 	bl	80251d0 <_sbrk_r>
 8024a08:	6030      	str	r0, [r6, #0]
 8024a0a:	4621      	mov	r1, r4
 8024a0c:	4628      	mov	r0, r5
 8024a0e:	f000 fbdf 	bl	80251d0 <_sbrk_r>
 8024a12:	1c43      	adds	r3, r0, #1
 8024a14:	d00a      	beq.n	8024a2c <sbrk_aligned+0x34>
 8024a16:	1cc4      	adds	r4, r0, #3
 8024a18:	f024 0403 	bic.w	r4, r4, #3
 8024a1c:	42a0      	cmp	r0, r4
 8024a1e:	d007      	beq.n	8024a30 <sbrk_aligned+0x38>
 8024a20:	1a21      	subs	r1, r4, r0
 8024a22:	4628      	mov	r0, r5
 8024a24:	f000 fbd4 	bl	80251d0 <_sbrk_r>
 8024a28:	3001      	adds	r0, #1
 8024a2a:	d101      	bne.n	8024a30 <sbrk_aligned+0x38>
 8024a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8024a30:	4620      	mov	r0, r4
 8024a32:	bd70      	pop	{r4, r5, r6, pc}
 8024a34:	24041c10 	.word	0x24041c10

08024a38 <_malloc_r>:
 8024a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a3c:	1ccd      	adds	r5, r1, #3
 8024a3e:	f025 0503 	bic.w	r5, r5, #3
 8024a42:	3508      	adds	r5, #8
 8024a44:	2d0c      	cmp	r5, #12
 8024a46:	bf38      	it	cc
 8024a48:	250c      	movcc	r5, #12
 8024a4a:	2d00      	cmp	r5, #0
 8024a4c:	4607      	mov	r7, r0
 8024a4e:	db01      	blt.n	8024a54 <_malloc_r+0x1c>
 8024a50:	42a9      	cmp	r1, r5
 8024a52:	d905      	bls.n	8024a60 <_malloc_r+0x28>
 8024a54:	230c      	movs	r3, #12
 8024a56:	603b      	str	r3, [r7, #0]
 8024a58:	2600      	movs	r6, #0
 8024a5a:	4630      	mov	r0, r6
 8024a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a60:	4e2e      	ldr	r6, [pc, #184]	; (8024b1c <_malloc_r+0xe4>)
 8024a62:	f000 fedf 	bl	8025824 <__malloc_lock>
 8024a66:	6833      	ldr	r3, [r6, #0]
 8024a68:	461c      	mov	r4, r3
 8024a6a:	bb34      	cbnz	r4, 8024aba <_malloc_r+0x82>
 8024a6c:	4629      	mov	r1, r5
 8024a6e:	4638      	mov	r0, r7
 8024a70:	f7ff ffc2 	bl	80249f8 <sbrk_aligned>
 8024a74:	1c43      	adds	r3, r0, #1
 8024a76:	4604      	mov	r4, r0
 8024a78:	d14d      	bne.n	8024b16 <_malloc_r+0xde>
 8024a7a:	6834      	ldr	r4, [r6, #0]
 8024a7c:	4626      	mov	r6, r4
 8024a7e:	2e00      	cmp	r6, #0
 8024a80:	d140      	bne.n	8024b04 <_malloc_r+0xcc>
 8024a82:	6823      	ldr	r3, [r4, #0]
 8024a84:	4631      	mov	r1, r6
 8024a86:	4638      	mov	r0, r7
 8024a88:	eb04 0803 	add.w	r8, r4, r3
 8024a8c:	f000 fba0 	bl	80251d0 <_sbrk_r>
 8024a90:	4580      	cmp	r8, r0
 8024a92:	d13a      	bne.n	8024b0a <_malloc_r+0xd2>
 8024a94:	6821      	ldr	r1, [r4, #0]
 8024a96:	3503      	adds	r5, #3
 8024a98:	1a6d      	subs	r5, r5, r1
 8024a9a:	f025 0503 	bic.w	r5, r5, #3
 8024a9e:	3508      	adds	r5, #8
 8024aa0:	2d0c      	cmp	r5, #12
 8024aa2:	bf38      	it	cc
 8024aa4:	250c      	movcc	r5, #12
 8024aa6:	4629      	mov	r1, r5
 8024aa8:	4638      	mov	r0, r7
 8024aaa:	f7ff ffa5 	bl	80249f8 <sbrk_aligned>
 8024aae:	3001      	adds	r0, #1
 8024ab0:	d02b      	beq.n	8024b0a <_malloc_r+0xd2>
 8024ab2:	6823      	ldr	r3, [r4, #0]
 8024ab4:	442b      	add	r3, r5
 8024ab6:	6023      	str	r3, [r4, #0]
 8024ab8:	e00e      	b.n	8024ad8 <_malloc_r+0xa0>
 8024aba:	6822      	ldr	r2, [r4, #0]
 8024abc:	1b52      	subs	r2, r2, r5
 8024abe:	d41e      	bmi.n	8024afe <_malloc_r+0xc6>
 8024ac0:	2a0b      	cmp	r2, #11
 8024ac2:	d916      	bls.n	8024af2 <_malloc_r+0xba>
 8024ac4:	1961      	adds	r1, r4, r5
 8024ac6:	42a3      	cmp	r3, r4
 8024ac8:	6025      	str	r5, [r4, #0]
 8024aca:	bf18      	it	ne
 8024acc:	6059      	strne	r1, [r3, #4]
 8024ace:	6863      	ldr	r3, [r4, #4]
 8024ad0:	bf08      	it	eq
 8024ad2:	6031      	streq	r1, [r6, #0]
 8024ad4:	5162      	str	r2, [r4, r5]
 8024ad6:	604b      	str	r3, [r1, #4]
 8024ad8:	4638      	mov	r0, r7
 8024ada:	f104 060b 	add.w	r6, r4, #11
 8024ade:	f000 fea7 	bl	8025830 <__malloc_unlock>
 8024ae2:	f026 0607 	bic.w	r6, r6, #7
 8024ae6:	1d23      	adds	r3, r4, #4
 8024ae8:	1af2      	subs	r2, r6, r3
 8024aea:	d0b6      	beq.n	8024a5a <_malloc_r+0x22>
 8024aec:	1b9b      	subs	r3, r3, r6
 8024aee:	50a3      	str	r3, [r4, r2]
 8024af0:	e7b3      	b.n	8024a5a <_malloc_r+0x22>
 8024af2:	6862      	ldr	r2, [r4, #4]
 8024af4:	42a3      	cmp	r3, r4
 8024af6:	bf0c      	ite	eq
 8024af8:	6032      	streq	r2, [r6, #0]
 8024afa:	605a      	strne	r2, [r3, #4]
 8024afc:	e7ec      	b.n	8024ad8 <_malloc_r+0xa0>
 8024afe:	4623      	mov	r3, r4
 8024b00:	6864      	ldr	r4, [r4, #4]
 8024b02:	e7b2      	b.n	8024a6a <_malloc_r+0x32>
 8024b04:	4634      	mov	r4, r6
 8024b06:	6876      	ldr	r6, [r6, #4]
 8024b08:	e7b9      	b.n	8024a7e <_malloc_r+0x46>
 8024b0a:	230c      	movs	r3, #12
 8024b0c:	603b      	str	r3, [r7, #0]
 8024b0e:	4638      	mov	r0, r7
 8024b10:	f000 fe8e 	bl	8025830 <__malloc_unlock>
 8024b14:	e7a1      	b.n	8024a5a <_malloc_r+0x22>
 8024b16:	6025      	str	r5, [r4, #0]
 8024b18:	e7de      	b.n	8024ad8 <_malloc_r+0xa0>
 8024b1a:	bf00      	nop
 8024b1c:	24041c0c 	.word	0x24041c0c

08024b20 <__sfputc_r>:
 8024b20:	6893      	ldr	r3, [r2, #8]
 8024b22:	3b01      	subs	r3, #1
 8024b24:	2b00      	cmp	r3, #0
 8024b26:	b410      	push	{r4}
 8024b28:	6093      	str	r3, [r2, #8]
 8024b2a:	da08      	bge.n	8024b3e <__sfputc_r+0x1e>
 8024b2c:	6994      	ldr	r4, [r2, #24]
 8024b2e:	42a3      	cmp	r3, r4
 8024b30:	db01      	blt.n	8024b36 <__sfputc_r+0x16>
 8024b32:	290a      	cmp	r1, #10
 8024b34:	d103      	bne.n	8024b3e <__sfputc_r+0x1e>
 8024b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b3a:	f000 bbf5 	b.w	8025328 <__swbuf_r>
 8024b3e:	6813      	ldr	r3, [r2, #0]
 8024b40:	1c58      	adds	r0, r3, #1
 8024b42:	6010      	str	r0, [r2, #0]
 8024b44:	7019      	strb	r1, [r3, #0]
 8024b46:	4608      	mov	r0, r1
 8024b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b4c:	4770      	bx	lr

08024b4e <__sfputs_r>:
 8024b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b50:	4606      	mov	r6, r0
 8024b52:	460f      	mov	r7, r1
 8024b54:	4614      	mov	r4, r2
 8024b56:	18d5      	adds	r5, r2, r3
 8024b58:	42ac      	cmp	r4, r5
 8024b5a:	d101      	bne.n	8024b60 <__sfputs_r+0x12>
 8024b5c:	2000      	movs	r0, #0
 8024b5e:	e007      	b.n	8024b70 <__sfputs_r+0x22>
 8024b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024b64:	463a      	mov	r2, r7
 8024b66:	4630      	mov	r0, r6
 8024b68:	f7ff ffda 	bl	8024b20 <__sfputc_r>
 8024b6c:	1c43      	adds	r3, r0, #1
 8024b6e:	d1f3      	bne.n	8024b58 <__sfputs_r+0xa>
 8024b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024b74 <_vfiprintf_r>:
 8024b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b78:	460d      	mov	r5, r1
 8024b7a:	b09d      	sub	sp, #116	; 0x74
 8024b7c:	4614      	mov	r4, r2
 8024b7e:	4698      	mov	r8, r3
 8024b80:	4606      	mov	r6, r0
 8024b82:	b118      	cbz	r0, 8024b8c <_vfiprintf_r+0x18>
 8024b84:	6983      	ldr	r3, [r0, #24]
 8024b86:	b90b      	cbnz	r3, 8024b8c <_vfiprintf_r+0x18>
 8024b88:	f7ff fdec 	bl	8024764 <__sinit>
 8024b8c:	4b89      	ldr	r3, [pc, #548]	; (8024db4 <_vfiprintf_r+0x240>)
 8024b8e:	429d      	cmp	r5, r3
 8024b90:	d11b      	bne.n	8024bca <_vfiprintf_r+0x56>
 8024b92:	6875      	ldr	r5, [r6, #4]
 8024b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b96:	07d9      	lsls	r1, r3, #31
 8024b98:	d405      	bmi.n	8024ba6 <_vfiprintf_r+0x32>
 8024b9a:	89ab      	ldrh	r3, [r5, #12]
 8024b9c:	059a      	lsls	r2, r3, #22
 8024b9e:	d402      	bmi.n	8024ba6 <_vfiprintf_r+0x32>
 8024ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024ba2:	f7ff feb4 	bl	802490e <__retarget_lock_acquire_recursive>
 8024ba6:	89ab      	ldrh	r3, [r5, #12]
 8024ba8:	071b      	lsls	r3, r3, #28
 8024baa:	d501      	bpl.n	8024bb0 <_vfiprintf_r+0x3c>
 8024bac:	692b      	ldr	r3, [r5, #16]
 8024bae:	b9eb      	cbnz	r3, 8024bec <_vfiprintf_r+0x78>
 8024bb0:	4629      	mov	r1, r5
 8024bb2:	4630      	mov	r0, r6
 8024bb4:	f000 fc1c 	bl	80253f0 <__swsetup_r>
 8024bb8:	b1c0      	cbz	r0, 8024bec <_vfiprintf_r+0x78>
 8024bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024bbc:	07dc      	lsls	r4, r3, #31
 8024bbe:	d50e      	bpl.n	8024bde <_vfiprintf_r+0x6a>
 8024bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8024bc4:	b01d      	add	sp, #116	; 0x74
 8024bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bca:	4b7b      	ldr	r3, [pc, #492]	; (8024db8 <_vfiprintf_r+0x244>)
 8024bcc:	429d      	cmp	r5, r3
 8024bce:	d101      	bne.n	8024bd4 <_vfiprintf_r+0x60>
 8024bd0:	68b5      	ldr	r5, [r6, #8]
 8024bd2:	e7df      	b.n	8024b94 <_vfiprintf_r+0x20>
 8024bd4:	4b79      	ldr	r3, [pc, #484]	; (8024dbc <_vfiprintf_r+0x248>)
 8024bd6:	429d      	cmp	r5, r3
 8024bd8:	bf08      	it	eq
 8024bda:	68f5      	ldreq	r5, [r6, #12]
 8024bdc:	e7da      	b.n	8024b94 <_vfiprintf_r+0x20>
 8024bde:	89ab      	ldrh	r3, [r5, #12]
 8024be0:	0598      	lsls	r0, r3, #22
 8024be2:	d4ed      	bmi.n	8024bc0 <_vfiprintf_r+0x4c>
 8024be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024be6:	f7ff fe94 	bl	8024912 <__retarget_lock_release_recursive>
 8024bea:	e7e9      	b.n	8024bc0 <_vfiprintf_r+0x4c>
 8024bec:	2300      	movs	r3, #0
 8024bee:	9309      	str	r3, [sp, #36]	; 0x24
 8024bf0:	2320      	movs	r3, #32
 8024bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8024bfa:	2330      	movs	r3, #48	; 0x30
 8024bfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024dc0 <_vfiprintf_r+0x24c>
 8024c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024c04:	f04f 0901 	mov.w	r9, #1
 8024c08:	4623      	mov	r3, r4
 8024c0a:	469a      	mov	sl, r3
 8024c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024c10:	b10a      	cbz	r2, 8024c16 <_vfiprintf_r+0xa2>
 8024c12:	2a25      	cmp	r2, #37	; 0x25
 8024c14:	d1f9      	bne.n	8024c0a <_vfiprintf_r+0x96>
 8024c16:	ebba 0b04 	subs.w	fp, sl, r4
 8024c1a:	d00b      	beq.n	8024c34 <_vfiprintf_r+0xc0>
 8024c1c:	465b      	mov	r3, fp
 8024c1e:	4622      	mov	r2, r4
 8024c20:	4629      	mov	r1, r5
 8024c22:	4630      	mov	r0, r6
 8024c24:	f7ff ff93 	bl	8024b4e <__sfputs_r>
 8024c28:	3001      	adds	r0, #1
 8024c2a:	f000 80aa 	beq.w	8024d82 <_vfiprintf_r+0x20e>
 8024c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c30:	445a      	add	r2, fp
 8024c32:	9209      	str	r2, [sp, #36]	; 0x24
 8024c34:	f89a 3000 	ldrb.w	r3, [sl]
 8024c38:	2b00      	cmp	r3, #0
 8024c3a:	f000 80a2 	beq.w	8024d82 <_vfiprintf_r+0x20e>
 8024c3e:	2300      	movs	r3, #0
 8024c40:	f04f 32ff 	mov.w	r2, #4294967295
 8024c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024c48:	f10a 0a01 	add.w	sl, sl, #1
 8024c4c:	9304      	str	r3, [sp, #16]
 8024c4e:	9307      	str	r3, [sp, #28]
 8024c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024c54:	931a      	str	r3, [sp, #104]	; 0x68
 8024c56:	4654      	mov	r4, sl
 8024c58:	2205      	movs	r2, #5
 8024c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c5e:	4858      	ldr	r0, [pc, #352]	; (8024dc0 <_vfiprintf_r+0x24c>)
 8024c60:	f7db fb3e 	bl	80002e0 <memchr>
 8024c64:	9a04      	ldr	r2, [sp, #16]
 8024c66:	b9d8      	cbnz	r0, 8024ca0 <_vfiprintf_r+0x12c>
 8024c68:	06d1      	lsls	r1, r2, #27
 8024c6a:	bf44      	itt	mi
 8024c6c:	2320      	movmi	r3, #32
 8024c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c72:	0713      	lsls	r3, r2, #28
 8024c74:	bf44      	itt	mi
 8024c76:	232b      	movmi	r3, #43	; 0x2b
 8024c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8024c80:	2b2a      	cmp	r3, #42	; 0x2a
 8024c82:	d015      	beq.n	8024cb0 <_vfiprintf_r+0x13c>
 8024c84:	9a07      	ldr	r2, [sp, #28]
 8024c86:	4654      	mov	r4, sl
 8024c88:	2000      	movs	r0, #0
 8024c8a:	f04f 0c0a 	mov.w	ip, #10
 8024c8e:	4621      	mov	r1, r4
 8024c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024c94:	3b30      	subs	r3, #48	; 0x30
 8024c96:	2b09      	cmp	r3, #9
 8024c98:	d94e      	bls.n	8024d38 <_vfiprintf_r+0x1c4>
 8024c9a:	b1b0      	cbz	r0, 8024cca <_vfiprintf_r+0x156>
 8024c9c:	9207      	str	r2, [sp, #28]
 8024c9e:	e014      	b.n	8024cca <_vfiprintf_r+0x156>
 8024ca0:	eba0 0308 	sub.w	r3, r0, r8
 8024ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8024ca8:	4313      	orrs	r3, r2
 8024caa:	9304      	str	r3, [sp, #16]
 8024cac:	46a2      	mov	sl, r4
 8024cae:	e7d2      	b.n	8024c56 <_vfiprintf_r+0xe2>
 8024cb0:	9b03      	ldr	r3, [sp, #12]
 8024cb2:	1d19      	adds	r1, r3, #4
 8024cb4:	681b      	ldr	r3, [r3, #0]
 8024cb6:	9103      	str	r1, [sp, #12]
 8024cb8:	2b00      	cmp	r3, #0
 8024cba:	bfbb      	ittet	lt
 8024cbc:	425b      	neglt	r3, r3
 8024cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8024cc2:	9307      	strge	r3, [sp, #28]
 8024cc4:	9307      	strlt	r3, [sp, #28]
 8024cc6:	bfb8      	it	lt
 8024cc8:	9204      	strlt	r2, [sp, #16]
 8024cca:	7823      	ldrb	r3, [r4, #0]
 8024ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8024cce:	d10c      	bne.n	8024cea <_vfiprintf_r+0x176>
 8024cd0:	7863      	ldrb	r3, [r4, #1]
 8024cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8024cd4:	d135      	bne.n	8024d42 <_vfiprintf_r+0x1ce>
 8024cd6:	9b03      	ldr	r3, [sp, #12]
 8024cd8:	1d1a      	adds	r2, r3, #4
 8024cda:	681b      	ldr	r3, [r3, #0]
 8024cdc:	9203      	str	r2, [sp, #12]
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	bfb8      	it	lt
 8024ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8024ce6:	3402      	adds	r4, #2
 8024ce8:	9305      	str	r3, [sp, #20]
 8024cea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024dd0 <_vfiprintf_r+0x25c>
 8024cee:	7821      	ldrb	r1, [r4, #0]
 8024cf0:	2203      	movs	r2, #3
 8024cf2:	4650      	mov	r0, sl
 8024cf4:	f7db faf4 	bl	80002e0 <memchr>
 8024cf8:	b140      	cbz	r0, 8024d0c <_vfiprintf_r+0x198>
 8024cfa:	2340      	movs	r3, #64	; 0x40
 8024cfc:	eba0 000a 	sub.w	r0, r0, sl
 8024d00:	fa03 f000 	lsl.w	r0, r3, r0
 8024d04:	9b04      	ldr	r3, [sp, #16]
 8024d06:	4303      	orrs	r3, r0
 8024d08:	3401      	adds	r4, #1
 8024d0a:	9304      	str	r3, [sp, #16]
 8024d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d10:	482c      	ldr	r0, [pc, #176]	; (8024dc4 <_vfiprintf_r+0x250>)
 8024d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024d16:	2206      	movs	r2, #6
 8024d18:	f7db fae2 	bl	80002e0 <memchr>
 8024d1c:	2800      	cmp	r0, #0
 8024d1e:	d03f      	beq.n	8024da0 <_vfiprintf_r+0x22c>
 8024d20:	4b29      	ldr	r3, [pc, #164]	; (8024dc8 <_vfiprintf_r+0x254>)
 8024d22:	bb1b      	cbnz	r3, 8024d6c <_vfiprintf_r+0x1f8>
 8024d24:	9b03      	ldr	r3, [sp, #12]
 8024d26:	3307      	adds	r3, #7
 8024d28:	f023 0307 	bic.w	r3, r3, #7
 8024d2c:	3308      	adds	r3, #8
 8024d2e:	9303      	str	r3, [sp, #12]
 8024d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d32:	443b      	add	r3, r7
 8024d34:	9309      	str	r3, [sp, #36]	; 0x24
 8024d36:	e767      	b.n	8024c08 <_vfiprintf_r+0x94>
 8024d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8024d3c:	460c      	mov	r4, r1
 8024d3e:	2001      	movs	r0, #1
 8024d40:	e7a5      	b.n	8024c8e <_vfiprintf_r+0x11a>
 8024d42:	2300      	movs	r3, #0
 8024d44:	3401      	adds	r4, #1
 8024d46:	9305      	str	r3, [sp, #20]
 8024d48:	4619      	mov	r1, r3
 8024d4a:	f04f 0c0a 	mov.w	ip, #10
 8024d4e:	4620      	mov	r0, r4
 8024d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d54:	3a30      	subs	r2, #48	; 0x30
 8024d56:	2a09      	cmp	r2, #9
 8024d58:	d903      	bls.n	8024d62 <_vfiprintf_r+0x1ee>
 8024d5a:	2b00      	cmp	r3, #0
 8024d5c:	d0c5      	beq.n	8024cea <_vfiprintf_r+0x176>
 8024d5e:	9105      	str	r1, [sp, #20]
 8024d60:	e7c3      	b.n	8024cea <_vfiprintf_r+0x176>
 8024d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8024d66:	4604      	mov	r4, r0
 8024d68:	2301      	movs	r3, #1
 8024d6a:	e7f0      	b.n	8024d4e <_vfiprintf_r+0x1da>
 8024d6c:	ab03      	add	r3, sp, #12
 8024d6e:	9300      	str	r3, [sp, #0]
 8024d70:	462a      	mov	r2, r5
 8024d72:	4b16      	ldr	r3, [pc, #88]	; (8024dcc <_vfiprintf_r+0x258>)
 8024d74:	a904      	add	r1, sp, #16
 8024d76:	4630      	mov	r0, r6
 8024d78:	f3af 8000 	nop.w
 8024d7c:	4607      	mov	r7, r0
 8024d7e:	1c78      	adds	r0, r7, #1
 8024d80:	d1d6      	bne.n	8024d30 <_vfiprintf_r+0x1bc>
 8024d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024d84:	07d9      	lsls	r1, r3, #31
 8024d86:	d405      	bmi.n	8024d94 <_vfiprintf_r+0x220>
 8024d88:	89ab      	ldrh	r3, [r5, #12]
 8024d8a:	059a      	lsls	r2, r3, #22
 8024d8c:	d402      	bmi.n	8024d94 <_vfiprintf_r+0x220>
 8024d8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024d90:	f7ff fdbf 	bl	8024912 <__retarget_lock_release_recursive>
 8024d94:	89ab      	ldrh	r3, [r5, #12]
 8024d96:	065b      	lsls	r3, r3, #25
 8024d98:	f53f af12 	bmi.w	8024bc0 <_vfiprintf_r+0x4c>
 8024d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024d9e:	e711      	b.n	8024bc4 <_vfiprintf_r+0x50>
 8024da0:	ab03      	add	r3, sp, #12
 8024da2:	9300      	str	r3, [sp, #0]
 8024da4:	462a      	mov	r2, r5
 8024da6:	4b09      	ldr	r3, [pc, #36]	; (8024dcc <_vfiprintf_r+0x258>)
 8024da8:	a904      	add	r1, sp, #16
 8024daa:	4630      	mov	r0, r6
 8024dac:	f000 f880 	bl	8024eb0 <_printf_i>
 8024db0:	e7e4      	b.n	8024d7c <_vfiprintf_r+0x208>
 8024db2:	bf00      	nop
 8024db4:	080290c0 	.word	0x080290c0
 8024db8:	080290e0 	.word	0x080290e0
 8024dbc:	080290a0 	.word	0x080290a0
 8024dc0:	08029104 	.word	0x08029104
 8024dc4:	0802910e 	.word	0x0802910e
 8024dc8:	00000000 	.word	0x00000000
 8024dcc:	08024b4f 	.word	0x08024b4f
 8024dd0:	0802910a 	.word	0x0802910a

08024dd4 <_printf_common>:
 8024dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024dd8:	4616      	mov	r6, r2
 8024dda:	4699      	mov	r9, r3
 8024ddc:	688a      	ldr	r2, [r1, #8]
 8024dde:	690b      	ldr	r3, [r1, #16]
 8024de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024de4:	4293      	cmp	r3, r2
 8024de6:	bfb8      	it	lt
 8024de8:	4613      	movlt	r3, r2
 8024dea:	6033      	str	r3, [r6, #0]
 8024dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024df0:	4607      	mov	r7, r0
 8024df2:	460c      	mov	r4, r1
 8024df4:	b10a      	cbz	r2, 8024dfa <_printf_common+0x26>
 8024df6:	3301      	adds	r3, #1
 8024df8:	6033      	str	r3, [r6, #0]
 8024dfa:	6823      	ldr	r3, [r4, #0]
 8024dfc:	0699      	lsls	r1, r3, #26
 8024dfe:	bf42      	ittt	mi
 8024e00:	6833      	ldrmi	r3, [r6, #0]
 8024e02:	3302      	addmi	r3, #2
 8024e04:	6033      	strmi	r3, [r6, #0]
 8024e06:	6825      	ldr	r5, [r4, #0]
 8024e08:	f015 0506 	ands.w	r5, r5, #6
 8024e0c:	d106      	bne.n	8024e1c <_printf_common+0x48>
 8024e0e:	f104 0a19 	add.w	sl, r4, #25
 8024e12:	68e3      	ldr	r3, [r4, #12]
 8024e14:	6832      	ldr	r2, [r6, #0]
 8024e16:	1a9b      	subs	r3, r3, r2
 8024e18:	42ab      	cmp	r3, r5
 8024e1a:	dc26      	bgt.n	8024e6a <_printf_common+0x96>
 8024e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024e20:	1e13      	subs	r3, r2, #0
 8024e22:	6822      	ldr	r2, [r4, #0]
 8024e24:	bf18      	it	ne
 8024e26:	2301      	movne	r3, #1
 8024e28:	0692      	lsls	r2, r2, #26
 8024e2a:	d42b      	bmi.n	8024e84 <_printf_common+0xb0>
 8024e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024e30:	4649      	mov	r1, r9
 8024e32:	4638      	mov	r0, r7
 8024e34:	47c0      	blx	r8
 8024e36:	3001      	adds	r0, #1
 8024e38:	d01e      	beq.n	8024e78 <_printf_common+0xa4>
 8024e3a:	6823      	ldr	r3, [r4, #0]
 8024e3c:	68e5      	ldr	r5, [r4, #12]
 8024e3e:	6832      	ldr	r2, [r6, #0]
 8024e40:	f003 0306 	and.w	r3, r3, #6
 8024e44:	2b04      	cmp	r3, #4
 8024e46:	bf08      	it	eq
 8024e48:	1aad      	subeq	r5, r5, r2
 8024e4a:	68a3      	ldr	r3, [r4, #8]
 8024e4c:	6922      	ldr	r2, [r4, #16]
 8024e4e:	bf0c      	ite	eq
 8024e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024e54:	2500      	movne	r5, #0
 8024e56:	4293      	cmp	r3, r2
 8024e58:	bfc4      	itt	gt
 8024e5a:	1a9b      	subgt	r3, r3, r2
 8024e5c:	18ed      	addgt	r5, r5, r3
 8024e5e:	2600      	movs	r6, #0
 8024e60:	341a      	adds	r4, #26
 8024e62:	42b5      	cmp	r5, r6
 8024e64:	d11a      	bne.n	8024e9c <_printf_common+0xc8>
 8024e66:	2000      	movs	r0, #0
 8024e68:	e008      	b.n	8024e7c <_printf_common+0xa8>
 8024e6a:	2301      	movs	r3, #1
 8024e6c:	4652      	mov	r2, sl
 8024e6e:	4649      	mov	r1, r9
 8024e70:	4638      	mov	r0, r7
 8024e72:	47c0      	blx	r8
 8024e74:	3001      	adds	r0, #1
 8024e76:	d103      	bne.n	8024e80 <_printf_common+0xac>
 8024e78:	f04f 30ff 	mov.w	r0, #4294967295
 8024e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024e80:	3501      	adds	r5, #1
 8024e82:	e7c6      	b.n	8024e12 <_printf_common+0x3e>
 8024e84:	18e1      	adds	r1, r4, r3
 8024e86:	1c5a      	adds	r2, r3, #1
 8024e88:	2030      	movs	r0, #48	; 0x30
 8024e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024e8e:	4422      	add	r2, r4
 8024e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024e98:	3302      	adds	r3, #2
 8024e9a:	e7c7      	b.n	8024e2c <_printf_common+0x58>
 8024e9c:	2301      	movs	r3, #1
 8024e9e:	4622      	mov	r2, r4
 8024ea0:	4649      	mov	r1, r9
 8024ea2:	4638      	mov	r0, r7
 8024ea4:	47c0      	blx	r8
 8024ea6:	3001      	adds	r0, #1
 8024ea8:	d0e6      	beq.n	8024e78 <_printf_common+0xa4>
 8024eaa:	3601      	adds	r6, #1
 8024eac:	e7d9      	b.n	8024e62 <_printf_common+0x8e>
	...

08024eb0 <_printf_i>:
 8024eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024eb4:	7e0f      	ldrb	r7, [r1, #24]
 8024eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024eb8:	2f78      	cmp	r7, #120	; 0x78
 8024eba:	4691      	mov	r9, r2
 8024ebc:	4680      	mov	r8, r0
 8024ebe:	460c      	mov	r4, r1
 8024ec0:	469a      	mov	sl, r3
 8024ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024ec6:	d807      	bhi.n	8024ed8 <_printf_i+0x28>
 8024ec8:	2f62      	cmp	r7, #98	; 0x62
 8024eca:	d80a      	bhi.n	8024ee2 <_printf_i+0x32>
 8024ecc:	2f00      	cmp	r7, #0
 8024ece:	f000 80d8 	beq.w	8025082 <_printf_i+0x1d2>
 8024ed2:	2f58      	cmp	r7, #88	; 0x58
 8024ed4:	f000 80a3 	beq.w	802501e <_printf_i+0x16e>
 8024ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024ee0:	e03a      	b.n	8024f58 <_printf_i+0xa8>
 8024ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024ee6:	2b15      	cmp	r3, #21
 8024ee8:	d8f6      	bhi.n	8024ed8 <_printf_i+0x28>
 8024eea:	a101      	add	r1, pc, #4	; (adr r1, 8024ef0 <_printf_i+0x40>)
 8024eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024ef0:	08024f49 	.word	0x08024f49
 8024ef4:	08024f5d 	.word	0x08024f5d
 8024ef8:	08024ed9 	.word	0x08024ed9
 8024efc:	08024ed9 	.word	0x08024ed9
 8024f00:	08024ed9 	.word	0x08024ed9
 8024f04:	08024ed9 	.word	0x08024ed9
 8024f08:	08024f5d 	.word	0x08024f5d
 8024f0c:	08024ed9 	.word	0x08024ed9
 8024f10:	08024ed9 	.word	0x08024ed9
 8024f14:	08024ed9 	.word	0x08024ed9
 8024f18:	08024ed9 	.word	0x08024ed9
 8024f1c:	08025069 	.word	0x08025069
 8024f20:	08024f8d 	.word	0x08024f8d
 8024f24:	0802504b 	.word	0x0802504b
 8024f28:	08024ed9 	.word	0x08024ed9
 8024f2c:	08024ed9 	.word	0x08024ed9
 8024f30:	0802508b 	.word	0x0802508b
 8024f34:	08024ed9 	.word	0x08024ed9
 8024f38:	08024f8d 	.word	0x08024f8d
 8024f3c:	08024ed9 	.word	0x08024ed9
 8024f40:	08024ed9 	.word	0x08024ed9
 8024f44:	08025053 	.word	0x08025053
 8024f48:	682b      	ldr	r3, [r5, #0]
 8024f4a:	1d1a      	adds	r2, r3, #4
 8024f4c:	681b      	ldr	r3, [r3, #0]
 8024f4e:	602a      	str	r2, [r5, #0]
 8024f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024f58:	2301      	movs	r3, #1
 8024f5a:	e0a3      	b.n	80250a4 <_printf_i+0x1f4>
 8024f5c:	6820      	ldr	r0, [r4, #0]
 8024f5e:	6829      	ldr	r1, [r5, #0]
 8024f60:	0606      	lsls	r6, r0, #24
 8024f62:	f101 0304 	add.w	r3, r1, #4
 8024f66:	d50a      	bpl.n	8024f7e <_printf_i+0xce>
 8024f68:	680e      	ldr	r6, [r1, #0]
 8024f6a:	602b      	str	r3, [r5, #0]
 8024f6c:	2e00      	cmp	r6, #0
 8024f6e:	da03      	bge.n	8024f78 <_printf_i+0xc8>
 8024f70:	232d      	movs	r3, #45	; 0x2d
 8024f72:	4276      	negs	r6, r6
 8024f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024f78:	485e      	ldr	r0, [pc, #376]	; (80250f4 <_printf_i+0x244>)
 8024f7a:	230a      	movs	r3, #10
 8024f7c:	e019      	b.n	8024fb2 <_printf_i+0x102>
 8024f7e:	680e      	ldr	r6, [r1, #0]
 8024f80:	602b      	str	r3, [r5, #0]
 8024f82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024f86:	bf18      	it	ne
 8024f88:	b236      	sxthne	r6, r6
 8024f8a:	e7ef      	b.n	8024f6c <_printf_i+0xbc>
 8024f8c:	682b      	ldr	r3, [r5, #0]
 8024f8e:	6820      	ldr	r0, [r4, #0]
 8024f90:	1d19      	adds	r1, r3, #4
 8024f92:	6029      	str	r1, [r5, #0]
 8024f94:	0601      	lsls	r1, r0, #24
 8024f96:	d501      	bpl.n	8024f9c <_printf_i+0xec>
 8024f98:	681e      	ldr	r6, [r3, #0]
 8024f9a:	e002      	b.n	8024fa2 <_printf_i+0xf2>
 8024f9c:	0646      	lsls	r6, r0, #25
 8024f9e:	d5fb      	bpl.n	8024f98 <_printf_i+0xe8>
 8024fa0:	881e      	ldrh	r6, [r3, #0]
 8024fa2:	4854      	ldr	r0, [pc, #336]	; (80250f4 <_printf_i+0x244>)
 8024fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8024fa6:	bf0c      	ite	eq
 8024fa8:	2308      	moveq	r3, #8
 8024faa:	230a      	movne	r3, #10
 8024fac:	2100      	movs	r1, #0
 8024fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024fb2:	6865      	ldr	r5, [r4, #4]
 8024fb4:	60a5      	str	r5, [r4, #8]
 8024fb6:	2d00      	cmp	r5, #0
 8024fb8:	bfa2      	ittt	ge
 8024fba:	6821      	ldrge	r1, [r4, #0]
 8024fbc:	f021 0104 	bicge.w	r1, r1, #4
 8024fc0:	6021      	strge	r1, [r4, #0]
 8024fc2:	b90e      	cbnz	r6, 8024fc8 <_printf_i+0x118>
 8024fc4:	2d00      	cmp	r5, #0
 8024fc6:	d04d      	beq.n	8025064 <_printf_i+0x1b4>
 8024fc8:	4615      	mov	r5, r2
 8024fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8024fce:	fb03 6711 	mls	r7, r3, r1, r6
 8024fd2:	5dc7      	ldrb	r7, [r0, r7]
 8024fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024fd8:	4637      	mov	r7, r6
 8024fda:	42bb      	cmp	r3, r7
 8024fdc:	460e      	mov	r6, r1
 8024fde:	d9f4      	bls.n	8024fca <_printf_i+0x11a>
 8024fe0:	2b08      	cmp	r3, #8
 8024fe2:	d10b      	bne.n	8024ffc <_printf_i+0x14c>
 8024fe4:	6823      	ldr	r3, [r4, #0]
 8024fe6:	07de      	lsls	r6, r3, #31
 8024fe8:	d508      	bpl.n	8024ffc <_printf_i+0x14c>
 8024fea:	6923      	ldr	r3, [r4, #16]
 8024fec:	6861      	ldr	r1, [r4, #4]
 8024fee:	4299      	cmp	r1, r3
 8024ff0:	bfde      	ittt	le
 8024ff2:	2330      	movle	r3, #48	; 0x30
 8024ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024ff8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024ffc:	1b52      	subs	r2, r2, r5
 8024ffe:	6122      	str	r2, [r4, #16]
 8025000:	f8cd a000 	str.w	sl, [sp]
 8025004:	464b      	mov	r3, r9
 8025006:	aa03      	add	r2, sp, #12
 8025008:	4621      	mov	r1, r4
 802500a:	4640      	mov	r0, r8
 802500c:	f7ff fee2 	bl	8024dd4 <_printf_common>
 8025010:	3001      	adds	r0, #1
 8025012:	d14c      	bne.n	80250ae <_printf_i+0x1fe>
 8025014:	f04f 30ff 	mov.w	r0, #4294967295
 8025018:	b004      	add	sp, #16
 802501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802501e:	4835      	ldr	r0, [pc, #212]	; (80250f4 <_printf_i+0x244>)
 8025020:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025024:	6829      	ldr	r1, [r5, #0]
 8025026:	6823      	ldr	r3, [r4, #0]
 8025028:	f851 6b04 	ldr.w	r6, [r1], #4
 802502c:	6029      	str	r1, [r5, #0]
 802502e:	061d      	lsls	r5, r3, #24
 8025030:	d514      	bpl.n	802505c <_printf_i+0x1ac>
 8025032:	07df      	lsls	r7, r3, #31
 8025034:	bf44      	itt	mi
 8025036:	f043 0320 	orrmi.w	r3, r3, #32
 802503a:	6023      	strmi	r3, [r4, #0]
 802503c:	b91e      	cbnz	r6, 8025046 <_printf_i+0x196>
 802503e:	6823      	ldr	r3, [r4, #0]
 8025040:	f023 0320 	bic.w	r3, r3, #32
 8025044:	6023      	str	r3, [r4, #0]
 8025046:	2310      	movs	r3, #16
 8025048:	e7b0      	b.n	8024fac <_printf_i+0xfc>
 802504a:	6823      	ldr	r3, [r4, #0]
 802504c:	f043 0320 	orr.w	r3, r3, #32
 8025050:	6023      	str	r3, [r4, #0]
 8025052:	2378      	movs	r3, #120	; 0x78
 8025054:	4828      	ldr	r0, [pc, #160]	; (80250f8 <_printf_i+0x248>)
 8025056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802505a:	e7e3      	b.n	8025024 <_printf_i+0x174>
 802505c:	0659      	lsls	r1, r3, #25
 802505e:	bf48      	it	mi
 8025060:	b2b6      	uxthmi	r6, r6
 8025062:	e7e6      	b.n	8025032 <_printf_i+0x182>
 8025064:	4615      	mov	r5, r2
 8025066:	e7bb      	b.n	8024fe0 <_printf_i+0x130>
 8025068:	682b      	ldr	r3, [r5, #0]
 802506a:	6826      	ldr	r6, [r4, #0]
 802506c:	6961      	ldr	r1, [r4, #20]
 802506e:	1d18      	adds	r0, r3, #4
 8025070:	6028      	str	r0, [r5, #0]
 8025072:	0635      	lsls	r5, r6, #24
 8025074:	681b      	ldr	r3, [r3, #0]
 8025076:	d501      	bpl.n	802507c <_printf_i+0x1cc>
 8025078:	6019      	str	r1, [r3, #0]
 802507a:	e002      	b.n	8025082 <_printf_i+0x1d2>
 802507c:	0670      	lsls	r0, r6, #25
 802507e:	d5fb      	bpl.n	8025078 <_printf_i+0x1c8>
 8025080:	8019      	strh	r1, [r3, #0]
 8025082:	2300      	movs	r3, #0
 8025084:	6123      	str	r3, [r4, #16]
 8025086:	4615      	mov	r5, r2
 8025088:	e7ba      	b.n	8025000 <_printf_i+0x150>
 802508a:	682b      	ldr	r3, [r5, #0]
 802508c:	1d1a      	adds	r2, r3, #4
 802508e:	602a      	str	r2, [r5, #0]
 8025090:	681d      	ldr	r5, [r3, #0]
 8025092:	6862      	ldr	r2, [r4, #4]
 8025094:	2100      	movs	r1, #0
 8025096:	4628      	mov	r0, r5
 8025098:	f7db f922 	bl	80002e0 <memchr>
 802509c:	b108      	cbz	r0, 80250a2 <_printf_i+0x1f2>
 802509e:	1b40      	subs	r0, r0, r5
 80250a0:	6060      	str	r0, [r4, #4]
 80250a2:	6863      	ldr	r3, [r4, #4]
 80250a4:	6123      	str	r3, [r4, #16]
 80250a6:	2300      	movs	r3, #0
 80250a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250ac:	e7a8      	b.n	8025000 <_printf_i+0x150>
 80250ae:	6923      	ldr	r3, [r4, #16]
 80250b0:	462a      	mov	r2, r5
 80250b2:	4649      	mov	r1, r9
 80250b4:	4640      	mov	r0, r8
 80250b6:	47d0      	blx	sl
 80250b8:	3001      	adds	r0, #1
 80250ba:	d0ab      	beq.n	8025014 <_printf_i+0x164>
 80250bc:	6823      	ldr	r3, [r4, #0]
 80250be:	079b      	lsls	r3, r3, #30
 80250c0:	d413      	bmi.n	80250ea <_printf_i+0x23a>
 80250c2:	68e0      	ldr	r0, [r4, #12]
 80250c4:	9b03      	ldr	r3, [sp, #12]
 80250c6:	4298      	cmp	r0, r3
 80250c8:	bfb8      	it	lt
 80250ca:	4618      	movlt	r0, r3
 80250cc:	e7a4      	b.n	8025018 <_printf_i+0x168>
 80250ce:	2301      	movs	r3, #1
 80250d0:	4632      	mov	r2, r6
 80250d2:	4649      	mov	r1, r9
 80250d4:	4640      	mov	r0, r8
 80250d6:	47d0      	blx	sl
 80250d8:	3001      	adds	r0, #1
 80250da:	d09b      	beq.n	8025014 <_printf_i+0x164>
 80250dc:	3501      	adds	r5, #1
 80250de:	68e3      	ldr	r3, [r4, #12]
 80250e0:	9903      	ldr	r1, [sp, #12]
 80250e2:	1a5b      	subs	r3, r3, r1
 80250e4:	42ab      	cmp	r3, r5
 80250e6:	dcf2      	bgt.n	80250ce <_printf_i+0x21e>
 80250e8:	e7eb      	b.n	80250c2 <_printf_i+0x212>
 80250ea:	2500      	movs	r5, #0
 80250ec:	f104 0619 	add.w	r6, r4, #25
 80250f0:	e7f5      	b.n	80250de <_printf_i+0x22e>
 80250f2:	bf00      	nop
 80250f4:	08029115 	.word	0x08029115
 80250f8:	08029126 	.word	0x08029126

080250fc <cleanup_glue>:
 80250fc:	b538      	push	{r3, r4, r5, lr}
 80250fe:	460c      	mov	r4, r1
 8025100:	6809      	ldr	r1, [r1, #0]
 8025102:	4605      	mov	r5, r0
 8025104:	b109      	cbz	r1, 802510a <cleanup_glue+0xe>
 8025106:	f7ff fff9 	bl	80250fc <cleanup_glue>
 802510a:	4621      	mov	r1, r4
 802510c:	4628      	mov	r0, r5
 802510e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025112:	f7ff bc25 	b.w	8024960 <_free_r>
	...

08025118 <_reclaim_reent>:
 8025118:	4b2c      	ldr	r3, [pc, #176]	; (80251cc <_reclaim_reent+0xb4>)
 802511a:	681b      	ldr	r3, [r3, #0]
 802511c:	4283      	cmp	r3, r0
 802511e:	b570      	push	{r4, r5, r6, lr}
 8025120:	4604      	mov	r4, r0
 8025122:	d051      	beq.n	80251c8 <_reclaim_reent+0xb0>
 8025124:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025126:	b143      	cbz	r3, 802513a <_reclaim_reent+0x22>
 8025128:	68db      	ldr	r3, [r3, #12]
 802512a:	2b00      	cmp	r3, #0
 802512c:	d14a      	bne.n	80251c4 <_reclaim_reent+0xac>
 802512e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025130:	6819      	ldr	r1, [r3, #0]
 8025132:	b111      	cbz	r1, 802513a <_reclaim_reent+0x22>
 8025134:	4620      	mov	r0, r4
 8025136:	f7ff fc13 	bl	8024960 <_free_r>
 802513a:	6961      	ldr	r1, [r4, #20]
 802513c:	b111      	cbz	r1, 8025144 <_reclaim_reent+0x2c>
 802513e:	4620      	mov	r0, r4
 8025140:	f7ff fc0e 	bl	8024960 <_free_r>
 8025144:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025146:	b111      	cbz	r1, 802514e <_reclaim_reent+0x36>
 8025148:	4620      	mov	r0, r4
 802514a:	f7ff fc09 	bl	8024960 <_free_r>
 802514e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8025150:	b111      	cbz	r1, 8025158 <_reclaim_reent+0x40>
 8025152:	4620      	mov	r0, r4
 8025154:	f7ff fc04 	bl	8024960 <_free_r>
 8025158:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802515a:	b111      	cbz	r1, 8025162 <_reclaim_reent+0x4a>
 802515c:	4620      	mov	r0, r4
 802515e:	f7ff fbff 	bl	8024960 <_free_r>
 8025162:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025164:	b111      	cbz	r1, 802516c <_reclaim_reent+0x54>
 8025166:	4620      	mov	r0, r4
 8025168:	f7ff fbfa 	bl	8024960 <_free_r>
 802516c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802516e:	b111      	cbz	r1, 8025176 <_reclaim_reent+0x5e>
 8025170:	4620      	mov	r0, r4
 8025172:	f7ff fbf5 	bl	8024960 <_free_r>
 8025176:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8025178:	b111      	cbz	r1, 8025180 <_reclaim_reent+0x68>
 802517a:	4620      	mov	r0, r4
 802517c:	f7ff fbf0 	bl	8024960 <_free_r>
 8025180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025182:	b111      	cbz	r1, 802518a <_reclaim_reent+0x72>
 8025184:	4620      	mov	r0, r4
 8025186:	f7ff fbeb 	bl	8024960 <_free_r>
 802518a:	69a3      	ldr	r3, [r4, #24]
 802518c:	b1e3      	cbz	r3, 80251c8 <_reclaim_reent+0xb0>
 802518e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8025190:	4620      	mov	r0, r4
 8025192:	4798      	blx	r3
 8025194:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8025196:	b1b9      	cbz	r1, 80251c8 <_reclaim_reent+0xb0>
 8025198:	4620      	mov	r0, r4
 802519a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802519e:	f7ff bfad 	b.w	80250fc <cleanup_glue>
 80251a2:	5949      	ldr	r1, [r1, r5]
 80251a4:	b941      	cbnz	r1, 80251b8 <_reclaim_reent+0xa0>
 80251a6:	3504      	adds	r5, #4
 80251a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80251aa:	2d80      	cmp	r5, #128	; 0x80
 80251ac:	68d9      	ldr	r1, [r3, #12]
 80251ae:	d1f8      	bne.n	80251a2 <_reclaim_reent+0x8a>
 80251b0:	4620      	mov	r0, r4
 80251b2:	f7ff fbd5 	bl	8024960 <_free_r>
 80251b6:	e7ba      	b.n	802512e <_reclaim_reent+0x16>
 80251b8:	680e      	ldr	r6, [r1, #0]
 80251ba:	4620      	mov	r0, r4
 80251bc:	f7ff fbd0 	bl	8024960 <_free_r>
 80251c0:	4631      	mov	r1, r6
 80251c2:	e7ef      	b.n	80251a4 <_reclaim_reent+0x8c>
 80251c4:	2500      	movs	r5, #0
 80251c6:	e7ef      	b.n	80251a8 <_reclaim_reent+0x90>
 80251c8:	bd70      	pop	{r4, r5, r6, pc}
 80251ca:	bf00      	nop
 80251cc:	240000b0 	.word	0x240000b0

080251d0 <_sbrk_r>:
 80251d0:	b538      	push	{r3, r4, r5, lr}
 80251d2:	4d06      	ldr	r5, [pc, #24]	; (80251ec <_sbrk_r+0x1c>)
 80251d4:	2300      	movs	r3, #0
 80251d6:	4604      	mov	r4, r0
 80251d8:	4608      	mov	r0, r1
 80251da:	602b      	str	r3, [r5, #0]
 80251dc:	f7dc f820 	bl	8001220 <_sbrk>
 80251e0:	1c43      	adds	r3, r0, #1
 80251e2:	d102      	bne.n	80251ea <_sbrk_r+0x1a>
 80251e4:	682b      	ldr	r3, [r5, #0]
 80251e6:	b103      	cbz	r3, 80251ea <_sbrk_r+0x1a>
 80251e8:	6023      	str	r3, [r4, #0]
 80251ea:	bd38      	pop	{r3, r4, r5, pc}
 80251ec:	24041d1c 	.word	0x24041d1c

080251f0 <_raise_r>:
 80251f0:	291f      	cmp	r1, #31
 80251f2:	b538      	push	{r3, r4, r5, lr}
 80251f4:	4604      	mov	r4, r0
 80251f6:	460d      	mov	r5, r1
 80251f8:	d904      	bls.n	8025204 <_raise_r+0x14>
 80251fa:	2316      	movs	r3, #22
 80251fc:	6003      	str	r3, [r0, #0]
 80251fe:	f04f 30ff 	mov.w	r0, #4294967295
 8025202:	bd38      	pop	{r3, r4, r5, pc}
 8025204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025206:	b112      	cbz	r2, 802520e <_raise_r+0x1e>
 8025208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802520c:	b94b      	cbnz	r3, 8025222 <_raise_r+0x32>
 802520e:	4620      	mov	r0, r4
 8025210:	f000 f830 	bl	8025274 <_getpid_r>
 8025214:	462a      	mov	r2, r5
 8025216:	4601      	mov	r1, r0
 8025218:	4620      	mov	r0, r4
 802521a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802521e:	f000 b817 	b.w	8025250 <_kill_r>
 8025222:	2b01      	cmp	r3, #1
 8025224:	d00a      	beq.n	802523c <_raise_r+0x4c>
 8025226:	1c59      	adds	r1, r3, #1
 8025228:	d103      	bne.n	8025232 <_raise_r+0x42>
 802522a:	2316      	movs	r3, #22
 802522c:	6003      	str	r3, [r0, #0]
 802522e:	2001      	movs	r0, #1
 8025230:	e7e7      	b.n	8025202 <_raise_r+0x12>
 8025232:	2400      	movs	r4, #0
 8025234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025238:	4628      	mov	r0, r5
 802523a:	4798      	blx	r3
 802523c:	2000      	movs	r0, #0
 802523e:	e7e0      	b.n	8025202 <_raise_r+0x12>

08025240 <raise>:
 8025240:	4b02      	ldr	r3, [pc, #8]	; (802524c <raise+0xc>)
 8025242:	4601      	mov	r1, r0
 8025244:	6818      	ldr	r0, [r3, #0]
 8025246:	f7ff bfd3 	b.w	80251f0 <_raise_r>
 802524a:	bf00      	nop
 802524c:	240000b0 	.word	0x240000b0

08025250 <_kill_r>:
 8025250:	b538      	push	{r3, r4, r5, lr}
 8025252:	4d07      	ldr	r5, [pc, #28]	; (8025270 <_kill_r+0x20>)
 8025254:	2300      	movs	r3, #0
 8025256:	4604      	mov	r4, r0
 8025258:	4608      	mov	r0, r1
 802525a:	4611      	mov	r1, r2
 802525c:	602b      	str	r3, [r5, #0]
 802525e:	f7db ff57 	bl	8001110 <_kill>
 8025262:	1c43      	adds	r3, r0, #1
 8025264:	d102      	bne.n	802526c <_kill_r+0x1c>
 8025266:	682b      	ldr	r3, [r5, #0]
 8025268:	b103      	cbz	r3, 802526c <_kill_r+0x1c>
 802526a:	6023      	str	r3, [r4, #0]
 802526c:	bd38      	pop	{r3, r4, r5, pc}
 802526e:	bf00      	nop
 8025270:	24041d1c 	.word	0x24041d1c

08025274 <_getpid_r>:
 8025274:	f7db bf44 	b.w	8001100 <_getpid>

08025278 <__sread>:
 8025278:	b510      	push	{r4, lr}
 802527a:	460c      	mov	r4, r1
 802527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025280:	f000 fadc 	bl	802583c <_read_r>
 8025284:	2800      	cmp	r0, #0
 8025286:	bfab      	itete	ge
 8025288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802528a:	89a3      	ldrhlt	r3, [r4, #12]
 802528c:	181b      	addge	r3, r3, r0
 802528e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025292:	bfac      	ite	ge
 8025294:	6563      	strge	r3, [r4, #84]	; 0x54
 8025296:	81a3      	strhlt	r3, [r4, #12]
 8025298:	bd10      	pop	{r4, pc}

0802529a <__swrite>:
 802529a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802529e:	461f      	mov	r7, r3
 80252a0:	898b      	ldrh	r3, [r1, #12]
 80252a2:	05db      	lsls	r3, r3, #23
 80252a4:	4605      	mov	r5, r0
 80252a6:	460c      	mov	r4, r1
 80252a8:	4616      	mov	r6, r2
 80252aa:	d505      	bpl.n	80252b8 <__swrite+0x1e>
 80252ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252b0:	2302      	movs	r3, #2
 80252b2:	2200      	movs	r2, #0
 80252b4:	f000 fa3e 	bl	8025734 <_lseek_r>
 80252b8:	89a3      	ldrh	r3, [r4, #12]
 80252ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80252be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80252c2:	81a3      	strh	r3, [r4, #12]
 80252c4:	4632      	mov	r2, r6
 80252c6:	463b      	mov	r3, r7
 80252c8:	4628      	mov	r0, r5
 80252ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80252ce:	f000 b87d 	b.w	80253cc <_write_r>

080252d2 <__sseek>:
 80252d2:	b510      	push	{r4, lr}
 80252d4:	460c      	mov	r4, r1
 80252d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252da:	f000 fa2b 	bl	8025734 <_lseek_r>
 80252de:	1c43      	adds	r3, r0, #1
 80252e0:	89a3      	ldrh	r3, [r4, #12]
 80252e2:	bf15      	itete	ne
 80252e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80252e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80252ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80252ee:	81a3      	strheq	r3, [r4, #12]
 80252f0:	bf18      	it	ne
 80252f2:	81a3      	strhne	r3, [r4, #12]
 80252f4:	bd10      	pop	{r4, pc}

080252f6 <__sclose>:
 80252f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252fa:	f000 b949 	b.w	8025590 <_close_r>

080252fe <strncmp>:
 80252fe:	b510      	push	{r4, lr}
 8025300:	b17a      	cbz	r2, 8025322 <strncmp+0x24>
 8025302:	4603      	mov	r3, r0
 8025304:	3901      	subs	r1, #1
 8025306:	1884      	adds	r4, r0, r2
 8025308:	f813 0b01 	ldrb.w	r0, [r3], #1
 802530c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025310:	4290      	cmp	r0, r2
 8025312:	d101      	bne.n	8025318 <strncmp+0x1a>
 8025314:	42a3      	cmp	r3, r4
 8025316:	d101      	bne.n	802531c <strncmp+0x1e>
 8025318:	1a80      	subs	r0, r0, r2
 802531a:	bd10      	pop	{r4, pc}
 802531c:	2800      	cmp	r0, #0
 802531e:	d1f3      	bne.n	8025308 <strncmp+0xa>
 8025320:	e7fa      	b.n	8025318 <strncmp+0x1a>
 8025322:	4610      	mov	r0, r2
 8025324:	e7f9      	b.n	802531a <strncmp+0x1c>
	...

08025328 <__swbuf_r>:
 8025328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802532a:	460e      	mov	r6, r1
 802532c:	4614      	mov	r4, r2
 802532e:	4605      	mov	r5, r0
 8025330:	b118      	cbz	r0, 802533a <__swbuf_r+0x12>
 8025332:	6983      	ldr	r3, [r0, #24]
 8025334:	b90b      	cbnz	r3, 802533a <__swbuf_r+0x12>
 8025336:	f7ff fa15 	bl	8024764 <__sinit>
 802533a:	4b21      	ldr	r3, [pc, #132]	; (80253c0 <__swbuf_r+0x98>)
 802533c:	429c      	cmp	r4, r3
 802533e:	d12b      	bne.n	8025398 <__swbuf_r+0x70>
 8025340:	686c      	ldr	r4, [r5, #4]
 8025342:	69a3      	ldr	r3, [r4, #24]
 8025344:	60a3      	str	r3, [r4, #8]
 8025346:	89a3      	ldrh	r3, [r4, #12]
 8025348:	071a      	lsls	r2, r3, #28
 802534a:	d52f      	bpl.n	80253ac <__swbuf_r+0x84>
 802534c:	6923      	ldr	r3, [r4, #16]
 802534e:	b36b      	cbz	r3, 80253ac <__swbuf_r+0x84>
 8025350:	6923      	ldr	r3, [r4, #16]
 8025352:	6820      	ldr	r0, [r4, #0]
 8025354:	1ac0      	subs	r0, r0, r3
 8025356:	6963      	ldr	r3, [r4, #20]
 8025358:	b2f6      	uxtb	r6, r6
 802535a:	4283      	cmp	r3, r0
 802535c:	4637      	mov	r7, r6
 802535e:	dc04      	bgt.n	802536a <__swbuf_r+0x42>
 8025360:	4621      	mov	r1, r4
 8025362:	4628      	mov	r0, r5
 8025364:	f000 f9aa 	bl	80256bc <_fflush_r>
 8025368:	bb30      	cbnz	r0, 80253b8 <__swbuf_r+0x90>
 802536a:	68a3      	ldr	r3, [r4, #8]
 802536c:	3b01      	subs	r3, #1
 802536e:	60a3      	str	r3, [r4, #8]
 8025370:	6823      	ldr	r3, [r4, #0]
 8025372:	1c5a      	adds	r2, r3, #1
 8025374:	6022      	str	r2, [r4, #0]
 8025376:	701e      	strb	r6, [r3, #0]
 8025378:	6963      	ldr	r3, [r4, #20]
 802537a:	3001      	adds	r0, #1
 802537c:	4283      	cmp	r3, r0
 802537e:	d004      	beq.n	802538a <__swbuf_r+0x62>
 8025380:	89a3      	ldrh	r3, [r4, #12]
 8025382:	07db      	lsls	r3, r3, #31
 8025384:	d506      	bpl.n	8025394 <__swbuf_r+0x6c>
 8025386:	2e0a      	cmp	r6, #10
 8025388:	d104      	bne.n	8025394 <__swbuf_r+0x6c>
 802538a:	4621      	mov	r1, r4
 802538c:	4628      	mov	r0, r5
 802538e:	f000 f995 	bl	80256bc <_fflush_r>
 8025392:	b988      	cbnz	r0, 80253b8 <__swbuf_r+0x90>
 8025394:	4638      	mov	r0, r7
 8025396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025398:	4b0a      	ldr	r3, [pc, #40]	; (80253c4 <__swbuf_r+0x9c>)
 802539a:	429c      	cmp	r4, r3
 802539c:	d101      	bne.n	80253a2 <__swbuf_r+0x7a>
 802539e:	68ac      	ldr	r4, [r5, #8]
 80253a0:	e7cf      	b.n	8025342 <__swbuf_r+0x1a>
 80253a2:	4b09      	ldr	r3, [pc, #36]	; (80253c8 <__swbuf_r+0xa0>)
 80253a4:	429c      	cmp	r4, r3
 80253a6:	bf08      	it	eq
 80253a8:	68ec      	ldreq	r4, [r5, #12]
 80253aa:	e7ca      	b.n	8025342 <__swbuf_r+0x1a>
 80253ac:	4621      	mov	r1, r4
 80253ae:	4628      	mov	r0, r5
 80253b0:	f000 f81e 	bl	80253f0 <__swsetup_r>
 80253b4:	2800      	cmp	r0, #0
 80253b6:	d0cb      	beq.n	8025350 <__swbuf_r+0x28>
 80253b8:	f04f 37ff 	mov.w	r7, #4294967295
 80253bc:	e7ea      	b.n	8025394 <__swbuf_r+0x6c>
 80253be:	bf00      	nop
 80253c0:	080290c0 	.word	0x080290c0
 80253c4:	080290e0 	.word	0x080290e0
 80253c8:	080290a0 	.word	0x080290a0

080253cc <_write_r>:
 80253cc:	b538      	push	{r3, r4, r5, lr}
 80253ce:	4d07      	ldr	r5, [pc, #28]	; (80253ec <_write_r+0x20>)
 80253d0:	4604      	mov	r4, r0
 80253d2:	4608      	mov	r0, r1
 80253d4:	4611      	mov	r1, r2
 80253d6:	2200      	movs	r2, #0
 80253d8:	602a      	str	r2, [r5, #0]
 80253da:	461a      	mov	r2, r3
 80253dc:	f7db fecf 	bl	800117e <_write>
 80253e0:	1c43      	adds	r3, r0, #1
 80253e2:	d102      	bne.n	80253ea <_write_r+0x1e>
 80253e4:	682b      	ldr	r3, [r5, #0]
 80253e6:	b103      	cbz	r3, 80253ea <_write_r+0x1e>
 80253e8:	6023      	str	r3, [r4, #0]
 80253ea:	bd38      	pop	{r3, r4, r5, pc}
 80253ec:	24041d1c 	.word	0x24041d1c

080253f0 <__swsetup_r>:
 80253f0:	4b32      	ldr	r3, [pc, #200]	; (80254bc <__swsetup_r+0xcc>)
 80253f2:	b570      	push	{r4, r5, r6, lr}
 80253f4:	681d      	ldr	r5, [r3, #0]
 80253f6:	4606      	mov	r6, r0
 80253f8:	460c      	mov	r4, r1
 80253fa:	b125      	cbz	r5, 8025406 <__swsetup_r+0x16>
 80253fc:	69ab      	ldr	r3, [r5, #24]
 80253fe:	b913      	cbnz	r3, 8025406 <__swsetup_r+0x16>
 8025400:	4628      	mov	r0, r5
 8025402:	f7ff f9af 	bl	8024764 <__sinit>
 8025406:	4b2e      	ldr	r3, [pc, #184]	; (80254c0 <__swsetup_r+0xd0>)
 8025408:	429c      	cmp	r4, r3
 802540a:	d10f      	bne.n	802542c <__swsetup_r+0x3c>
 802540c:	686c      	ldr	r4, [r5, #4]
 802540e:	89a3      	ldrh	r3, [r4, #12]
 8025410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025414:	0719      	lsls	r1, r3, #28
 8025416:	d42c      	bmi.n	8025472 <__swsetup_r+0x82>
 8025418:	06dd      	lsls	r5, r3, #27
 802541a:	d411      	bmi.n	8025440 <__swsetup_r+0x50>
 802541c:	2309      	movs	r3, #9
 802541e:	6033      	str	r3, [r6, #0]
 8025420:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025424:	81a3      	strh	r3, [r4, #12]
 8025426:	f04f 30ff 	mov.w	r0, #4294967295
 802542a:	e03e      	b.n	80254aa <__swsetup_r+0xba>
 802542c:	4b25      	ldr	r3, [pc, #148]	; (80254c4 <__swsetup_r+0xd4>)
 802542e:	429c      	cmp	r4, r3
 8025430:	d101      	bne.n	8025436 <__swsetup_r+0x46>
 8025432:	68ac      	ldr	r4, [r5, #8]
 8025434:	e7eb      	b.n	802540e <__swsetup_r+0x1e>
 8025436:	4b24      	ldr	r3, [pc, #144]	; (80254c8 <__swsetup_r+0xd8>)
 8025438:	429c      	cmp	r4, r3
 802543a:	bf08      	it	eq
 802543c:	68ec      	ldreq	r4, [r5, #12]
 802543e:	e7e6      	b.n	802540e <__swsetup_r+0x1e>
 8025440:	0758      	lsls	r0, r3, #29
 8025442:	d512      	bpl.n	802546a <__swsetup_r+0x7a>
 8025444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025446:	b141      	cbz	r1, 802545a <__swsetup_r+0x6a>
 8025448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802544c:	4299      	cmp	r1, r3
 802544e:	d002      	beq.n	8025456 <__swsetup_r+0x66>
 8025450:	4630      	mov	r0, r6
 8025452:	f7ff fa85 	bl	8024960 <_free_r>
 8025456:	2300      	movs	r3, #0
 8025458:	6363      	str	r3, [r4, #52]	; 0x34
 802545a:	89a3      	ldrh	r3, [r4, #12]
 802545c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025460:	81a3      	strh	r3, [r4, #12]
 8025462:	2300      	movs	r3, #0
 8025464:	6063      	str	r3, [r4, #4]
 8025466:	6923      	ldr	r3, [r4, #16]
 8025468:	6023      	str	r3, [r4, #0]
 802546a:	89a3      	ldrh	r3, [r4, #12]
 802546c:	f043 0308 	orr.w	r3, r3, #8
 8025470:	81a3      	strh	r3, [r4, #12]
 8025472:	6923      	ldr	r3, [r4, #16]
 8025474:	b94b      	cbnz	r3, 802548a <__swsetup_r+0x9a>
 8025476:	89a3      	ldrh	r3, [r4, #12]
 8025478:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025480:	d003      	beq.n	802548a <__swsetup_r+0x9a>
 8025482:	4621      	mov	r1, r4
 8025484:	4630      	mov	r0, r6
 8025486:	f000 f98d 	bl	80257a4 <__smakebuf_r>
 802548a:	89a0      	ldrh	r0, [r4, #12]
 802548c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025490:	f010 0301 	ands.w	r3, r0, #1
 8025494:	d00a      	beq.n	80254ac <__swsetup_r+0xbc>
 8025496:	2300      	movs	r3, #0
 8025498:	60a3      	str	r3, [r4, #8]
 802549a:	6963      	ldr	r3, [r4, #20]
 802549c:	425b      	negs	r3, r3
 802549e:	61a3      	str	r3, [r4, #24]
 80254a0:	6923      	ldr	r3, [r4, #16]
 80254a2:	b943      	cbnz	r3, 80254b6 <__swsetup_r+0xc6>
 80254a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80254a8:	d1ba      	bne.n	8025420 <__swsetup_r+0x30>
 80254aa:	bd70      	pop	{r4, r5, r6, pc}
 80254ac:	0781      	lsls	r1, r0, #30
 80254ae:	bf58      	it	pl
 80254b0:	6963      	ldrpl	r3, [r4, #20]
 80254b2:	60a3      	str	r3, [r4, #8]
 80254b4:	e7f4      	b.n	80254a0 <__swsetup_r+0xb0>
 80254b6:	2000      	movs	r0, #0
 80254b8:	e7f7      	b.n	80254aa <__swsetup_r+0xba>
 80254ba:	bf00      	nop
 80254bc:	240000b0 	.word	0x240000b0
 80254c0:	080290c0 	.word	0x080290c0
 80254c4:	080290e0 	.word	0x080290e0
 80254c8:	080290a0 	.word	0x080290a0

080254cc <__register_exitproc>:
 80254cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80254d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802558c <__register_exitproc+0xc0>
 80254d4:	4606      	mov	r6, r0
 80254d6:	f8d8 0000 	ldr.w	r0, [r8]
 80254da:	461f      	mov	r7, r3
 80254dc:	460d      	mov	r5, r1
 80254de:	4691      	mov	r9, r2
 80254e0:	f7ff fa15 	bl	802490e <__retarget_lock_acquire_recursive>
 80254e4:	4b25      	ldr	r3, [pc, #148]	; (802557c <__register_exitproc+0xb0>)
 80254e6:	681c      	ldr	r4, [r3, #0]
 80254e8:	b934      	cbnz	r4, 80254f8 <__register_exitproc+0x2c>
 80254ea:	4c25      	ldr	r4, [pc, #148]	; (8025580 <__register_exitproc+0xb4>)
 80254ec:	601c      	str	r4, [r3, #0]
 80254ee:	4b25      	ldr	r3, [pc, #148]	; (8025584 <__register_exitproc+0xb8>)
 80254f0:	b113      	cbz	r3, 80254f8 <__register_exitproc+0x2c>
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80254f8:	6863      	ldr	r3, [r4, #4]
 80254fa:	2b1f      	cmp	r3, #31
 80254fc:	dd07      	ble.n	802550e <__register_exitproc+0x42>
 80254fe:	f8d8 0000 	ldr.w	r0, [r8]
 8025502:	f7ff fa06 	bl	8024912 <__retarget_lock_release_recursive>
 8025506:	f04f 30ff 	mov.w	r0, #4294967295
 802550a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802550e:	b34e      	cbz	r6, 8025564 <__register_exitproc+0x98>
 8025510:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025514:	b988      	cbnz	r0, 802553a <__register_exitproc+0x6e>
 8025516:	4b1c      	ldr	r3, [pc, #112]	; (8025588 <__register_exitproc+0xbc>)
 8025518:	b923      	cbnz	r3, 8025524 <__register_exitproc+0x58>
 802551a:	f8d8 0000 	ldr.w	r0, [r8]
 802551e:	f7ff f9f7 	bl	8024910 <__retarget_lock_release>
 8025522:	e7f0      	b.n	8025506 <__register_exitproc+0x3a>
 8025524:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025528:	f7ff f9f4 	bl	8024914 <malloc>
 802552c:	2800      	cmp	r0, #0
 802552e:	d0f4      	beq.n	802551a <__register_exitproc+0x4e>
 8025530:	2300      	movs	r3, #0
 8025532:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8025536:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802553a:	6863      	ldr	r3, [r4, #4]
 802553c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025540:	2201      	movs	r2, #1
 8025542:	409a      	lsls	r2, r3
 8025544:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025548:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802554c:	4313      	orrs	r3, r2
 802554e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025552:	2e02      	cmp	r6, #2
 8025554:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8025558:	bf02      	ittt	eq
 802555a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802555e:	4313      	orreq	r3, r2
 8025560:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025564:	6863      	ldr	r3, [r4, #4]
 8025566:	f8d8 0000 	ldr.w	r0, [r8]
 802556a:	1c5a      	adds	r2, r3, #1
 802556c:	3302      	adds	r3, #2
 802556e:	6062      	str	r2, [r4, #4]
 8025570:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025574:	f7ff f9cd 	bl	8024912 <__retarget_lock_release_recursive>
 8025578:	2000      	movs	r0, #0
 802557a:	e7c6      	b.n	802550a <__register_exitproc+0x3e>
 802557c:	24041dac 	.word	0x24041dac
 8025580:	24041d20 	.word	0x24041d20
 8025584:	08029138 	.word	0x08029138
 8025588:	08024915 	.word	0x08024915
 802558c:	24000114 	.word	0x24000114

08025590 <_close_r>:
 8025590:	b538      	push	{r3, r4, r5, lr}
 8025592:	4d06      	ldr	r5, [pc, #24]	; (80255ac <_close_r+0x1c>)
 8025594:	2300      	movs	r3, #0
 8025596:	4604      	mov	r4, r0
 8025598:	4608      	mov	r0, r1
 802559a:	602b      	str	r3, [r5, #0]
 802559c:	f7db fe0b 	bl	80011b6 <_close>
 80255a0:	1c43      	adds	r3, r0, #1
 80255a2:	d102      	bne.n	80255aa <_close_r+0x1a>
 80255a4:	682b      	ldr	r3, [r5, #0]
 80255a6:	b103      	cbz	r3, 80255aa <_close_r+0x1a>
 80255a8:	6023      	str	r3, [r4, #0]
 80255aa:	bd38      	pop	{r3, r4, r5, pc}
 80255ac:	24041d1c 	.word	0x24041d1c

080255b0 <__sflush_r>:
 80255b0:	898a      	ldrh	r2, [r1, #12]
 80255b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255b6:	4605      	mov	r5, r0
 80255b8:	0710      	lsls	r0, r2, #28
 80255ba:	460c      	mov	r4, r1
 80255bc:	d458      	bmi.n	8025670 <__sflush_r+0xc0>
 80255be:	684b      	ldr	r3, [r1, #4]
 80255c0:	2b00      	cmp	r3, #0
 80255c2:	dc05      	bgt.n	80255d0 <__sflush_r+0x20>
 80255c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	dc02      	bgt.n	80255d0 <__sflush_r+0x20>
 80255ca:	2000      	movs	r0, #0
 80255cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80255d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80255d2:	2e00      	cmp	r6, #0
 80255d4:	d0f9      	beq.n	80255ca <__sflush_r+0x1a>
 80255d6:	2300      	movs	r3, #0
 80255d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80255dc:	682f      	ldr	r7, [r5, #0]
 80255de:	602b      	str	r3, [r5, #0]
 80255e0:	d032      	beq.n	8025648 <__sflush_r+0x98>
 80255e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80255e4:	89a3      	ldrh	r3, [r4, #12]
 80255e6:	075a      	lsls	r2, r3, #29
 80255e8:	d505      	bpl.n	80255f6 <__sflush_r+0x46>
 80255ea:	6863      	ldr	r3, [r4, #4]
 80255ec:	1ac0      	subs	r0, r0, r3
 80255ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80255f0:	b10b      	cbz	r3, 80255f6 <__sflush_r+0x46>
 80255f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80255f4:	1ac0      	subs	r0, r0, r3
 80255f6:	2300      	movs	r3, #0
 80255f8:	4602      	mov	r2, r0
 80255fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80255fc:	6a21      	ldr	r1, [r4, #32]
 80255fe:	4628      	mov	r0, r5
 8025600:	47b0      	blx	r6
 8025602:	1c43      	adds	r3, r0, #1
 8025604:	89a3      	ldrh	r3, [r4, #12]
 8025606:	d106      	bne.n	8025616 <__sflush_r+0x66>
 8025608:	6829      	ldr	r1, [r5, #0]
 802560a:	291d      	cmp	r1, #29
 802560c:	d82c      	bhi.n	8025668 <__sflush_r+0xb8>
 802560e:	4a2a      	ldr	r2, [pc, #168]	; (80256b8 <__sflush_r+0x108>)
 8025610:	40ca      	lsrs	r2, r1
 8025612:	07d6      	lsls	r6, r2, #31
 8025614:	d528      	bpl.n	8025668 <__sflush_r+0xb8>
 8025616:	2200      	movs	r2, #0
 8025618:	6062      	str	r2, [r4, #4]
 802561a:	04d9      	lsls	r1, r3, #19
 802561c:	6922      	ldr	r2, [r4, #16]
 802561e:	6022      	str	r2, [r4, #0]
 8025620:	d504      	bpl.n	802562c <__sflush_r+0x7c>
 8025622:	1c42      	adds	r2, r0, #1
 8025624:	d101      	bne.n	802562a <__sflush_r+0x7a>
 8025626:	682b      	ldr	r3, [r5, #0]
 8025628:	b903      	cbnz	r3, 802562c <__sflush_r+0x7c>
 802562a:	6560      	str	r0, [r4, #84]	; 0x54
 802562c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802562e:	602f      	str	r7, [r5, #0]
 8025630:	2900      	cmp	r1, #0
 8025632:	d0ca      	beq.n	80255ca <__sflush_r+0x1a>
 8025634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025638:	4299      	cmp	r1, r3
 802563a:	d002      	beq.n	8025642 <__sflush_r+0x92>
 802563c:	4628      	mov	r0, r5
 802563e:	f7ff f98f 	bl	8024960 <_free_r>
 8025642:	2000      	movs	r0, #0
 8025644:	6360      	str	r0, [r4, #52]	; 0x34
 8025646:	e7c1      	b.n	80255cc <__sflush_r+0x1c>
 8025648:	6a21      	ldr	r1, [r4, #32]
 802564a:	2301      	movs	r3, #1
 802564c:	4628      	mov	r0, r5
 802564e:	47b0      	blx	r6
 8025650:	1c41      	adds	r1, r0, #1
 8025652:	d1c7      	bne.n	80255e4 <__sflush_r+0x34>
 8025654:	682b      	ldr	r3, [r5, #0]
 8025656:	2b00      	cmp	r3, #0
 8025658:	d0c4      	beq.n	80255e4 <__sflush_r+0x34>
 802565a:	2b1d      	cmp	r3, #29
 802565c:	d001      	beq.n	8025662 <__sflush_r+0xb2>
 802565e:	2b16      	cmp	r3, #22
 8025660:	d101      	bne.n	8025666 <__sflush_r+0xb6>
 8025662:	602f      	str	r7, [r5, #0]
 8025664:	e7b1      	b.n	80255ca <__sflush_r+0x1a>
 8025666:	89a3      	ldrh	r3, [r4, #12]
 8025668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802566c:	81a3      	strh	r3, [r4, #12]
 802566e:	e7ad      	b.n	80255cc <__sflush_r+0x1c>
 8025670:	690f      	ldr	r7, [r1, #16]
 8025672:	2f00      	cmp	r7, #0
 8025674:	d0a9      	beq.n	80255ca <__sflush_r+0x1a>
 8025676:	0793      	lsls	r3, r2, #30
 8025678:	680e      	ldr	r6, [r1, #0]
 802567a:	bf08      	it	eq
 802567c:	694b      	ldreq	r3, [r1, #20]
 802567e:	600f      	str	r7, [r1, #0]
 8025680:	bf18      	it	ne
 8025682:	2300      	movne	r3, #0
 8025684:	eba6 0807 	sub.w	r8, r6, r7
 8025688:	608b      	str	r3, [r1, #8]
 802568a:	f1b8 0f00 	cmp.w	r8, #0
 802568e:	dd9c      	ble.n	80255ca <__sflush_r+0x1a>
 8025690:	6a21      	ldr	r1, [r4, #32]
 8025692:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025694:	4643      	mov	r3, r8
 8025696:	463a      	mov	r2, r7
 8025698:	4628      	mov	r0, r5
 802569a:	47b0      	blx	r6
 802569c:	2800      	cmp	r0, #0
 802569e:	dc06      	bgt.n	80256ae <__sflush_r+0xfe>
 80256a0:	89a3      	ldrh	r3, [r4, #12]
 80256a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80256a6:	81a3      	strh	r3, [r4, #12]
 80256a8:	f04f 30ff 	mov.w	r0, #4294967295
 80256ac:	e78e      	b.n	80255cc <__sflush_r+0x1c>
 80256ae:	4407      	add	r7, r0
 80256b0:	eba8 0800 	sub.w	r8, r8, r0
 80256b4:	e7e9      	b.n	802568a <__sflush_r+0xda>
 80256b6:	bf00      	nop
 80256b8:	20400001 	.word	0x20400001

080256bc <_fflush_r>:
 80256bc:	b538      	push	{r3, r4, r5, lr}
 80256be:	690b      	ldr	r3, [r1, #16]
 80256c0:	4605      	mov	r5, r0
 80256c2:	460c      	mov	r4, r1
 80256c4:	b913      	cbnz	r3, 80256cc <_fflush_r+0x10>
 80256c6:	2500      	movs	r5, #0
 80256c8:	4628      	mov	r0, r5
 80256ca:	bd38      	pop	{r3, r4, r5, pc}
 80256cc:	b118      	cbz	r0, 80256d6 <_fflush_r+0x1a>
 80256ce:	6983      	ldr	r3, [r0, #24]
 80256d0:	b90b      	cbnz	r3, 80256d6 <_fflush_r+0x1a>
 80256d2:	f7ff f847 	bl	8024764 <__sinit>
 80256d6:	4b14      	ldr	r3, [pc, #80]	; (8025728 <_fflush_r+0x6c>)
 80256d8:	429c      	cmp	r4, r3
 80256da:	d11b      	bne.n	8025714 <_fflush_r+0x58>
 80256dc:	686c      	ldr	r4, [r5, #4]
 80256de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d0ef      	beq.n	80256c6 <_fflush_r+0xa>
 80256e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80256e8:	07d0      	lsls	r0, r2, #31
 80256ea:	d404      	bmi.n	80256f6 <_fflush_r+0x3a>
 80256ec:	0599      	lsls	r1, r3, #22
 80256ee:	d402      	bmi.n	80256f6 <_fflush_r+0x3a>
 80256f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80256f2:	f7ff f90c 	bl	802490e <__retarget_lock_acquire_recursive>
 80256f6:	4628      	mov	r0, r5
 80256f8:	4621      	mov	r1, r4
 80256fa:	f7ff ff59 	bl	80255b0 <__sflush_r>
 80256fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025700:	07da      	lsls	r2, r3, #31
 8025702:	4605      	mov	r5, r0
 8025704:	d4e0      	bmi.n	80256c8 <_fflush_r+0xc>
 8025706:	89a3      	ldrh	r3, [r4, #12]
 8025708:	059b      	lsls	r3, r3, #22
 802570a:	d4dd      	bmi.n	80256c8 <_fflush_r+0xc>
 802570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802570e:	f7ff f900 	bl	8024912 <__retarget_lock_release_recursive>
 8025712:	e7d9      	b.n	80256c8 <_fflush_r+0xc>
 8025714:	4b05      	ldr	r3, [pc, #20]	; (802572c <_fflush_r+0x70>)
 8025716:	429c      	cmp	r4, r3
 8025718:	d101      	bne.n	802571e <_fflush_r+0x62>
 802571a:	68ac      	ldr	r4, [r5, #8]
 802571c:	e7df      	b.n	80256de <_fflush_r+0x22>
 802571e:	4b04      	ldr	r3, [pc, #16]	; (8025730 <_fflush_r+0x74>)
 8025720:	429c      	cmp	r4, r3
 8025722:	bf08      	it	eq
 8025724:	68ec      	ldreq	r4, [r5, #12]
 8025726:	e7da      	b.n	80256de <_fflush_r+0x22>
 8025728:	080290c0 	.word	0x080290c0
 802572c:	080290e0 	.word	0x080290e0
 8025730:	080290a0 	.word	0x080290a0

08025734 <_lseek_r>:
 8025734:	b538      	push	{r3, r4, r5, lr}
 8025736:	4d07      	ldr	r5, [pc, #28]	; (8025754 <_lseek_r+0x20>)
 8025738:	4604      	mov	r4, r0
 802573a:	4608      	mov	r0, r1
 802573c:	4611      	mov	r1, r2
 802573e:	2200      	movs	r2, #0
 8025740:	602a      	str	r2, [r5, #0]
 8025742:	461a      	mov	r2, r3
 8025744:	f7db fd5e 	bl	8001204 <_lseek>
 8025748:	1c43      	adds	r3, r0, #1
 802574a:	d102      	bne.n	8025752 <_lseek_r+0x1e>
 802574c:	682b      	ldr	r3, [r5, #0]
 802574e:	b103      	cbz	r3, 8025752 <_lseek_r+0x1e>
 8025750:	6023      	str	r3, [r4, #0]
 8025752:	bd38      	pop	{r3, r4, r5, pc}
 8025754:	24041d1c 	.word	0x24041d1c

08025758 <__swhatbuf_r>:
 8025758:	b570      	push	{r4, r5, r6, lr}
 802575a:	460e      	mov	r6, r1
 802575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025760:	2900      	cmp	r1, #0
 8025762:	b096      	sub	sp, #88	; 0x58
 8025764:	4614      	mov	r4, r2
 8025766:	461d      	mov	r5, r3
 8025768:	da08      	bge.n	802577c <__swhatbuf_r+0x24>
 802576a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802576e:	2200      	movs	r2, #0
 8025770:	602a      	str	r2, [r5, #0]
 8025772:	061a      	lsls	r2, r3, #24
 8025774:	d410      	bmi.n	8025798 <__swhatbuf_r+0x40>
 8025776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802577a:	e00e      	b.n	802579a <__swhatbuf_r+0x42>
 802577c:	466a      	mov	r2, sp
 802577e:	f000 f86f 	bl	8025860 <_fstat_r>
 8025782:	2800      	cmp	r0, #0
 8025784:	dbf1      	blt.n	802576a <__swhatbuf_r+0x12>
 8025786:	9a01      	ldr	r2, [sp, #4]
 8025788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802578c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025790:	425a      	negs	r2, r3
 8025792:	415a      	adcs	r2, r3
 8025794:	602a      	str	r2, [r5, #0]
 8025796:	e7ee      	b.n	8025776 <__swhatbuf_r+0x1e>
 8025798:	2340      	movs	r3, #64	; 0x40
 802579a:	2000      	movs	r0, #0
 802579c:	6023      	str	r3, [r4, #0]
 802579e:	b016      	add	sp, #88	; 0x58
 80257a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080257a4 <__smakebuf_r>:
 80257a4:	898b      	ldrh	r3, [r1, #12]
 80257a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80257a8:	079d      	lsls	r5, r3, #30
 80257aa:	4606      	mov	r6, r0
 80257ac:	460c      	mov	r4, r1
 80257ae:	d507      	bpl.n	80257c0 <__smakebuf_r+0x1c>
 80257b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80257b4:	6023      	str	r3, [r4, #0]
 80257b6:	6123      	str	r3, [r4, #16]
 80257b8:	2301      	movs	r3, #1
 80257ba:	6163      	str	r3, [r4, #20]
 80257bc:	b002      	add	sp, #8
 80257be:	bd70      	pop	{r4, r5, r6, pc}
 80257c0:	ab01      	add	r3, sp, #4
 80257c2:	466a      	mov	r2, sp
 80257c4:	f7ff ffc8 	bl	8025758 <__swhatbuf_r>
 80257c8:	9900      	ldr	r1, [sp, #0]
 80257ca:	4605      	mov	r5, r0
 80257cc:	4630      	mov	r0, r6
 80257ce:	f7ff f933 	bl	8024a38 <_malloc_r>
 80257d2:	b948      	cbnz	r0, 80257e8 <__smakebuf_r+0x44>
 80257d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80257d8:	059a      	lsls	r2, r3, #22
 80257da:	d4ef      	bmi.n	80257bc <__smakebuf_r+0x18>
 80257dc:	f023 0303 	bic.w	r3, r3, #3
 80257e0:	f043 0302 	orr.w	r3, r3, #2
 80257e4:	81a3      	strh	r3, [r4, #12]
 80257e6:	e7e3      	b.n	80257b0 <__smakebuf_r+0xc>
 80257e8:	4b0d      	ldr	r3, [pc, #52]	; (8025820 <__smakebuf_r+0x7c>)
 80257ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80257ec:	89a3      	ldrh	r3, [r4, #12]
 80257ee:	6020      	str	r0, [r4, #0]
 80257f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80257f4:	81a3      	strh	r3, [r4, #12]
 80257f6:	9b00      	ldr	r3, [sp, #0]
 80257f8:	6163      	str	r3, [r4, #20]
 80257fa:	9b01      	ldr	r3, [sp, #4]
 80257fc:	6120      	str	r0, [r4, #16]
 80257fe:	b15b      	cbz	r3, 8025818 <__smakebuf_r+0x74>
 8025800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025804:	4630      	mov	r0, r6
 8025806:	f000 f83d 	bl	8025884 <_isatty_r>
 802580a:	b128      	cbz	r0, 8025818 <__smakebuf_r+0x74>
 802580c:	89a3      	ldrh	r3, [r4, #12]
 802580e:	f023 0303 	bic.w	r3, r3, #3
 8025812:	f043 0301 	orr.w	r3, r3, #1
 8025816:	81a3      	strh	r3, [r4, #12]
 8025818:	89a0      	ldrh	r0, [r4, #12]
 802581a:	4305      	orrs	r5, r0
 802581c:	81a5      	strh	r5, [r4, #12]
 802581e:	e7cd      	b.n	80257bc <__smakebuf_r+0x18>
 8025820:	080246fd 	.word	0x080246fd

08025824 <__malloc_lock>:
 8025824:	4801      	ldr	r0, [pc, #4]	; (802582c <__malloc_lock+0x8>)
 8025826:	f7ff b872 	b.w	802490e <__retarget_lock_acquire_recursive>
 802582a:	bf00      	nop
 802582c:	24041c09 	.word	0x24041c09

08025830 <__malloc_unlock>:
 8025830:	4801      	ldr	r0, [pc, #4]	; (8025838 <__malloc_unlock+0x8>)
 8025832:	f7ff b86e 	b.w	8024912 <__retarget_lock_release_recursive>
 8025836:	bf00      	nop
 8025838:	24041c09 	.word	0x24041c09

0802583c <_read_r>:
 802583c:	b538      	push	{r3, r4, r5, lr}
 802583e:	4d07      	ldr	r5, [pc, #28]	; (802585c <_read_r+0x20>)
 8025840:	4604      	mov	r4, r0
 8025842:	4608      	mov	r0, r1
 8025844:	4611      	mov	r1, r2
 8025846:	2200      	movs	r2, #0
 8025848:	602a      	str	r2, [r5, #0]
 802584a:	461a      	mov	r2, r3
 802584c:	f7db fc7a 	bl	8001144 <_read>
 8025850:	1c43      	adds	r3, r0, #1
 8025852:	d102      	bne.n	802585a <_read_r+0x1e>
 8025854:	682b      	ldr	r3, [r5, #0]
 8025856:	b103      	cbz	r3, 802585a <_read_r+0x1e>
 8025858:	6023      	str	r3, [r4, #0]
 802585a:	bd38      	pop	{r3, r4, r5, pc}
 802585c:	24041d1c 	.word	0x24041d1c

08025860 <_fstat_r>:
 8025860:	b538      	push	{r3, r4, r5, lr}
 8025862:	4d07      	ldr	r5, [pc, #28]	; (8025880 <_fstat_r+0x20>)
 8025864:	2300      	movs	r3, #0
 8025866:	4604      	mov	r4, r0
 8025868:	4608      	mov	r0, r1
 802586a:	4611      	mov	r1, r2
 802586c:	602b      	str	r3, [r5, #0]
 802586e:	f7db fcae 	bl	80011ce <_fstat>
 8025872:	1c43      	adds	r3, r0, #1
 8025874:	d102      	bne.n	802587c <_fstat_r+0x1c>
 8025876:	682b      	ldr	r3, [r5, #0]
 8025878:	b103      	cbz	r3, 802587c <_fstat_r+0x1c>
 802587a:	6023      	str	r3, [r4, #0]
 802587c:	bd38      	pop	{r3, r4, r5, pc}
 802587e:	bf00      	nop
 8025880:	24041d1c 	.word	0x24041d1c

08025884 <_isatty_r>:
 8025884:	b538      	push	{r3, r4, r5, lr}
 8025886:	4d06      	ldr	r5, [pc, #24]	; (80258a0 <_isatty_r+0x1c>)
 8025888:	2300      	movs	r3, #0
 802588a:	4604      	mov	r4, r0
 802588c:	4608      	mov	r0, r1
 802588e:	602b      	str	r3, [r5, #0]
 8025890:	f7db fcad 	bl	80011ee <_isatty>
 8025894:	1c43      	adds	r3, r0, #1
 8025896:	d102      	bne.n	802589e <_isatty_r+0x1a>
 8025898:	682b      	ldr	r3, [r5, #0]
 802589a:	b103      	cbz	r3, 802589e <_isatty_r+0x1a>
 802589c:	6023      	str	r3, [r4, #0]
 802589e:	bd38      	pop	{r3, r4, r5, pc}
 80258a0:	24041d1c 	.word	0x24041d1c

080258a4 <_init>:
 80258a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258a6:	bf00      	nop
 80258a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80258aa:	bc08      	pop	{r3}
 80258ac:	469e      	mov	lr, r3
 80258ae:	4770      	bx	lr

080258b0 <_fini>:
 80258b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258b2:	bf00      	nop
 80258b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80258b6:	bc08      	pop	{r3}
 80258b8:	469e      	mov	lr, r3
 80258ba:	4770      	bx	lr
